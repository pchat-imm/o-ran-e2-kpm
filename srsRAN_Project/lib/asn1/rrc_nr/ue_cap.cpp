/*
 *
 * Copyright 2021-2023 Software Radio Systems Limited
 *
 * This file is part of srsRAN.
 *
 * srsRAN is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * srsRAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * A copy of the GNU Affero General Public License can be found in
 * the LICENSE file in the top-level directory of this distribution
 * and at http://www.gnu.org/licenses/.
 *
 */

#include "srsran/asn1/rrc_nr/ue_cap.h"
#include <sstream>

using namespace asn1;
using namespace asn1::rrc_nr;

/*******************************************************************************
 *                                Struct Methods
 ******************************************************************************/

// MIMO-LayersDL ::= ENUMERATED
const char* mimo_layers_dl_opts::to_string() const
{
  static const char* names[] = {"twoLayers", "fourLayers", "eightLayers"};
  return convert_enum_idx(names, 3, value, "mimo_layers_dl_e");
}
uint8_t mimo_layers_dl_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(numbers, 3, value, "mimo_layers_dl_e");
}

// MIMO-LayersUL ::= ENUMERATED
const char* mimo_layers_ul_opts::to_string() const
{
  static const char* names[] = {"oneLayer", "twoLayers", "fourLayers"};
  return convert_enum_idx(names, 3, value, "mimo_layers_ul_e");
}
uint8_t mimo_layers_ul_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_layers_ul_e");
}

// CA-BandwidthClassEUTRA ::= ENUMERATED
const char* ca_bw_class_eutra_opts::to_string() const
{
  static const char* names[] = {"a", "b", "c", "d", "e", "f"};
  return convert_enum_idx(names, 6, value, "ca_bw_class_eutra_e");
}

// CA-BandwidthClassNR ::= ENUMERATED
const char* ca_bw_class_nr_opts::to_string() const
{
  static const char* names[] = {"a",        "b",        "c",        "d",        "e",         "f",         "g",
                                "h",        "i",        "j",        "k",        "l",         "m",         "n",
                                "o",        "p",        "q",        "r2-v1730", "r3-v1730",  "r4-v1730",  "r5-v1730",
                                "r6-v1730", "r7-v1730", "r8-v1730", "r9-v1730", "r10-v1730", "r11-v1730", "r12-v1730"};
  return convert_enum_idx(names, 28, value, "ca_bw_class_nr_e");
}
uint8_t ca_bw_class_nr_opts::to_number() const
{
  switch (value) {
    case r2_v1730:
      return 2;
    case r3_v1730:
      return 3;
    case r4_v1730:
      return 4;
    case r5_v1730:
      return 5;
    case r6_v1730:
      return 6;
    case r7_v1730:
      return 7;
    case r8_v1730:
      return 8;
    case r9_v1730:
      return 9;
    case r10_v1730:
      return 10;
    case r11_v1730:
      return 11;
    case r12_v1730:
      return 12;
    default:
      invalid_enum_number(value, "ca_bw_class_nr_e");
  }
  return 0;
}

// BandParameters ::= CHOICE
void band_params_c::destroy_()
{
  switch (type_) {
    case types::eutra:
      c.destroy<eutra_s_>();
      break;
    case types::nr:
      c.destroy<nr_s_>();
      break;
    default:
      break;
  }
}
void band_params_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::eutra:
      c.init<eutra_s_>();
      break;
    case types::nr:
      c.init<nr_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_c");
  }
}
band_params_c::band_params_c(const band_params_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::eutra:
      c.init(other.c.get<eutra_s_>());
      break;
    case types::nr:
      c.init(other.c.get<nr_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_c");
  }
}
band_params_c& band_params_c::operator=(const band_params_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::eutra:
      c.set(other.c.get<eutra_s_>());
      break;
    case types::nr:
      c.set(other.c.get<nr_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_c");
  }

  return *this;
}
band_params_c::eutra_s_& band_params_c::set_eutra()
{
  set(types::eutra);
  return c.get<eutra_s_>();
}
band_params_c::nr_s_& band_params_c::set_nr()
{
  set(types::nr);
  return c.get<nr_s_>();
}
void band_params_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutra:
      j.write_fieldname("eutra");
      j.start_obj();
      j.write_int("bandEUTRA", c.get<eutra_s_>().band_eutra);
      if (c.get<eutra_s_>().ca_bw_class_dl_eutra_present) {
        j.write_str("ca-BandwidthClassDL-EUTRA", c.get<eutra_s_>().ca_bw_class_dl_eutra.to_string());
      }
      if (c.get<eutra_s_>().ca_bw_class_ul_eutra_present) {
        j.write_str("ca-BandwidthClassUL-EUTRA", c.get<eutra_s_>().ca_bw_class_ul_eutra.to_string());
      }
      j.end_obj();
      break;
    case types::nr:
      j.write_fieldname("nr");
      j.start_obj();
      j.write_int("bandNR", c.get<nr_s_>().band_nr);
      if (c.get<nr_s_>().ca_bw_class_dl_nr_present) {
        j.write_str("ca-BandwidthClassDL-NR", c.get<nr_s_>().ca_bw_class_dl_nr.to_string());
      }
      if (c.get<nr_s_>().ca_bw_class_ul_nr_present) {
        j.write_str("ca-BandwidthClassUL-NR", c.get<nr_s_>().ca_bw_class_ul_nr.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_params_c");
  }
  j.end_obj();
}
SRSASN_CODE band_params_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutra:
      HANDLE_CODE(bref.pack(c.get<eutra_s_>().ca_bw_class_dl_eutra_present, 1));
      HANDLE_CODE(bref.pack(c.get<eutra_s_>().ca_bw_class_ul_eutra_present, 1));
      HANDLE_CODE(pack_integer(bref, c.get<eutra_s_>().band_eutra, (uint16_t)1u, (uint16_t)256u));
      if (c.get<eutra_s_>().ca_bw_class_dl_eutra_present) {
        HANDLE_CODE(c.get<eutra_s_>().ca_bw_class_dl_eutra.pack(bref));
      }
      if (c.get<eutra_s_>().ca_bw_class_ul_eutra_present) {
        HANDLE_CODE(c.get<eutra_s_>().ca_bw_class_ul_eutra.pack(bref));
      }
      break;
    case types::nr:
      HANDLE_CODE(bref.pack(c.get<nr_s_>().ca_bw_class_dl_nr_present, 1));
      HANDLE_CODE(bref.pack(c.get<nr_s_>().ca_bw_class_ul_nr_present, 1));
      HANDLE_CODE(pack_integer(bref, c.get<nr_s_>().band_nr, (uint16_t)1u, (uint16_t)1024u));
      if (c.get<nr_s_>().ca_bw_class_dl_nr_present) {
        HANDLE_CODE(c.get<nr_s_>().ca_bw_class_dl_nr.pack(bref));
      }
      if (c.get<nr_s_>().ca_bw_class_ul_nr_present) {
        HANDLE_CODE(c.get<nr_s_>().ca_bw_class_ul_nr.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_params_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutra:
      HANDLE_CODE(bref.unpack(c.get<eutra_s_>().ca_bw_class_dl_eutra_present, 1));
      HANDLE_CODE(bref.unpack(c.get<eutra_s_>().ca_bw_class_ul_eutra_present, 1));
      HANDLE_CODE(unpack_integer(c.get<eutra_s_>().band_eutra, bref, (uint16_t)1u, (uint16_t)256u));
      if (c.get<eutra_s_>().ca_bw_class_dl_eutra_present) {
        HANDLE_CODE(c.get<eutra_s_>().ca_bw_class_dl_eutra.unpack(bref));
      }
      if (c.get<eutra_s_>().ca_bw_class_ul_eutra_present) {
        HANDLE_CODE(c.get<eutra_s_>().ca_bw_class_ul_eutra.unpack(bref));
      }
      break;
    case types::nr:
      HANDLE_CODE(bref.unpack(c.get<nr_s_>().ca_bw_class_dl_nr_present, 1));
      HANDLE_CODE(bref.unpack(c.get<nr_s_>().ca_bw_class_ul_nr_present, 1));
      HANDLE_CODE(unpack_integer(c.get<nr_s_>().band_nr, bref, (uint16_t)1u, (uint16_t)1024u));
      if (c.get<nr_s_>().ca_bw_class_dl_nr_present) {
        HANDLE_CODE(c.get<nr_s_>().ca_bw_class_dl_nr.unpack(bref));
      }
      if (c.get<nr_s_>().ca_bw_class_ul_nr_present) {
        HANDLE_CODE(c.get<nr_s_>().ca_bw_class_ul_nr.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_params_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// CA-ParametersEUTRA ::= SEQUENCE
SRSASN_CODE ca_params_eutra_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(multiple_timing_advance_present, 1));
  HANDLE_CODE(bref.pack(simul_rx_tx_present, 1));
  HANDLE_CODE(bref.pack(supported_naics_2_crs_ap_present, 1));
  HANDLE_CODE(bref.pack(add_rx_tx_performance_req_present, 1));
  HANDLE_CODE(bref.pack(ue_ca_pwr_class_n_present, 1));
  HANDLE_CODE(bref.pack(supported_bw_combination_set_eutra_v1530_present, 1));

  if (supported_naics_2_crs_ap_present) {
    HANDLE_CODE(supported_naics_2_crs_ap.pack(bref));
  }
  if (supported_bw_combination_set_eutra_v1530_present) {
    HANDLE_CODE(supported_bw_combination_set_eutra_v1530.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_eutra_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(multiple_timing_advance_present, 1));
  HANDLE_CODE(bref.unpack(simul_rx_tx_present, 1));
  HANDLE_CODE(bref.unpack(supported_naics_2_crs_ap_present, 1));
  HANDLE_CODE(bref.unpack(add_rx_tx_performance_req_present, 1));
  HANDLE_CODE(bref.unpack(ue_ca_pwr_class_n_present, 1));
  HANDLE_CODE(bref.unpack(supported_bw_combination_set_eutra_v1530_present, 1));

  if (supported_naics_2_crs_ap_present) {
    HANDLE_CODE(supported_naics_2_crs_ap.unpack(bref));
  }
  if (supported_bw_combination_set_eutra_v1530_present) {
    HANDLE_CODE(supported_bw_combination_set_eutra_v1530.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (multiple_timing_advance_present) {
    j.write_str("multipleTimingAdvance", "supported");
  }
  if (simul_rx_tx_present) {
    j.write_str("simultaneousRx-Tx", "supported");
  }
  if (supported_naics_2_crs_ap_present) {
    j.write_str("supportedNAICS-2CRS-AP", supported_naics_2_crs_ap.to_string());
  }
  if (add_rx_tx_performance_req_present) {
    j.write_str("additionalRx-Tx-PerformanceReq", "supported");
  }
  if (ue_ca_pwr_class_n_present) {
    j.write_str("ue-CA-PowerClass-N", "class2");
  }
  if (supported_bw_combination_set_eutra_v1530_present) {
    j.write_str("supportedBandwidthCombinationSetEUTRA-v1530", supported_bw_combination_set_eutra_v1530.to_string());
  }
  j.end_obj();
}

// CA-ParametersNR ::= SEQUENCE
SRSASN_CODE ca_params_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dummy_present, 1));
  HANDLE_CODE(bref.pack(parallel_tx_srs_pucch_pusch_present, 1));
  HANDLE_CODE(bref.pack(parallel_tx_prach_srs_pucch_pusch_present, 1));
  HANDLE_CODE(bref.pack(simul_rx_tx_inter_band_ca_present, 1));
  HANDLE_CODE(bref.pack(simul_rx_tx_sul_present, 1));
  HANDLE_CODE(bref.pack(diff_numerology_across_pucch_group_present, 1));
  HANDLE_CODE(bref.pack(diff_numerology_within_pucch_group_smaller_scs_present, 1));
  HANDLE_CODE(bref.pack(supported_num_tag_present, 1));

  if (supported_num_tag_present) {
    HANDLE_CODE(supported_num_tag.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dummy_present, 1));
  HANDLE_CODE(bref.unpack(parallel_tx_srs_pucch_pusch_present, 1));
  HANDLE_CODE(bref.unpack(parallel_tx_prach_srs_pucch_pusch_present, 1));
  HANDLE_CODE(bref.unpack(simul_rx_tx_inter_band_ca_present, 1));
  HANDLE_CODE(bref.unpack(simul_rx_tx_sul_present, 1));
  HANDLE_CODE(bref.unpack(diff_numerology_across_pucch_group_present, 1));
  HANDLE_CODE(bref.unpack(diff_numerology_within_pucch_group_smaller_scs_present, 1));
  HANDLE_CODE(bref.unpack(supported_num_tag_present, 1));

  if (supported_num_tag_present) {
    HANDLE_CODE(supported_num_tag.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  if (parallel_tx_srs_pucch_pusch_present) {
    j.write_str("parallelTxSRS-PUCCH-PUSCH", "supported");
  }
  if (parallel_tx_prach_srs_pucch_pusch_present) {
    j.write_str("parallelTxPRACH-SRS-PUCCH-PUSCH", "supported");
  }
  if (simul_rx_tx_inter_band_ca_present) {
    j.write_str("simultaneousRxTxInterBandCA", "supported");
  }
  if (simul_rx_tx_sul_present) {
    j.write_str("simultaneousRxTxSUL", "supported");
  }
  if (diff_numerology_across_pucch_group_present) {
    j.write_str("diffNumerologyAcrossPUCCH-Group", "supported");
  }
  if (diff_numerology_within_pucch_group_smaller_scs_present) {
    j.write_str("diffNumerologyWithinPUCCH-GroupSmallerSCS", "supported");
  }
  if (supported_num_tag_present) {
    j.write_str("supportedNumberTAG", supported_num_tag.to_string());
  }
  j.end_obj();
}

const char* ca_params_nr_s::supported_num_tag_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4"};
  return convert_enum_idx(names, 3, value, "ca_params_nr_s::supported_num_tag_e_");
}
uint8_t ca_params_nr_s::supported_num_tag_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4};
  return map_enum_number(numbers, 3, value, "ca_params_nr_s::supported_num_tag_e_");
}

// MRDC-Parameters ::= SEQUENCE
SRSASN_CODE mrdc_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(single_ul_tx_present, 1));
  HANDLE_CODE(bref.pack(dyn_pwr_sharing_endc_present, 1));
  HANDLE_CODE(bref.pack(tdm_pattern_present, 1));
  HANDLE_CODE(bref.pack(ul_sharing_eutra_nr_present, 1));
  HANDLE_CODE(bref.pack(ul_switching_time_eutra_nr_present, 1));
  HANDLE_CODE(bref.pack(simul_rx_tx_inter_band_endc_present, 1));
  HANDLE_CODE(bref.pack(async_intra_band_endc_present, 1));

  if (ul_sharing_eutra_nr_present) {
    HANDLE_CODE(ul_sharing_eutra_nr.pack(bref));
  }
  if (ul_switching_time_eutra_nr_present) {
    HANDLE_CODE(ul_switching_time_eutra_nr.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= dual_pa_architecture_present;
    group_flags[0] |= intra_band_endc_support_present;
    group_flags[0] |= ul_timing_align_eutra_nr_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dual_pa_architecture_present, 1));
      HANDLE_CODE(bref.pack(intra_band_endc_support_present, 1));
      HANDLE_CODE(bref.pack(ul_timing_align_eutra_nr_present, 1));
      if (intra_band_endc_support_present) {
        HANDLE_CODE(intra_band_endc_support.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(single_ul_tx_present, 1));
  HANDLE_CODE(bref.unpack(dyn_pwr_sharing_endc_present, 1));
  HANDLE_CODE(bref.unpack(tdm_pattern_present, 1));
  HANDLE_CODE(bref.unpack(ul_sharing_eutra_nr_present, 1));
  HANDLE_CODE(bref.unpack(ul_switching_time_eutra_nr_present, 1));
  HANDLE_CODE(bref.unpack(simul_rx_tx_inter_band_endc_present, 1));
  HANDLE_CODE(bref.unpack(async_intra_band_endc_present, 1));

  if (ul_sharing_eutra_nr_present) {
    HANDLE_CODE(ul_sharing_eutra_nr.unpack(bref));
  }
  if (ul_switching_time_eutra_nr_present) {
    HANDLE_CODE(ul_switching_time_eutra_nr.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dual_pa_architecture_present, 1));
      HANDLE_CODE(bref.unpack(intra_band_endc_support_present, 1));
      HANDLE_CODE(bref.unpack(ul_timing_align_eutra_nr_present, 1));
      if (intra_band_endc_support_present) {
        HANDLE_CODE(intra_band_endc_support.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void mrdc_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (single_ul_tx_present) {
    j.write_str("singleUL-Transmission", "supported");
  }
  if (dyn_pwr_sharing_endc_present) {
    j.write_str("dynamicPowerSharingENDC", "supported");
  }
  if (tdm_pattern_present) {
    j.write_str("tdm-Pattern", "supported");
  }
  if (ul_sharing_eutra_nr_present) {
    j.write_str("ul-SharingEUTRA-NR", ul_sharing_eutra_nr.to_string());
  }
  if (ul_switching_time_eutra_nr_present) {
    j.write_str("ul-SwitchingTimeEUTRA-NR", ul_switching_time_eutra_nr.to_string());
  }
  if (simul_rx_tx_inter_band_endc_present) {
    j.write_str("simultaneousRxTxInterBandENDC", "supported");
  }
  if (async_intra_band_endc_present) {
    j.write_str("asyncIntraBandENDC", "supported");
  }
  if (ext) {
    if (dual_pa_architecture_present) {
      j.write_str("dualPA-Architecture", "supported");
    }
    if (intra_band_endc_support_present) {
      j.write_str("intraBandENDC-Support", intra_band_endc_support.to_string());
    }
    if (ul_timing_align_eutra_nr_present) {
      j.write_str("ul-TimingAlignmentEUTRA-NR", "required");
    }
  }
  j.end_obj();
}

const char* mrdc_params_s::ul_sharing_eutra_nr_opts::to_string() const
{
  static const char* names[] = {"tdm", "fdm", "both"};
  return convert_enum_idx(names, 3, value, "mrdc_params_s::ul_sharing_eutra_nr_e_");
}

const char* mrdc_params_s::ul_switching_time_eutra_nr_opts::to_string() const
{
  static const char* names[] = {"type1", "type2"};
  return convert_enum_idx(names, 2, value, "mrdc_params_s::ul_switching_time_eutra_nr_e_");
}
uint8_t mrdc_params_s::ul_switching_time_eutra_nr_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "mrdc_params_s::ul_switching_time_eutra_nr_e_");
}

const char* mrdc_params_s::intra_band_endc_support_opts::to_string() const
{
  static const char* names[] = {"non-contiguous", "both"};
  return convert_enum_idx(names, 2, value, "mrdc_params_s::intra_band_endc_support_e_");
}

// BandCombination ::= SEQUENCE
SRSASN_CODE band_combination_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_eutra_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_present, 1));
  HANDLE_CODE(bref.pack(mrdc_params_present, 1));
  HANDLE_CODE(bref.pack(supported_bw_combination_set_present, 1));
  HANDLE_CODE(bref.pack(pwr_class_v1530_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, band_list, 1, 32));
  HANDLE_CODE(pack_integer(bref, feature_set_combination, (uint16_t)0u, (uint16_t)1024u));
  if (ca_params_eutra_present) {
    HANDLE_CODE(ca_params_eutra.pack(bref));
  }
  if (ca_params_nr_present) {
    HANDLE_CODE(ca_params_nr.pack(bref));
  }
  if (mrdc_params_present) {
    HANDLE_CODE(mrdc_params.pack(bref));
  }
  if (supported_bw_combination_set_present) {
    HANDLE_CODE(supported_bw_combination_set.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_eutra_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_present, 1));
  HANDLE_CODE(bref.unpack(mrdc_params_present, 1));
  HANDLE_CODE(bref.unpack(supported_bw_combination_set_present, 1));
  HANDLE_CODE(bref.unpack(pwr_class_v1530_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(band_list, bref, 1, 32));
  HANDLE_CODE(unpack_integer(feature_set_combination, bref, (uint16_t)0u, (uint16_t)1024u));
  if (ca_params_eutra_present) {
    HANDLE_CODE(ca_params_eutra.unpack(bref));
  }
  if (ca_params_nr_present) {
    HANDLE_CODE(ca_params_nr.unpack(bref));
  }
  if (mrdc_params_present) {
    HANDLE_CODE(mrdc_params.unpack(bref));
  }
  if (supported_bw_combination_set_present) {
    HANDLE_CODE(supported_bw_combination_set.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("bandList");
  for (const auto& e1 : band_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_int("featureSetCombination", feature_set_combination);
  if (ca_params_eutra_present) {
    j.write_fieldname("ca-ParametersEUTRA");
    ca_params_eutra.to_json(j);
  }
  if (ca_params_nr_present) {
    j.write_fieldname("ca-ParametersNR");
    ca_params_nr.to_json(j);
  }
  if (mrdc_params_present) {
    j.write_fieldname("mrdc-Parameters");
    mrdc_params.to_json(j);
  }
  if (supported_bw_combination_set_present) {
    j.write_str("supportedBandwidthCombinationSet", supported_bw_combination_set.to_string());
  }
  if (pwr_class_v1530_present) {
    j.write_str("powerClass-v1530", "pc2");
  }
  j.end_obj();
}

// CA-ParametersNR-v1540 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(simul_srs_assoc_csi_rs_all_cc_present, 1));
  HANDLE_CODE(bref.pack(csi_rs_im_reception_for_feedback_per_band_comb_present, 1));
  HANDLE_CODE(bref.pack(simul_csi_reports_all_cc_present, 1));
  HANDLE_CODE(bref.pack(dual_pa_architecture_present, 1));

  if (simul_srs_assoc_csi_rs_all_cc_present) {
    HANDLE_CODE(pack_integer(bref, simul_srs_assoc_csi_rs_all_cc, (uint8_t)5u, (uint8_t)32u));
  }
  if (csi_rs_im_reception_for_feedback_per_band_comb_present) {
    HANDLE_CODE(
        bref.pack(csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc_present, 1));
    HANDLE_CODE(bref.pack(
        csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc_present, 1));
    if (csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc_present) {
      HANDLE_CODE(pack_integer(bref,
                               csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc,
                               (uint8_t)1u,
                               (uint8_t)64u));
    }
    if (csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc_present) {
      HANDLE_CODE(
          pack_integer(bref,
                       csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc,
                       (uint16_t)2u,
                       (uint16_t)256u));
    }
  }
  if (simul_csi_reports_all_cc_present) {
    HANDLE_CODE(pack_integer(bref, simul_csi_reports_all_cc, (uint8_t)5u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(simul_srs_assoc_csi_rs_all_cc_present, 1));
  HANDLE_CODE(bref.unpack(csi_rs_im_reception_for_feedback_per_band_comb_present, 1));
  HANDLE_CODE(bref.unpack(simul_csi_reports_all_cc_present, 1));
  HANDLE_CODE(bref.unpack(dual_pa_architecture_present, 1));

  if (simul_srs_assoc_csi_rs_all_cc_present) {
    HANDLE_CODE(unpack_integer(simul_srs_assoc_csi_rs_all_cc, bref, (uint8_t)5u, (uint8_t)32u));
  }
  if (csi_rs_im_reception_for_feedback_per_band_comb_present) {
    HANDLE_CODE(
        bref.unpack(csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc_present, 1));
    HANDLE_CODE(bref.unpack(
        csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc_present, 1));
    if (csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc_present) {
      HANDLE_CODE(unpack_integer(csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc,
                                 bref,
                                 (uint8_t)1u,
                                 (uint8_t)64u));
    }
    if (csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc_present) {
      HANDLE_CODE(
          unpack_integer(csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc,
                         bref,
                         (uint16_t)2u,
                         (uint16_t)256u));
    }
  }
  if (simul_csi_reports_all_cc_present) {
    HANDLE_CODE(unpack_integer(simul_csi_reports_all_cc, bref, (uint8_t)5u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (simul_srs_assoc_csi_rs_all_cc_present) {
    j.write_int("simultaneousSRS-AssocCSI-RS-AllCC", simul_srs_assoc_csi_rs_all_cc);
  }
  if (csi_rs_im_reception_for_feedback_per_band_comb_present) {
    j.write_fieldname("csi-RS-IM-ReceptionForFeedbackPerBandComb");
    j.start_obj();
    if (csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc_present) {
      j.write_int("maxNumberSimultaneousNZP-CSI-RS-ActBWP-AllCC",
                  csi_rs_im_reception_for_feedback_per_band_comb.max_num_simul_nzp_csi_rs_act_bwp_all_cc);
    }
    if (csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc_present) {
      j.write_int("totalNumberPortsSimultaneousNZP-CSI-RS-ActBWP-AllCC",
                  csi_rs_im_reception_for_feedback_per_band_comb.total_num_ports_simul_nzp_csi_rs_act_bwp_all_cc);
    }
    j.end_obj();
  }
  if (simul_csi_reports_all_cc_present) {
    j.write_int("simultaneousCSI-ReportsAllCC", simul_csi_reports_all_cc);
  }
  if (dual_pa_architecture_present) {
    j.write_str("dualPA-Architecture", "supported");
  }
  j.end_obj();
}

// CA-ParametersNR-v1550 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1550_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dummy_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1550_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dummy_present, 1));

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1550_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  j.end_obj();
}

// CA-ParametersNR-v1560 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(diff_numerology_within_pucch_group_larger_scs_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1560_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(diff_numerology_within_pucch_group_larger_scs_present, 1));

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (diff_numerology_within_pucch_group_larger_scs_present) {
    j.write_str("diffNumerologyWithinPUCCH-GroupLargerSCS", "supported");
  }
  j.end_obj();
}

// CodebookComboParametersAdditionPerBC-r16 ::= SEQUENCE
SRSASN_CODE codebook_combo_params_addition_per_bc_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(type1_sp_type2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_type2_ps_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_type2_ps_r16.size() > 0, 1));

  if (type1_sp_type2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_type2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_type2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_e_type2_r1_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_e_type2_r2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_e_type2_r1_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_e_type2_r2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_type2_ps_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_type2_type2_ps_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_type2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_type2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_e_type2_r1_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_e_type2_r2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_e_type2_r1_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_e_type2_r2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_type2_ps_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_type2_type2_ps_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_combo_params_addition_per_bc_r16_s::unpack(cbit_ref& bref)
{
  bool type1_sp_type2_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_sp_type2_null_r16_present, 1));
  bool type1_sp_type2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_sp_type2_ps_null_r16_present, 1));
  bool type1_sp_e_type2_r1_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_null_r16_present, 1));
  bool type1_sp_e_type2_r2_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r2_null_r16_present, 1));
  bool type1_sp_e_type2_r1_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_ps_null_r16_present, 1));
  bool type1_sp_e_type2_r2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r2_ps_null_r16_present, 1));
  bool type1_sp_type2_type2_ps_r16_present;
  HANDLE_CODE(bref.unpack(type1_sp_type2_type2_ps_r16_present, 1));
  bool type1_mp_type2_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_mp_type2_null_r16_present, 1));
  bool type1_mp_type2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_mp_type2_ps_null_r16_present, 1));
  bool type1_mp_e_type2_r1_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_null_r16_present, 1));
  bool type1_mp_e_type2_r2_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r2_null_r16_present, 1));
  bool type1_mp_e_type2_r1_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_ps_null_r16_present, 1));
  bool type1_mp_e_type2_r2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r2_ps_null_r16_present, 1));
  bool type1_mp_type2_type2_ps_r16_present;
  HANDLE_CODE(bref.unpack(type1_mp_type2_type2_ps_r16_present, 1));

  if (type1_sp_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_type2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_type2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_e_type2_r1_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_e_type2_r2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_e_type2_r1_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_e_type2_r2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_type2_type2_ps_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_type2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_type2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_e_type2_r1_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_e_type2_r2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_e_type2_r1_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_e_type2_r2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_type2_type2_ps_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_combo_params_addition_per_bc_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (type1_sp_type2_null_r16.size() > 0) {
    j.start_array("type1SP-Type2-null-r16");
    for (const auto& e1 : type1_sp_type2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_type2_ps_null_r16.size() > 0) {
    j.start_array("type1SP-Type2PS-null-r16");
    for (const auto& e1 : type1_sp_type2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r1_null_r16.size() > 0) {
    j.start_array("type1SP-eType2R1-null-r16");
    for (const auto& e1 : type1_sp_e_type2_r1_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r2_null_r16.size() > 0) {
    j.start_array("type1SP-eType2R2-null-r16");
    for (const auto& e1 : type1_sp_e_type2_r2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r1_ps_null_r16.size() > 0) {
    j.start_array("type1SP-eType2R1PS-null-r16");
    for (const auto& e1 : type1_sp_e_type2_r1_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r2_ps_null_r16.size() > 0) {
    j.start_array("type1SP-eType2R2PS-null-r16");
    for (const auto& e1 : type1_sp_e_type2_r2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_type2_type2_ps_r16.size() > 0) {
    j.start_array("type1SP-Type2-Type2PS-r16");
    for (const auto& e1 : type1_sp_type2_type2_ps_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_type2_null_r16.size() > 0) {
    j.start_array("type1MP-Type2-null-r16");
    for (const auto& e1 : type1_mp_type2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_type2_ps_null_r16.size() > 0) {
    j.start_array("type1MP-Type2PS-null-r16");
    for (const auto& e1 : type1_mp_type2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r1_null_r16.size() > 0) {
    j.start_array("type1MP-eType2R1-null-r16");
    for (const auto& e1 : type1_mp_e_type2_r1_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r2_null_r16.size() > 0) {
    j.start_array("type1MP-eType2R2-null-r16");
    for (const auto& e1 : type1_mp_e_type2_r2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r1_ps_null_r16.size() > 0) {
    j.start_array("type1MP-eType2R1PS-null-r16");
    for (const auto& e1 : type1_mp_e_type2_r1_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r2_ps_null_r16.size() > 0) {
    j.start_array("type1MP-eType2R2PS-null-r16");
    for (const auto& e1 : type1_mp_e_type2_r2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_type2_type2_ps_r16.size() > 0) {
    j.start_array("type1MP-Type2-Type2PS-r16");
    for (const auto& e1 : type1_mp_type2_type2_ps_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// CodebookParameters-v1610 ::= SEQUENCE
SRSASN_CODE codebook_params_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_csi_rs_res_list_alt_r16_present, 1));

  if (supported_csi_rs_res_list_alt_r16_present) {
    HANDLE_CODE(bref.pack(supported_csi_rs_res_list_alt_r16.type1_single_panel_r16.size() > 0, 1));
    HANDLE_CODE(bref.pack(supported_csi_rs_res_list_alt_r16.type1_multi_panel_r16.size() > 0, 1));
    HANDLE_CODE(bref.pack(supported_csi_rs_res_list_alt_r16.type2_r16.size() > 0, 1));
    HANDLE_CODE(bref.pack(supported_csi_rs_res_list_alt_r16.type2_port_sel_r16.size() > 0, 1));
    if (supported_csi_rs_res_list_alt_r16.type1_single_panel_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(
          bref, supported_csi_rs_res_list_alt_r16.type1_single_panel_r16, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
    if (supported_csi_rs_res_list_alt_r16.type1_multi_panel_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(
          bref, supported_csi_rs_res_list_alt_r16.type1_multi_panel_r16, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
    if (supported_csi_rs_res_list_alt_r16.type2_r16.size() > 0) {
      HANDLE_CODE(
          pack_dyn_seq_of(bref, supported_csi_rs_res_list_alt_r16.type2_r16, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
    if (supported_csi_rs_res_list_alt_r16.type2_port_sel_r16.size() > 0) {
      HANDLE_CODE(pack_dyn_seq_of(
          bref, supported_csi_rs_res_list_alt_r16.type2_port_sel_r16, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_params_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_csi_rs_res_list_alt_r16_present, 1));

  if (supported_csi_rs_res_list_alt_r16_present) {
    bool type1_single_panel_r16_present;
    HANDLE_CODE(bref.unpack(type1_single_panel_r16_present, 1));
    bool type1_multi_panel_r16_present;
    HANDLE_CODE(bref.unpack(type1_multi_panel_r16_present, 1));
    bool type2_r16_present;
    HANDLE_CODE(bref.unpack(type2_r16_present, 1));
    bool type2_port_sel_r16_present;
    HANDLE_CODE(bref.unpack(type2_port_sel_r16_present, 1));
    if (type1_single_panel_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(
          supported_csi_rs_res_list_alt_r16.type1_single_panel_r16, bref, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
    if (type1_multi_panel_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(
          supported_csi_rs_res_list_alt_r16.type1_multi_panel_r16, bref, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
    if (type2_r16_present) {
      HANDLE_CODE(
          unpack_dyn_seq_of(supported_csi_rs_res_list_alt_r16.type2_r16, bref, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
    if (type2_port_sel_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(
          supported_csi_rs_res_list_alt_r16.type2_port_sel_r16, bref, 1, 7, integer_packer<uint16_t>(0, 511)));
    }
  }

  return SRSASN_SUCCESS;
}
void codebook_params_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_csi_rs_res_list_alt_r16_present) {
    j.write_fieldname("supportedCSI-RS-ResourceListAlt-r16");
    j.start_obj();
    if (supported_csi_rs_res_list_alt_r16.type1_single_panel_r16.size() > 0) {
      j.start_array("type1-SinglePanel-r16");
      for (const auto& e1 : supported_csi_rs_res_list_alt_r16.type1_single_panel_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (supported_csi_rs_res_list_alt_r16.type1_multi_panel_r16.size() > 0) {
      j.start_array("type1-MultiPanel-r16");
      for (const auto& e1 : supported_csi_rs_res_list_alt_r16.type1_multi_panel_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (supported_csi_rs_res_list_alt_r16.type2_r16.size() > 0) {
      j.start_array("type2-r16");
      for (const auto& e1 : supported_csi_rs_res_list_alt_r16.type2_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    if (supported_csi_rs_res_list_alt_r16.type2_port_sel_r16.size() > 0) {
      j.start_array("type2-PortSelection-r16");
      for (const auto& e1 : supported_csi_rs_res_list_alt_r16.type2_port_sel_r16) {
        j.write_int(e1);
      }
      j.end_array();
    }
    j.end_obj();
  }
  j.end_obj();
}

// CodebookParametersAdditionPerBC-r16 ::= SEQUENCE
SRSASN_CODE codebook_params_addition_per_bc_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(etype2_r1_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(etype2_r2_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(etype2_r1_port_sel_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(etype2_r2_port_sel_r16.size() > 0, 1));

  if (etype2_r1_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, etype2_r1_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (etype2_r2_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, etype2_r2_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (etype2_r1_port_sel_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, etype2_r1_port_sel_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (etype2_r2_port_sel_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, etype2_r2_port_sel_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_params_addition_per_bc_r16_s::unpack(cbit_ref& bref)
{
  bool etype2_r1_r16_present;
  HANDLE_CODE(bref.unpack(etype2_r1_r16_present, 1));
  bool etype2_r2_r16_present;
  HANDLE_CODE(bref.unpack(etype2_r2_r16_present, 1));
  bool etype2_r1_port_sel_r16_present;
  HANDLE_CODE(bref.unpack(etype2_r1_port_sel_r16_present, 1));
  bool etype2_r2_port_sel_r16_present;
  HANDLE_CODE(bref.unpack(etype2_r2_port_sel_r16_present, 1));

  if (etype2_r1_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(etype2_r1_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (etype2_r2_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(etype2_r2_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (etype2_r1_port_sel_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(etype2_r1_port_sel_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (etype2_r2_port_sel_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(etype2_r2_port_sel_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_params_addition_per_bc_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (etype2_r1_r16.size() > 0) {
    j.start_array("etype2R1-r16");
    for (const auto& e1 : etype2_r1_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (etype2_r2_r16.size() > 0) {
    j.start_array("etype2R2-r16");
    for (const auto& e1 : etype2_r2_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (etype2_r1_port_sel_r16.size() > 0) {
    j.start_array("etype2R1-PortSelection-r16");
    for (const auto& e1 : etype2_r1_port_sel_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (etype2_r2_port_sel_r16.size() > 0) {
    j.start_array("etype2R2-PortSelection-r16");
    for (const auto& e1 : etype2_r2_port_sel_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// SRS-SwitchingTimeEUTRA ::= SEQUENCE
SRSASN_CODE srs_switching_time_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(switching_time_dl_present, 1));
  HANDLE_CODE(bref.pack(switching_time_ul_present, 1));

  if (switching_time_dl_present) {
    HANDLE_CODE(switching_time_dl.pack(bref));
  }
  if (switching_time_ul_present) {
    HANDLE_CODE(switching_time_ul.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_switching_time_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(switching_time_dl_present, 1));
  HANDLE_CODE(bref.unpack(switching_time_ul_present, 1));

  if (switching_time_dl_present) {
    HANDLE_CODE(switching_time_dl.unpack(bref));
  }
  if (switching_time_ul_present) {
    HANDLE_CODE(switching_time_ul.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srs_switching_time_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (switching_time_dl_present) {
    j.write_str("switchingTimeDL", switching_time_dl.to_string());
  }
  if (switching_time_ul_present) {
    j.write_str("switchingTimeUL", switching_time_ul.to_string());
  }
  j.end_obj();
}

const char* srs_switching_time_eutra_s::switching_time_dl_opts::to_string() const
{
  static const char* names[] = {"n0",
                                "n0dot5",
                                "n1",
                                "n1dot5",
                                "n2",
                                "n2dot5",
                                "n3",
                                "n3dot5",
                                "n4",
                                "n4dot5",
                                "n5",
                                "n5dot5",
                                "n6",
                                "n6dot5",
                                "n7"};
  return convert_enum_idx(names, 15, value, "srs_switching_time_eutra_s::switching_time_dl_e_");
}
float srs_switching_time_eutra_s::switching_time_dl_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0};
  return map_enum_number(numbers, 15, value, "srs_switching_time_eutra_s::switching_time_dl_e_");
}
const char* srs_switching_time_eutra_s::switching_time_dl_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0", "0.5", "1", "1.5", "2", "2.5", "3", "3.5", "4", "4.5", "5", "5.5", "6", "6.5", "7"};
  return convert_enum_idx(number_strs, 15, value, "srs_switching_time_eutra_s::switching_time_dl_e_");
}

const char* srs_switching_time_eutra_s::switching_time_ul_opts::to_string() const
{
  static const char* names[] = {"n0",
                                "n0dot5",
                                "n1",
                                "n1dot5",
                                "n2",
                                "n2dot5",
                                "n3",
                                "n3dot5",
                                "n4",
                                "n4dot5",
                                "n5",
                                "n5dot5",
                                "n6",
                                "n6dot5",
                                "n7"};
  return convert_enum_idx(names, 15, value, "srs_switching_time_eutra_s::switching_time_ul_e_");
}
float srs_switching_time_eutra_s::switching_time_ul_opts::to_number() const
{
  static const float numbers[] = {0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0};
  return map_enum_number(numbers, 15, value, "srs_switching_time_eutra_s::switching_time_ul_e_");
}
const char* srs_switching_time_eutra_s::switching_time_ul_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0", "0.5", "1", "1.5", "2", "2.5", "3", "3.5", "4", "4.5", "5", "5.5", "6", "6.5", "7"};
  return convert_enum_idx(number_strs, 15, value, "srs_switching_time_eutra_s::switching_time_ul_e_");
}

// SRS-SwitchingTimeNR ::= SEQUENCE
SRSASN_CODE srs_switching_time_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(switching_time_dl_present, 1));
  HANDLE_CODE(bref.pack(switching_time_ul_present, 1));

  if (switching_time_dl_present) {
    HANDLE_CODE(switching_time_dl.pack(bref));
  }
  if (switching_time_ul_present) {
    HANDLE_CODE(switching_time_ul.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_switching_time_nr_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(switching_time_dl_present, 1));
  HANDLE_CODE(bref.unpack(switching_time_ul_present, 1));

  if (switching_time_dl_present) {
    HANDLE_CODE(switching_time_dl.unpack(bref));
  }
  if (switching_time_ul_present) {
    HANDLE_CODE(switching_time_ul.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void srs_switching_time_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (switching_time_dl_present) {
    j.write_str("switchingTimeDL", switching_time_dl.to_string());
  }
  if (switching_time_ul_present) {
    j.write_str("switchingTimeUL", switching_time_ul.to_string());
  }
  j.end_obj();
}

const char* srs_switching_time_nr_s::switching_time_dl_opts::to_string() const
{
  static const char* names[] = {"n0us", "n30us", "n100us", "n140us", "n200us", "n300us", "n500us", "n900us"};
  return convert_enum_idx(names, 8, value, "srs_switching_time_nr_s::switching_time_dl_e_");
}
uint16_t srs_switching_time_nr_s::switching_time_dl_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 30, 100, 140, 200, 300, 500, 900};
  return map_enum_number(numbers, 8, value, "srs_switching_time_nr_s::switching_time_dl_e_");
}

const char* srs_switching_time_nr_s::switching_time_ul_opts::to_string() const
{
  static const char* names[] = {"n0us", "n30us", "n100us", "n140us", "n200us", "n300us", "n500us", "n900us"};
  return convert_enum_idx(names, 8, value, "srs_switching_time_nr_s::switching_time_ul_e_");
}
uint16_t srs_switching_time_nr_s::switching_time_ul_opts::to_number() const
{
  static const uint16_t numbers[] = {0, 30, 100, 140, 200, 300, 500, 900};
  return map_enum_number(numbers, 8, value, "srs_switching_time_nr_s::switching_time_ul_e_");
}

// BandParameters-v1540 ::= SEQUENCE
SRSASN_CODE band_params_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_carrier_switch_present, 1));
  HANDLE_CODE(bref.pack(srs_tx_switch_present, 1));

  if (srs_carrier_switch_present) {
    HANDLE_CODE(srs_carrier_switch.pack(bref));
  }
  if (srs_tx_switch_present) {
    HANDLE_CODE(bref.pack(srs_tx_switch.tx_switch_impact_to_rx_present, 1));
    HANDLE_CODE(bref.pack(srs_tx_switch.tx_switch_with_another_band_present, 1));
    HANDLE_CODE(srs_tx_switch.supported_srs_tx_port_switch.pack(bref));
    if (srs_tx_switch.tx_switch_impact_to_rx_present) {
      HANDLE_CODE(pack_integer(bref, srs_tx_switch.tx_switch_impact_to_rx, (uint8_t)1u, (uint8_t)32u));
    }
    if (srs_tx_switch.tx_switch_with_another_band_present) {
      HANDLE_CODE(pack_integer(bref, srs_tx_switch.tx_switch_with_another_band, (uint8_t)1u, (uint8_t)32u));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(srs_carrier_switch_present, 1));
  HANDLE_CODE(bref.unpack(srs_tx_switch_present, 1));

  if (srs_carrier_switch_present) {
    HANDLE_CODE(srs_carrier_switch.unpack(bref));
  }
  if (srs_tx_switch_present) {
    HANDLE_CODE(bref.unpack(srs_tx_switch.tx_switch_impact_to_rx_present, 1));
    HANDLE_CODE(bref.unpack(srs_tx_switch.tx_switch_with_another_band_present, 1));
    HANDLE_CODE(srs_tx_switch.supported_srs_tx_port_switch.unpack(bref));
    if (srs_tx_switch.tx_switch_impact_to_rx_present) {
      HANDLE_CODE(unpack_integer(srs_tx_switch.tx_switch_impact_to_rx, bref, (uint8_t)1u, (uint8_t)32u));
    }
    if (srs_tx_switch.tx_switch_with_another_band_present) {
      HANDLE_CODE(unpack_integer(srs_tx_switch.tx_switch_with_another_band, bref, (uint8_t)1u, (uint8_t)32u));
    }
  }

  return SRSASN_SUCCESS;
}
void band_params_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_carrier_switch_present) {
    j.write_fieldname("srs-CarrierSwitch");
    srs_carrier_switch.to_json(j);
  }
  if (srs_tx_switch_present) {
    j.write_fieldname("srs-TxSwitch");
    j.start_obj();
    j.write_str("supportedSRS-TxPortSwitch", srs_tx_switch.supported_srs_tx_port_switch.to_string());
    if (srs_tx_switch.tx_switch_impact_to_rx_present) {
      j.write_int("txSwitchImpactToRx", srs_tx_switch.tx_switch_impact_to_rx);
    }
    if (srs_tx_switch.tx_switch_with_another_band_present) {
      j.write_int("txSwitchWithAnotherBand", srs_tx_switch.tx_switch_with_another_band);
    }
    j.end_obj();
  }
  j.end_obj();
}

void band_params_v1540_s::srs_carrier_switch_c_::destroy_()
{
  switch (type_) {
    case types::nr:
      c.destroy<nr_s_>();
      break;
    case types::eutra:
      c.destroy<eutra_s_>();
      break;
    default:
      break;
  }
}
void band_params_v1540_s::srs_carrier_switch_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::nr:
      c.init<nr_s_>();
      break;
    case types::eutra:
      c.init<eutra_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_v1540_s::srs_carrier_switch_c_");
  }
}
band_params_v1540_s::srs_carrier_switch_c_::srs_carrier_switch_c_(
    const band_params_v1540_s::srs_carrier_switch_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::nr:
      c.init(other.c.get<nr_s_>());
      break;
    case types::eutra:
      c.init(other.c.get<eutra_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_v1540_s::srs_carrier_switch_c_");
  }
}
band_params_v1540_s::srs_carrier_switch_c_&
band_params_v1540_s::srs_carrier_switch_c_::operator=(const band_params_v1540_s::srs_carrier_switch_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::nr:
      c.set(other.c.get<nr_s_>());
      break;
    case types::eutra:
      c.set(other.c.get<eutra_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_v1540_s::srs_carrier_switch_c_");
  }

  return *this;
}
band_params_v1540_s::srs_carrier_switch_c_::nr_s_& band_params_v1540_s::srs_carrier_switch_c_::set_nr()
{
  set(types::nr);
  return c.get<nr_s_>();
}
band_params_v1540_s::srs_carrier_switch_c_::eutra_s_& band_params_v1540_s::srs_carrier_switch_c_::set_eutra()
{
  set(types::eutra);
  return c.get<eutra_s_>();
}
void band_params_v1540_s::srs_carrier_switch_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::nr:
      j.write_fieldname("nr");
      j.start_obj();
      j.start_array("srs-SwitchingTimesListNR");
      for (const auto& e1 : c.get<nr_s_>().srs_switching_times_list_nr) {
        e1.to_json(j);
      }
      j.end_array();
      j.end_obj();
      break;
    case types::eutra:
      j.write_fieldname("eutra");
      j.start_obj();
      j.start_array("srs-SwitchingTimesListEUTRA");
      for (const auto& e1 : c.get<eutra_s_>().srs_switching_times_list_eutra) {
        e1.to_json(j);
      }
      j.end_array();
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_params_v1540_s::srs_carrier_switch_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_params_v1540_s::srs_carrier_switch_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::nr:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<nr_s_>().srs_switching_times_list_nr, 1, 32));
      break;
    case types::eutra:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<eutra_s_>().srs_switching_times_list_eutra, 1, 32));
      break;
    default:
      log_invalid_choice_id(type_, "band_params_v1540_s::srs_carrier_switch_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_v1540_s::srs_carrier_switch_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::nr:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<nr_s_>().srs_switching_times_list_nr, bref, 1, 32));
      break;
    case types::eutra:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<eutra_s_>().srs_switching_times_list_eutra, bref, 1, 32));
      break;
    default:
      log_invalid_choice_id(type_, "band_params_v1540_s::srs_carrier_switch_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_params_v1540_s::srs_tx_switch_s_::supported_srs_tx_port_switch_opts::to_string() const
{
  static const char* names[] = {"t1r2", "t1r4", "t2r4", "t1r4-t2r4", "t1r1", "t2r2", "t4r4", "notSupported"};
  return convert_enum_idx(names, 8, value, "band_params_v1540_s::srs_tx_switch_s_::supported_srs_tx_port_switch_e_");
}

// BandParameters-v1610 ::= SEQUENCE
SRSASN_CODE band_params_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_tx_switch_v1610_present, 1));

  if (srs_tx_switch_v1610_present) {
    HANDLE_CODE(srs_tx_switch_v1610.supported_srs_tx_port_switch_v1610.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(srs_tx_switch_v1610_present, 1));

  if (srs_tx_switch_v1610_present) {
    HANDLE_CODE(srs_tx_switch_v1610.supported_srs_tx_port_switch_v1610.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_params_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_tx_switch_v1610_present) {
    j.write_fieldname("srs-TxSwitch-v1610");
    j.start_obj();
    j.write_str("supportedSRS-TxPortSwitch-v1610", srs_tx_switch_v1610.supported_srs_tx_port_switch_v1610.to_string());
    j.end_obj();
  }
  j.end_obj();
}

const char* band_params_v1610_s::srs_tx_switch_v1610_s_::supported_srs_tx_port_switch_v1610_opts::to_string() const
{
  static const char* names[] = {
      "t1r1-t1r2", "t1r1-t1r2-t1r4", "t1r1-t1r2-t2r2-t2r4", "t1r1-t1r2-t2r2-t1r4-t2r4", "t1r1-t2r2", "t1r1-t2r2-t4r4"};
  return convert_enum_idx(
      names, 6, value, "band_params_v1610_s::srs_tx_switch_v1610_s_::supported_srs_tx_port_switch_v1610_e_");
}

// CA-ParametersEUTRA-v1560 ::= SEQUENCE
SRSASN_CODE ca_params_eutra_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fd_mimo_total_weighted_layers_present, 1));

  if (fd_mimo_total_weighted_layers_present) {
    HANDLE_CODE(pack_integer(bref, fd_mimo_total_weighted_layers, (uint8_t)2u, (uint8_t)128u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_eutra_v1560_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fd_mimo_total_weighted_layers_present, 1));

  if (fd_mimo_total_weighted_layers_present) {
    HANDLE_CODE(unpack_integer(fd_mimo_total_weighted_layers, bref, (uint8_t)2u, (uint8_t)128u));
  }

  return SRSASN_SUCCESS;
}
void ca_params_eutra_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fd_mimo_total_weighted_layers_present) {
    j.write_int("fd-MIMO-TotalWeightedLayers", fd_mimo_total_weighted_layers);
  }
  j.end_obj();
}

// CA-ParametersEUTRA-v1570 ::= SEQUENCE
SRSASN_CODE ca_params_eutra_v1570_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dl_1024_qam_total_weighted_layers_present, 1));

  if (dl_1024_qam_total_weighted_layers_present) {
    HANDLE_CODE(pack_integer(bref, dl_1024_qam_total_weighted_layers, (uint8_t)0u, (uint8_t)10u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_eutra_v1570_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dl_1024_qam_total_weighted_layers_present, 1));

  if (dl_1024_qam_total_weighted_layers_present) {
    HANDLE_CODE(unpack_integer(dl_1024_qam_total_weighted_layers, bref, (uint8_t)0u, (uint8_t)10u));
  }

  return SRSASN_SUCCESS;
}
void ca_params_eutra_v1570_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_1024_qam_total_weighted_layers_present) {
    j.write_int("dl-1024QAM-TotalWeightedLayers", dl_1024_qam_total_weighted_layers);
  }
  j.end_obj();
}

// CA-ParametersNR-v1610 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(parallel_tx_msg_a_srs_pucch_pusch_r16_present, 1));
  HANDLE_CODE(bref.pack(msg_a_sul_r16_present, 1));
  HANDLE_CODE(bref.pack(joint_search_space_switch_across_cells_r16_present, 1));
  HANDLE_CODE(bref.pack(half_duplex_tdd_ca_same_scs_r16_present, 1));
  HANDLE_CODE(bref.pack(scell_dormancy_within_active_time_r16_present, 1));
  HANDLE_CODE(bref.pack(scell_dormancy_outside_active_time_r16_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_a_csi_trig_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.pack(default_qcl_cross_carrier_a_csi_trig_r16_present, 1));
  HANDLE_CODE(bref.pack(inter_ca_non_aligned_frame_r16_present, 1));
  HANDLE_CODE(bref.pack(simul_srs_trans_bc_r16_present, 1));
  HANDLE_CODE(bref.pack(inter_freq_daps_r16_present, 1));
  HANDLE_CODE(bref.pack(codebook_params_per_bc_r16_present, 1));
  HANDLE_CODE(bref.pack(blind_detect_factor_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_monitoring_ca_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_mixed_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_mcg_ue_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_scg_ue_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_mcg_ue_mixed_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_scg_ue_mixed_r16_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_dl_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_default_qcl_r16_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_ul_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.pack(simul_srs_mimo_trans_bc_r16_present, 1));
  HANDLE_CODE(bref.pack(codebook_params_addition_per_bc_r16_present, 1));
  HANDLE_CODE(bref.pack(codebook_combo_params_addition_per_bc_r16_present, 1));

  if (cross_carrier_a_csi_trig_diff_scs_r16_present) {
    HANDLE_CODE(cross_carrier_a_csi_trig_diff_scs_r16.pack(bref));
  }
  if (default_qcl_cross_carrier_a_csi_trig_r16_present) {
    HANDLE_CODE(default_qcl_cross_carrier_a_csi_trig_r16.pack(bref));
  }
  if (inter_freq_daps_r16_present) {
    HANDLE_CODE(bref.pack(inter_freq_daps_r16.inter_freq_async_daps_r16_present, 1));
    HANDLE_CODE(bref.pack(inter_freq_daps_r16.inter_freq_diff_scs_daps_r16_present, 1));
    HANDLE_CODE(bref.pack(inter_freq_daps_r16.inter_freq_multi_ul_tx_daps_r16_present, 1));
    HANDLE_CODE(bref.pack(inter_freq_daps_r16.inter_freq_semi_static_pwr_sharing_daps_mode1_r16_present, 1));
    HANDLE_CODE(bref.pack(inter_freq_daps_r16.inter_freq_semi_static_pwr_sharing_daps_mode2_r16_present, 1));
    HANDLE_CODE(bref.pack(inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16_present, 1));
    HANDLE_CODE(bref.pack(inter_freq_daps_r16.inter_freq_ul_trans_cancellation_daps_r16_present, 1));
    if (inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16_present) {
      HANDLE_CODE(inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16.pack(bref));
    }
  }
  if (codebook_params_per_bc_r16_present) {
    HANDLE_CODE(codebook_params_per_bc_r16.pack(bref));
  }
  if (blind_detect_factor_r16_present) {
    HANDLE_CODE(pack_integer(bref, blind_detect_factor_r16, (uint8_t)1u, (uint8_t)2u));
  }
  if (pdcch_monitoring_ca_r16_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_monitoring_ca_r16.max_nof_monitoring_cc_r16, (uint8_t)2u, (uint8_t)16u));
    HANDLE_CODE(pdcch_monitoring_ca_r16.supported_span_arrangement_r16.pack(bref));
  }
  if (pdcch_blind_detection_ca_mixed_r16_present) {
    HANDLE_CODE(pack_integer(
        bref, pdcch_blind_detection_ca_mixed_r16.pdcch_blind_detection_ca1_r16, (uint8_t)1u, (uint8_t)15u));
    HANDLE_CODE(pack_integer(
        bref, pdcch_blind_detection_ca_mixed_r16.pdcch_blind_detection_ca2_r16, (uint8_t)1u, (uint8_t)15u));
    HANDLE_CODE(pdcch_blind_detection_ca_mixed_r16.supported_span_arrangement_r16.pack(bref));
  }
  if (pdcch_blind_detection_mcg_ue_r16_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_mcg_ue_r16, (uint8_t)1u, (uint8_t)14u));
  }
  if (pdcch_blind_detection_scg_ue_r16_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_scg_ue_r16, (uint8_t)1u, (uint8_t)14u));
  }
  if (pdcch_blind_detection_mcg_ue_mixed_r16_present) {
    HANDLE_CODE(pack_integer(
        bref, pdcch_blind_detection_mcg_ue_mixed_r16.pdcch_blind_detection_mcg_ue1_r16, (uint8_t)0u, (uint8_t)15u));
    HANDLE_CODE(pack_integer(
        bref, pdcch_blind_detection_mcg_ue_mixed_r16.pdcch_blind_detection_mcg_ue2_r16, (uint8_t)0u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_scg_ue_mixed_r16_present) {
    HANDLE_CODE(pack_integer(
        bref, pdcch_blind_detection_scg_ue_mixed_r16.pdcch_blind_detection_scg_ue1_r16, (uint8_t)0u, (uint8_t)15u));
    HANDLE_CODE(pack_integer(
        bref, pdcch_blind_detection_scg_ue_mixed_r16.pdcch_blind_detection_scg_ue2_r16, (uint8_t)0u, (uint8_t)15u));
  }
  if (cross_carrier_sched_dl_diff_scs_r16_present) {
    HANDLE_CODE(cross_carrier_sched_dl_diff_scs_r16.pack(bref));
  }
  if (cross_carrier_sched_default_qcl_r16_present) {
    HANDLE_CODE(cross_carrier_sched_default_qcl_r16.pack(bref));
  }
  if (cross_carrier_sched_ul_diff_scs_r16_present) {
    HANDLE_CODE(cross_carrier_sched_ul_diff_scs_r16.pack(bref));
  }
  if (codebook_params_addition_per_bc_r16_present) {
    HANDLE_CODE(codebook_params_addition_per_bc_r16.pack(bref));
  }
  if (codebook_combo_params_addition_per_bc_r16_present) {
    HANDLE_CODE(codebook_combo_params_addition_per_bc_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(parallel_tx_msg_a_srs_pucch_pusch_r16_present, 1));
  HANDLE_CODE(bref.unpack(msg_a_sul_r16_present, 1));
  HANDLE_CODE(bref.unpack(joint_search_space_switch_across_cells_r16_present, 1));
  HANDLE_CODE(bref.unpack(half_duplex_tdd_ca_same_scs_r16_present, 1));
  HANDLE_CODE(bref.unpack(scell_dormancy_within_active_time_r16_present, 1));
  HANDLE_CODE(bref.unpack(scell_dormancy_outside_active_time_r16_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_a_csi_trig_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.unpack(default_qcl_cross_carrier_a_csi_trig_r16_present, 1));
  HANDLE_CODE(bref.unpack(inter_ca_non_aligned_frame_r16_present, 1));
  HANDLE_CODE(bref.unpack(simul_srs_trans_bc_r16_present, 1));
  HANDLE_CODE(bref.unpack(inter_freq_daps_r16_present, 1));
  HANDLE_CODE(bref.unpack(codebook_params_per_bc_r16_present, 1));
  HANDLE_CODE(bref.unpack(blind_detect_factor_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_monitoring_ca_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca_mixed_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_mcg_ue_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_scg_ue_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_mcg_ue_mixed_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_scg_ue_mixed_r16_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_dl_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_default_qcl_r16_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_ul_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.unpack(simul_srs_mimo_trans_bc_r16_present, 1));
  HANDLE_CODE(bref.unpack(codebook_params_addition_per_bc_r16_present, 1));
  HANDLE_CODE(bref.unpack(codebook_combo_params_addition_per_bc_r16_present, 1));

  if (cross_carrier_a_csi_trig_diff_scs_r16_present) {
    HANDLE_CODE(cross_carrier_a_csi_trig_diff_scs_r16.unpack(bref));
  }
  if (default_qcl_cross_carrier_a_csi_trig_r16_present) {
    HANDLE_CODE(default_qcl_cross_carrier_a_csi_trig_r16.unpack(bref));
  }
  if (inter_freq_daps_r16_present) {
    HANDLE_CODE(bref.unpack(inter_freq_daps_r16.inter_freq_async_daps_r16_present, 1));
    HANDLE_CODE(bref.unpack(inter_freq_daps_r16.inter_freq_diff_scs_daps_r16_present, 1));
    HANDLE_CODE(bref.unpack(inter_freq_daps_r16.inter_freq_multi_ul_tx_daps_r16_present, 1));
    HANDLE_CODE(bref.unpack(inter_freq_daps_r16.inter_freq_semi_static_pwr_sharing_daps_mode1_r16_present, 1));
    HANDLE_CODE(bref.unpack(inter_freq_daps_r16.inter_freq_semi_static_pwr_sharing_daps_mode2_r16_present, 1));
    HANDLE_CODE(bref.unpack(inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16_present, 1));
    HANDLE_CODE(bref.unpack(inter_freq_daps_r16.inter_freq_ul_trans_cancellation_daps_r16_present, 1));
    if (inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16_present) {
      HANDLE_CODE(inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16.unpack(bref));
    }
  }
  if (codebook_params_per_bc_r16_present) {
    HANDLE_CODE(codebook_params_per_bc_r16.unpack(bref));
  }
  if (blind_detect_factor_r16_present) {
    HANDLE_CODE(unpack_integer(blind_detect_factor_r16, bref, (uint8_t)1u, (uint8_t)2u));
  }
  if (pdcch_monitoring_ca_r16_present) {
    HANDLE_CODE(unpack_integer(pdcch_monitoring_ca_r16.max_nof_monitoring_cc_r16, bref, (uint8_t)2u, (uint8_t)16u));
    HANDLE_CODE(pdcch_monitoring_ca_r16.supported_span_arrangement_r16.unpack(bref));
  }
  if (pdcch_blind_detection_ca_mixed_r16_present) {
    HANDLE_CODE(unpack_integer(
        pdcch_blind_detection_ca_mixed_r16.pdcch_blind_detection_ca1_r16, bref, (uint8_t)1u, (uint8_t)15u));
    HANDLE_CODE(unpack_integer(
        pdcch_blind_detection_ca_mixed_r16.pdcch_blind_detection_ca2_r16, bref, (uint8_t)1u, (uint8_t)15u));
    HANDLE_CODE(pdcch_blind_detection_ca_mixed_r16.supported_span_arrangement_r16.unpack(bref));
  }
  if (pdcch_blind_detection_mcg_ue_r16_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_mcg_ue_r16, bref, (uint8_t)1u, (uint8_t)14u));
  }
  if (pdcch_blind_detection_scg_ue_r16_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_scg_ue_r16, bref, (uint8_t)1u, (uint8_t)14u));
  }
  if (pdcch_blind_detection_mcg_ue_mixed_r16_present) {
    HANDLE_CODE(unpack_integer(
        pdcch_blind_detection_mcg_ue_mixed_r16.pdcch_blind_detection_mcg_ue1_r16, bref, (uint8_t)0u, (uint8_t)15u));
    HANDLE_CODE(unpack_integer(
        pdcch_blind_detection_mcg_ue_mixed_r16.pdcch_blind_detection_mcg_ue2_r16, bref, (uint8_t)0u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_scg_ue_mixed_r16_present) {
    HANDLE_CODE(unpack_integer(
        pdcch_blind_detection_scg_ue_mixed_r16.pdcch_blind_detection_scg_ue1_r16, bref, (uint8_t)0u, (uint8_t)15u));
    HANDLE_CODE(unpack_integer(
        pdcch_blind_detection_scg_ue_mixed_r16.pdcch_blind_detection_scg_ue2_r16, bref, (uint8_t)0u, (uint8_t)15u));
  }
  if (cross_carrier_sched_dl_diff_scs_r16_present) {
    HANDLE_CODE(cross_carrier_sched_dl_diff_scs_r16.unpack(bref));
  }
  if (cross_carrier_sched_default_qcl_r16_present) {
    HANDLE_CODE(cross_carrier_sched_default_qcl_r16.unpack(bref));
  }
  if (cross_carrier_sched_ul_diff_scs_r16_present) {
    HANDLE_CODE(cross_carrier_sched_ul_diff_scs_r16.unpack(bref));
  }
  if (codebook_params_addition_per_bc_r16_present) {
    HANDLE_CODE(codebook_params_addition_per_bc_r16.unpack(bref));
  }
  if (codebook_combo_params_addition_per_bc_r16_present) {
    HANDLE_CODE(codebook_combo_params_addition_per_bc_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (parallel_tx_msg_a_srs_pucch_pusch_r16_present) {
    j.write_str("parallelTxMsgA-SRS-PUCCH-PUSCH-r16", "supported");
  }
  if (msg_a_sul_r16_present) {
    j.write_str("msgA-SUL-r16", "supported");
  }
  if (joint_search_space_switch_across_cells_r16_present) {
    j.write_str("jointSearchSpaceSwitchAcrossCells-r16", "supported");
  }
  if (half_duplex_tdd_ca_same_scs_r16_present) {
    j.write_str("half-DuplexTDD-CA-SameSCS-r16", "supported");
  }
  if (scell_dormancy_within_active_time_r16_present) {
    j.write_str("scellDormancyWithinActiveTime-r16", "supported");
  }
  if (scell_dormancy_outside_active_time_r16_present) {
    j.write_str("scellDormancyOutsideActiveTime-r16", "supported");
  }
  if (cross_carrier_a_csi_trig_diff_scs_r16_present) {
    j.write_str("crossCarrierA-CSI-trigDiffSCS-r16", cross_carrier_a_csi_trig_diff_scs_r16.to_string());
  }
  if (default_qcl_cross_carrier_a_csi_trig_r16_present) {
    j.write_str("defaultQCL-CrossCarrierA-CSI-Trig-r16", default_qcl_cross_carrier_a_csi_trig_r16.to_string());
  }
  if (inter_ca_non_aligned_frame_r16_present) {
    j.write_str("interCA-NonAlignedFrame-r16", "supported");
  }
  if (simul_srs_trans_bc_r16_present) {
    j.write_str("simul-SRS-Trans-BC-r16", "n2");
  }
  if (inter_freq_daps_r16_present) {
    j.write_fieldname("interFreqDAPS-r16");
    j.start_obj();
    if (inter_freq_daps_r16.inter_freq_async_daps_r16_present) {
      j.write_str("interFreqAsyncDAPS-r16", "supported");
    }
    if (inter_freq_daps_r16.inter_freq_diff_scs_daps_r16_present) {
      j.write_str("interFreqDiffSCS-DAPS-r16", "supported");
    }
    if (inter_freq_daps_r16.inter_freq_multi_ul_tx_daps_r16_present) {
      j.write_str("interFreqMultiUL-TransmissionDAPS-r16", "supported");
    }
    if (inter_freq_daps_r16.inter_freq_semi_static_pwr_sharing_daps_mode1_r16_present) {
      j.write_str("interFreqSemiStaticPowerSharingDAPS-Mode1-r16", "supported");
    }
    if (inter_freq_daps_r16.inter_freq_semi_static_pwr_sharing_daps_mode2_r16_present) {
      j.write_str("interFreqSemiStaticPowerSharingDAPS-Mode2-r16", "supported");
    }
    if (inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16_present) {
      j.write_str("interFreqDynamicPowerSharingDAPS-r16",
                  inter_freq_daps_r16.inter_freq_dyn_pwr_sharing_daps_r16.to_string());
    }
    if (inter_freq_daps_r16.inter_freq_ul_trans_cancellation_daps_r16_present) {
      j.write_str("interFreqUL-TransCancellationDAPS-r16", "supported");
    }
    j.end_obj();
  }
  if (codebook_params_per_bc_r16_present) {
    j.write_fieldname("codebookParametersPerBC-r16");
    codebook_params_per_bc_r16.to_json(j);
  }
  if (blind_detect_factor_r16_present) {
    j.write_int("blindDetectFactor-r16", blind_detect_factor_r16);
  }
  if (pdcch_monitoring_ca_r16_present) {
    j.write_fieldname("pdcch-MonitoringCA-r16");
    j.start_obj();
    j.write_int("maxNumberOfMonitoringCC-r16", pdcch_monitoring_ca_r16.max_nof_monitoring_cc_r16);
    j.write_str("supportedSpanArrangement-r16", pdcch_monitoring_ca_r16.supported_span_arrangement_r16.to_string());
    j.end_obj();
  }
  if (pdcch_blind_detection_ca_mixed_r16_present) {
    j.write_fieldname("pdcch-BlindDetectionCA-Mixed-r16");
    j.start_obj();
    j.write_int("pdcch-BlindDetectionCA1-r16", pdcch_blind_detection_ca_mixed_r16.pdcch_blind_detection_ca1_r16);
    j.write_int("pdcch-BlindDetectionCA2-r16", pdcch_blind_detection_ca_mixed_r16.pdcch_blind_detection_ca2_r16);
    j.write_str("supportedSpanArrangement-r16",
                pdcch_blind_detection_ca_mixed_r16.supported_span_arrangement_r16.to_string());
    j.end_obj();
  }
  if (pdcch_blind_detection_mcg_ue_r16_present) {
    j.write_int("pdcch-BlindDetectionMCG-UE-r16", pdcch_blind_detection_mcg_ue_r16);
  }
  if (pdcch_blind_detection_scg_ue_r16_present) {
    j.write_int("pdcch-BlindDetectionSCG-UE-r16", pdcch_blind_detection_scg_ue_r16);
  }
  if (pdcch_blind_detection_mcg_ue_mixed_r16_present) {
    j.write_fieldname("pdcch-BlindDetectionMCG-UE-Mixed-r16");
    j.start_obj();
    j.write_int("pdcch-BlindDetectionMCG-UE1-r16",
                pdcch_blind_detection_mcg_ue_mixed_r16.pdcch_blind_detection_mcg_ue1_r16);
    j.write_int("pdcch-BlindDetectionMCG-UE2-r16",
                pdcch_blind_detection_mcg_ue_mixed_r16.pdcch_blind_detection_mcg_ue2_r16);
    j.end_obj();
  }
  if (pdcch_blind_detection_scg_ue_mixed_r16_present) {
    j.write_fieldname("pdcch-BlindDetectionSCG-UE-Mixed-r16");
    j.start_obj();
    j.write_int("pdcch-BlindDetectionSCG-UE1-r16",
                pdcch_blind_detection_scg_ue_mixed_r16.pdcch_blind_detection_scg_ue1_r16);
    j.write_int("pdcch-BlindDetectionSCG-UE2-r16",
                pdcch_blind_detection_scg_ue_mixed_r16.pdcch_blind_detection_scg_ue2_r16);
    j.end_obj();
  }
  if (cross_carrier_sched_dl_diff_scs_r16_present) {
    j.write_str("crossCarrierSchedulingDL-DiffSCS-r16", cross_carrier_sched_dl_diff_scs_r16.to_string());
  }
  if (cross_carrier_sched_default_qcl_r16_present) {
    j.write_str("crossCarrierSchedulingDefaultQCL-r16", cross_carrier_sched_default_qcl_r16.to_string());
  }
  if (cross_carrier_sched_ul_diff_scs_r16_present) {
    j.write_str("crossCarrierSchedulingUL-DiffSCS-r16", cross_carrier_sched_ul_diff_scs_r16.to_string());
  }
  if (simul_srs_mimo_trans_bc_r16_present) {
    j.write_str("simul-SRS-MIMO-Trans-BC-r16", "n2");
  }
  if (codebook_params_addition_per_bc_r16_present) {
    j.write_fieldname("codebookParametersAdditionPerBC-r16");
    codebook_params_addition_per_bc_r16.to_json(j);
  }
  if (codebook_combo_params_addition_per_bc_r16_present) {
    j.write_fieldname("codebookComboParametersAdditionPerBC-r16");
    codebook_combo_params_addition_per_bc_r16.to_json(j);
  }
  j.end_obj();
}

const char* ca_params_nr_v1610_s::cross_carrier_a_csi_trig_diff_scs_r16_opts::to_string() const
{
  static const char* names[] = {"higherA-CSI-SCS", "lowerA-CSI-SCS", "both"};
  return convert_enum_idx(names, 3, value, "ca_params_nr_v1610_s::cross_carrier_a_csi_trig_diff_scs_r16_e_");
}

const char* ca_params_nr_v1610_s::default_qcl_cross_carrier_a_csi_trig_r16_opts::to_string() const
{
  static const char* names[] = {"diffOnly", "both"};
  return convert_enum_idx(names, 2, value, "ca_params_nr_v1610_s::default_qcl_cross_carrier_a_csi_trig_r16_e_");
}

const char* ca_params_nr_v1610_s::inter_freq_daps_r16_s_::inter_freq_dyn_pwr_sharing_daps_r16_opts::to_string() const
{
  static const char* names[] = {"short", "long"};
  return convert_enum_idx(
      names, 2, value, "ca_params_nr_v1610_s::inter_freq_daps_r16_s_::inter_freq_dyn_pwr_sharing_daps_r16_e_");
}

const char* ca_params_nr_v1610_s::pdcch_monitoring_ca_r16_s_::supported_span_arrangement_r16_opts::to_string() const
{
  static const char* names[] = {"alignedOnly", "alignedAndNonAligned"};
  return convert_enum_idx(
      names, 2, value, "ca_params_nr_v1610_s::pdcch_monitoring_ca_r16_s_::supported_span_arrangement_r16_e_");
}

const char*
ca_params_nr_v1610_s::pdcch_blind_detection_ca_mixed_r16_s_::supported_span_arrangement_r16_opts::to_string() const
{
  static const char* names[] = {"alignedOnly", "alignedAndNonAligned"};
  return convert_enum_idx(
      names,
      2,
      value,
      "ca_params_nr_v1610_s::pdcch_blind_detection_ca_mixed_r16_s_::supported_span_arrangement_r16_e_");
}

const char* ca_params_nr_v1610_s::cross_carrier_sched_dl_diff_scs_r16_opts::to_string() const
{
  static const char* names[] = {"low-to-high", "high-to-low", "both"};
  return convert_enum_idx(names, 3, value, "ca_params_nr_v1610_s::cross_carrier_sched_dl_diff_scs_r16_e_");
}

const char* ca_params_nr_v1610_s::cross_carrier_sched_default_qcl_r16_opts::to_string() const
{
  static const char* names[] = {"diff-only", "both"};
  return convert_enum_idx(names, 2, value, "ca_params_nr_v1610_s::cross_carrier_sched_default_qcl_r16_e_");
}

const char* ca_params_nr_v1610_s::cross_carrier_sched_ul_diff_scs_r16_opts::to_string() const
{
  static const char* names[] = {"low-to-high", "high-to-low", "both"};
  return convert_enum_idx(names, 3, value, "ca_params_nr_v1610_s::cross_carrier_sched_ul_diff_scs_r16_e_");
}

// CA-ParametersNRDC ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1540_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1550_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1560_present, 1));
  HANDLE_CODE(bref.pack(feature_set_combination_dc_present, 1));

  if (ca_params_nr_for_dc_present) {
    HANDLE_CODE(ca_params_nr_for_dc.pack(bref));
  }
  if (ca_params_nr_for_dc_v1540_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1540.pack(bref));
  }
  if (ca_params_nr_for_dc_v1550_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1550.pack(bref));
  }
  if (ca_params_nr_for_dc_v1560_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1560.pack(bref));
  }
  if (feature_set_combination_dc_present) {
    HANDLE_CODE(pack_integer(bref, feature_set_combination_dc, (uint16_t)0u, (uint16_t)1024u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1540_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1550_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1560_present, 1));
  HANDLE_CODE(bref.unpack(feature_set_combination_dc_present, 1));

  if (ca_params_nr_for_dc_present) {
    HANDLE_CODE(ca_params_nr_for_dc.unpack(bref));
  }
  if (ca_params_nr_for_dc_v1540_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1540.unpack(bref));
  }
  if (ca_params_nr_for_dc_v1550_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1550.unpack(bref));
  }
  if (ca_params_nr_for_dc_v1560_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1560.unpack(bref));
  }
  if (feature_set_combination_dc_present) {
    HANDLE_CODE(unpack_integer(feature_set_combination_dc, bref, (uint16_t)0u, (uint16_t)1024u));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_for_dc_present) {
    j.write_fieldname("ca-ParametersNR-ForDC");
    ca_params_nr_for_dc.to_json(j);
  }
  if (ca_params_nr_for_dc_v1540_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1540");
    ca_params_nr_for_dc_v1540.to_json(j);
  }
  if (ca_params_nr_for_dc_v1550_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1550");
    ca_params_nr_for_dc_v1550.to_json(j);
  }
  if (ca_params_nr_for_dc_v1560_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1560");
    ca_params_nr_for_dc_v1560.to_json(j);
  }
  if (feature_set_combination_dc_present) {
    j.write_int("featureSetCombinationDC", feature_set_combination_dc);
  }
  j.end_obj();
}

// CA-ParametersNRDC-v1610 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(intra_fr_nr_dc_pwr_sharing_mode1_r16_present, 1));
  HANDLE_CODE(bref.pack(intra_fr_nr_dc_pwr_sharing_mode2_r16_present, 1));
  HANDLE_CODE(bref.pack(intra_fr_nr_dc_dyn_pwr_sharing_r16_present, 1));
  HANDLE_CODE(bref.pack(async_nrdc_r16_present, 1));

  if (intra_fr_nr_dc_dyn_pwr_sharing_r16_present) {
    HANDLE_CODE(intra_fr_nr_dc_dyn_pwr_sharing_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(intra_fr_nr_dc_pwr_sharing_mode1_r16_present, 1));
  HANDLE_CODE(bref.unpack(intra_fr_nr_dc_pwr_sharing_mode2_r16_present, 1));
  HANDLE_CODE(bref.unpack(intra_fr_nr_dc_dyn_pwr_sharing_r16_present, 1));
  HANDLE_CODE(bref.unpack(async_nrdc_r16_present, 1));

  if (intra_fr_nr_dc_dyn_pwr_sharing_r16_present) {
    HANDLE_CODE(intra_fr_nr_dc_dyn_pwr_sharing_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (intra_fr_nr_dc_pwr_sharing_mode1_r16_present) {
    j.write_str("intraFR-NR-DC-PwrSharingMode1-r16", "supported");
  }
  if (intra_fr_nr_dc_pwr_sharing_mode2_r16_present) {
    j.write_str("intraFR-NR-DC-PwrSharingMode2-r16", "supported");
  }
  if (intra_fr_nr_dc_dyn_pwr_sharing_r16_present) {
    j.write_str("intraFR-NR-DC-DynamicPwrSharing-r16", intra_fr_nr_dc_dyn_pwr_sharing_r16.to_string());
  }
  if (async_nrdc_r16_present) {
    j.write_str("asyncNRDC-r16", "supported");
  }
  j.end_obj();
}

const char* ca_params_nrdc_v1610_s::intra_fr_nr_dc_dyn_pwr_sharing_r16_opts::to_string() const
{
  static const char* names[] = {"short", "long"};
  return convert_enum_idx(names, 2, value, "ca_params_nrdc_v1610_s::intra_fr_nr_dc_dyn_pwr_sharing_r16_e_");
}

// MRDC-Parameters-v1580 ::= SEQUENCE
SRSASN_CODE mrdc_params_v1580_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dyn_pwr_sharing_nedc_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_params_v1580_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dyn_pwr_sharing_nedc_present, 1));

  return SRSASN_SUCCESS;
}
void mrdc_params_v1580_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dyn_pwr_sharing_nedc_present) {
    j.write_str("dynamicPowerSharingNEDC", "supported");
  }
  j.end_obj();
}

// MRDC-Parameters-v1590 ::= SEQUENCE
SRSASN_CODE mrdc_params_v1590_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(inter_band_contiguous_mrdc_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_params_v1590_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(inter_band_contiguous_mrdc_present, 1));

  return SRSASN_SUCCESS;
}
void mrdc_params_v1590_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (inter_band_contiguous_mrdc_present) {
    j.write_str("interBandContiguousMRDC", "supported");
  }
  j.end_obj();
}

// MRDC-Parameters-v1620 ::= SEQUENCE
SRSASN_CODE mrdc_params_v1620_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_present, 1));
  HANDLE_CODE(bref.pack(tdm_restrict_tdd_endc_r16_present, 1));
  HANDLE_CODE(bref.pack(tdm_restrict_fdd_endc_r16_present, 1));
  HANDLE_CODE(bref.pack(single_ul_harq_offset_tdd_pcell_r16_present, 1));
  HANDLE_CODE(bref.pack(tdm_restrict_dual_tx_fdd_endc_r16_present, 1));

  if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_present) {
    HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16_present, 1));
    HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16_present, 1));
    HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16_present, 1));
    HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16_present, 1));
    HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16_present, 1));
    HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16_present, 1));
    HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16_present, 1));
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16.pack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16.pack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16.pack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16.pack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16.pack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16.pack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_params_v1620_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_present, 1));
  HANDLE_CODE(bref.unpack(tdm_restrict_tdd_endc_r16_present, 1));
  HANDLE_CODE(bref.unpack(tdm_restrict_fdd_endc_r16_present, 1));
  HANDLE_CODE(bref.unpack(single_ul_harq_offset_tdd_pcell_r16_present, 1));
  HANDLE_CODE(bref.unpack(tdm_restrict_dual_tx_fdd_endc_r16_present, 1));

  if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_present) {
    HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16_present, 1));
    HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16_present, 1));
    HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16_present, 1));
    HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16_present, 1));
    HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16_present, 1));
    HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16_present, 1));
    HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16_present, 1));
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16.unpack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16.unpack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16.unpack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16.unpack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16.unpack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16.unpack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void mrdc_params_v1620_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_present) {
    j.write_fieldname("maxUplinkDutyCycle-interBandENDC-TDD-PC2-r16");
    j.start_obj();
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16_present) {
      j.write_str("eutra-TDD-Config0-r16",
                  max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg0_r16.to_string());
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16_present) {
      j.write_str("eutra-TDD-Config1-r16",
                  max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg1_r16.to_string());
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16_present) {
      j.write_str("eutra-TDD-Config2-r16",
                  max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg2_r16.to_string());
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16_present) {
      j.write_str("eutra-TDD-Config3-r16",
                  max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg3_r16.to_string());
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16_present) {
      j.write_str("eutra-TDD-Config4-r16",
                  max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg4_r16.to_string());
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16_present) {
      j.write_str("eutra-TDD-Config5-r16",
                  max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg5_r16.to_string());
    }
    if (max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16_present) {
      j.write_str("eutra-TDD-Config6-r16",
                  max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16.eutra_tdd_cfg6_r16.to_string());
    }
    j.end_obj();
  }
  if (tdm_restrict_tdd_endc_r16_present) {
    j.write_str("tdm-restrictionTDD-endc-r16", "supported");
  }
  if (tdm_restrict_fdd_endc_r16_present) {
    j.write_str("tdm-restrictionFDD-endc-r16", "supported");
  }
  if (single_ul_harq_offset_tdd_pcell_r16_present) {
    j.write_str("singleUL-HARQ-offsetTDD-PCell-r16", "supported");
  }
  if (tdm_restrict_dual_tx_fdd_endc_r16_present) {
    j.write_str("tdm-restrictionDualTX-FDD-endc-r16", "supported");
  }
  j.end_obj();
}

const char*
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg0_r16_opts::to_string() const
{
  static const char* names[] = {"n20", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(
      names, 8, value, "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg0_r16_e_");
}
uint8_t
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg0_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      8,
      value,
      "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg0_r16_e_");
}

const char*
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg1_r16_opts::to_string() const
{
  static const char* names[] = {"n20", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(
      names, 8, value, "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg1_r16_e_");
}
uint8_t
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg1_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      8,
      value,
      "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg1_r16_e_");
}

const char*
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg2_r16_opts::to_string() const
{
  static const char* names[] = {"n20", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(
      names, 8, value, "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg2_r16_e_");
}
uint8_t
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg2_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      8,
      value,
      "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg2_r16_e_");
}

const char*
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg3_r16_opts::to_string() const
{
  static const char* names[] = {"n20", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(
      names, 8, value, "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg3_r16_e_");
}
uint8_t
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg3_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      8,
      value,
      "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg3_r16_e_");
}

const char*
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg4_r16_opts::to_string() const
{
  static const char* names[] = {"n20", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(
      names, 8, value, "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg4_r16_e_");
}
uint8_t
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg4_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      8,
      value,
      "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg4_r16_e_");
}

const char*
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg5_r16_opts::to_string() const
{
  static const char* names[] = {"n20", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(
      names, 8, value, "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg5_r16_e_");
}
uint8_t
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg5_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      8,
      value,
      "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg5_r16_e_");
}

const char*
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg6_r16_opts::to_string() const
{
  static const char* names[] = {"n20", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(
      names, 8, value, "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg6_r16_e_");
}
uint8_t
mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg6_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {20, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      8,
      value,
      "mrdc_params_v1620_s::max_ul_duty_cycle_inter_band_endc_tdd_pc2_r16_s_::eutra_tdd_cfg6_r16_e_");
}

// BandCombination-v1540 ::= SEQUENCE
SRSASN_CODE band_combination_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1540_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, band_list_v1540, 1, 32));
  if (ca_params_nr_v1540_present) {
    HANDLE_CODE(ca_params_nr_v1540.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1540_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(band_list_v1540, bref, 1, 32));
  if (ca_params_nr_v1540_present) {
    HANDLE_CODE(ca_params_nr_v1540.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("bandList-v1540");
  for (const auto& e1 : band_list_v1540) {
    e1.to_json(j);
  }
  j.end_array();
  if (ca_params_nr_v1540_present) {
    j.write_fieldname("ca-ParametersNR-v1540");
    ca_params_nr_v1540.to_json(j);
  }
  j.end_obj();
}

// BandCombination-v1560 ::= SEQUENCE
SRSASN_CODE band_combination_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ne_dc_bc_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_present, 1));
  HANDLE_CODE(bref.pack(ca_params_eutra_v1560_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_v1560_present, 1));

  if (ca_params_nrdc_present) {
    HANDLE_CODE(ca_params_nrdc.pack(bref));
  }
  if (ca_params_eutra_v1560_present) {
    HANDLE_CODE(ca_params_eutra_v1560.pack(bref));
  }
  if (ca_params_nr_v1560_present) {
    HANDLE_CODE(ca_params_nr_v1560.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1560_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ne_dc_bc_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_eutra_v1560_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_v1560_present, 1));

  if (ca_params_nrdc_present) {
    HANDLE_CODE(ca_params_nrdc.unpack(bref));
  }
  if (ca_params_eutra_v1560_present) {
    HANDLE_CODE(ca_params_eutra_v1560.unpack(bref));
  }
  if (ca_params_nr_v1560_present) {
    HANDLE_CODE(ca_params_nr_v1560.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ne_dc_bc_present) {
    j.write_str("ne-DC-BC", "supported");
  }
  if (ca_params_nrdc_present) {
    j.write_fieldname("ca-ParametersNRDC");
    ca_params_nrdc.to_json(j);
  }
  if (ca_params_eutra_v1560_present) {
    j.write_fieldname("ca-ParametersEUTRA-v1560");
    ca_params_eutra_v1560.to_json(j);
  }
  if (ca_params_nr_v1560_present) {
    j.write_fieldname("ca-ParametersNR-v1560");
    ca_params_nr_v1560.to_json(j);
  }
  j.end_obj();
}

// BandCombination-v1570 ::= SEQUENCE
SRSASN_CODE band_combination_v1570_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(ca_params_eutra_v1570.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1570_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(ca_params_eutra_v1570.unpack(bref));

  return SRSASN_SUCCESS;
}
void band_combination_v1570_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ca-ParametersEUTRA-v1570");
  ca_params_eutra_v1570.to_json(j);
  j.end_obj();
}

// BandCombination-v1580 ::= SEQUENCE
SRSASN_CODE band_combination_v1580_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(mrdc_params_v1580.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1580_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(mrdc_params_v1580.unpack(bref));

  return SRSASN_SUCCESS;
}
void band_combination_v1580_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("mrdc-Parameters-v1580");
  mrdc_params_v1580.to_json(j);
  j.end_obj();
}

// BandCombination-v1590 ::= SEQUENCE
SRSASN_CODE band_combination_v1590_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_bw_combination_set_intra_endc_present, 1));

  if (supported_bw_combination_set_intra_endc_present) {
    HANDLE_CODE(supported_bw_combination_set_intra_endc.pack(bref));
  }
  HANDLE_CODE(mrdc_params_v1590.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1590_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_bw_combination_set_intra_endc_present, 1));

  if (supported_bw_combination_set_intra_endc_present) {
    HANDLE_CODE(supported_bw_combination_set_intra_endc.unpack(bref));
  }
  HANDLE_CODE(mrdc_params_v1590.unpack(bref));

  return SRSASN_SUCCESS;
}
void band_combination_v1590_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_bw_combination_set_intra_endc_present) {
    j.write_str("supportedBandwidthCombinationSetIntraENDC", supported_bw_combination_set_intra_endc.to_string());
  }
  j.write_fieldname("mrdc-Parameters-v1590");
  mrdc_params_v1590.to_json(j);
  j.end_obj();
}

// BandCombination-v1610 ::= SEQUENCE
SRSASN_CODE band_combination_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_list_v1610.size() > 0, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_v1610_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v1610_present, 1));
  HANDLE_CODE(bref.pack(pwr_class_v1610_present, 1));
  HANDLE_CODE(bref.pack(pwr_class_nr_part_r16_present, 1));
  HANDLE_CODE(bref.pack(feature_set_combination_daps_r16_present, 1));
  HANDLE_CODE(bref.pack(mrdc_params_v1620_present, 1));

  if (band_list_v1610.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, band_list_v1610, 1, 32));
  }
  if (ca_params_nr_v1610_present) {
    HANDLE_CODE(ca_params_nr_v1610.pack(bref));
  }
  if (ca_params_nrdc_v1610_present) {
    HANDLE_CODE(ca_params_nrdc_v1610.pack(bref));
  }
  if (pwr_class_nr_part_r16_present) {
    HANDLE_CODE(pwr_class_nr_part_r16.pack(bref));
  }
  if (feature_set_combination_daps_r16_present) {
    HANDLE_CODE(pack_integer(bref, feature_set_combination_daps_r16, (uint16_t)0u, (uint16_t)1024u));
  }
  if (mrdc_params_v1620_present) {
    HANDLE_CODE(mrdc_params_v1620.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1610_s::unpack(cbit_ref& bref)
{
  bool band_list_v1610_present;
  HANDLE_CODE(bref.unpack(band_list_v1610_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_v1610_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v1610_present, 1));
  HANDLE_CODE(bref.unpack(pwr_class_v1610_present, 1));
  HANDLE_CODE(bref.unpack(pwr_class_nr_part_r16_present, 1));
  HANDLE_CODE(bref.unpack(feature_set_combination_daps_r16_present, 1));
  HANDLE_CODE(bref.unpack(mrdc_params_v1620_present, 1));

  if (band_list_v1610_present) {
    HANDLE_CODE(unpack_dyn_seq_of(band_list_v1610, bref, 1, 32));
  }
  if (ca_params_nr_v1610_present) {
    HANDLE_CODE(ca_params_nr_v1610.unpack(bref));
  }
  if (ca_params_nrdc_v1610_present) {
    HANDLE_CODE(ca_params_nrdc_v1610.unpack(bref));
  }
  if (pwr_class_nr_part_r16_present) {
    HANDLE_CODE(pwr_class_nr_part_r16.unpack(bref));
  }
  if (feature_set_combination_daps_r16_present) {
    HANDLE_CODE(unpack_integer(feature_set_combination_daps_r16, bref, (uint16_t)0u, (uint16_t)1024u));
  }
  if (mrdc_params_v1620_present) {
    HANDLE_CODE(mrdc_params_v1620.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_list_v1610.size() > 0) {
    j.start_array("bandList-v1610");
    for (const auto& e1 : band_list_v1610) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ca_params_nr_v1610_present) {
    j.write_fieldname("ca-ParametersNR-v1610");
    ca_params_nr_v1610.to_json(j);
  }
  if (ca_params_nrdc_v1610_present) {
    j.write_fieldname("ca-ParametersNRDC-v1610");
    ca_params_nrdc_v1610.to_json(j);
  }
  if (pwr_class_v1610_present) {
    j.write_str("powerClass-v1610", "pc1dot5");
  }
  if (pwr_class_nr_part_r16_present) {
    j.write_str("powerClassNRPart-r16", pwr_class_nr_part_r16.to_string());
  }
  if (feature_set_combination_daps_r16_present) {
    j.write_int("featureSetCombinationDAPS-r16", feature_set_combination_daps_r16);
  }
  if (mrdc_params_v1620_present) {
    j.write_fieldname("mrdc-Parameters-v1620");
    mrdc_params_v1620.to_json(j);
  }
  j.end_obj();
}

const char* band_combination_v1610_s::pwr_class_nr_part_r16_opts::to_string() const
{
  static const char* names[] = {"pc1", "pc2", "pc3", "pc5"};
  return convert_enum_idx(names, 4, value, "band_combination_v1610_s::pwr_class_nr_part_r16_e_");
}
uint8_t band_combination_v1610_s::pwr_class_nr_part_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 5};
  return map_enum_number(numbers, 4, value, "band_combination_v1610_s::pwr_class_nr_part_r16_e_");
}

// ULTxSwitchingBandPair-r16 ::= SEQUENCE
SRSASN_CODE ul_tx_switching_band_pair_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_switching_dl_interruption_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, band_idx_ul1_r16, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(pack_integer(bref, band_idx_ul2_r16, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(ul_tx_switching_period_r16.pack(bref));
  if (ul_tx_switching_dl_interruption_r16_present) {
    HANDLE_CODE(ul_tx_switching_dl_interruption_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_switching_band_pair_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_tx_switching_dl_interruption_r16_present, 1));

  HANDLE_CODE(unpack_integer(band_idx_ul1_r16, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(unpack_integer(band_idx_ul2_r16, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(ul_tx_switching_period_r16.unpack(bref));
  if (ul_tx_switching_dl_interruption_r16_present) {
    HANDLE_CODE(ul_tx_switching_dl_interruption_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_tx_switching_band_pair_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandIndexUL1-r16", band_idx_ul1_r16);
  j.write_int("bandIndexUL2-r16", band_idx_ul2_r16);
  j.write_str("uplinkTxSwitchingPeriod-r16", ul_tx_switching_period_r16.to_string());
  if (ul_tx_switching_dl_interruption_r16_present) {
    j.write_str("uplinkTxSwitching-DL-Interruption-r16", ul_tx_switching_dl_interruption_r16.to_string());
  }
  j.end_obj();
}

const char* ul_tx_switching_band_pair_r16_s::ul_tx_switching_period_r16_opts::to_string() const
{
  static const char* names[] = {"n35us", "n140us", "n210us"};
  return convert_enum_idx(names, 3, value, "ul_tx_switching_band_pair_r16_s::ul_tx_switching_period_r16_e_");
}
uint8_t ul_tx_switching_band_pair_r16_s::ul_tx_switching_period_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {35, 140, 210};
  return map_enum_number(numbers, 3, value, "ul_tx_switching_band_pair_r16_s::ul_tx_switching_period_r16_e_");
}

// BandCombination-UplinkTxSwitch-r16 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(band_combination_v1540_present, 1));
  HANDLE_CODE(bref.pack(band_combination_v1560_present, 1));
  HANDLE_CODE(bref.pack(band_combination_v1570_present, 1));
  HANDLE_CODE(bref.pack(band_combination_v1580_present, 1));
  HANDLE_CODE(bref.pack(band_combination_v1590_present, 1));
  HANDLE_CODE(bref.pack(band_combination_v1610_present, 1));
  HANDLE_CODE(bref.pack(ul_tx_switching_option_support_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_tx_switching_pwr_boosting_r16_present, 1));

  HANDLE_CODE(band_combination_r16.pack(bref));
  if (band_combination_v1540_present) {
    HANDLE_CODE(band_combination_v1540.pack(bref));
  }
  if (band_combination_v1560_present) {
    HANDLE_CODE(band_combination_v1560.pack(bref));
  }
  if (band_combination_v1570_present) {
    HANDLE_CODE(band_combination_v1570.pack(bref));
  }
  if (band_combination_v1580_present) {
    HANDLE_CODE(band_combination_v1580.pack(bref));
  }
  if (band_combination_v1590_present) {
    HANDLE_CODE(band_combination_v1590.pack(bref));
  }
  if (band_combination_v1610_present) {
    HANDLE_CODE(band_combination_v1610.pack(bref));
  }
  HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_pair_list_nr_r16, 1, 32));
  if (ul_tx_switching_option_support_r16_present) {
    HANDLE_CODE(ul_tx_switching_option_support_r16.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ul_tx_switching_pusch_trans_coherence_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ul_tx_switching_pusch_trans_coherence_r16_present, 1));
      if (ul_tx_switching_pusch_trans_coherence_r16_present) {
        HANDLE_CODE(ul_tx_switching_pusch_trans_coherence_r16.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(band_combination_v1540_present, 1));
  HANDLE_CODE(bref.unpack(band_combination_v1560_present, 1));
  HANDLE_CODE(bref.unpack(band_combination_v1570_present, 1));
  HANDLE_CODE(bref.unpack(band_combination_v1580_present, 1));
  HANDLE_CODE(bref.unpack(band_combination_v1590_present, 1));
  HANDLE_CODE(bref.unpack(band_combination_v1610_present, 1));
  HANDLE_CODE(bref.unpack(ul_tx_switching_option_support_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_tx_switching_pwr_boosting_r16_present, 1));

  HANDLE_CODE(band_combination_r16.unpack(bref));
  if (band_combination_v1540_present) {
    HANDLE_CODE(band_combination_v1540.unpack(bref));
  }
  if (band_combination_v1560_present) {
    HANDLE_CODE(band_combination_v1560.unpack(bref));
  }
  if (band_combination_v1570_present) {
    HANDLE_CODE(band_combination_v1570.unpack(bref));
  }
  if (band_combination_v1580_present) {
    HANDLE_CODE(band_combination_v1580.unpack(bref));
  }
  if (band_combination_v1590_present) {
    HANDLE_CODE(band_combination_v1590.unpack(bref));
  }
  if (band_combination_v1610_present) {
    HANDLE_CODE(band_combination_v1610.unpack(bref));
  }
  HANDLE_CODE(unpack_dyn_seq_of(supported_band_pair_list_nr_r16, bref, 1, 32));
  if (ul_tx_switching_option_support_r16_present) {
    HANDLE_CODE(ul_tx_switching_option_support_r16.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ul_tx_switching_pusch_trans_coherence_r16_present, 1));
      if (ul_tx_switching_pusch_trans_coherence_r16_present) {
        HANDLE_CODE(ul_tx_switching_pusch_trans_coherence_r16.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("bandCombination-r16");
  band_combination_r16.to_json(j);
  if (band_combination_v1540_present) {
    j.write_fieldname("bandCombination-v1540");
    band_combination_v1540.to_json(j);
  }
  if (band_combination_v1560_present) {
    j.write_fieldname("bandCombination-v1560");
    band_combination_v1560.to_json(j);
  }
  if (band_combination_v1570_present) {
    j.write_fieldname("bandCombination-v1570");
    band_combination_v1570.to_json(j);
  }
  if (band_combination_v1580_present) {
    j.write_fieldname("bandCombination-v1580");
    band_combination_v1580.to_json(j);
  }
  if (band_combination_v1590_present) {
    j.write_fieldname("bandCombination-v1590");
    band_combination_v1590.to_json(j);
  }
  if (band_combination_v1610_present) {
    j.write_fieldname("bandCombination-v1610");
    band_combination_v1610.to_json(j);
  }
  j.start_array("supportedBandPairListNR-r16");
  for (const auto& e1 : supported_band_pair_list_nr_r16) {
    e1.to_json(j);
  }
  j.end_array();
  if (ul_tx_switching_option_support_r16_present) {
    j.write_str("uplinkTxSwitching-OptionSupport-r16", ul_tx_switching_option_support_r16.to_string());
  }
  if (ul_tx_switching_pwr_boosting_r16_present) {
    j.write_str("uplinkTxSwitching-PowerBoosting-r16", "supported");
  }
  if (ext) {
    if (ul_tx_switching_pusch_trans_coherence_r16_present) {
      j.write_str("uplinkTxSwitching-PUSCH-TransCoherence-r16", ul_tx_switching_pusch_trans_coherence_r16.to_string());
    }
  }
  j.end_obj();
}

const char* band_combination_ul_tx_switch_r16_s::ul_tx_switching_option_support_r16_opts::to_string() const
{
  static const char* names[] = {"switchedUL", "dualUL", "both"};
  return convert_enum_idx(
      names, 3, value, "band_combination_ul_tx_switch_r16_s::ul_tx_switching_option_support_r16_e_");
}

const char* band_combination_ul_tx_switch_r16_s::ul_tx_switching_pusch_trans_coherence_r16_opts::to_string() const
{
  static const char* names[] = {"nonCoherent", "fullCoherent"};
  return convert_enum_idx(
      names, 2, value, "band_combination_ul_tx_switch_r16_s::ul_tx_switching_pusch_trans_coherence_r16_e_");
}

// SimulSRS-ForAntennaSwitching-r16 ::= SEQUENCE
SRSASN_CODE simul_srs_for_ant_switching_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(support_srs_x_ty_r_x_less_than_y_r16_present, 1));
  HANDLE_CODE(bref.pack(support_srs_x_ty_r_x_equal_to_y_r16_present, 1));
  HANDLE_CODE(bref.pack(support_srs_ant_switching_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE simul_srs_for_ant_switching_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(support_srs_x_ty_r_x_less_than_y_r16_present, 1));
  HANDLE_CODE(bref.unpack(support_srs_x_ty_r_x_equal_to_y_r16_present, 1));
  HANDLE_CODE(bref.unpack(support_srs_ant_switching_r16_present, 1));

  return SRSASN_SUCCESS;
}
void simul_srs_for_ant_switching_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (support_srs_x_ty_r_x_less_than_y_r16_present) {
    j.write_str("supportSRS-xTyR-xLessThanY-r16", "supported");
  }
  if (support_srs_x_ty_r_x_equal_to_y_r16_present) {
    j.write_str("supportSRS-xTyR-xEqualToY-r16", "supported");
  }
  if (support_srs_ant_switching_r16_present) {
    j.write_str("supportSRS-AntennaSwitching-r16", "supported");
  }
  j.end_obj();
}

// CA-ParametersNR-v1630 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1630_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(simul_tx_srs_ant_switching_inter_band_ul_ca_r16_present, 1));
  HANDLE_CODE(bref.pack(beam_management_type_r16_present, 1));
  HANDLE_CODE(bref.pack(intra_band_freq_separation_ul_agg_bw_gap_bw_r16_present, 1));
  HANDLE_CODE(bref.pack(inter_ca_non_aligned_frame_b_r16_present, 1));

  if (simul_tx_srs_ant_switching_inter_band_ul_ca_r16_present) {
    HANDLE_CODE(simul_tx_srs_ant_switching_inter_band_ul_ca_r16.pack(bref));
  }
  if (beam_management_type_r16_present) {
    HANDLE_CODE(beam_management_type_r16.pack(bref));
  }
  if (intra_band_freq_separation_ul_agg_bw_gap_bw_r16_present) {
    HANDLE_CODE(intra_band_freq_separation_ul_agg_bw_gap_bw_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1630_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(simul_tx_srs_ant_switching_inter_band_ul_ca_r16_present, 1));
  HANDLE_CODE(bref.unpack(beam_management_type_r16_present, 1));
  HANDLE_CODE(bref.unpack(intra_band_freq_separation_ul_agg_bw_gap_bw_r16_present, 1));
  HANDLE_CODE(bref.unpack(inter_ca_non_aligned_frame_b_r16_present, 1));

  if (simul_tx_srs_ant_switching_inter_band_ul_ca_r16_present) {
    HANDLE_CODE(simul_tx_srs_ant_switching_inter_band_ul_ca_r16.unpack(bref));
  }
  if (beam_management_type_r16_present) {
    HANDLE_CODE(beam_management_type_r16.unpack(bref));
  }
  if (intra_band_freq_separation_ul_agg_bw_gap_bw_r16_present) {
    HANDLE_CODE(intra_band_freq_separation_ul_agg_bw_gap_bw_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1630_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (simul_tx_srs_ant_switching_inter_band_ul_ca_r16_present) {
    j.write_fieldname("simulTX-SRS-AntSwitchingInterBandUL-CA-r16");
    simul_tx_srs_ant_switching_inter_band_ul_ca_r16.to_json(j);
  }
  if (beam_management_type_r16_present) {
    j.write_str("beamManagementType-r16", beam_management_type_r16.to_string());
  }
  if (intra_band_freq_separation_ul_agg_bw_gap_bw_r16_present) {
    j.write_str("intraBandFreqSeparationUL-AggBW-GapBW-r16",
                intra_band_freq_separation_ul_agg_bw_gap_bw_r16.to_string());
  }
  if (inter_ca_non_aligned_frame_b_r16_present) {
    j.write_str("interCA-NonAlignedFrame-B-r16", "supported");
  }
  j.end_obj();
}

const char* ca_params_nr_v1630_s::beam_management_type_r16_opts::to_string() const
{
  static const char* names[] = {"ibm", "dummy"};
  return convert_enum_idx(names, 2, value, "ca_params_nr_v1630_s::beam_management_type_r16_e_");
}

const char* ca_params_nr_v1630_s::intra_band_freq_separation_ul_agg_bw_gap_bw_r16_opts::to_string() const
{
  static const char* names[] = {"classI", "classII", "classIII"};
  return convert_enum_idx(names, 3, value, "ca_params_nr_v1630_s::intra_band_freq_separation_ul_agg_bw_gap_bw_r16_e_");
}

// CA-ParametersNRDC-v1630 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v1630_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1610_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1630_present, 1));

  if (ca_params_nr_for_dc_v1610_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1610.pack(bref));
  }
  if (ca_params_nr_for_dc_v1630_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1630.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v1630_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1610_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1630_present, 1));

  if (ca_params_nr_for_dc_v1610_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1610.unpack(bref));
  }
  if (ca_params_nr_for_dc_v1630_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1630.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v1630_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_for_dc_v1610_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1610");
    ca_params_nr_for_dc_v1610.to_json(j);
  }
  if (ca_params_nr_for_dc_v1630_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1630");
    ca_params_nr_for_dc_v1630.to_json(j);
  }
  j.end_obj();
}

// MRDC-Parameters-v1630 ::= SEQUENCE
SRSASN_CODE mrdc_params_v1630_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_present, 1));
  HANDLE_CODE(bref.pack(inter_band_mrdc_with_overlap_dl_bands_r16_present, 1));

  if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_present) {
    HANDLE_CODE(
        bref.pack(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16_present, 1));
    HANDLE_CODE(
        bref.pack(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16_present, 1));
    if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16.pack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_params_v1630_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_present, 1));
  HANDLE_CODE(bref.unpack(inter_band_mrdc_with_overlap_dl_bands_r16_present, 1));

  if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_present) {
    HANDLE_CODE(
        bref.unpack(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16_present, 1));
    HANDLE_CODE(
        bref.unpack(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16_present, 1));
    if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16.unpack(bref));
    }
    if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16_present) {
      HANDLE_CODE(max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void mrdc_params_v1630_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_present) {
    j.write_fieldname("maxUplinkDutyCycle-interBandENDC-FDD-TDD-PC2-r16");
    j.start_obj();
    if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16_present) {
      j.write_str("maxUplinkDutyCycle-FDD-TDD-EN-DC1-r16",
                  max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc1_r16.to_string());
    }
    if (max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16_present) {
      j.write_str("maxUplinkDutyCycle-FDD-TDD-EN-DC2-r16",
                  max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16.max_ul_duty_cycle_fdd_tdd_en_dc2_r16.to_string());
    }
    j.end_obj();
  }
  if (inter_band_mrdc_with_overlap_dl_bands_r16_present) {
    j.write_str("interBandMRDC-WithOverlapDL-Bands-r16", "supported");
  }
  j.end_obj();
}

const char* mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::
    max_ul_duty_cycle_fdd_tdd_en_dc1_r16_opts::to_string() const
{
  static const char* names[] = {"n30", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(names,
                          8,
                          value,
                          "mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::max_ul_duty_"
                          "cycle_fdd_tdd_en_dc1_r16_e_");
}
uint8_t mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::
    max_ul_duty_cycle_fdd_tdd_en_dc1_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {30, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(numbers,
                         8,
                         value,
                         "mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::max_ul_duty_cycle_"
                         "fdd_tdd_en_dc1_r16_e_");
}

const char* mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::
    max_ul_duty_cycle_fdd_tdd_en_dc2_r16_opts::to_string() const
{
  static const char* names[] = {"n30", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(names,
                          8,
                          value,
                          "mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::max_ul_duty_"
                          "cycle_fdd_tdd_en_dc2_r16_e_");
}
uint8_t mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::
    max_ul_duty_cycle_fdd_tdd_en_dc2_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {30, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(numbers,
                         8,
                         value,
                         "mrdc_params_v1630_s::max_ul_duty_cycle_inter_band_endc_fdd_tdd_pc2_r16_s_::max_ul_duty_cycle_"
                         "fdd_tdd_en_dc2_r16_e_");
}

// ScalingFactorSidelink-r16 ::= ENUMERATED
const char* scaling_factor_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"f0p4", "f0p75", "f0p8", "f1"};
  return convert_enum_idx(names, 4, value, "scaling_factor_sidelink_r16_e");
}

// BandCombination-v1630 ::= SEQUENCE
SRSASN_CODE band_combination_v1630_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1630_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v1630_present, 1));
  HANDLE_CODE(bref.pack(mrdc_params_v1630_present, 1));
  HANDLE_CODE(bref.pack(supported_tx_band_comb_list_per_bc_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(supported_rx_band_comb_list_per_bc_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(scaling_factor_tx_sidelink_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(scaling_factor_rx_sidelink_r16.size() > 0, 1));

  if (ca_params_nr_v1630_present) {
    HANDLE_CODE(ca_params_nr_v1630.pack(bref));
  }
  if (ca_params_nrdc_v1630_present) {
    HANDLE_CODE(ca_params_nrdc_v1630.pack(bref));
  }
  if (mrdc_params_v1630_present) {
    HANDLE_CODE(mrdc_params_v1630.pack(bref));
  }
  if (supported_tx_band_comb_list_per_bc_sidelink_r16_present) {
    HANDLE_CODE(supported_tx_band_comb_list_per_bc_sidelink_r16.pack(bref));
  }
  if (supported_rx_band_comb_list_per_bc_sidelink_r16_present) {
    HANDLE_CODE(supported_rx_band_comb_list_per_bc_sidelink_r16.pack(bref));
  }
  if (scaling_factor_tx_sidelink_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, scaling_factor_tx_sidelink_r16, 1, 65536));
  }
  if (scaling_factor_rx_sidelink_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, scaling_factor_rx_sidelink_r16, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1630_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1630_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v1630_present, 1));
  HANDLE_CODE(bref.unpack(mrdc_params_v1630_present, 1));
  HANDLE_CODE(bref.unpack(supported_tx_band_comb_list_per_bc_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(supported_rx_band_comb_list_per_bc_sidelink_r16_present, 1));
  bool scaling_factor_tx_sidelink_r16_present;
  HANDLE_CODE(bref.unpack(scaling_factor_tx_sidelink_r16_present, 1));
  bool scaling_factor_rx_sidelink_r16_present;
  HANDLE_CODE(bref.unpack(scaling_factor_rx_sidelink_r16_present, 1));

  if (ca_params_nr_v1630_present) {
    HANDLE_CODE(ca_params_nr_v1630.unpack(bref));
  }
  if (ca_params_nrdc_v1630_present) {
    HANDLE_CODE(ca_params_nrdc_v1630.unpack(bref));
  }
  if (mrdc_params_v1630_present) {
    HANDLE_CODE(mrdc_params_v1630.unpack(bref));
  }
  if (supported_tx_band_comb_list_per_bc_sidelink_r16_present) {
    HANDLE_CODE(supported_tx_band_comb_list_per_bc_sidelink_r16.unpack(bref));
  }
  if (supported_rx_band_comb_list_per_bc_sidelink_r16_present) {
    HANDLE_CODE(supported_rx_band_comb_list_per_bc_sidelink_r16.unpack(bref));
  }
  if (scaling_factor_tx_sidelink_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(scaling_factor_tx_sidelink_r16, bref, 1, 65536));
  }
  if (scaling_factor_rx_sidelink_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(scaling_factor_rx_sidelink_r16, bref, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1630_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v1630_present) {
    j.write_fieldname("ca-ParametersNR-v1630");
    ca_params_nr_v1630.to_json(j);
  }
  if (ca_params_nrdc_v1630_present) {
    j.write_fieldname("ca-ParametersNRDC-v1630");
    ca_params_nrdc_v1630.to_json(j);
  }
  if (mrdc_params_v1630_present) {
    j.write_fieldname("mrdc-Parameters-v1630");
    mrdc_params_v1630.to_json(j);
  }
  if (supported_tx_band_comb_list_per_bc_sidelink_r16_present) {
    j.write_str("supportedTxBandCombListPerBC-Sidelink-r16",
                supported_tx_band_comb_list_per_bc_sidelink_r16.to_string());
  }
  if (supported_rx_band_comb_list_per_bc_sidelink_r16_present) {
    j.write_str("supportedRxBandCombListPerBC-Sidelink-r16",
                supported_rx_band_comb_list_per_bc_sidelink_r16.to_string());
  }
  if (scaling_factor_tx_sidelink_r16.size() > 0) {
    j.start_array("scalingFactorTxSidelink-r16");
    for (const auto& e1 : scaling_factor_tx_sidelink_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  if (scaling_factor_rx_sidelink_r16.size() > 0) {
    j.start_array("scalingFactorRxSidelink-r16");
    for (const auto& e1 : scaling_factor_rx_sidelink_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1630 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1630_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1630_present, 1));

  if (band_combination_v1630_present) {
    HANDLE_CODE(band_combination_v1630.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1630_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1630_present, 1));

  if (band_combination_v1630_present) {
    HANDLE_CODE(band_combination_v1630.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1630_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1630_present) {
    j.write_fieldname("bandCombination-v1630");
    band_combination_v1630.to_json(j);
  }
  j.end_obj();
}

// PUCCH-Grp-CarrierTypes-r16 ::= SEQUENCE
SRSASN_CODE pucch_grp_carrier_types_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fr1_non_shared_tdd_r16_present, 1));
  HANDLE_CODE(bref.pack(fr1_shared_tdd_r16_present, 1));
  HANDLE_CODE(bref.pack(fr1_non_shared_fdd_r16_present, 1));
  HANDLE_CODE(bref.pack(fr2_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pucch_grp_carrier_types_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fr1_non_shared_tdd_r16_present, 1));
  HANDLE_CODE(bref.unpack(fr1_shared_tdd_r16_present, 1));
  HANDLE_CODE(bref.unpack(fr1_non_shared_fdd_r16_present, 1));
  HANDLE_CODE(bref.unpack(fr2_r16_present, 1));

  return SRSASN_SUCCESS;
}
void pucch_grp_carrier_types_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fr1_non_shared_tdd_r16_present) {
    j.write_str("fr1-NonSharedTDD-r16", "supported");
  }
  if (fr1_shared_tdd_r16_present) {
    j.write_str("fr1-SharedTDD-r16", "supported");
  }
  if (fr1_non_shared_fdd_r16_present) {
    j.write_str("fr1-NonSharedFDD-r16", "supported");
  }
  if (fr2_r16_present) {
    j.write_str("fr2-r16", "supported");
  }
  j.end_obj();
}

// TwoPUCCH-Grp-ConfigParams-r16 ::= SEQUENCE
SRSASN_CODE two_pucch_grp_cfg_params_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pucch_group_map_r16.pack(bref));
  HANDLE_CODE(pucch_tx_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE two_pucch_grp_cfg_params_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(pucch_group_map_r16.unpack(bref));
  HANDLE_CODE(pucch_tx_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void two_pucch_grp_cfg_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("pucch-GroupMapping-r16");
  pucch_group_map_r16.to_json(j);
  j.write_fieldname("pucch-TX-r16");
  pucch_tx_r16.to_json(j);
  j.end_obj();
}

// TwoPUCCH-Grp-Configurations-r16 ::= SEQUENCE
SRSASN_CODE two_pucch_grp_cfgs_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pucch_primary_group_map_r16.pack(bref));
  HANDLE_CODE(pucch_secondary_group_map_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE two_pucch_grp_cfgs_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(pucch_primary_group_map_r16.unpack(bref));
  HANDLE_CODE(pucch_secondary_group_map_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void two_pucch_grp_cfgs_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("pucch-PrimaryGroupMapping-r16");
  pucch_primary_group_map_r16.to_json(j);
  j.write_fieldname("pucch-SecondaryGroupMapping-r16");
  pucch_secondary_group_map_r16.to_json(j);
  j.end_obj();
}

// CA-ParametersNR-v1640 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_dc_two_carrier_report_r16_present, 1));
  HANDLE_CODE(bref.pack(max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16_present, 1));
  HANDLE_CODE(bref.pack(max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_grp_cfgs_list_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(diff_numerology_across_pucch_group_carrier_types_r16_present, 1));
  HANDLE_CODE(bref.pack(diff_numerology_within_pucch_group_smaller_scs_carrier_types_r16_present, 1));
  HANDLE_CODE(bref.pack(diff_numerology_within_pucch_group_larger_scs_carrier_types_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_monitoring_ca_non_aligned_span_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_mixed_non_aligned_span_r16_present, 1));

  if (max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16_present) {
    HANDLE_CODE(max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16.pack(bref));
  }
  if (max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16_present) {
    HANDLE_CODE(max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16.pack(bref));
  }
  if (two_pucch_grp_cfgs_list_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, two_pucch_grp_cfgs_list_r16, 1, 32));
  }
  if (pdcch_monitoring_ca_non_aligned_span_r16_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_monitoring_ca_non_aligned_span_r16, (uint8_t)2u, (uint8_t)16u));
  }
  if (pdcch_blind_detection_ca_mixed_non_aligned_span_r16_present) {
    HANDLE_CODE(pack_integer(bref,
                             pdcch_blind_detection_ca_mixed_non_aligned_span_r16.pdcch_blind_detection_ca1_r16,
                             (uint8_t)1u,
                             (uint8_t)15u));
    HANDLE_CODE(pack_integer(bref,
                             pdcch_blind_detection_ca_mixed_non_aligned_span_r16.pdcch_blind_detection_ca2_r16,
                             (uint8_t)1u,
                             (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_tx_dc_two_carrier_report_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16_present, 1));
  bool two_pucch_grp_cfgs_list_r16_present;
  HANDLE_CODE(bref.unpack(two_pucch_grp_cfgs_list_r16_present, 1));
  HANDLE_CODE(bref.unpack(diff_numerology_across_pucch_group_carrier_types_r16_present, 1));
  HANDLE_CODE(bref.unpack(diff_numerology_within_pucch_group_smaller_scs_carrier_types_r16_present, 1));
  HANDLE_CODE(bref.unpack(diff_numerology_within_pucch_group_larger_scs_carrier_types_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_monitoring_ca_non_aligned_span_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca_mixed_non_aligned_span_r16_present, 1));

  if (max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16_present) {
    HANDLE_CODE(max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16.unpack(bref));
  }
  if (max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16_present) {
    HANDLE_CODE(max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16.unpack(bref));
  }
  if (two_pucch_grp_cfgs_list_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(two_pucch_grp_cfgs_list_r16, bref, 1, 32));
  }
  if (pdcch_monitoring_ca_non_aligned_span_r16_present) {
    HANDLE_CODE(unpack_integer(pdcch_monitoring_ca_non_aligned_span_r16, bref, (uint8_t)2u, (uint8_t)16u));
  }
  if (pdcch_blind_detection_ca_mixed_non_aligned_span_r16_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca_mixed_non_aligned_span_r16.pdcch_blind_detection_ca1_r16,
                               bref,
                               (uint8_t)1u,
                               (uint8_t)15u));
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca_mixed_non_aligned_span_r16.pdcch_blind_detection_ca2_r16,
                               bref,
                               (uint8_t)1u,
                               (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_tx_dc_two_carrier_report_r16_present) {
    j.write_str("uplinkTxDC-TwoCarrierReport-r16", "supported");
  }
  if (max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16_present) {
    j.write_fieldname("maxUpTo3Diff-NumerologiesConfigSinglePUCCH-grp-r16");
    max_up_to3_diff_numerologies_cfg_single_pucch_grp_r16.to_json(j);
  }
  if (max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16_present) {
    j.write_fieldname("maxUpTo4Diff-NumerologiesConfigSinglePUCCH-grp-r16");
    max_up_to4_diff_numerologies_cfg_single_pucch_grp_r16.to_json(j);
  }
  if (two_pucch_grp_cfgs_list_r16.size() > 0) {
    j.start_array("twoPUCCH-Grp-ConfigurationsList-r16");
    for (const auto& e1 : two_pucch_grp_cfgs_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (diff_numerology_across_pucch_group_carrier_types_r16_present) {
    j.write_str("diffNumerologyAcrossPUCCH-Group-CarrierTypes-r16", "supported");
  }
  if (diff_numerology_within_pucch_group_smaller_scs_carrier_types_r16_present) {
    j.write_str("diffNumerologyWithinPUCCH-GroupSmallerSCS-CarrierTypes-r16", "supported");
  }
  if (diff_numerology_within_pucch_group_larger_scs_carrier_types_r16_present) {
    j.write_str("diffNumerologyWithinPUCCH-GroupLargerSCS-CarrierTypes-r16", "supported");
  }
  if (pdcch_monitoring_ca_non_aligned_span_r16_present) {
    j.write_int("pdcch-MonitoringCA-NonAlignedSpan-r16", pdcch_monitoring_ca_non_aligned_span_r16);
  }
  if (pdcch_blind_detection_ca_mixed_non_aligned_span_r16_present) {
    j.write_fieldname("pdcch-BlindDetectionCA-Mixed-NonAlignedSpan-r16");
    j.start_obj();
    j.write_int("pdcch-BlindDetectionCA1-r16",
                pdcch_blind_detection_ca_mixed_non_aligned_span_r16.pdcch_blind_detection_ca1_r16);
    j.write_int("pdcch-BlindDetectionCA2-r16",
                pdcch_blind_detection_ca_mixed_non_aligned_span_r16.pdcch_blind_detection_ca2_r16);
    j.end_obj();
  }
  j.end_obj();
}

// CA-ParametersNRDC-v1640 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1640_present, 1));

  if (ca_params_nr_for_dc_v1640_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1640.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1640_present, 1));

  if (ca_params_nr_for_dc_v1640_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1640.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_for_dc_v1640_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1640");
    ca_params_nr_for_dc_v1640.to_json(j);
  }
  j.end_obj();
}

// BandCombination-v1640 ::= SEQUENCE
SRSASN_CODE band_combination_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1640_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v1640_present, 1));

  if (ca_params_nr_v1640_present) {
    HANDLE_CODE(ca_params_nr_v1640.pack(bref));
  }
  if (ca_params_nrdc_v1640_present) {
    HANDLE_CODE(ca_params_nrdc_v1640.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1640_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v1640_present, 1));

  if (ca_params_nr_v1640_present) {
    HANDLE_CODE(ca_params_nr_v1640.unpack(bref));
  }
  if (ca_params_nrdc_v1640_present) {
    HANDLE_CODE(ca_params_nrdc_v1640.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v1640_present) {
    j.write_fieldname("ca-ParametersNR-v1640");
    ca_params_nr_v1640.to_json(j);
  }
  if (ca_params_nrdc_v1640_present) {
    j.write_fieldname("ca-ParametersNRDC-v1640");
    ca_params_nrdc_v1640.to_json(j);
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1640 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1640_present, 1));

  if (band_combination_v1640_present) {
    HANDLE_CODE(band_combination_v1640.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1640_present, 1));

  if (band_combination_v1640_present) {
    HANDLE_CODE(band_combination_v1640.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1640_present) {
    j.write_fieldname("bandCombination-v1640");
    band_combination_v1640.to_json(j);
  }
  j.end_obj();
}

// CA-ParametersNRDC-v1650 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v1650_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_cell_grouping_r16_present, 1));

  if (supported_cell_grouping_r16_present) {
    HANDLE_CODE(supported_cell_grouping_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v1650_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_cell_grouping_r16_present, 1));

  if (supported_cell_grouping_r16_present) {
    HANDLE_CODE(supported_cell_grouping_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v1650_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_cell_grouping_r16_present) {
    j.write_str("supportedCellGrouping-r16", supported_cell_grouping_r16.to_string());
  }
  j.end_obj();
}

// BandCombination-v1650 ::= SEQUENCE
SRSASN_CODE band_combination_v1650_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nrdc_v1650_present, 1));

  if (ca_params_nrdc_v1650_present) {
    HANDLE_CODE(ca_params_nrdc_v1650.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1650_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v1650_present, 1));

  if (ca_params_nrdc_v1650_present) {
    HANDLE_CODE(ca_params_nrdc_v1650.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1650_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nrdc_v1650_present) {
    j.write_fieldname("ca-ParametersNRDC-v1650");
    ca_params_nrdc_v1650.to_json(j);
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1650 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1650_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1650_present, 1));

  if (band_combination_v1650_present) {
    HANDLE_CODE(band_combination_v1650.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1650_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1650_present, 1));

  if (band_combination_v1650_present) {
    HANDLE_CODE(band_combination_v1650.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1650_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1650_present) {
    j.write_fieldname("bandCombination-v1650");
    band_combination_v1650.to_json(j);
  }
  j.end_obj();
}

// CA-ParametersNR-v15g0 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(simul_rx_tx_inter_band_ca_per_band_pair_present, 1));
  HANDLE_CODE(bref.pack(simul_rx_tx_sul_per_band_pair_present, 1));

  if (simul_rx_tx_inter_band_ca_per_band_pair_present) {
    HANDLE_CODE(simul_rx_tx_inter_band_ca_per_band_pair.pack(bref));
  }
  if (simul_rx_tx_sul_per_band_pair_present) {
    HANDLE_CODE(simul_rx_tx_sul_per_band_pair.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v15g0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(simul_rx_tx_inter_band_ca_per_band_pair_present, 1));
  HANDLE_CODE(bref.unpack(simul_rx_tx_sul_per_band_pair_present, 1));

  if (simul_rx_tx_inter_band_ca_per_band_pair_present) {
    HANDLE_CODE(simul_rx_tx_inter_band_ca_per_band_pair.unpack(bref));
  }
  if (simul_rx_tx_sul_per_band_pair_present) {
    HANDLE_CODE(simul_rx_tx_sul_per_band_pair.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (simul_rx_tx_inter_band_ca_per_band_pair_present) {
    j.write_str("simultaneousRxTxInterBandCAPerBandPair", simul_rx_tx_inter_band_ca_per_band_pair.to_string());
  }
  if (simul_rx_tx_sul_per_band_pair_present) {
    j.write_str("simultaneousRxTxSULPerBandPair", simul_rx_tx_sul_per_band_pair.to_string());
  }
  j.end_obj();
}

// CA-ParametersNRDC-v15g0 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v15g0_present, 1));

  if (ca_params_nr_for_dc_v15g0_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v15g0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v15g0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v15g0_present, 1));

  if (ca_params_nr_for_dc_v15g0_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v15g0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_for_dc_v15g0_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v15g0");
    ca_params_nr_for_dc_v15g0.to_json(j);
  }
  j.end_obj();
}

// MRDC-Parameters-v15g0 ::= SEQUENCE
SRSASN_CODE mrdc_params_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(simul_rx_tx_inter_band_end_cp_er_band_pair_present, 1));

  if (simul_rx_tx_inter_band_end_cp_er_band_pair_present) {
    HANDLE_CODE(simul_rx_tx_inter_band_end_cp_er_band_pair.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_params_v15g0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(simul_rx_tx_inter_band_end_cp_er_band_pair_present, 1));

  if (simul_rx_tx_inter_band_end_cp_er_band_pair_present) {
    HANDLE_CODE(simul_rx_tx_inter_band_end_cp_er_band_pair.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mrdc_params_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (simul_rx_tx_inter_band_end_cp_er_band_pair_present) {
    j.write_str("simultaneousRxTxInterBandENDCPerBandPair", simul_rx_tx_inter_band_end_cp_er_band_pair.to_string());
  }
  j.end_obj();
}

// BandCombination-v15g0 ::= SEQUENCE
SRSASN_CODE band_combination_v15g0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v15g0_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v15g0_present, 1));
  HANDLE_CODE(bref.pack(mrdc_params_v15g0_present, 1));

  if (ca_params_nr_v15g0_present) {
    HANDLE_CODE(ca_params_nr_v15g0.pack(bref));
  }
  if (ca_params_nrdc_v15g0_present) {
    HANDLE_CODE(ca_params_nrdc_v15g0.pack(bref));
  }
  if (mrdc_params_v15g0_present) {
    HANDLE_CODE(mrdc_params_v15g0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v15g0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v15g0_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v15g0_present, 1));
  HANDLE_CODE(bref.unpack(mrdc_params_v15g0_present, 1));

  if (ca_params_nr_v15g0_present) {
    HANDLE_CODE(ca_params_nr_v15g0.unpack(bref));
  }
  if (ca_params_nrdc_v15g0_present) {
    HANDLE_CODE(ca_params_nrdc_v15g0.unpack(bref));
  }
  if (mrdc_params_v15g0_present) {
    HANDLE_CODE(mrdc_params_v15g0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v15g0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v15g0_present) {
    j.write_fieldname("ca-ParametersNR-v15g0");
    ca_params_nr_v15g0.to_json(j);
  }
  if (ca_params_nrdc_v15g0_present) {
    j.write_fieldname("ca-ParametersNRDC-v15g0");
    ca_params_nrdc_v15g0.to_json(j);
  }
  if (mrdc_params_v15g0_present) {
    j.write_fieldname("mrdc-Parameters-v15g0");
    mrdc_params_v15g0.to_json(j);
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1670 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1670_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v15g0_present, 1));

  if (band_combination_v15g0_present) {
    HANDLE_CODE(band_combination_v15g0.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1670_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v15g0_present, 1));

  if (band_combination_v15g0_present) {
    HANDLE_CODE(band_combination_v15g0.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1670_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v15g0_present) {
    j.write_fieldname("bandCombination-v15g0");
    band_combination_v15g0.to_json(j);
  }
  j.end_obj();
}

// CarrierTypePair-r16 ::= SEQUENCE
SRSASN_CODE carrier_type_pair_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(carrier_for_csi_meas_r16.pack(bref));
  HANDLE_CODE(carrier_for_csi_report_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE carrier_type_pair_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(carrier_for_csi_meas_r16.unpack(bref));
  HANDLE_CODE(carrier_for_csi_report_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void carrier_type_pair_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("carrierForCSI-Measurement-r16");
  carrier_for_csi_meas_r16.to_json(j);
  j.write_fieldname("carrierForCSI-Reporting-r16");
  carrier_for_csi_report_r16.to_json(j);
  j.end_obj();
}

// CA-ParametersNR-v1690 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1690_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16_present, 1));

  if (csi_report_cross_pucch_grp_r16_present) {
    HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16.add_symbols_r16_present, 1));
    HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16.sp_csi_report_on_pucch_r16_present, 1));
    HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16.sp_csi_report_on_pusch_r16_present, 1));
    HANDLE_CODE(csi_report_cross_pucch_grp_r16.computation_time_for_a_csi_r16.pack(bref));
    if (csi_report_cross_pucch_grp_r16.add_symbols_r16_present) {
      HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16_present, 1));
      HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16_present, 1));
      HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16_present, 1));
      HANDLE_CODE(bref.pack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16_present, 1));
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16.pack(bref));
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16.pack(bref));
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16.pack(bref));
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16.pack(bref));
      }
    }
    HANDLE_CODE(pack_dyn_seq_of(bref, csi_report_cross_pucch_grp_r16.carrier_type_pair_list_r16, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1690_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16_present, 1));

  if (csi_report_cross_pucch_grp_r16_present) {
    HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16.add_symbols_r16_present, 1));
    HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16.sp_csi_report_on_pucch_r16_present, 1));
    HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16.sp_csi_report_on_pusch_r16_present, 1));
    HANDLE_CODE(csi_report_cross_pucch_grp_r16.computation_time_for_a_csi_r16.unpack(bref));
    if (csi_report_cross_pucch_grp_r16.add_symbols_r16_present) {
      HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16_present, 1));
      HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16_present, 1));
      HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16_present, 1));
      HANDLE_CODE(bref.unpack(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16_present, 1));
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16.unpack(bref));
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16.unpack(bref));
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16.unpack(bref));
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16_present) {
        HANDLE_CODE(csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16.unpack(bref));
      }
    }
    HANDLE_CODE(unpack_dyn_seq_of(csi_report_cross_pucch_grp_r16.carrier_type_pair_list_r16, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1690_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (csi_report_cross_pucch_grp_r16_present) {
    j.write_fieldname("csi-ReportingCrossPUCCH-Grp-r16");
    j.start_obj();
    j.write_str("computationTimeForA-CSI-r16",
                csi_report_cross_pucch_grp_r16.computation_time_for_a_csi_r16.to_string());
    if (csi_report_cross_pucch_grp_r16.add_symbols_r16_present) {
      j.write_fieldname("additionalSymbols-r16");
      j.start_obj();
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16_present) {
        j.write_str("scs-15kHz-additionalSymbols-r16",
                    csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_15k_hz_add_symbols_r16.to_string());
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16_present) {
        j.write_str("scs-30kHz-additionalSymbols-r16",
                    csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_30k_hz_add_symbols_r16.to_string());
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16_present) {
        j.write_str("scs-60kHz-additionalSymbols-r16",
                    csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_60k_hz_add_symbols_r16.to_string());
      }
      if (csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16_present) {
        j.write_str("scs-120kHz-additionalSymbols-r16",
                    csi_report_cross_pucch_grp_r16.add_symbols_r16.scs_120k_hz_add_symbols_r16.to_string());
      }
      j.end_obj();
    }
    if (csi_report_cross_pucch_grp_r16.sp_csi_report_on_pucch_r16_present) {
      j.write_str("sp-CSI-ReportingOnPUCCH-r16", "supported");
    }
    if (csi_report_cross_pucch_grp_r16.sp_csi_report_on_pusch_r16_present) {
      j.write_str("sp-CSI-ReportingOnPUSCH-r16", "supported");
    }
    j.start_array("carrierTypePairList-r16");
    for (const auto& e1 : csi_report_cross_pucch_grp_r16.carrier_type_pair_list_r16) {
      e1.to_json(j);
    }
    j.end_array();
    j.end_obj();
  }
  j.end_obj();
}

const char*
ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::computation_time_for_a_csi_r16_opts::to_string() const
{
  static const char* names[] = {"sameAsNoCross", "relaxed"};
  return convert_enum_idx(
      names, 2, value, "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::computation_time_for_a_csi_r16_e_");
}

const char* ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::
    scs_15k_hz_add_symbols_r16_opts::to_string() const
{
  static const char* names[] = {"s14", "s28"};
  return convert_enum_idx(
      names,
      2,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_15k_hz_add_symbols_r16_e_");
}
uint8_t ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_15k_hz_add_symbols_r16_opts::
    to_number() const
{
  static const uint8_t numbers[] = {14, 28};
  return map_enum_number(
      numbers,
      2,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_15k_hz_add_symbols_r16_e_");
}

const char* ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::
    scs_30k_hz_add_symbols_r16_opts::to_string() const
{
  static const char* names[] = {"s14", "s28"};
  return convert_enum_idx(
      names,
      2,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_30k_hz_add_symbols_r16_e_");
}
uint8_t ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_30k_hz_add_symbols_r16_opts::
    to_number() const
{
  static const uint8_t numbers[] = {14, 28};
  return map_enum_number(
      numbers,
      2,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_30k_hz_add_symbols_r16_e_");
}

const char* ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::
    scs_60k_hz_add_symbols_r16_opts::to_string() const
{
  static const char* names[] = {"s14", "s28", "s56"};
  return convert_enum_idx(
      names,
      3,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_60k_hz_add_symbols_r16_e_");
}
uint8_t ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_60k_hz_add_symbols_r16_opts::
    to_number() const
{
  static const uint8_t numbers[] = {14, 28, 56};
  return map_enum_number(
      numbers,
      3,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_60k_hz_add_symbols_r16_e_");
}

const char* ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::
    scs_120k_hz_add_symbols_r16_opts::to_string() const
{
  static const char* names[] = {"s14", "s28", "s56"};
  return convert_enum_idx(
      names,
      3,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_120k_hz_add_symbols_r16_e_");
}
uint8_t ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_120k_hz_add_symbols_r16_opts::
    to_number() const
{
  static const uint8_t numbers[] = {14, 28, 56};
  return map_enum_number(
      numbers,
      3,
      value,
      "ca_params_nr_v1690_s::csi_report_cross_pucch_grp_r16_s_::add_symbols_r16_s_::scs_120k_hz_add_symbols_r16_e_");
}

// BandCombination-v1690 ::= SEQUENCE
SRSASN_CODE band_combination_v1690_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1690_present, 1));

  if (ca_params_nr_v1690_present) {
    HANDLE_CODE(ca_params_nr_v1690.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1690_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1690_present, 1));

  if (ca_params_nr_v1690_present) {
    HANDLE_CODE(ca_params_nr_v1690.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1690_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v1690_present) {
    j.write_fieldname("ca-ParametersNR-v1690");
    ca_params_nr_v1690.to_json(j);
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1690 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1690_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1690_present, 1));

  if (band_combination_v1690_present) {
    HANDLE_CODE(band_combination_v1690.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1690_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1690_present, 1));

  if (band_combination_v1690_present) {
    HANDLE_CODE(band_combination_v1690.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1690_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1690_present) {
    j.write_fieldname("bandCombination-v1690");
    band_combination_v1690.to_json(j);
  }
  j.end_obj();
}

// CSI-MultiTRP-SupportedCombinations-r17 ::= SEQUENCE
SRSASN_CODE csi_multi_trp_supported_combinations_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_tx_ports_r17.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_total_num_cmr_r17, (uint8_t)2u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, max_total_num_tx_ports_nzp_csi_rs_r17, (uint16_t)2u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_multi_trp_supported_combinations_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_tx_ports_r17.unpack(bref));
  HANDLE_CODE(unpack_integer(max_total_num_cmr_r17, bref, (uint8_t)2u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(max_total_num_tx_ports_nzp_csi_rs_r17, bref, (uint16_t)2u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
void csi_multi_trp_supported_combinations_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumTx-Ports-r17", max_num_tx_ports_r17.to_string());
  j.write_int("maxTotalNumCMR-r17", max_total_num_cmr_r17);
  j.write_int("maxTotalNumTx-PortsNZP-CSI-RS-r17", max_total_num_tx_ports_nzp_csi_rs_r17);
  j.end_obj();
}

const char* csi_multi_trp_supported_combinations_r17_s::max_num_tx_ports_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8", "n12", "n16", "n24", "n32"};
  return convert_enum_idx(names, 7, value, "csi_multi_trp_supported_combinations_r17_s::max_num_tx_ports_r17_e_");
}
uint8_t csi_multi_trp_supported_combinations_r17_s::max_num_tx_ports_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12, 16, 24, 32};
  return map_enum_number(numbers, 7, value, "csi_multi_trp_supported_combinations_r17_s::max_num_tx_ports_r17_e_");
}

// CodebookComboParameterMixedTypePerBC-r17 ::= SEQUENCE
SRSASN_CODE codebook_combo_param_mixed_type_per_bc_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(type1_sp_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_fe_type2_ps_m2_r2_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_fe_type2_ps_m2_r2_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));

  if (type1_sp_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_fe_type2_ps_m2_r2_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_fe_type2_ps_m2_r2_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_combo_param_mixed_type_per_bc_r17_s::unpack(cbit_ref& bref)
{
  bool type1_sp_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_fe_type2_ps_null_r17_present, 1));
  bool type1_sp_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool type1_sp_fe_type2_ps_m2_r2_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_fe_type2_ps_m2_r2_null_r17_present, 1));
  bool type1_sp_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_type2_fe_type2_ps_m1_r17_present, 1));
  bool type1_sp_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool type1_sp_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));
  bool type1_mp_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_fe_type2_ps_null_r17_present, 1));
  bool type1_mp_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool type1_mp_fe_type2_ps_m2_r2_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_fe_type2_ps_m2_r2_null_r17_present, 1));
  bool type1_mp_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_type2_fe_type2_ps_m1_r17_present, 1));
  bool type1_mp_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool type1_mp_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));

  if (type1_sp_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r2_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_fe_type2_ps_m2_r2_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_sp_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r2_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_fe_type2_ps_m2_r2_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_mp_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_combo_param_mixed_type_per_bc_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (type1_sp_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("type1SP-feType2PS-null-r17");
    for (const auto& e1 : type1_sp_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("type1SP-feType2PS-M2R1-null-r17");
    for (const auto& e1 : type1_sp_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    j.start_array("type1SP-feType2PS-M2R2-null-r17");
    for (const auto& e1 : type1_sp_fe_type2_ps_m2_r2_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1SP-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : type1_sp_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1SP-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_sp_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1SP-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : type1_sp_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1SP-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("type1MP-feType2PS-null-r17");
    for (const auto& e1 : type1_mp_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("type1MP-feType2PS-M2R1-null-r17");
    for (const auto& e1 : type1_mp_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    j.start_array("type1MP-feType2PS-M2R2-null-r17");
    for (const auto& e1 : type1_mp_fe_type2_ps_m2_r2_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1MP-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : type1_mp_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1MP-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_mp_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1MP-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : type1_mp_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1MP-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// CodebookComboParameterMultiTRP-PerBC-r17 ::= SEQUENCE
SRSASN_CODE codebook_combo_param_multi_trp_per_bc_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ncjt_null_null.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_null_null.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_type2_ps_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_type2_ps_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_fe_type2_ps_m2_r2_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));

  if (ncjt_null_null.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_null_null, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_null_null.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_null_null, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_type2_ps_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_type2_ps_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_type2_ps_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_type2_ps_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_fe_type2_ps_m2_r2_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_fe_type2_ps_m2_r2_null_r1, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_combo_param_multi_trp_per_bc_r17_s::unpack(cbit_ref& bref)
{
  bool ncjt_null_null_present;
  HANDLE_CODE(bref.unpack(ncjt_null_null_present, 1));
  bool ncjt1_sp_null_null_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_null_null_present, 1));
  bool ncjt_type2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_null_r16_present, 1));
  bool ncjt_type2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_ps_null_r16_present, 1));
  bool ncjt_e_type2_r1_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_null_r16_present, 1));
  bool ncjt_e_type2_r2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r2_null_r16_present, 1));
  bool ncjt_e_type2_r1_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_ps_null_r16_present, 1));
  bool ncjt_e_type2_r2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r2_ps_null_r16_present, 1));
  bool ncjt_type2_type2_ps_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_type2_ps_r16_present, 1));
  bool ncjt1_sp_type2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_null_r16_present, 1));
  bool ncjt1_sp_type2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_ps_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r1_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r2_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r1_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_ps_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r2_ps_null_r16_present, 1));
  bool ncjt1_sp_type2_type2_ps_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_type2_ps_r16_present, 1));
  bool ncjt_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_fe_type2_ps_null_r17_present, 1));
  bool ncjt_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool ncjt_fe_type2_ps_m2_r2_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_fe_type2_ps_m2_r2_null_r17_present, 1));
  bool ncjt_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_fe_type2_ps_m1_r17_present, 1));
  bool ncjt_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool ncjt_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));
  bool ncjt1_sp_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_fe_type2_ps_null_r17_present, 1));
  bool ncjt1_sp_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool ncjt1_sp_fe_type2_ps_m2_r2_null_r1_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_fe_type2_ps_m2_r2_null_r1_present, 1));
  bool ncjt1_sp_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_fe_type2_ps_m1_r17_present, 1));
  bool ncjt1_sp_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));

  if (ncjt_null_null_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_null_null, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_null_null_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_null_null, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r1_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r1_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_type2_ps_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_type2_ps_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r2_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_fe_type2_ps_m2_r2_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r2_null_r1_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_fe_type2_ps_m2_r2_null_r1, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_combo_param_multi_trp_per_bc_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ncjt_null_null.size() > 0) {
    j.start_array("nCJT-null-null");
    for (const auto& e1 : ncjt_null_null) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_null_null.size() > 0) {
    j.start_array("nCJT1SP-null-null");
    for (const auto& e1 : ncjt1_sp_null_null) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_null_r16.size() > 0) {
    j.start_array("nCJT-Type2-null-r16");
    for (const auto& e1 : ncjt_type2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_ps_null_r16.size() > 0) {
    j.start_array("nCJT-Type2PS-null-r16");
    for (const auto& e1 : ncjt_type2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R1-null-r16");
    for (const auto& e1 : ncjt_e_type2_r1_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r2_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R2-null-r16");
    for (const auto& e1 : ncjt_e_type2_r2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_ps_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R1PS-null-r16");
    for (const auto& e1 : ncjt_e_type2_r1_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r2_ps_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R2PS-null-r16");
    for (const auto& e1 : ncjt_e_type2_r2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_type2_ps_r16.size() > 0) {
    j.start_array("nCJT-Type2-Type2PS-r16");
    for (const auto& e1 : ncjt_type2_type2_ps_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_null_r16.size() > 0) {
    j.start_array("nCJT1SP-Type2-null-r16");
    for (const auto& e1 : ncjt1_sp_type2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_ps_null_r16.size() > 0) {
    j.start_array("nCJT1SP-Type2PS-null-r16");
    for (const auto& e1 : ncjt1_sp_type2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R1-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r2_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R2-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_ps_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R1PS-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r2_ps_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R2PS-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_type2_ps_r16.size() > 0) {
    j.start_array("nCJT1SP-Type2-Type2PS-r16");
    for (const auto& e1 : ncjt1_sp_type2_type2_ps_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("nCJT-feType2PS-null-r17");
    for (const auto& e1 : ncjt_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("nCJT-feType2PS-M2R1-null-r17");
    for (const auto& e1 : ncjt_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    j.start_array("nCJT-feType2PS-M2R2-null-r17");
    for (const auto& e1 : ncjt_fe_type2_ps_m2_r2_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("nCJT1SP-feType2PS-null-r17");
    for (const auto& e1 : ncjt1_sp_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("nCJT1SP-feType2PS-M2R1-null-r17");
    for (const auto& e1 : ncjt1_sp_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0) {
    j.start_array("nCJT1SP-feType2PS-M2R2-null-r1");
    for (const auto& e1 : ncjt1_sp_fe_type2_ps_m2_r2_null_r1) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT1SP-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt1_sp_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT1SP-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt1_sp_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT1SP-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT1SP-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// CodebookParametersfetype2PerBC-r17 ::= SEQUENCE
SRSASN_CODE codebook_paramsfetype2_per_bc_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fetype2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(fetype2_r2_r17.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, fetype2basic_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  if (fetype2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, fetype2_r1_r17, 1, 8, integer_packer<uint16_t>(0, 511)));
  }
  if (fetype2_r2_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, fetype2_r2_r17, 1, 8, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_paramsfetype2_per_bc_r17_s::unpack(cbit_ref& bref)
{
  bool fetype2_r1_r17_present;
  HANDLE_CODE(bref.unpack(fetype2_r1_r17_present, 1));
  bool fetype2_r2_r17_present;
  HANDLE_CODE(bref.unpack(fetype2_r2_r17_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(fetype2basic_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  if (fetype2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(fetype2_r1_r17, bref, 1, 8, integer_packer<uint16_t>(0, 511)));
  }
  if (fetype2_r2_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(fetype2_r2_r17, bref, 1, 8, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_paramsfetype2_per_bc_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("fetype2basic-r17");
  for (const auto& e1 : fetype2basic_r17) {
    j.write_int(e1);
  }
  j.end_array();
  if (fetype2_r1_r17.size() > 0) {
    j.start_array("fetype2R1-r17");
    for (const auto& e1 : fetype2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (fetype2_r2_r17.size() > 0) {
    j.start_array("fetype2R2-r17");
    for (const auto& e1 : fetype2_r2_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// CrossCarrierSchedulingSCell-SpCell-r17 ::= SEQUENCE
SRSASN_CODE cross_carrier_sched_scell_sp_cell_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_scs_combinations_r17.scs15k_hz_15k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_scs_combinations_r17.scs15k_hz_30k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_scs_combinations_r17.scs15k_hz_60k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_scs_combinations_r17.scs30k_hz_30k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_scs_combinations_r17.scs30k_hz_60k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_scs_combinations_r17.scs60k_hz_60k_hz_r17_present, 1));
  if (supported_scs_combinations_r17.scs30k_hz_30k_hz_r17_present) {
    HANDLE_CODE(supported_scs_combinations_r17.scs30k_hz_30k_hz_r17.pack(bref));
  }
  if (supported_scs_combinations_r17.scs30k_hz_60k_hz_r17_present) {
    HANDLE_CODE(supported_scs_combinations_r17.scs30k_hz_60k_hz_r17.pack(bref));
  }
  if (supported_scs_combinations_r17.scs60k_hz_60k_hz_r17_present) {
    HANDLE_CODE(supported_scs_combinations_r17.scs60k_hz_60k_hz_r17.pack(bref));
  }
  HANDLE_CODE(pdcch_monitoring_occasion_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE cross_carrier_sched_scell_sp_cell_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_scs_combinations_r17.scs15k_hz_15k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_scs_combinations_r17.scs15k_hz_30k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_scs_combinations_r17.scs15k_hz_60k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_scs_combinations_r17.scs30k_hz_30k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_scs_combinations_r17.scs30k_hz_60k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_scs_combinations_r17.scs60k_hz_60k_hz_r17_present, 1));
  if (supported_scs_combinations_r17.scs30k_hz_30k_hz_r17_present) {
    HANDLE_CODE(supported_scs_combinations_r17.scs30k_hz_30k_hz_r17.unpack(bref));
  }
  if (supported_scs_combinations_r17.scs30k_hz_60k_hz_r17_present) {
    HANDLE_CODE(supported_scs_combinations_r17.scs30k_hz_60k_hz_r17.unpack(bref));
  }
  if (supported_scs_combinations_r17.scs60k_hz_60k_hz_r17_present) {
    HANDLE_CODE(supported_scs_combinations_r17.scs60k_hz_60k_hz_r17.unpack(bref));
  }
  HANDLE_CODE(pdcch_monitoring_occasion_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void cross_carrier_sched_scell_sp_cell_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("supportedSCS-Combinations-r17");
  j.start_obj();
  if (supported_scs_combinations_r17.scs15k_hz_15k_hz_r17_present) {
    j.write_str("scs15kHz-15kHz-r17", "supported");
  }
  if (supported_scs_combinations_r17.scs15k_hz_30k_hz_r17_present) {
    j.write_str("scs15kHz-30kHz-r17", "supported");
  }
  if (supported_scs_combinations_r17.scs15k_hz_60k_hz_r17_present) {
    j.write_str("scs15kHz-60kHz-r17", "supported");
  }
  if (supported_scs_combinations_r17.scs30k_hz_30k_hz_r17_present) {
    j.write_str("scs30kHz-30kHz-r17", supported_scs_combinations_r17.scs30k_hz_30k_hz_r17.to_string());
  }
  if (supported_scs_combinations_r17.scs30k_hz_60k_hz_r17_present) {
    j.write_str("scs30kHz-60kHz-r17", supported_scs_combinations_r17.scs30k_hz_60k_hz_r17.to_string());
  }
  if (supported_scs_combinations_r17.scs60k_hz_60k_hz_r17_present) {
    j.write_str("scs60kHz-60kHz-r17", supported_scs_combinations_r17.scs60k_hz_60k_hz_r17.to_string());
  }
  j.end_obj();
  j.write_str("pdcch-MonitoringOccasion-r17", pdcch_monitoring_occasion_r17.to_string());
  j.end_obj();
}

const char* cross_carrier_sched_scell_sp_cell_r17_s::pdcch_monitoring_occasion_r17_opts::to_string() const
{
  static const char* names[] = {"val1", "val2"};
  return convert_enum_idx(names, 2, value, "cross_carrier_sched_scell_sp_cell_r17_s::pdcch_monitoring_occasion_r17_e_");
}
uint8_t cross_carrier_sched_scell_sp_cell_r17_s::pdcch_monitoring_occasion_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "cross_carrier_sched_scell_sp_cell_r17_s::pdcch_monitoring_occasion_r17_e_");
}

// BandParameters-v1710 ::= SEQUENCE
SRSASN_CODE band_params_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(srs_ant_switching_beyond4_rx_r17_present, 1));

  if (srs_ant_switching_beyond4_rx_r17_present) {
    HANDLE_CODE(bref.pack(srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17_present, 1));
    HANDLE_CODE(bref.pack(srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17_present, 1));
    HANDLE_CODE(srs_ant_switching_beyond4_rx_r17.supported_srs_tx_port_switch_beyond4_rx_r17.pack(bref));
    if (srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17_present) {
      HANDLE_CODE(pack_integer(
          bref, srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17, (uint8_t)1u, (uint8_t)32u));
    }
    if (srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17_present) {
      HANDLE_CODE(pack_integer(
          bref, srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17, (uint8_t)1u, (uint8_t)32u));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(srs_ant_switching_beyond4_rx_r17_present, 1));

  if (srs_ant_switching_beyond4_rx_r17_present) {
    HANDLE_CODE(bref.unpack(srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17_present, 1));
    HANDLE_CODE(bref.unpack(srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17_present, 1));
    HANDLE_CODE(srs_ant_switching_beyond4_rx_r17.supported_srs_tx_port_switch_beyond4_rx_r17.unpack(bref));
    if (srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17_present) {
      HANDLE_CODE(unpack_integer(
          srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17, bref, (uint8_t)1u, (uint8_t)32u));
    }
    if (srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17_present) {
      HANDLE_CODE(unpack_integer(
          srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17, bref, (uint8_t)1u, (uint8_t)32u));
    }
  }

  return SRSASN_SUCCESS;
}
void band_params_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (srs_ant_switching_beyond4_rx_r17_present) {
    j.write_fieldname("srs-AntennaSwitchingBeyond4RX-r17");
    j.start_obj();
    j.write_str("supportedSRS-TxPortSwitchBeyond4Rx-r17",
                srs_ant_switching_beyond4_rx_r17.supported_srs_tx_port_switch_beyond4_rx_r17.to_string());
    if (srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17_present) {
      j.write_int("entryNumberAffectBeyond4Rx-r17", srs_ant_switching_beyond4_rx_r17.entry_num_affect_beyond4_rx_r17);
    }
    if (srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17_present) {
      j.write_int("entryNumberSwitchBeyond4Rx-r17", srs_ant_switching_beyond4_rx_r17.entry_num_switch_beyond4_rx_r17);
    }
    j.end_obj();
  }
  j.end_obj();
}

// CA-ParametersNR-v1700 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(codebook_paramsfetype2_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(demod_enhancement_ca_r17_present, 1));
  HANDLE_CODE(bref.pack(max_ul_duty_cycle_inter_band_ca_pc2_r17_present, 1));
  HANDLE_CODE(bref.pack(max_ul_duty_cycle_sul_combination_pc2_r17_present, 1));
  HANDLE_CODE(bref.pack(beam_management_type_cbm_r17_present, 1));
  HANDLE_CODE(bref.pack(parallel_tx_pucch_pusch_r17_present, 1));
  HANDLE_CODE(bref.pack(codebook_combo_param_mixed_type_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_csi_enhancement_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(codebook_combo_param_multi_trp_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(max_cc_32_dl_harq_process_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(max_cc_32_ul_harq_process_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_scell_sp_cell_type_b_r17_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_scell_sp_cell_type_a_r17_present, 1));
  HANDLE_CODE(bref.pack(dci_formats_pcell_pscell_uss_sets_r17_present, 1));
  HANDLE_CODE(bref.pack(disabling_scaling_factor_deact_scell_r17_present, 1));
  HANDLE_CODE(bref.pack(disabling_scaling_factor_dormant_scell_r17_present, 1));
  HANDLE_CODE(bref.pack(non_aligned_frame_boundaries_r17_present, 1));

  if (codebook_paramsfetype2_per_bc_r17_present) {
    HANDLE_CODE(codebook_paramsfetype2_per_bc_r17.pack(bref));
  }
  if (max_ul_duty_cycle_inter_band_ca_pc2_r17_present) {
    HANDLE_CODE(max_ul_duty_cycle_inter_band_ca_pc2_r17.pack(bref));
  }
  if (max_ul_duty_cycle_sul_combination_pc2_r17_present) {
    HANDLE_CODE(max_ul_duty_cycle_sul_combination_pc2_r17.pack(bref));
  }
  if (codebook_combo_param_mixed_type_per_bc_r17_present) {
    HANDLE_CODE(codebook_combo_param_mixed_type_per_bc_r17.pack(bref));
  }
  if (mtrp_csi_enhancement_per_bc_r17_present) {
    HANDLE_CODE(pack_integer(bref, mtrp_csi_enhancement_per_bc_r17.max_num_nzp_csi_rs_r17, (uint8_t)2u, (uint8_t)8u));
    HANDLE_CODE(mtrp_csi_enhancement_per_bc_r17.csi_report_mode_r17.pack(bref));
    HANDLE_CODE(pack_dyn_seq_of(bref, mtrp_csi_enhancement_per_bc_r17.supported_combo_across_ccs_r17, 1, 16));
    HANDLE_CODE(mtrp_csi_enhancement_per_bc_r17.codebook_mode_ncjt_r17.pack(bref));
  }
  if (codebook_combo_param_multi_trp_per_bc_r17_present) {
    HANDLE_CODE(codebook_combo_param_multi_trp_per_bc_r17.pack(bref));
  }
  if (max_cc_32_dl_harq_process_fr2_2_r17_present) {
    HANDLE_CODE(max_cc_32_dl_harq_process_fr2_2_r17.pack(bref));
  }
  if (max_cc_32_ul_harq_process_fr2_2_r17_present) {
    HANDLE_CODE(max_cc_32_ul_harq_process_fr2_2_r17.pack(bref));
  }
  if (cross_carrier_sched_scell_sp_cell_type_b_r17_present) {
    HANDLE_CODE(cross_carrier_sched_scell_sp_cell_type_b_r17.pack(bref));
  }
  if (cross_carrier_sched_scell_sp_cell_type_a_r17_present) {
    HANDLE_CODE(cross_carrier_sched_scell_sp_cell_type_a_r17.pack(bref));
  }
  if (non_aligned_frame_boundaries_r17_present) {
    HANDLE_CODE(bref.pack(non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17_present, 1));
    if (non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17.pack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17.pack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17.pack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17.pack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17.pack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(codebook_paramsfetype2_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(demod_enhancement_ca_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_ul_duty_cycle_inter_band_ca_pc2_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_ul_duty_cycle_sul_combination_pc2_r17_present, 1));
  HANDLE_CODE(bref.unpack(beam_management_type_cbm_r17_present, 1));
  HANDLE_CODE(bref.unpack(parallel_tx_pucch_pusch_r17_present, 1));
  HANDLE_CODE(bref.unpack(codebook_combo_param_mixed_type_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_csi_enhancement_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(codebook_combo_param_multi_trp_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_cc_32_dl_harq_process_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_cc_32_ul_harq_process_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_scell_sp_cell_type_b_r17_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_scell_sp_cell_type_a_r17_present, 1));
  HANDLE_CODE(bref.unpack(dci_formats_pcell_pscell_uss_sets_r17_present, 1));
  HANDLE_CODE(bref.unpack(disabling_scaling_factor_deact_scell_r17_present, 1));
  HANDLE_CODE(bref.unpack(disabling_scaling_factor_dormant_scell_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_aligned_frame_boundaries_r17_present, 1));

  if (codebook_paramsfetype2_per_bc_r17_present) {
    HANDLE_CODE(codebook_paramsfetype2_per_bc_r17.unpack(bref));
  }
  if (max_ul_duty_cycle_inter_band_ca_pc2_r17_present) {
    HANDLE_CODE(max_ul_duty_cycle_inter_band_ca_pc2_r17.unpack(bref));
  }
  if (max_ul_duty_cycle_sul_combination_pc2_r17_present) {
    HANDLE_CODE(max_ul_duty_cycle_sul_combination_pc2_r17.unpack(bref));
  }
  if (codebook_combo_param_mixed_type_per_bc_r17_present) {
    HANDLE_CODE(codebook_combo_param_mixed_type_per_bc_r17.unpack(bref));
  }
  if (mtrp_csi_enhancement_per_bc_r17_present) {
    HANDLE_CODE(unpack_integer(mtrp_csi_enhancement_per_bc_r17.max_num_nzp_csi_rs_r17, bref, (uint8_t)2u, (uint8_t)8u));
    HANDLE_CODE(mtrp_csi_enhancement_per_bc_r17.csi_report_mode_r17.unpack(bref));
    HANDLE_CODE(unpack_dyn_seq_of(mtrp_csi_enhancement_per_bc_r17.supported_combo_across_ccs_r17, bref, 1, 16));
    HANDLE_CODE(mtrp_csi_enhancement_per_bc_r17.codebook_mode_ncjt_r17.unpack(bref));
  }
  if (codebook_combo_param_multi_trp_per_bc_r17_present) {
    HANDLE_CODE(codebook_combo_param_multi_trp_per_bc_r17.unpack(bref));
  }
  if (max_cc_32_dl_harq_process_fr2_2_r17_present) {
    HANDLE_CODE(max_cc_32_dl_harq_process_fr2_2_r17.unpack(bref));
  }
  if (max_cc_32_ul_harq_process_fr2_2_r17_present) {
    HANDLE_CODE(max_cc_32_ul_harq_process_fr2_2_r17.unpack(bref));
  }
  if (cross_carrier_sched_scell_sp_cell_type_b_r17_present) {
    HANDLE_CODE(cross_carrier_sched_scell_sp_cell_type_b_r17.unpack(bref));
  }
  if (cross_carrier_sched_scell_sp_cell_type_a_r17_present) {
    HANDLE_CODE(cross_carrier_sched_scell_sp_cell_type_a_r17.unpack(bref));
  }
  if (non_aligned_frame_boundaries_r17_present) {
    HANDLE_CODE(bref.unpack(non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17_present, 1));
    if (non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17.unpack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17.unpack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17.unpack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17.unpack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17.unpack(bref));
    }
    if (non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17_present) {
      HANDLE_CODE(non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (codebook_paramsfetype2_per_bc_r17_present) {
    j.write_fieldname("codebookParametersfetype2PerBC-r17");
    codebook_paramsfetype2_per_bc_r17.to_json(j);
  }
  if (demod_enhancement_ca_r17_present) {
    j.write_str("demodulationEnhancementCA-r17", "supported");
  }
  if (max_ul_duty_cycle_inter_band_ca_pc2_r17_present) {
    j.write_str("maxUplinkDutyCycle-interBandCA-PC2-r17", max_ul_duty_cycle_inter_band_ca_pc2_r17.to_string());
  }
  if (max_ul_duty_cycle_sul_combination_pc2_r17_present) {
    j.write_str("maxUplinkDutyCycle-SULcombination-PC2-r17", max_ul_duty_cycle_sul_combination_pc2_r17.to_string());
  }
  if (beam_management_type_cbm_r17_present) {
    j.write_str("beamManagementType-CBM-r17", "supported");
  }
  if (parallel_tx_pucch_pusch_r17_present) {
    j.write_str("parallelTxPUCCH-PUSCH-r17", "supported");
  }
  if (codebook_combo_param_mixed_type_per_bc_r17_present) {
    j.write_fieldname("codebookComboParameterMixedTypePerBC-r17");
    codebook_combo_param_mixed_type_per_bc_r17.to_json(j);
  }
  if (mtrp_csi_enhancement_per_bc_r17_present) {
    j.write_fieldname("mTRP-CSI-EnhancementPerBC-r17");
    j.start_obj();
    j.write_int("maxNumNZP-CSI-RS-r17", mtrp_csi_enhancement_per_bc_r17.max_num_nzp_csi_rs_r17);
    j.write_str("cSI-Report-mode-r17", mtrp_csi_enhancement_per_bc_r17.csi_report_mode_r17.to_string());
    j.start_array("supportedComboAcrossCCs-r17");
    for (const auto& e1 : mtrp_csi_enhancement_per_bc_r17.supported_combo_across_ccs_r17) {
      e1.to_json(j);
    }
    j.end_array();
    j.write_str("codebookMode-NCJT-r17", mtrp_csi_enhancement_per_bc_r17.codebook_mode_ncjt_r17.to_string());
    j.end_obj();
  }
  if (codebook_combo_param_multi_trp_per_bc_r17_present) {
    j.write_fieldname("codebookComboParameterMultiTRP-PerBC-r17");
    codebook_combo_param_multi_trp_per_bc_r17.to_json(j);
  }
  if (max_cc_32_dl_harq_process_fr2_2_r17_present) {
    j.write_str("maxCC-32-DL-HARQ-ProcessFR2-2-r17", max_cc_32_dl_harq_process_fr2_2_r17.to_string());
  }
  if (max_cc_32_ul_harq_process_fr2_2_r17_present) {
    j.write_str("maxCC-32-UL-HARQ-ProcessFR2-2-r17", max_cc_32_ul_harq_process_fr2_2_r17.to_string());
  }
  if (cross_carrier_sched_scell_sp_cell_type_b_r17_present) {
    j.write_fieldname("crossCarrierSchedulingSCell-SpCellTypeB-r17");
    cross_carrier_sched_scell_sp_cell_type_b_r17.to_json(j);
  }
  if (cross_carrier_sched_scell_sp_cell_type_a_r17_present) {
    j.write_fieldname("crossCarrierSchedulingSCell-SpCellTypeA-r17");
    cross_carrier_sched_scell_sp_cell_type_a_r17.to_json(j);
  }
  if (dci_formats_pcell_pscell_uss_sets_r17_present) {
    j.write_str("dci-FormatsPCellPSCellUSS-Sets-r17", "supported");
  }
  if (disabling_scaling_factor_deact_scell_r17_present) {
    j.write_str("disablingScalingFactorDeactSCell-r17", "supported");
  }
  if (disabling_scaling_factor_dormant_scell_r17_present) {
    j.write_str("disablingScalingFactorDormantSCell-r17", "supported");
  }
  if (non_aligned_frame_boundaries_r17_present) {
    j.write_fieldname("non-AlignedFrameBoundaries-r17");
    j.start_obj();
    if (non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17_present) {
      j.write_str("scs15kHz-15kHz-r17", non_aligned_frame_boundaries_r17.scs15k_hz_15k_hz_r17.to_string());
    }
    if (non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17_present) {
      j.write_str("scs15kHz-30kHz-r17", non_aligned_frame_boundaries_r17.scs15k_hz_30k_hz_r17.to_string());
    }
    if (non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17_present) {
      j.write_str("scs15kHz-60kHz-r17", non_aligned_frame_boundaries_r17.scs15k_hz_60k_hz_r17.to_string());
    }
    if (non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17_present) {
      j.write_str("scs30kHz-30kHz-r17", non_aligned_frame_boundaries_r17.scs30k_hz_30k_hz_r17.to_string());
    }
    if (non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17_present) {
      j.write_str("scs30kHz-60kHz-r17", non_aligned_frame_boundaries_r17.scs30k_hz_60k_hz_r17.to_string());
    }
    if (non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17_present) {
      j.write_str("scs60kHz-60kHz-r17", non_aligned_frame_boundaries_r17.scs60k_hz_60k_hz_r17.to_string());
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* ca_params_nr_v1700_s::max_ul_duty_cycle_inter_band_ca_pc2_r17_opts::to_string() const
{
  static const char* names[] = {"n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(names, 6, value, "ca_params_nr_v1700_s::max_ul_duty_cycle_inter_band_ca_pc2_r17_e_");
}
uint8_t ca_params_nr_v1700_s::max_ul_duty_cycle_inter_band_ca_pc2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {50, 60, 70, 80, 90, 100};
  return map_enum_number(numbers, 6, value, "ca_params_nr_v1700_s::max_ul_duty_cycle_inter_band_ca_pc2_r17_e_");
}

const char* ca_params_nr_v1700_s::max_ul_duty_cycle_sul_combination_pc2_r17_opts::to_string() const
{
  static const char* names[] = {"n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(names, 6, value, "ca_params_nr_v1700_s::max_ul_duty_cycle_sul_combination_pc2_r17_e_");
}
uint8_t ca_params_nr_v1700_s::max_ul_duty_cycle_sul_combination_pc2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {50, 60, 70, 80, 90, 100};
  return map_enum_number(numbers, 6, value, "ca_params_nr_v1700_s::max_ul_duty_cycle_sul_combination_pc2_r17_e_");
}

const char* ca_params_nr_v1700_s::mtrp_csi_enhancement_per_bc_r17_s_::csi_report_mode_r17_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode2", "both"};
  return convert_enum_idx(
      names, 3, value, "ca_params_nr_v1700_s::mtrp_csi_enhancement_per_bc_r17_s_::csi_report_mode_r17_e_");
}
uint8_t ca_params_nr_v1700_s::mtrp_csi_enhancement_per_bc_r17_s_::csi_report_mode_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "ca_params_nr_v1700_s::mtrp_csi_enhancement_per_bc_r17_s_::csi_report_mode_r17_e_");
}

const char* ca_params_nr_v1700_s::mtrp_csi_enhancement_per_bc_r17_s_::codebook_mode_ncjt_r17_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode1And2"};
  return convert_enum_idx(
      names, 2, value, "ca_params_nr_v1700_s::mtrp_csi_enhancement_per_bc_r17_s_::codebook_mode_ncjt_r17_e_");
}

const char* ca_params_nr_v1700_s::max_cc_32_dl_harq_process_fr2_2_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n6", "n8", "n16", "n32"};
  return convert_enum_idx(names, 8, value, "ca_params_nr_v1700_s::max_cc_32_dl_harq_process_fr2_2_r17_e_");
}
uint8_t ca_params_nr_v1700_s::max_cc_32_dl_harq_process_fr2_2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8, 16, 32};
  return map_enum_number(numbers, 8, value, "ca_params_nr_v1700_s::max_cc_32_dl_harq_process_fr2_2_r17_e_");
}

const char* ca_params_nr_v1700_s::max_cc_32_ul_harq_process_fr2_2_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n8", "n16", "n32"};
  return convert_enum_idx(names, 8, value, "ca_params_nr_v1700_s::max_cc_32_ul_harq_process_fr2_2_r17_e_");
}
uint8_t ca_params_nr_v1700_s::max_cc_32_ul_harq_process_fr2_2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 8, 16, 32};
  return map_enum_number(numbers, 8, value, "ca_params_nr_v1700_s::max_cc_32_ul_harq_process_fr2_2_r17_e_");
}

// CA-ParametersNRDC-v1700 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(simul_rx_tx_iab_multiple_parents_r17_present, 1));
  HANDLE_CODE(bref.pack(cond_pscell_addition_nrdc_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_activation_deactivation_nrdc_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_activation_deactivation_resume_nrdc_r17_present, 1));
  HANDLE_CODE(bref.pack(beam_management_type_cbm_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(simul_rx_tx_iab_multiple_parents_r17_present, 1));
  HANDLE_CODE(bref.unpack(cond_pscell_addition_nrdc_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_activation_deactivation_nrdc_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_activation_deactivation_resume_nrdc_r17_present, 1));
  HANDLE_CODE(bref.unpack(beam_management_type_cbm_r17_present, 1));

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (simul_rx_tx_iab_multiple_parents_r17_present) {
    j.write_str("simultaneousRxTx-IAB-MultipleParents-r17", "supported");
  }
  if (cond_pscell_addition_nrdc_r17_present) {
    j.write_str("condPSCellAdditionNRDC-r17", "supported");
  }
  if (scg_activation_deactivation_nrdc_r17_present) {
    j.write_str("scg-ActivationDeactivationNRDC-r17", "supported");
  }
  if (scg_activation_deactivation_resume_nrdc_r17_present) {
    j.write_str("scg-ActivationDeactivationResumeNRDC-r17", "supported");
  }
  if (beam_management_type_cbm_r17_present) {
    j.write_str("beamManagementType-CBM-r17", "supported");
  }
  j.end_obj();
}

// MRDC-Parameters-v1700 ::= SEQUENCE
SRSASN_CODE mrdc_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cond_pscell_addition_endc_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_activation_deactivation_endc_r17_present, 1));
  HANDLE_CODE(bref.pack(scg_activation_deactivation_resume_endc_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mrdc_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cond_pscell_addition_endc_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_activation_deactivation_endc_r17_present, 1));
  HANDLE_CODE(bref.unpack(scg_activation_deactivation_resume_endc_r17_present, 1));

  return SRSASN_SUCCESS;
}
void mrdc_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cond_pscell_addition_endc_r17_present) {
    j.write_str("condPSCellAdditionENDC-r17", "supported");
  }
  if (scg_activation_deactivation_endc_r17_present) {
    j.write_str("scg-ActivationDeactivationENDC-r17", "supported");
  }
  if (scg_activation_deactivation_resume_endc_r17_present) {
    j.write_str("scg-ActivationDeactivationResumeENDC-r17", "supported");
  }
  j.end_obj();
}

// BandCombination-v1700 ::= SEQUENCE
SRSASN_CODE band_combination_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1700_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v1700_present, 1));
  HANDLE_CODE(bref.pack(mrdc_params_v1700_present, 1));
  HANDLE_CODE(bref.pack(band_list_v1710.size() > 0, 1));
  HANDLE_CODE(bref.pack(supported_band_comb_list_per_bc_sl_relay_discovery_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_band_comb_list_per_bc_sl_non_relay_discovery_r17_present, 1));

  if (ca_params_nr_v1700_present) {
    HANDLE_CODE(ca_params_nr_v1700.pack(bref));
  }
  if (ca_params_nrdc_v1700_present) {
    HANDLE_CODE(ca_params_nrdc_v1700.pack(bref));
  }
  if (mrdc_params_v1700_present) {
    HANDLE_CODE(mrdc_params_v1700.pack(bref));
  }
  if (band_list_v1710.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, band_list_v1710, 1, 32));
  }
  if (supported_band_comb_list_per_bc_sl_relay_discovery_r17_present) {
    HANDLE_CODE(supported_band_comb_list_per_bc_sl_relay_discovery_r17.pack(bref));
  }
  if (supported_band_comb_list_per_bc_sl_non_relay_discovery_r17_present) {
    HANDLE_CODE(supported_band_comb_list_per_bc_sl_non_relay_discovery_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1700_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v1700_present, 1));
  HANDLE_CODE(bref.unpack(mrdc_params_v1700_present, 1));
  bool band_list_v1710_present;
  HANDLE_CODE(bref.unpack(band_list_v1710_present, 1));
  HANDLE_CODE(bref.unpack(supported_band_comb_list_per_bc_sl_relay_discovery_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_band_comb_list_per_bc_sl_non_relay_discovery_r17_present, 1));

  if (ca_params_nr_v1700_present) {
    HANDLE_CODE(ca_params_nr_v1700.unpack(bref));
  }
  if (ca_params_nrdc_v1700_present) {
    HANDLE_CODE(ca_params_nrdc_v1700.unpack(bref));
  }
  if (mrdc_params_v1700_present) {
    HANDLE_CODE(mrdc_params_v1700.unpack(bref));
  }
  if (band_list_v1710_present) {
    HANDLE_CODE(unpack_dyn_seq_of(band_list_v1710, bref, 1, 32));
  }
  if (supported_band_comb_list_per_bc_sl_relay_discovery_r17_present) {
    HANDLE_CODE(supported_band_comb_list_per_bc_sl_relay_discovery_r17.unpack(bref));
  }
  if (supported_band_comb_list_per_bc_sl_non_relay_discovery_r17_present) {
    HANDLE_CODE(supported_band_comb_list_per_bc_sl_non_relay_discovery_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v1700_present) {
    j.write_fieldname("ca-ParametersNR-v1700");
    ca_params_nr_v1700.to_json(j);
  }
  if (ca_params_nrdc_v1700_present) {
    j.write_fieldname("ca-ParametersNRDC-v1700");
    ca_params_nrdc_v1700.to_json(j);
  }
  if (mrdc_params_v1700_present) {
    j.write_fieldname("mrdc-Parameters-v1700");
    mrdc_params_v1700.to_json(j);
  }
  if (band_list_v1710.size() > 0) {
    j.start_array("bandList-v1710");
    for (const auto& e1 : band_list_v1710) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (supported_band_comb_list_per_bc_sl_relay_discovery_r17_present) {
    j.write_str("supportedBandCombListPerBC-SL-RelayDiscovery-r17",
                supported_band_comb_list_per_bc_sl_relay_discovery_r17.to_string());
  }
  if (supported_band_comb_list_per_bc_sl_non_relay_discovery_r17_present) {
    j.write_str("supportedBandCombListPerBC-SL-NonRelayDiscovery-r17",
                supported_band_comb_list_per_bc_sl_non_relay_discovery_r17.to_string());
  }
  j.end_obj();
}

// ULTxSwitchingBandPair-v1700 ::= SEQUENCE
SRSASN_CODE ul_tx_switching_band_pair_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_switching_period2_t2_t_r17_present, 1));

  if (ul_tx_switching_period2_t2_t_r17_present) {
    HANDLE_CODE(ul_tx_switching_period2_t2_t_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_switching_band_pair_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_tx_switching_period2_t2_t_r17_present, 1));

  if (ul_tx_switching_period2_t2_t_r17_present) {
    HANDLE_CODE(ul_tx_switching_period2_t2_t_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_tx_switching_band_pair_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_tx_switching_period2_t2_t_r17_present) {
    j.write_str("uplinkTxSwitchingPeriod2T2T-r17", ul_tx_switching_period2_t2_t_r17.to_string());
  }
  j.end_obj();
}

const char* ul_tx_switching_band_pair_v1700_s::ul_tx_switching_period2_t2_t_r17_opts::to_string() const
{
  static const char* names[] = {"n35us", "n140us", "n210us"};
  return convert_enum_idx(names, 3, value, "ul_tx_switching_band_pair_v1700_s::ul_tx_switching_period2_t2_t_r17_e_");
}
uint8_t ul_tx_switching_band_pair_v1700_s::ul_tx_switching_period2_t2_t_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {35, 140, 210};
  return map_enum_number(numbers, 3, value, "ul_tx_switching_band_pair_v1700_s::ul_tx_switching_period2_t2_t_r17_e_");
}

// UplinkTxSwitchingBandParameters-v1700 ::= SEQUENCE
SRSASN_CODE ul_tx_switching_band_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_tx_switching2_t2_t_pusch_trans_coherence_r17_present, 1));

  HANDLE_CODE(pack_integer(bref, band_idx_r17, (uint8_t)1u, (uint8_t)32u));
  if (ul_tx_switching2_t2_t_pusch_trans_coherence_r17_present) {
    HANDLE_CODE(ul_tx_switching2_t2_t_pusch_trans_coherence_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ul_tx_switching_band_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_tx_switching2_t2_t_pusch_trans_coherence_r17_present, 1));

  HANDLE_CODE(unpack_integer(band_idx_r17, bref, (uint8_t)1u, (uint8_t)32u));
  if (ul_tx_switching2_t2_t_pusch_trans_coherence_r17_present) {
    HANDLE_CODE(ul_tx_switching2_t2_t_pusch_trans_coherence_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ul_tx_switching_band_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandIndex-r17", band_idx_r17);
  if (ul_tx_switching2_t2_t_pusch_trans_coherence_r17_present) {
    j.write_str("uplinkTxSwitching2T2T-PUSCH-TransCoherence-r17",
                ul_tx_switching2_t2_t_pusch_trans_coherence_r17.to_string());
  }
  j.end_obj();
}

const char* ul_tx_switching_band_params_v1700_s::ul_tx_switching2_t2_t_pusch_trans_coherence_r17_opts::to_string() const
{
  static const char* names[] = {"nonCoherent", "fullCoherent"};
  return convert_enum_idx(
      names, 2, value, "ul_tx_switching_band_params_v1700_s::ul_tx_switching2_t2_t_pusch_trans_coherence_r17_e_");
}

// BandCombination-UplinkTxSwitch-v1700 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1700_present, 1));
  HANDLE_CODE(bref.pack(supported_band_pair_list_nr_v1700.size() > 0, 1));
  HANDLE_CODE(bref.pack(ul_tx_switching_band_params_list_v1700.size() > 0, 1));

  if (band_combination_v1700_present) {
    HANDLE_CODE(band_combination_v1700.pack(bref));
  }
  if (supported_band_pair_list_nr_v1700.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_pair_list_nr_v1700, 1, 32));
  }
  if (ul_tx_switching_band_params_list_v1700.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_tx_switching_band_params_list_v1700, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1700_present, 1));
  bool supported_band_pair_list_nr_v1700_present;
  HANDLE_CODE(bref.unpack(supported_band_pair_list_nr_v1700_present, 1));
  bool ul_tx_switching_band_params_list_v1700_present;
  HANDLE_CODE(bref.unpack(ul_tx_switching_band_params_list_v1700_present, 1));

  if (band_combination_v1700_present) {
    HANDLE_CODE(band_combination_v1700.unpack(bref));
  }
  if (supported_band_pair_list_nr_v1700_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_pair_list_nr_v1700, bref, 1, 32));
  }
  if (ul_tx_switching_band_params_list_v1700_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ul_tx_switching_band_params_list_v1700, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1700_present) {
    j.write_fieldname("bandCombination-v1700");
    band_combination_v1700.to_json(j);
  }
  if (supported_band_pair_list_nr_v1700.size() > 0) {
    j.start_array("supportedBandPairListNR-v1700");
    for (const auto& e1 : supported_band_pair_list_nr_v1700) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ul_tx_switching_band_params_list_v1700.size() > 0) {
    j.start_array("uplinkTxSwitchingBandParametersList-v1700");
    for (const auto& e1 : ul_tx_switching_band_params_list_v1700) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// PDCCH-BlindDetectionCA-Mixed-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_ca_mixed_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca1_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca2_r17_present, 1));

  if (pdcch_blind_detection_ca1_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca1_r17, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca2_r17, (uint8_t)1u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_ca_mixed_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca1_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca2_r17_present, 1));

  if (pdcch_blind_detection_ca1_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca1_r17, bref, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca2_r17, bref, (uint8_t)1u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_ca_mixed_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_blind_detection_ca1_r17_present) {
    j.write_int("pdcch-BlindDetectionCA1-r17", pdcch_blind_detection_ca1_r17);
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    j.write_int("pdcch-BlindDetectionCA2-r17", pdcch_blind_detection_ca2_r17);
  }
  j.end_obj();
}

// PDCCH-BlindDetectionCA-Mixed1-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_ca_mixed1_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca1_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca2_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca3_r17_present, 1));

  if (pdcch_blind_detection_ca1_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca1_r17, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca2_r17, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca3_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca3_r17, (uint8_t)1u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_ca_mixed1_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca1_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca2_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca3_r17_present, 1));

  if (pdcch_blind_detection_ca1_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca1_r17, bref, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca2_r17, bref, (uint8_t)1u, (uint8_t)15u));
  }
  if (pdcch_blind_detection_ca3_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca3_r17, bref, (uint8_t)1u, (uint8_t)15u));
  }

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_ca_mixed1_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_blind_detection_ca1_r17_present) {
    j.write_int("pdcch-BlindDetectionCA1-r17", pdcch_blind_detection_ca1_r17);
  }
  if (pdcch_blind_detection_ca2_r17_present) {
    j.write_int("pdcch-BlindDetectionCA2-r17", pdcch_blind_detection_ca2_r17);
  }
  if (pdcch_blind_detection_ca3_r17_present) {
    j.write_int("pdcch-BlindDetectionCA3-r17", pdcch_blind_detection_ca3_r17);
  }
  j.end_obj();
}

// PDCCH-BlindDetectionCG-UE-Mixed-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_cg_ue_mixed_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_cg_ue1_r17, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_cg_ue2_r17, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_cg_ue_mixed_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_cg_ue1_r17, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_cg_ue2_r17, bref, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_cg_ue_mixed_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdcch-BlindDetectionCG-UE1-r17", pdcch_blind_detection_cg_ue1_r17);
  j.write_int("pdcch-BlindDetectionCG-UE2-r17", pdcch_blind_detection_cg_ue2_r17);
  j.end_obj();
}

// PDCCH-BlindDetectionCG-UE-Mixed1-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_cg_ue_mixed1_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_cg_ue1_r17, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_cg_ue2_r17, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_cg_ue3_r17, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_cg_ue_mixed1_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_cg_ue1_r17, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_cg_ue2_r17, bref, (uint8_t)0u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_cg_ue3_r17, bref, (uint8_t)0u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_cg_ue_mixed1_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdcch-BlindDetectionCG-UE1-r17", pdcch_blind_detection_cg_ue1_r17);
  j.write_int("pdcch-BlindDetectionCG-UE2-r17", pdcch_blind_detection_cg_ue2_r17);
  j.write_int("pdcch-BlindDetectionCG-UE3-r17", pdcch_blind_detection_cg_ue3_r17);
  j.end_obj();
}

// PUCCH-Group-Config-r17 ::= SEQUENCE
SRSASN_CODE pucch_group_cfg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fr1_fr1_non_shared_tdd_r17_present, 1));
  HANDLE_CODE(bref.pack(fr2_fr2_non_shared_tdd_r17_present, 1));
  HANDLE_CODE(bref.pack(fr1_fr2_non_shared_tdd_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pucch_group_cfg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fr1_fr1_non_shared_tdd_r17_present, 1));
  HANDLE_CODE(bref.unpack(fr2_fr2_non_shared_tdd_r17_present, 1));
  HANDLE_CODE(bref.unpack(fr1_fr2_non_shared_tdd_r17_present, 1));

  return SRSASN_SUCCESS;
}
void pucch_group_cfg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fr1_fr1_non_shared_tdd_r17_present) {
    j.write_str("fr1-FR1-NonSharedTDD-r17", "supported");
  }
  if (fr2_fr2_non_shared_tdd_r17_present) {
    j.write_str("fr2-FR2-NonSharedTDD-r17", "supported");
  }
  if (fr1_fr2_non_shared_tdd_r17_present) {
    j.write_str("fr1-FR2-NonSharedTDD-r17", "supported");
  }
  j.end_obj();
}

// PDCCH-BlindDetectionMCG-SCG-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_mcg_scg_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_mcg_ue_r17, (uint8_t)1u, (uint8_t)15u));
  HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_scg_ue_r17, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_mcg_scg_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_mcg_ue_r17, bref, (uint8_t)1u, (uint8_t)15u));
  HANDLE_CODE(unpack_integer(pdcch_blind_detection_scg_ue_r17, bref, (uint8_t)1u, (uint8_t)15u));

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_mcg_scg_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("pdcch-BlindDetectionMCG-UE-r17", pdcch_blind_detection_mcg_ue_r17);
  j.write_int("pdcch-BlindDetectionSCG-UE-r17", pdcch_blind_detection_scg_ue_r17);
  j.end_obj();
}

// PDCCH-BlindDetectionMixed-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_mixed_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_mixed_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_cg_ue_mixed_r17_present, 1));

  if (pdcch_blind_detection_ca_mixed_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_ca_mixed_r17.pack(bref));
  }
  if (pdcch_blind_detection_cg_ue_mixed_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_r17.pdcch_blind_detection_mcg_ue_mixed_v17.pack(bref));
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_r17.pdcch_blind_detection_scg_ue_mixed_v17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_mixed_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca_mixed_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_cg_ue_mixed_r17_present, 1));

  if (pdcch_blind_detection_ca_mixed_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_ca_mixed_r17.unpack(bref));
  }
  if (pdcch_blind_detection_cg_ue_mixed_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_r17.pdcch_blind_detection_mcg_ue_mixed_v17.unpack(bref));
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed_r17.pdcch_blind_detection_scg_ue_mixed_v17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_mixed_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_blind_detection_ca_mixed_r17_present) {
    j.write_fieldname("pdcch-BlindDetectionCA-Mixed-r17");
    pdcch_blind_detection_ca_mixed_r17.to_json(j);
  }
  if (pdcch_blind_detection_cg_ue_mixed_r17_present) {
    j.write_fieldname("pdcch-BlindDetectionCG-UE-Mixed-r17");
    j.start_obj();
    j.write_fieldname("pdcch-BlindDetectionMCG-UE-Mixed-v17");
    pdcch_blind_detection_cg_ue_mixed_r17.pdcch_blind_detection_mcg_ue_mixed_v17.to_json(j);
    j.write_fieldname("pdcch-BlindDetectionSCG-UE-Mixed-v17");
    pdcch_blind_detection_cg_ue_mixed_r17.pdcch_blind_detection_scg_ue_mixed_v17.to_json(j);
    j.end_obj();
  }
  j.end_obj();
}

// PDCCH-BlindDetectionMixed1-r17 ::= SEQUENCE
SRSASN_CODE pdcch_blind_detection_mixed1_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_mixed1_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_cg_ue_mixed1_r17_present, 1));

  if (pdcch_blind_detection_ca_mixed1_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_ca_mixed1_r17.pack(bref));
  }
  if (pdcch_blind_detection_cg_ue_mixed1_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed1_r17.pdcch_blind_detection_mcg_ue_mixed1_v17.pack(bref));
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed1_r17.pdcch_blind_detection_scg_ue_mixed1_v17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_blind_detection_mixed1_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca_mixed1_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_cg_ue_mixed1_r17_present, 1));

  if (pdcch_blind_detection_ca_mixed1_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_ca_mixed1_r17.unpack(bref));
  }
  if (pdcch_blind_detection_cg_ue_mixed1_r17_present) {
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed1_r17.pdcch_blind_detection_mcg_ue_mixed1_v17.unpack(bref));
    HANDLE_CODE(pdcch_blind_detection_cg_ue_mixed1_r17.pdcch_blind_detection_scg_ue_mixed1_v17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pdcch_blind_detection_mixed1_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_blind_detection_ca_mixed1_r17_present) {
    j.write_fieldname("pdcch-BlindDetectionCA-Mixed1-r17");
    pdcch_blind_detection_ca_mixed1_r17.to_json(j);
  }
  if (pdcch_blind_detection_cg_ue_mixed1_r17_present) {
    j.write_fieldname("pdcch-BlindDetectionCG-UE-Mixed1-r17");
    j.start_obj();
    j.write_fieldname("pdcch-BlindDetectionMCG-UE-Mixed1-v17");
    pdcch_blind_detection_cg_ue_mixed1_r17.pdcch_blind_detection_mcg_ue_mixed1_v17.to_json(j);
    j.write_fieldname("pdcch-BlindDetectionSCG-UE-Mixed1-v17");
    pdcch_blind_detection_cg_ue_mixed1_r17.pdcch_blind_detection_scg_ue_mixed1_v17.to_json(j);
    j.end_obj();
  }
  j.end_obj();
}

// TwoPUCCH-Grp-Configurations-r17 ::= SEQUENCE
SRSASN_CODE two_pucch_grp_cfgs_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(primary_pucch_group_cfg_r17.pack(bref));
  HANDLE_CODE(secondary_pucch_group_cfg_r17.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE two_pucch_grp_cfgs_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(primary_pucch_group_cfg_r17.unpack(bref));
  HANDLE_CODE(secondary_pucch_group_cfg_r17.unpack(bref));

  return SRSASN_SUCCESS;
}
void two_pucch_grp_cfgs_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("primaryPUCCH-GroupConfig-r17");
  primary_pucch_group_cfg_r17.to_json(j);
  j.write_fieldname("secondaryPUCCH-GroupConfig-r17");
  secondary_pucch_group_cfg_r17.to_json(j);
  j.end_obj();
}

// CA-ParametersNR-v1720 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(parallel_tx_srs_pucch_pusch_intra_band_r17_present, 1));
  HANDLE_CODE(bref.pack(parallel_tx_prach_srs_pucch_pusch_intra_band_r17_present, 1));
  HANDLE_CODE(bref.pack(semi_static_pucch_cell_switch_single_group_r17_present, 1));
  HANDLE_CODE(bref.pack(semi_static_pucch_cell_switch_two_groups_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(dyn_pucch_cell_switch_same_len_single_group_r17_present, 1));
  HANDLE_CODE(bref.pack(dyn_pucch_cell_switch_diff_len_single_group_r17_present, 1));
  HANDLE_CODE(bref.pack(dyn_pucch_cell_switch_same_len_two_groups_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(dyn_pucch_cell_switch_diff_len_two_groups_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ack_nack_feedback_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(ptp_retx_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(nack_only_feedback_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(nack_only_feedback_specific_res_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(ack_nack_feedback_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(ptp_retx_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(higher_pwr_limit_r17_present, 1));
  HANDLE_CODE(bref.pack(parallel_tx_msg_a_srs_pucch_pusch_intra_band_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_monitoring_ca_r17_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_mcg_scg_list_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_mixed_list1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_mixed_list2_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_mixed_list3_r17.size() > 0, 1));

  if (semi_static_pucch_cell_switch_single_group_r17_present) {
    HANDLE_CODE(semi_static_pucch_cell_switch_single_group_r17.pucch_group_r17.pack(bref));
    HANDLE_CODE(semi_static_pucch_cell_switch_single_group_r17.pucch_group_cfg_r17.pack(bref));
  }
  if (semi_static_pucch_cell_switch_two_groups_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, semi_static_pucch_cell_switch_two_groups_r17, 1, 16));
  }
  if (dyn_pucch_cell_switch_same_len_single_group_r17_present) {
    HANDLE_CODE(dyn_pucch_cell_switch_same_len_single_group_r17.pucch_group_r17.pack(bref));
    HANDLE_CODE(dyn_pucch_cell_switch_same_len_single_group_r17.pucch_group_cfg_r17.pack(bref));
  }
  if (dyn_pucch_cell_switch_diff_len_single_group_r17_present) {
    HANDLE_CODE(dyn_pucch_cell_switch_diff_len_single_group_r17.pucch_group_r17.pack(bref));
    HANDLE_CODE(dyn_pucch_cell_switch_diff_len_single_group_r17.pucch_group_cfg_r17.pack(bref));
  }
  if (dyn_pucch_cell_switch_same_len_two_groups_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, dyn_pucch_cell_switch_same_len_two_groups_r17, 1, 16));
  }
  if (dyn_pucch_cell_switch_diff_len_two_groups_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, dyn_pucch_cell_switch_diff_len_two_groups_r17, 1, 16));
  }
  if (pdcch_monitoring_ca_r17_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_monitoring_ca_r17, (uint8_t)4u, (uint8_t)16u));
  }
  if (pdcch_blind_detection_mcg_scg_list_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pdcch_blind_detection_mcg_scg_list_r17, 1, 16));
  }
  if (pdcch_blind_detection_mixed_list1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pdcch_blind_detection_mixed_list1_r17, 1, 16));
  }
  if (pdcch_blind_detection_mixed_list2_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pdcch_blind_detection_mixed_list2_r17, 1, 16));
  }
  if (pdcch_blind_detection_mixed_list3_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, pdcch_blind_detection_mixed_list3_r17, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1720_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(parallel_tx_srs_pucch_pusch_intra_band_r17_present, 1));
  HANDLE_CODE(bref.unpack(parallel_tx_prach_srs_pucch_pusch_intra_band_r17_present, 1));
  HANDLE_CODE(bref.unpack(semi_static_pucch_cell_switch_single_group_r17_present, 1));
  bool semi_static_pucch_cell_switch_two_groups_r17_present;
  HANDLE_CODE(bref.unpack(semi_static_pucch_cell_switch_two_groups_r17_present, 1));
  HANDLE_CODE(bref.unpack(dyn_pucch_cell_switch_same_len_single_group_r17_present, 1));
  HANDLE_CODE(bref.unpack(dyn_pucch_cell_switch_diff_len_single_group_r17_present, 1));
  bool dyn_pucch_cell_switch_same_len_two_groups_r17_present;
  HANDLE_CODE(bref.unpack(dyn_pucch_cell_switch_same_len_two_groups_r17_present, 1));
  bool dyn_pucch_cell_switch_diff_len_two_groups_r17_present;
  HANDLE_CODE(bref.unpack(dyn_pucch_cell_switch_diff_len_two_groups_r17_present, 1));
  HANDLE_CODE(bref.unpack(ack_nack_feedback_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(ptp_retx_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(nack_only_feedback_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(nack_only_feedback_specific_res_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(ack_nack_feedback_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(ptp_retx_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(higher_pwr_limit_r17_present, 1));
  HANDLE_CODE(bref.unpack(parallel_tx_msg_a_srs_pucch_pusch_intra_band_r17_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_monitoring_ca_r17_present, 1));
  bool pdcch_blind_detection_mcg_scg_list_r17_present;
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_mcg_scg_list_r17_present, 1));
  bool pdcch_blind_detection_mixed_list1_r17_present;
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_mixed_list1_r17_present, 1));
  bool pdcch_blind_detection_mixed_list2_r17_present;
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_mixed_list2_r17_present, 1));
  bool pdcch_blind_detection_mixed_list3_r17_present;
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_mixed_list3_r17_present, 1));

  if (semi_static_pucch_cell_switch_single_group_r17_present) {
    HANDLE_CODE(semi_static_pucch_cell_switch_single_group_r17.pucch_group_r17.unpack(bref));
    HANDLE_CODE(semi_static_pucch_cell_switch_single_group_r17.pucch_group_cfg_r17.unpack(bref));
  }
  if (semi_static_pucch_cell_switch_two_groups_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(semi_static_pucch_cell_switch_two_groups_r17, bref, 1, 16));
  }
  if (dyn_pucch_cell_switch_same_len_single_group_r17_present) {
    HANDLE_CODE(dyn_pucch_cell_switch_same_len_single_group_r17.pucch_group_r17.unpack(bref));
    HANDLE_CODE(dyn_pucch_cell_switch_same_len_single_group_r17.pucch_group_cfg_r17.unpack(bref));
  }
  if (dyn_pucch_cell_switch_diff_len_single_group_r17_present) {
    HANDLE_CODE(dyn_pucch_cell_switch_diff_len_single_group_r17.pucch_group_r17.unpack(bref));
    HANDLE_CODE(dyn_pucch_cell_switch_diff_len_single_group_r17.pucch_group_cfg_r17.unpack(bref));
  }
  if (dyn_pucch_cell_switch_same_len_two_groups_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(dyn_pucch_cell_switch_same_len_two_groups_r17, bref, 1, 16));
  }
  if (dyn_pucch_cell_switch_diff_len_two_groups_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(dyn_pucch_cell_switch_diff_len_two_groups_r17, bref, 1, 16));
  }
  if (pdcch_monitoring_ca_r17_present) {
    HANDLE_CODE(unpack_integer(pdcch_monitoring_ca_r17, bref, (uint8_t)4u, (uint8_t)16u));
  }
  if (pdcch_blind_detection_mcg_scg_list_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pdcch_blind_detection_mcg_scg_list_r17, bref, 1, 16));
  }
  if (pdcch_blind_detection_mixed_list1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pdcch_blind_detection_mixed_list1_r17, bref, 1, 16));
  }
  if (pdcch_blind_detection_mixed_list2_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pdcch_blind_detection_mixed_list2_r17, bref, 1, 16));
  }
  if (pdcch_blind_detection_mixed_list3_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(pdcch_blind_detection_mixed_list3_r17, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (parallel_tx_srs_pucch_pusch_intra_band_r17_present) {
    j.write_str("parallelTxSRS-PUCCH-PUSCH-intraBand-r17", "supported");
  }
  if (parallel_tx_prach_srs_pucch_pusch_intra_band_r17_present) {
    j.write_str("parallelTxPRACH-SRS-PUCCH-PUSCH-intraBand-r17", "supported");
  }
  if (semi_static_pucch_cell_switch_single_group_r17_present) {
    j.write_fieldname("semiStaticPUCCH-CellSwitchSingleGroup-r17");
    j.start_obj();
    j.write_str("pucch-Group-r17", semi_static_pucch_cell_switch_single_group_r17.pucch_group_r17.to_string());
    j.write_fieldname("pucch-Group-Config-r17");
    semi_static_pucch_cell_switch_single_group_r17.pucch_group_cfg_r17.to_json(j);
    j.end_obj();
  }
  if (semi_static_pucch_cell_switch_two_groups_r17.size() > 0) {
    j.start_array("semiStaticPUCCH-CellSwitchTwoGroups-r17");
    for (const auto& e1 : semi_static_pucch_cell_switch_two_groups_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (dyn_pucch_cell_switch_same_len_single_group_r17_present) {
    j.write_fieldname("dynamicPUCCH-CellSwitchSameLengthSingleGroup-r17");
    j.start_obj();
    j.write_str("pucch-Group-r17", dyn_pucch_cell_switch_same_len_single_group_r17.pucch_group_r17.to_string());
    j.write_fieldname("pucch-Group-Config-r17");
    dyn_pucch_cell_switch_same_len_single_group_r17.pucch_group_cfg_r17.to_json(j);
    j.end_obj();
  }
  if (dyn_pucch_cell_switch_diff_len_single_group_r17_present) {
    j.write_fieldname("dynamicPUCCH-CellSwitchDiffLengthSingleGroup-r17");
    j.start_obj();
    j.write_str("pucch-Group-r17", dyn_pucch_cell_switch_diff_len_single_group_r17.pucch_group_r17.to_string());
    j.write_fieldname("pucch-Group-Config-r17");
    dyn_pucch_cell_switch_diff_len_single_group_r17.pucch_group_cfg_r17.to_json(j);
    j.end_obj();
  }
  if (dyn_pucch_cell_switch_same_len_two_groups_r17.size() > 0) {
    j.start_array("dynamicPUCCH-CellSwitchSameLengthTwoGroups-r17");
    for (const auto& e1 : dyn_pucch_cell_switch_same_len_two_groups_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (dyn_pucch_cell_switch_diff_len_two_groups_r17.size() > 0) {
    j.start_array("dynamicPUCCH-CellSwitchDiffLengthTwoGroups-r17");
    for (const auto& e1 : dyn_pucch_cell_switch_diff_len_two_groups_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ack_nack_feedback_for_multicast_r17_present) {
    j.write_str("ack-NACK-FeedbackForMulticast-r17", "supported");
  }
  if (ptp_retx_multicast_r17_present) {
    j.write_str("ptp-Retx-Multicast-r17", "supported");
  }
  if (nack_only_feedback_for_multicast_r17_present) {
    j.write_str("nack-OnlyFeedbackForMulticast-r17", "supported");
  }
  if (nack_only_feedback_specific_res_for_multicast_r17_present) {
    j.write_str("nack-OnlyFeedbackSpecificResourceForMulticast-r17", "supported");
  }
  if (ack_nack_feedback_for_sps_multicast_r17_present) {
    j.write_str("ack-NACK-FeedbackForSPS-Multicast-r17", "supported");
  }
  if (ptp_retx_sps_multicast_r17_present) {
    j.write_str("ptp-Retx-SPS-Multicast-r17", "supported");
  }
  if (higher_pwr_limit_r17_present) {
    j.write_str("higherPowerLimit-r17", "supported");
  }
  if (parallel_tx_msg_a_srs_pucch_pusch_intra_band_r17_present) {
    j.write_str("parallelTxMsgA-SRS-PUCCH-PUSCH-intraBand-r17", "supported");
  }
  if (pdcch_monitoring_ca_r17_present) {
    j.write_int("pdcch-MonitoringCA-r17", pdcch_monitoring_ca_r17);
  }
  if (pdcch_blind_detection_mcg_scg_list_r17.size() > 0) {
    j.start_array("pdcch-BlindDetectionMCG-SCG-List-r17");
    for (const auto& e1 : pdcch_blind_detection_mcg_scg_list_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (pdcch_blind_detection_mixed_list1_r17.size() > 0) {
    j.start_array("pdcch-BlindDetectionMixedList1-r17");
    for (const auto& e1 : pdcch_blind_detection_mixed_list1_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (pdcch_blind_detection_mixed_list2_r17.size() > 0) {
    j.start_array("pdcch-BlindDetectionMixedList2-r17");
    for (const auto& e1 : pdcch_blind_detection_mixed_list2_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (pdcch_blind_detection_mixed_list3_r17.size() > 0) {
    j.start_array("pdcch-BlindDetectionMixedList3-r17");
    for (const auto& e1 : pdcch_blind_detection_mixed_list3_r17) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char*
ca_params_nr_v1720_s::semi_static_pucch_cell_switch_single_group_r17_s_::pucch_group_r17_opts::to_string() const
{
  static const char* names[] = {"primaryGroupOnly", "secondaryGroupOnly", "eitherPrimaryOrSecondaryGroup"};
  return convert_enum_idx(
      names, 3, value, "ca_params_nr_v1720_s::semi_static_pucch_cell_switch_single_group_r17_s_::pucch_group_r17_e_");
}

const char*
ca_params_nr_v1720_s::dyn_pucch_cell_switch_same_len_single_group_r17_s_::pucch_group_r17_opts::to_string() const
{
  static const char* names[] = {"primaryGroupOnly", "secondaryGroupOnly", "eitherPrimaryOrSecondaryGroup"};
  return convert_enum_idx(
      names, 3, value, "ca_params_nr_v1720_s::dyn_pucch_cell_switch_same_len_single_group_r17_s_::pucch_group_r17_e_");
}

const char*
ca_params_nr_v1720_s::dyn_pucch_cell_switch_diff_len_single_group_r17_s_::pucch_group_r17_opts::to_string() const
{
  static const char* names[] = {"primaryGroupOnly", "secondaryGroupOnly", "eitherPrimaryOrSecondaryGroup"};
  return convert_enum_idx(
      names, 3, value, "ca_params_nr_v1720_s::dyn_pucch_cell_switch_diff_len_single_group_r17_s_::pucch_group_r17_e_");
}

// CA-ParametersNRDC-v1720 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1700_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1720_present, 1));

  if (ca_params_nr_for_dc_v1700_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1700.pack(bref));
  }
  if (ca_params_nr_for_dc_v1720_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1720.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v1720_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1700_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1720_present, 1));

  if (ca_params_nr_for_dc_v1700_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1700.unpack(bref));
  }
  if (ca_params_nr_for_dc_v1720_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1720.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_for_dc_v1700_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1700");
    ca_params_nr_for_dc_v1700.to_json(j);
  }
  if (ca_params_nr_for_dc_v1720_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1720");
    ca_params_nr_for_dc_v1720.to_json(j);
  }
  j.end_obj();
}

// BandCombination-v1720 ::= SEQUENCE
SRSASN_CODE band_combination_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1720_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v1720_present, 1));

  if (ca_params_nr_v1720_present) {
    HANDLE_CODE(ca_params_nr_v1720.pack(bref));
  }
  if (ca_params_nrdc_v1720_present) {
    HANDLE_CODE(ca_params_nrdc_v1720.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1720_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1720_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v1720_present, 1));

  if (ca_params_nr_v1720_present) {
    HANDLE_CODE(ca_params_nr_v1720.unpack(bref));
  }
  if (ca_params_nrdc_v1720_present) {
    HANDLE_CODE(ca_params_nrdc_v1720.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v1720_present) {
    j.write_fieldname("ca-ParametersNR-v1720");
    ca_params_nr_v1720.to_json(j);
  }
  if (ca_params_nrdc_v1720_present) {
    j.write_fieldname("ca-ParametersNRDC-v1720");
    ca_params_nrdc_v1720.to_json(j);
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1720 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1720_present, 1));
  HANDLE_CODE(bref.pack(ul_tx_switching_option_support2_t2_t_r17_present, 1));

  if (band_combination_v1720_present) {
    HANDLE_CODE(band_combination_v1720.pack(bref));
  }
  if (ul_tx_switching_option_support2_t2_t_r17_present) {
    HANDLE_CODE(ul_tx_switching_option_support2_t2_t_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1720_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1720_present, 1));
  HANDLE_CODE(bref.unpack(ul_tx_switching_option_support2_t2_t_r17_present, 1));

  if (band_combination_v1720_present) {
    HANDLE_CODE(band_combination_v1720.unpack(bref));
  }
  if (ul_tx_switching_option_support2_t2_t_r17_present) {
    HANDLE_CODE(ul_tx_switching_option_support2_t2_t_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1720_present) {
    j.write_fieldname("bandCombination-v1720");
    band_combination_v1720.to_json(j);
  }
  if (ul_tx_switching_option_support2_t2_t_r17_present) {
    j.write_str("uplinkTxSwitching-OptionSupport2T2T-r17", ul_tx_switching_option_support2_t2_t_r17.to_string());
  }
  j.end_obj();
}

const char* band_combination_ul_tx_switch_v1720_s::ul_tx_switching_option_support2_t2_t_r17_opts::to_string() const
{
  static const char* names[] = {"switchedUL", "dualUL", "both"};
  return convert_enum_idx(
      names, 3, value, "band_combination_ul_tx_switch_v1720_s::ul_tx_switching_option_support2_t2_t_r17_e_");
}

// CA-ParametersNR-v1730 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dmrs_bundling_pusch_rep_type_a_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(dmrs_bundling_pusch_rep_type_b_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(dmrs_bundling_pusch_multi_slot_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(dmrs_bundling_pucch_rep_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(dmrs_bundling_restart_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(dmrs_bundling_non_back_to_back_tx_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(stay_on_target_cc_srs_carrier_switch_r17_present, 1));
  HANDLE_CODE(bref.pack(fdm_codebook_for_mux_unicast_multicast_harq_ack_r17_present, 1));
  HANDLE_CODE(bref.pack(mode2_tdm_codebook_for_mux_unicast_multicast_harq_ack_r17_present, 1));
  HANDLE_CODE(bref.pack(mode1_for_type1_codebook_generation_r17_present, 1));
  HANDLE_CODE(bref.pack(nack_only_feedback_specific_res_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(multi_pucch_cfg_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(pucch_cfg_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_g_rnti_harq_ack_codebook_r17_present, 1));
  HANDLE_CODE(bref.pack(mux_harq_ack_unicast_multicast_r17_present, 1));

  if (max_num_g_rnti_harq_ack_codebook_r17_present) {
    HANDLE_CODE(pack_integer(bref, max_num_g_rnti_harq_ack_codebook_r17, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dmrs_bundling_pusch_rep_type_a_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(dmrs_bundling_pusch_rep_type_b_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(dmrs_bundling_pusch_multi_slot_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(dmrs_bundling_pucch_rep_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(dmrs_bundling_restart_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(dmrs_bundling_non_back_to_back_tx_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(stay_on_target_cc_srs_carrier_switch_r17_present, 1));
  HANDLE_CODE(bref.unpack(fdm_codebook_for_mux_unicast_multicast_harq_ack_r17_present, 1));
  HANDLE_CODE(bref.unpack(mode2_tdm_codebook_for_mux_unicast_multicast_harq_ack_r17_present, 1));
  HANDLE_CODE(bref.unpack(mode1_for_type1_codebook_generation_r17_present, 1));
  HANDLE_CODE(bref.unpack(nack_only_feedback_specific_res_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(multi_pucch_cfg_for_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(pucch_cfg_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_g_rnti_harq_ack_codebook_r17_present, 1));
  HANDLE_CODE(bref.unpack(mux_harq_ack_unicast_multicast_r17_present, 1));

  if (max_num_g_rnti_harq_ack_codebook_r17_present) {
    HANDLE_CODE(unpack_integer(max_num_g_rnti_harq_ack_codebook_r17, bref, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dmrs_bundling_pusch_rep_type_a_per_bc_r17_present) {
    j.write_str("dmrs-BundlingPUSCH-RepTypeAPerBC-r17", "supported");
  }
  if (dmrs_bundling_pusch_rep_type_b_per_bc_r17_present) {
    j.write_str("dmrs-BundlingPUSCH-RepTypeBPerBC-r17", "supported");
  }
  if (dmrs_bundling_pusch_multi_slot_per_bc_r17_present) {
    j.write_str("dmrs-BundlingPUSCH-multiSlotPerBC-r17", "supported");
  }
  if (dmrs_bundling_pucch_rep_per_bc_r17_present) {
    j.write_str("dmrs-BundlingPUCCH-RepPerBC-r17", "supported");
  }
  if (dmrs_bundling_restart_per_bc_r17_present) {
    j.write_str("dmrs-BundlingRestartPerBC-r17", "supported");
  }
  if (dmrs_bundling_non_back_to_back_tx_per_bc_r17_present) {
    j.write_str("dmrs-BundlingNonBackToBackTX-PerBC-r17", "supported");
  }
  if (stay_on_target_cc_srs_carrier_switch_r17_present) {
    j.write_str("stayOnTargetCC-SRS-CarrierSwitch-r17", "supported");
  }
  if (fdm_codebook_for_mux_unicast_multicast_harq_ack_r17_present) {
    j.write_str("fdm-CodebookForMux-UnicastMulticastHARQ-ACK-r17", "supported");
  }
  if (mode2_tdm_codebook_for_mux_unicast_multicast_harq_ack_r17_present) {
    j.write_str("mode2-TDM-CodebookForMux-UnicastMulticastHARQ-ACK-r17", "supported");
  }
  if (mode1_for_type1_codebook_generation_r17_present) {
    j.write_str("mode1-ForType1-CodebookGeneration-r17", "supported");
  }
  if (nack_only_feedback_specific_res_for_sps_multicast_r17_present) {
    j.write_str("nack-OnlyFeedbackSpecificResourceForSPS-Multicast-r17", "supported");
  }
  if (multi_pucch_cfg_for_multicast_r17_present) {
    j.write_str("multiPUCCH-ConfigForMulticast-r17", "supported");
  }
  if (pucch_cfg_for_sps_multicast_r17_present) {
    j.write_str("pucch-ConfigForSPS-Multicast-r17", "supported");
  }
  if (max_num_g_rnti_harq_ack_codebook_r17_present) {
    j.write_int("maxNumberG-RNTI-HARQ-ACK-Codebook-r17", max_num_g_rnti_harq_ack_codebook_r17);
  }
  if (mux_harq_ack_unicast_multicast_r17_present) {
    j.write_str("mux-HARQ-ACK-UnicastMulticast-r17", "supported");
  }
  j.end_obj();
}

// BandParameters-v1730 ::= SEQUENCE
SRSASN_CODE band_params_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_dyn_seq_of(bref, srs_switching_affected_bands_list_nr_r17, 1, 32));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_dyn_seq_of(srs_switching_affected_bands_list_nr_r17, bref, 1, 32));

  return SRSASN_SUCCESS;
}
void band_params_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("srs-SwitchingAffectedBandsListNR-r17");
  for (const auto& e1 : srs_switching_affected_bands_list_nr_r17) {
    j.write_str(e1.to_string());
  }
  j.end_array();
  j.end_obj();
}

// CA-ParametersNRDC-v1730 ::= SEQUENCE
SRSASN_CODE ca_params_nrdc_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_for_dc_v1730_present, 1));

  if (ca_params_nr_for_dc_v1730_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1730.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nrdc_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_for_dc_v1730_present, 1));

  if (ca_params_nr_for_dc_v1730_present) {
    HANDLE_CODE(ca_params_nr_for_dc_v1730.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ca_params_nrdc_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_for_dc_v1730_present) {
    j.write_fieldname("ca-ParametersNR-ForDC-v1730");
    ca_params_nr_for_dc_v1730.to_json(j);
  }
  j.end_obj();
}

// BandCombination-v1730 ::= SEQUENCE
SRSASN_CODE band_combination_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1730_present, 1));
  HANDLE_CODE(bref.pack(ca_params_nrdc_v1730_present, 1));
  HANDLE_CODE(bref.pack(band_list_v1730.size() > 0, 1));

  if (ca_params_nr_v1730_present) {
    HANDLE_CODE(ca_params_nr_v1730.pack(bref));
  }
  if (ca_params_nrdc_v1730_present) {
    HANDLE_CODE(ca_params_nrdc_v1730.pack(bref));
  }
  if (band_list_v1730.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, band_list_v1730, 1, 32));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1730_present, 1));
  HANDLE_CODE(bref.unpack(ca_params_nrdc_v1730_present, 1));
  bool band_list_v1730_present;
  HANDLE_CODE(bref.unpack(band_list_v1730_present, 1));

  if (ca_params_nr_v1730_present) {
    HANDLE_CODE(ca_params_nr_v1730.unpack(bref));
  }
  if (ca_params_nrdc_v1730_present) {
    HANDLE_CODE(ca_params_nrdc_v1730.unpack(bref));
  }
  if (band_list_v1730_present) {
    HANDLE_CODE(unpack_dyn_seq_of(band_list_v1730, bref, 1, 32));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v1730_present) {
    j.write_fieldname("ca-ParametersNR-v1730");
    ca_params_nr_v1730.to_json(j);
  }
  if (ca_params_nrdc_v1730_present) {
    j.write_fieldname("ca-ParametersNRDC-v1730");
    ca_params_nrdc_v1730.to_json(j);
  }
  if (band_list_v1730.size() > 0) {
    j.start_array("bandList-v1730");
    for (const auto& e1 : band_list_v1730) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1730 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1730_present, 1));

  if (band_combination_v1730_present) {
    HANDLE_CODE(band_combination_v1730.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1730_present, 1));

  if (band_combination_v1730_present) {
    HANDLE_CODE(band_combination_v1730.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1730_present) {
    j.write_fieldname("bandCombination-v1730");
    band_combination_v1730.to_json(j);
  }
  j.end_obj();
}

// CA-ParametersNR-v1740 ::= SEQUENCE
SRSASN_CODE ca_params_nr_v1740_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nack_only_feedback_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.pack(single_pucch_cfg_for_multicast_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ca_params_nr_v1740_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(nack_only_feedback_for_sps_multicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(single_pucch_cfg_for_multicast_r17_present, 1));

  return SRSASN_SUCCESS;
}
void ca_params_nr_v1740_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (nack_only_feedback_for_sps_multicast_r17_present) {
    j.write_str("nack-OnlyFeedbackForSPS-Multicast-r17", "supported");
  }
  if (single_pucch_cfg_for_multicast_r17_present) {
    j.write_str("singlePUCCH-ConfigForMulticast-r17", "supported");
  }
  j.end_obj();
}

// BandCombination-v1740 ::= SEQUENCE
SRSASN_CODE band_combination_v1740_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_params_nr_v1740_present, 1));

  if (ca_params_nr_v1740_present) {
    HANDLE_CODE(ca_params_nr_v1740.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1740_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_params_nr_v1740_present, 1));

  if (ca_params_nr_v1740_present) {
    HANDLE_CODE(ca_params_nr_v1740.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1740_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ca_params_nr_v1740_present) {
    j.write_fieldname("ca-ParametersNR-v1740");
    ca_params_nr_v1740.to_json(j);
  }
  j.end_obj();
}

// BandCombination-UplinkTxSwitch-v1740 ::= SEQUENCE
SRSASN_CODE band_combination_ul_tx_switch_v1740_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(band_combination_v1740_present, 1));

  if (band_combination_v1740_present) {
    HANDLE_CODE(band_combination_v1740.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_ul_tx_switch_v1740_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(band_combination_v1740_present, 1));

  if (band_combination_v1740_present) {
    HANDLE_CODE(band_combination_v1740.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_combination_ul_tx_switch_v1740_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (band_combination_v1740_present) {
    j.write_fieldname("bandCombination-v1740");
    band_combination_v1740.to_json(j);
  }
  j.end_obj();
}

// BandCombination-v1550 ::= SEQUENCE
SRSASN_CODE band_combination_v1550_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(ca_params_nr_v1550.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1550_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(ca_params_nr_v1550.unpack(bref));

  return SRSASN_SUCCESS;
}
void band_combination_v1550_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("ca-ParametersNR-v1550");
  ca_params_nr_v1550.to_json(j);
  j.end_obj();
}

// IntraBandPowerClass-r16 ::= ENUMERATED
const char* intra_band_pwr_class_r16_opts::to_string() const
{
  static const char* names[] = {"pc2", "pc3", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "intra_band_pwr_class_r16_e");
}
uint8_t intra_band_pwr_class_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "intra_band_pwr_class_r16_e");
}

// BandCombination-v1680 ::= SEQUENCE
SRSASN_CODE band_combination_v1680_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(intraband_concurrent_operation_pwr_class_r16.size() > 0, 1));

  if (intraband_concurrent_operation_pwr_class_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, intraband_concurrent_operation_pwr_class_r16, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_combination_v1680_s::unpack(cbit_ref& bref)
{
  bool intraband_concurrent_operation_pwr_class_r16_present;
  HANDLE_CODE(bref.unpack(intraband_concurrent_operation_pwr_class_r16_present, 1));

  if (intraband_concurrent_operation_pwr_class_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(intraband_concurrent_operation_pwr_class_r16, bref, 1, 65536));
  }

  return SRSASN_SUCCESS;
}
void band_combination_v1680_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (intraband_concurrent_operation_pwr_class_r16.size() > 0) {
    j.start_array("intrabandConcurrentOperationPowerClass-r16");
    for (const auto& e1 : intraband_concurrent_operation_pwr_class_r16) {
      j.write_str(e1.to_string());
    }
    j.end_array();
  }
  j.end_obj();
}

// BandParametersSidelinkDiscovery-r17 ::= SEQUENCE
SRSASN_CODE band_params_sidelink_discovery_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sl_cross_carrier_sched_r17_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_mode2_partial_sensing_r17_present, 1));
  HANDLE_CODE(bref.pack(tx_iuc_scheme1_mode2_sidelink_r17_present, 1));

  if (sl_tx_mode2_partial_sensing_r17_present) {
    HANDLE_CODE(bref.pack(sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present, 1));
    HANDLE_CODE(bref.pack(sl_tx_mode2_partial_sensing_r17.extended_cp_mode2_partial_sensing_r17_present, 1));
    HANDLE_CODE(bref.pack(sl_tx_mode2_partial_sensing_r17.dl_open_loop_pc_sidelink_r17_present, 1));
    HANDLE_CODE(sl_tx_mode2_partial_sensing_r17.harq_tx_process_mode_two_sidelink_r17.pack(bref));
    if (sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
      HANDLE_CODE(sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_discovery_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sl_cross_carrier_sched_r17_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_mode2_partial_sensing_r17_present, 1));
  HANDLE_CODE(bref.unpack(tx_iuc_scheme1_mode2_sidelink_r17_present, 1));

  if (sl_tx_mode2_partial_sensing_r17_present) {
    HANDLE_CODE(bref.unpack(sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present, 1));
    HANDLE_CODE(bref.unpack(sl_tx_mode2_partial_sensing_r17.extended_cp_mode2_partial_sensing_r17_present, 1));
    HANDLE_CODE(bref.unpack(sl_tx_mode2_partial_sensing_r17.dl_open_loop_pc_sidelink_r17_present, 1));
    HANDLE_CODE(sl_tx_mode2_partial_sensing_r17.harq_tx_process_mode_two_sidelink_r17.unpack(bref));
    if (sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
      HANDLE_CODE(sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void band_params_sidelink_discovery_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_cross_carrier_sched_r17_present) {
    j.write_str("sl-CrossCarrierScheduling-r17", "supported");
  }
  if (sl_tx_mode2_partial_sensing_r17_present) {
    j.write_fieldname("sl-TransmissionMode2-PartialSensing-r17");
    j.start_obj();
    j.write_str("harq-TxProcessModeTwoSidelink-r17",
                sl_tx_mode2_partial_sensing_r17.harq_tx_process_mode_two_sidelink_r17.to_string());
    if (sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
      j.write_fieldname("scs-CP-PatternTxSidelinkModeTwo-r17");
      sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17.to_json(j);
    }
    if (sl_tx_mode2_partial_sensing_r17.extended_cp_mode2_partial_sensing_r17_present) {
      j.write_str("extendedCP-Mode2PartialSensing-r17", "supported");
    }
    if (sl_tx_mode2_partial_sensing_r17.dl_open_loop_pc_sidelink_r17_present) {
      j.write_str("dl-openLoopPC-Sidelink-r17", "supported");
    }
    j.end_obj();
  }
  if (tx_iuc_scheme1_mode2_sidelink_r17_present) {
    j.write_str("tx-IUC-Scheme1-Mode2Sidelink-r17", "supported");
  }
  j.end_obj();
}

const char* band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    harq_tx_process_mode_two_sidelink_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(names,
                          2,
                          value,
                          "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::harq_tx_process_"
                          "mode_two_sidelink_r17_e_");
}
uint8_t band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    harq_tx_process_mode_two_sidelink_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(numbers,
                         2,
                         value,
                         "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::harq_tx_process_"
                         "mode_two_sidelink_r17_e_");
}

void band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::destroy_()
{
  switch (type_) {
    case types::fr1_r17:
      c.destroy<fr1_r17_s_>();
      break;
    case types::fr2_r17:
      c.destroy<fr2_r17_s_>();
      break;
    default:
      break;
  }
}
void band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_r17:
      c.init<fr1_r17_s_>();
      break;
    case types::fr2_r17:
      c.init<fr2_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_"
                            "tx_sidelink_mode_two_r17_c_");
  }
}
band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_(
        const band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
            scs_cp_pattern_tx_sidelink_mode_two_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r17:
      c.init(other.c.get<fr1_r17_s_>());
      break;
    case types::fr2_r17:
      c.init(other.c.get<fr2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_"
                            "tx_sidelink_mode_two_r17_c_");
  }
}
band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_&
band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::
operator=(const band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
              scs_cp_pattern_tx_sidelink_mode_two_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r17:
      c.set(other.c.get<fr1_r17_s_>());
      break;
    case types::fr2_r17:
      c.set(other.c.get<fr2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_"
                            "tx_sidelink_mode_two_r17_c_");
  }

  return *this;
}
band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::
    fr1_r17_s_&
    band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
        scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set_fr1_r17()
{
  set(types::fr1_r17);
  return c.get<fr1_r17_s_>();
}
band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::
    fr2_r17_s_&
    band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
        scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set_fr2_r17()
{
  set(types::fr2_r17);
  return c.get<fr2_r17_s_>();
}
void band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r17:
      j.write_fieldname("fr1-r17");
      j.start_obj();
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        j.write_str("scs-15kHz-r17", c.get<fr1_r17_s_>().scs_15k_hz_r17.to_string());
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        j.write_str("scs-30kHz-r17", c.get<fr1_r17_s_>().scs_30k_hz_r17.to_string());
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        j.write_str("scs-60kHz-r17", c.get<fr1_r17_s_>().scs_60k_hz_r17.to_string());
      }
      j.end_obj();
      break;
    case types::fr2_r17:
      j.write_fieldname("fr2-r17");
      j.start_obj();
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        j.write_str("scs-60kHz-r17", c.get<fr2_r17_s_>().scs_60k_hz_r17.to_string());
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        j.write_str("scs-120kHz-r17", c.get<fr2_r17_s_>().scs_120k_hz_r17.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_"
                            "tx_sidelink_mode_two_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_15k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_30k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_60k_hz_r17_present, 1));
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_15k_hz_r17.pack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_30k_hz_r17.pack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_60k_hz_r17.pack(bref));
      }
      break;
    case types::fr2_r17:
      HANDLE_CODE(bref.pack(c.get<fr2_r17_s_>().scs_60k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_r17_s_>().scs_120k_hz_r17_present, 1));
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_60k_hz_r17.pack(bref));
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_120k_hz_r17.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_"
                            "tx_sidelink_mode_two_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_15k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_30k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_60k_hz_r17_present, 1));
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_15k_hz_r17.unpack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_30k_hz_r17.unpack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_60k_hz_r17.unpack(bref));
      }
      break;
    case types::fr2_r17:
      HANDLE_CODE(bref.unpack(c.get<fr2_r17_s_>().scs_60k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_r17_s_>().scs_120k_hz_r17_present, 1));
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_60k_hz_r17.unpack(bref));
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_120k_hz_r17.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_discovery_r17_s::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_pattern_"
                            "tx_sidelink_mode_two_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// BandParametersSidelink-r16 ::= SEQUENCE
SRSASN_CODE band_params_sidelink_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, freq_band_sidelink_r16, (uint16_t)1u, (uint16_t)1024u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(freq_band_sidelink_r16, bref, (uint16_t)1u, (uint16_t)1024u));

  return SRSASN_SUCCESS;
}
void band_params_sidelink_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("freqBandSidelink-r16", freq_band_sidelink_r16);
  j.end_obj();
}

// BandParametersSidelinkEUTRA-NR-r16 ::= CHOICE
void band_params_sidelink_eutra_nr_r16_c::destroy_()
{
  switch (type_) {
    case types::eutra:
      c.destroy<eutra_s_>();
      break;
    case types::nr:
      c.destroy<nr_s_>();
      break;
    default:
      break;
  }
}
void band_params_sidelink_eutra_nr_r16_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::eutra:
      c.init<eutra_s_>();
      break;
    case types::nr:
      c.init<nr_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_r16_c");
  }
}
band_params_sidelink_eutra_nr_r16_c::band_params_sidelink_eutra_nr_r16_c(
    const band_params_sidelink_eutra_nr_r16_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::eutra:
      c.init(other.c.get<eutra_s_>());
      break;
    case types::nr:
      c.init(other.c.get<nr_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_r16_c");
  }
}
band_params_sidelink_eutra_nr_r16_c&
band_params_sidelink_eutra_nr_r16_c::operator=(const band_params_sidelink_eutra_nr_r16_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::eutra:
      c.set(other.c.get<eutra_s_>());
      break;
    case types::nr:
      c.set(other.c.get<nr_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_r16_c");
  }

  return *this;
}
band_params_sidelink_eutra_nr_r16_c::eutra_s_& band_params_sidelink_eutra_nr_r16_c::set_eutra()
{
  set(types::eutra);
  return c.get<eutra_s_>();
}
band_params_sidelink_eutra_nr_r16_c::nr_s_& band_params_sidelink_eutra_nr_r16_c::set_nr()
{
  set(types::nr);
  return c.get<nr_s_>();
}
void band_params_sidelink_eutra_nr_r16_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutra:
      j.write_fieldname("eutra");
      j.start_obj();
      if (c.get<eutra_s_>().band_params_sidelink_eutra1_r16.size() > 0) {
        j.write_str("bandParametersSidelinkEUTRA1-r16", c.get<eutra_s_>().band_params_sidelink_eutra1_r16.to_string());
      }
      if (c.get<eutra_s_>().band_params_sidelink_eutra2_r16.size() > 0) {
        j.write_str("bandParametersSidelinkEUTRA2-r16", c.get<eutra_s_>().band_params_sidelink_eutra2_r16.to_string());
      }
      j.end_obj();
      break;
    case types::nr:
      j.write_fieldname("nr");
      j.start_obj();
      j.write_fieldname("bandParametersSidelinkNR-r16");
      c.get<nr_s_>().band_params_sidelink_nr_r16.to_json(j);
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_r16_c");
  }
  j.end_obj();
}
SRSASN_CODE band_params_sidelink_eutra_nr_r16_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutra:
      HANDLE_CODE(bref.pack(c.get<eutra_s_>().band_params_sidelink_eutra1_r16.size() > 0, 1));
      HANDLE_CODE(bref.pack(c.get<eutra_s_>().band_params_sidelink_eutra2_r16.size() > 0, 1));
      if (c.get<eutra_s_>().band_params_sidelink_eutra1_r16.size() > 0) {
        HANDLE_CODE(c.get<eutra_s_>().band_params_sidelink_eutra1_r16.pack(bref));
      }
      if (c.get<eutra_s_>().band_params_sidelink_eutra2_r16.size() > 0) {
        HANDLE_CODE(c.get<eutra_s_>().band_params_sidelink_eutra2_r16.pack(bref));
      }
      break;
    case types::nr:
      HANDLE_CODE(c.get<nr_s_>().band_params_sidelink_nr_r16.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_r16_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_eutra_nr_r16_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutra:
      bool band_params_sidelink_eutra1_r16_present;
      HANDLE_CODE(bref.unpack(band_params_sidelink_eutra1_r16_present, 1));
      bool band_params_sidelink_eutra2_r16_present;
      HANDLE_CODE(bref.unpack(band_params_sidelink_eutra2_r16_present, 1));
      if (band_params_sidelink_eutra1_r16_present) {
        HANDLE_CODE(c.get<eutra_s_>().band_params_sidelink_eutra1_r16.unpack(bref));
      }
      if (band_params_sidelink_eutra2_r16_present) {
        HANDLE_CODE(c.get<eutra_s_>().band_params_sidelink_eutra2_r16.unpack(bref));
      }
      break;
    case types::nr:
      HANDLE_CODE(c.get<nr_s_>().band_params_sidelink_nr_r16.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_r16_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// BandParametersSidelinkEUTRA-NR-v1630 ::= CHOICE
void band_params_sidelink_eutra_nr_v1630_c::set(types::options e)
{
  type_ = e;
}
void band_params_sidelink_eutra_nr_v1630_c::set_eutra()
{
  set(types::eutra);
}
band_params_sidelink_eutra_nr_v1630_c::nr_s_& band_params_sidelink_eutra_nr_v1630_c::set_nr()
{
  set(types::nr);
  return c;
}
void band_params_sidelink_eutra_nr_v1630_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutra:
      break;
    case types::nr:
      j.write_fieldname("nr");
      j.start_obj();
      if (c.tx_sidelink_r16_present) {
        j.write_str("tx-Sidelink-r16", "supported");
      }
      if (c.rx_sidelink_r16_present) {
        j.write_str("rx-Sidelink-r16", "supported");
      }
      if (c.sl_cross_carrier_sched_r16_present) {
        j.write_str("sl-CrossCarrierScheduling-r16", "supported");
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_v1630_c");
  }
  j.end_obj();
}
SRSASN_CODE band_params_sidelink_eutra_nr_v1630_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutra:
      break;
    case types::nr:
      HANDLE_CODE(bref.pack(c.tx_sidelink_r16_present, 1));
      HANDLE_CODE(bref.pack(c.rx_sidelink_r16_present, 1));
      HANDLE_CODE(bref.pack(c.sl_cross_carrier_sched_r16_present, 1));
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_v1630_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_eutra_nr_v1630_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutra:
      break;
    case types::nr:
      HANDLE_CODE(bref.unpack(c.tx_sidelink_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.rx_sidelink_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.sl_cross_carrier_sched_r16_present, 1));
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_v1630_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// BandParametersSidelinkEUTRA-NR-v1710 ::= CHOICE
void band_params_sidelink_eutra_nr_v1710_c::set(types::options e)
{
  type_ = e;
}
void band_params_sidelink_eutra_nr_v1710_c::set_eutra()
{
  set(types::eutra);
}
band_params_sidelink_eutra_nr_v1710_c::nr_s_& band_params_sidelink_eutra_nr_v1710_c::set_nr()
{
  set(types::nr);
  return c;
}
void band_params_sidelink_eutra_nr_v1710_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutra:
      break;
    case types::nr:
      j.write_fieldname("nr");
      j.start_obj();
      if (c.sl_tx_mode2_partial_sensing_r17_present) {
        j.write_fieldname("sl-TransmissionMode2-PartialSensing-r17");
        j.start_obj();
        j.write_str("harq-TxProcessModeTwoSidelink-r17",
                    c.sl_tx_mode2_partial_sensing_r17.harq_tx_process_mode_two_sidelink_r17.to_string());
        if (c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
          j.write_fieldname("scs-CP-PatternTxSidelinkModeTwo-r17");
          c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17.to_json(j);
        }
        if (c.sl_tx_mode2_partial_sensing_r17.extended_cp_mode2_partial_sensing_r17_present) {
          j.write_str("extendedCP-Mode2PartialSensing-r17", "supported");
        }
        if (c.sl_tx_mode2_partial_sensing_r17.dl_open_loop_pc_sidelink_r17_present) {
          j.write_str("dl-openLoopPC-Sidelink-r17", "supported");
        }
        j.end_obj();
      }
      if (c.rx_sidelink_psfch_r17_present) {
        j.write_str("rx-sidelinkPSFCH-r17", c.rx_sidelink_psfch_r17.to_string());
      }
      if (c.tx_iuc_scheme1_mode2_sidelink_r17_present) {
        j.write_str("tx-IUC-Scheme1-Mode2Sidelink-r17", "supported");
      }
      if (c.tx_iuc_scheme2_mode2_sidelink_r17_present) {
        j.write_str("tx-IUC-Scheme2-Mode2Sidelink-r17", c.tx_iuc_scheme2_mode2_sidelink_r17.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_v1710_c");
  }
  j.end_obj();
}
SRSASN_CODE band_params_sidelink_eutra_nr_v1710_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutra:
      break;
    case types::nr:
      HANDLE_CODE(bref.pack(c.sl_tx_mode2_partial_sensing_r17_present, 1));
      HANDLE_CODE(bref.pack(c.rx_sidelink_psfch_r17_present, 1));
      HANDLE_CODE(bref.pack(c.tx_iuc_scheme1_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(c.tx_iuc_scheme2_mode2_sidelink_r17_present, 1));
      if (c.sl_tx_mode2_partial_sensing_r17_present) {
        HANDLE_CODE(bref.pack(c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present, 1));
        HANDLE_CODE(bref.pack(c.sl_tx_mode2_partial_sensing_r17.extended_cp_mode2_partial_sensing_r17_present, 1));
        HANDLE_CODE(bref.pack(c.sl_tx_mode2_partial_sensing_r17.dl_open_loop_pc_sidelink_r17_present, 1));
        HANDLE_CODE(c.sl_tx_mode2_partial_sensing_r17.harq_tx_process_mode_two_sidelink_r17.pack(bref));
        if (c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
          HANDLE_CODE(c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17.pack(bref));
        }
      }
      if (c.rx_sidelink_psfch_r17_present) {
        HANDLE_CODE(c.rx_sidelink_psfch_r17.pack(bref));
      }
      if (c.tx_iuc_scheme2_mode2_sidelink_r17_present) {
        HANDLE_CODE(c.tx_iuc_scheme2_mode2_sidelink_r17.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_v1710_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_eutra_nr_v1710_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutra:
      break;
    case types::nr:
      HANDLE_CODE(bref.unpack(c.sl_tx_mode2_partial_sensing_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.rx_sidelink_psfch_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.tx_iuc_scheme1_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.tx_iuc_scheme2_mode2_sidelink_r17_present, 1));
      if (c.sl_tx_mode2_partial_sensing_r17_present) {
        HANDLE_CODE(bref.unpack(c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present, 1));
        HANDLE_CODE(bref.unpack(c.sl_tx_mode2_partial_sensing_r17.extended_cp_mode2_partial_sensing_r17_present, 1));
        HANDLE_CODE(bref.unpack(c.sl_tx_mode2_partial_sensing_r17.dl_open_loop_pc_sidelink_r17_present, 1));
        HANDLE_CODE(c.sl_tx_mode2_partial_sensing_r17.harq_tx_process_mode_two_sidelink_r17.unpack(bref));
        if (c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
          HANDLE_CODE(c.sl_tx_mode2_partial_sensing_r17.scs_cp_pattern_tx_sidelink_mode_two_r17.unpack(bref));
        }
      }
      if (c.rx_sidelink_psfch_r17_present) {
        HANDLE_CODE(c.rx_sidelink_psfch_r17.unpack(bref));
      }
      if (c.tx_iuc_scheme2_mode2_sidelink_r17_present) {
        HANDLE_CODE(c.tx_iuc_scheme2_mode2_sidelink_r17.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_params_sidelink_eutra_nr_v1710_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    harq_tx_process_mode_two_sidelink_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(names,
                          2,
                          value,
                          "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::harq_tx_"
                          "process_mode_two_sidelink_r17_e_");
}
uint8_t band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    harq_tx_process_mode_two_sidelink_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(numbers,
                         2,
                         value,
                         "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::harq_tx_"
                         "process_mode_two_sidelink_r17_e_");
}

void band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::destroy_()
{
  switch (type_) {
    case types::fr1_r17:
      c.destroy<fr1_r17_s_>();
      break;
    case types::fr2_r17:
      c.destroy<fr2_r17_s_>();
      break;
    default:
      break;
  }
}
void band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_r17:
      c.init<fr1_r17_s_>();
      break;
    case types::fr2_r17:
      c.init<fr2_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                            "pattern_tx_sidelink_mode_two_r17_c_");
  }
}
band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_(
        const band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
            scs_cp_pattern_tx_sidelink_mode_two_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r17:
      c.init(other.c.get<fr1_r17_s_>());
      break;
    case types::fr2_r17:
      c.init(other.c.get<fr2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                            "pattern_tx_sidelink_mode_two_r17_c_");
  }
}
band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_&
    band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
        scs_cp_pattern_tx_sidelink_mode_two_r17_c_::operator=(
            const band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
                scs_cp_pattern_tx_sidelink_mode_two_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r17:
      c.set(other.c.get<fr1_r17_s_>());
      break;
    case types::fr2_r17:
      c.set(other.c.get<fr2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                            "pattern_tx_sidelink_mode_two_r17_c_");
  }

  return *this;
}
band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::fr1_r17_s_&
    band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
        scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set_fr1_r17()
{
  set(types::fr1_r17);
  return c.get<fr1_r17_s_>();
}
band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::fr2_r17_s_&
    band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
        scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set_fr2_r17()
{
  set(types::fr2_r17);
  return c.get<fr2_r17_s_>();
}
void band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r17:
      j.write_fieldname("fr1-r17");
      j.start_obj();
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        j.write_str("scs-15kHz-r17", c.get<fr1_r17_s_>().scs_15k_hz_r17.to_string());
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        j.write_str("scs-30kHz-r17", c.get<fr1_r17_s_>().scs_30k_hz_r17.to_string());
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        j.write_str("scs-60kHz-r17", c.get<fr1_r17_s_>().scs_60k_hz_r17.to_string());
      }
      j.end_obj();
      break;
    case types::fr2_r17:
      j.write_fieldname("fr2-r17");
      j.start_obj();
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        j.write_str("scs-60kHz-r17", c.get<fr2_r17_s_>().scs_60k_hz_r17.to_string());
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        j.write_str("scs-120kHz-r17", c.get<fr2_r17_s_>().scs_120k_hz_r17.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                            "pattern_tx_sidelink_mode_two_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_15k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_30k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_60k_hz_r17_present, 1));
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_15k_hz_r17.pack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_30k_hz_r17.pack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_60k_hz_r17.pack(bref));
      }
      break;
    case types::fr2_r17:
      HANDLE_CODE(bref.pack(c.get<fr2_r17_s_>().scs_60k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_r17_s_>().scs_120k_hz_r17_present, 1));
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_60k_hz_r17.pack(bref));
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_120k_hz_r17.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                            "pattern_tx_sidelink_mode_two_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_15k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_30k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_60k_hz_r17_present, 1));
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_15k_hz_r17.unpack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_30k_hz_r17.unpack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_60k_hz_r17.unpack(bref));
      }
      break;
    case types::fr2_r17:
      HANDLE_CODE(bref.unpack(c.get<fr2_r17_s_>().scs_60k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_r17_s_>().scs_120k_hz_r17_present, 1));
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_60k_hz_r17.unpack(bref));
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_120k_hz_r17.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_params_sidelink_eutra_nr_v1710_c::nr_s_::sl_tx_mode2_partial_sensing_r17_s_::scs_cp_"
                            "pattern_tx_sidelink_mode_two_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_params_sidelink_eutra_nr_v1710_c::nr_s_::rx_sidelink_psfch_r17_opts::to_string() const
{
  static const char* names[] = {"n5", "n15", "n25", "n32", "n35", "n45", "n50", "n64"};
  return convert_enum_idx(names, 8, value, "band_params_sidelink_eutra_nr_v1710_c::nr_s_::rx_sidelink_psfch_r17_e_");
}
uint8_t band_params_sidelink_eutra_nr_v1710_c::nr_s_::rx_sidelink_psfch_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 15, 25, 32, 35, 45, 50, 64};
  return map_enum_number(numbers, 8, value, "band_params_sidelink_eutra_nr_v1710_c::nr_s_::rx_sidelink_psfch_r17_e_");
}

const char* band_params_sidelink_eutra_nr_v1710_c::nr_s_::tx_iuc_scheme2_mode2_sidelink_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16"};
  return convert_enum_idx(
      names, 3, value, "band_params_sidelink_eutra_nr_v1710_c::nr_s_::tx_iuc_scheme2_mode2_sidelink_r17_e_");
}
uint8_t band_params_sidelink_eutra_nr_v1710_c::nr_s_::tx_iuc_scheme2_mode2_sidelink_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16};
  return map_enum_number(
      numbers, 3, value, "band_params_sidelink_eutra_nr_v1710_c::nr_s_::tx_iuc_scheme2_mode2_sidelink_r17_e_");
}

// SupportedCSI-RS-Resource ::= SEQUENCE
SRSASN_CODE supported_csi_rs_res_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_tx_ports_per_res.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_res_per_band, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, total_num_tx_ports_per_band, (uint16_t)2u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE supported_csi_rs_res_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_tx_ports_per_res.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_res_per_band, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(total_num_tx_ports_per_band, bref, (uint16_t)2u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
void supported_csi_rs_res_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberTxPortsPerResource", max_num_tx_ports_per_res.to_string());
  j.write_int("maxNumberResourcesPerBand", max_num_res_per_band);
  j.write_int("totalNumberTxPortsPerBand", total_num_tx_ports_per_band);
  j.end_obj();
}

const char* supported_csi_rs_res_s::max_num_tx_ports_per_res_opts::to_string() const
{
  static const char* names[] = {"p2", "p4", "p8", "p12", "p16", "p24", "p32"};
  return convert_enum_idx(names, 7, value, "supported_csi_rs_res_s::max_num_tx_ports_per_res_e_");
}
uint8_t supported_csi_rs_res_s::max_num_tx_ports_per_res_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12, 16, 24, 32};
  return map_enum_number(numbers, 7, value, "supported_csi_rs_res_s::max_num_tx_ports_per_res_e_");
}

// BeamManagementSSB-CSI-RS ::= SEQUENCE
SRSASN_CODE beam_management_ssb_csi_rs_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_csi_rs_density_present, 1));

  HANDLE_CODE(max_num_ssb_csi_rs_res_one_tx.pack(bref));
  HANDLE_CODE(max_num_csi_rs_res.pack(bref));
  HANDLE_CODE(max_num_csi_rs_res_two_tx.pack(bref));
  if (supported_csi_rs_density_present) {
    HANDLE_CODE(supported_csi_rs_density.pack(bref));
  }
  HANDLE_CODE(max_num_aperiodic_csi_rs_res.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE beam_management_ssb_csi_rs_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_csi_rs_density_present, 1));

  HANDLE_CODE(max_num_ssb_csi_rs_res_one_tx.unpack(bref));
  HANDLE_CODE(max_num_csi_rs_res.unpack(bref));
  HANDLE_CODE(max_num_csi_rs_res_two_tx.unpack(bref));
  if (supported_csi_rs_density_present) {
    HANDLE_CODE(supported_csi_rs_density.unpack(bref));
  }
  HANDLE_CODE(max_num_aperiodic_csi_rs_res.unpack(bref));

  return SRSASN_SUCCESS;
}
void beam_management_ssb_csi_rs_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberSSB-CSI-RS-ResourceOneTx", max_num_ssb_csi_rs_res_one_tx.to_string());
  j.write_str("maxNumberCSI-RS-Resource", max_num_csi_rs_res.to_string());
  j.write_str("maxNumberCSI-RS-ResourceTwoTx", max_num_csi_rs_res_two_tx.to_string());
  if (supported_csi_rs_density_present) {
    j.write_str("supportedCSI-RS-Density", supported_csi_rs_density.to_string());
  }
  j.write_str("maxNumberAperiodicCSI-RS-Resource", max_num_aperiodic_csi_rs_res.to_string());
  j.end_obj();
}

const char* beam_management_ssb_csi_rs_s::max_num_ssb_csi_rs_res_one_tx_opts::to_string() const
{
  static const char* names[] = {"n0", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 5, value, "beam_management_ssb_csi_rs_s::max_num_ssb_csi_rs_res_one_tx_e_");
}
uint8_t beam_management_ssb_csi_rs_s::max_num_ssb_csi_rs_res_one_tx_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 8, 16, 32, 64};
  return map_enum_number(numbers, 5, value, "beam_management_ssb_csi_rs_s::max_num_ssb_csi_rs_res_one_tx_e_");
}

const char* beam_management_ssb_csi_rs_s::max_num_csi_rs_res_opts::to_string() const
{
  static const char* names[] = {"n0", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 6, value, "beam_management_ssb_csi_rs_s::max_num_csi_rs_res_e_");
}
uint8_t beam_management_ssb_csi_rs_s::max_num_csi_rs_res_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 4, 8, 16, 32, 64};
  return map_enum_number(numbers, 6, value, "beam_management_ssb_csi_rs_s::max_num_csi_rs_res_e_");
}

const char* beam_management_ssb_csi_rs_s::max_num_csi_rs_res_two_tx_opts::to_string() const
{
  static const char* names[] = {"n0", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 6, value, "beam_management_ssb_csi_rs_s::max_num_csi_rs_res_two_tx_e_");
}
uint8_t beam_management_ssb_csi_rs_s::max_num_csi_rs_res_two_tx_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 4, 8, 16, 32, 64};
  return map_enum_number(numbers, 6, value, "beam_management_ssb_csi_rs_s::max_num_csi_rs_res_two_tx_e_");
}

const char* beam_management_ssb_csi_rs_s::supported_csi_rs_density_opts::to_string() const
{
  static const char* names[] = {"one", "three", "oneAndThree"};
  return convert_enum_idx(names, 3, value, "beam_management_ssb_csi_rs_s::supported_csi_rs_density_e_");
}

const char* beam_management_ssb_csi_rs_s::max_num_aperiodic_csi_rs_res_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 7, value, "beam_management_ssb_csi_rs_s::max_num_aperiodic_csi_rs_res_e_");
}
uint8_t beam_management_ssb_csi_rs_s::max_num_aperiodic_csi_rs_res_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 4, 8, 16, 32, 64};
  return map_enum_number(numbers, 7, value, "beam_management_ssb_csi_rs_s::max_num_aperiodic_csi_rs_res_e_");
}

// CSI-RS-ForTracking ::= SEQUENCE
SRSASN_CODE csi_rs_for_tracking_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, max_burst_len, (uint8_t)1u, (uint8_t)2u));
  HANDLE_CODE(pack_integer(bref, max_simul_res_sets_per_cc, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pack_integer(bref, max_cfg_res_sets_per_cc, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, max_cfg_res_sets_all_cc, (uint16_t)1u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_for_tracking_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(max_burst_len, bref, (uint8_t)1u, (uint8_t)2u));
  HANDLE_CODE(unpack_integer(max_simul_res_sets_per_cc, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(unpack_integer(max_cfg_res_sets_per_cc, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(max_cfg_res_sets_all_cc, bref, (uint16_t)1u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
void csi_rs_for_tracking_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxBurstLength", max_burst_len);
  j.write_int("maxSimultaneousResourceSetsPerCC", max_simul_res_sets_per_cc);
  j.write_int("maxConfiguredResourceSetsPerCC", max_cfg_res_sets_per_cc);
  j.write_int("maxConfiguredResourceSetsAllCC", max_cfg_res_sets_all_cc);
  j.end_obj();
}

// CSI-RS-IM-ReceptionForFeedback ::= SEQUENCE
SRSASN_CODE csi_rs_im_reception_for_feedback_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, max_cfg_num_nzp_csi_rs_per_cc, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, max_cfg_num_ports_across_nzp_csi_rs_per_cc, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(max_cfg_num_csi_im_per_cc.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_simul_nzp_csi_rs_per_cc, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, total_num_ports_simul_nzp_csi_rs_per_cc, (uint16_t)2u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_im_reception_for_feedback_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(max_cfg_num_nzp_csi_rs_per_cc, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(max_cfg_num_ports_across_nzp_csi_rs_per_cc, bref, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(max_cfg_num_csi_im_per_cc.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_simul_nzp_csi_rs_per_cc, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(total_num_ports_simul_nzp_csi_rs_per_cc, bref, (uint16_t)2u, (uint16_t)256u));

  return SRSASN_SUCCESS;
}
void csi_rs_im_reception_for_feedback_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxConfigNumberNZP-CSI-RS-PerCC", max_cfg_num_nzp_csi_rs_per_cc);
  j.write_int("maxConfigNumberPortsAcrossNZP-CSI-RS-PerCC", max_cfg_num_ports_across_nzp_csi_rs_per_cc);
  j.write_str("maxConfigNumberCSI-IM-PerCC", max_cfg_num_csi_im_per_cc.to_string());
  j.write_int("maxNumberSimultaneousNZP-CSI-RS-PerCC", max_num_simul_nzp_csi_rs_per_cc);
  j.write_int("totalNumberPortsSimultaneousNZP-CSI-RS-PerCC", total_num_ports_simul_nzp_csi_rs_per_cc);
  j.end_obj();
}

const char* csi_rs_im_reception_for_feedback_s::max_cfg_num_csi_im_per_cc_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32"};
  return convert_enum_idx(names, 6, value, "csi_rs_im_reception_for_feedback_s::max_cfg_num_csi_im_per_cc_e_");
}
uint8_t csi_rs_im_reception_for_feedback_s::max_cfg_num_csi_im_per_cc_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32};
  return map_enum_number(numbers, 6, value, "csi_rs_im_reception_for_feedback_s::max_cfg_num_csi_im_per_cc_e_");
}

// CSI-RS-ProcFrameworkForSRS ::= SEQUENCE
SRSASN_CODE csi_rs_proc_framework_for_srs_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, max_num_periodic_srs_assoc_csi_rs_per_bwp, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_aperiodic_srs_assoc_csi_rs_per_bwp, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_sp_srs_assoc_csi_rs_per_bwp, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, simul_srs_assoc_csi_rs_per_cc, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_rs_proc_framework_for_srs_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(max_num_periodic_srs_assoc_csi_rs_per_bwp, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_aperiodic_srs_assoc_csi_rs_per_bwp, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_sp_srs_assoc_csi_rs_per_bwp, bref, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(simul_srs_assoc_csi_rs_per_cc, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void csi_rs_proc_framework_for_srs_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxNumberPeriodicSRS-AssocCSI-RS-PerBWP", max_num_periodic_srs_assoc_csi_rs_per_bwp);
  j.write_int("maxNumberAperiodicSRS-AssocCSI-RS-PerBWP", max_num_aperiodic_srs_assoc_csi_rs_per_bwp);
  j.write_int("maxNumberSP-SRS-AssocCSI-RS-PerBWP", max_num_sp_srs_assoc_csi_rs_per_bwp);
  j.write_int("simultaneousSRS-AssocCSI-RS-PerCC", simul_srs_assoc_csi_rs_per_cc);
  j.end_obj();
}

// CSI-ReportFramework ::= SEQUENCE
SRSASN_CODE csi_report_framework_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, max_num_periodic_csi_per_bwp_for_csi_report, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_aperiodic_csi_per_bwp_for_csi_report, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_semi_persistent_csi_per_bwp_for_csi_report, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_periodic_csi_per_bwp_for_beam_report, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_aperiodic_csi_per_bwp_for_beam_report, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(max_num_aperiodic_csi_trigger_state_per_cc.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_semi_persistent_csi_per_bwp_for_beam_report, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, simul_csi_reports_per_cc, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_report_framework_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(max_num_periodic_csi_per_bwp_for_csi_report, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_aperiodic_csi_per_bwp_for_csi_report, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_semi_persistent_csi_per_bwp_for_csi_report, bref, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_periodic_csi_per_bwp_for_beam_report, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_aperiodic_csi_per_bwp_for_beam_report, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(max_num_aperiodic_csi_trigger_state_per_cc.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_semi_persistent_csi_per_bwp_for_beam_report, bref, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(simul_csi_reports_per_cc, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void csi_report_framework_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxNumberPeriodicCSI-PerBWP-ForCSI-Report", max_num_periodic_csi_per_bwp_for_csi_report);
  j.write_int("maxNumberAperiodicCSI-PerBWP-ForCSI-Report", max_num_aperiodic_csi_per_bwp_for_csi_report);
  j.write_int("maxNumberSemiPersistentCSI-PerBWP-ForCSI-Report", max_num_semi_persistent_csi_per_bwp_for_csi_report);
  j.write_int("maxNumberPeriodicCSI-PerBWP-ForBeamReport", max_num_periodic_csi_per_bwp_for_beam_report);
  j.write_int("maxNumberAperiodicCSI-PerBWP-ForBeamReport", max_num_aperiodic_csi_per_bwp_for_beam_report);
  j.write_str("maxNumberAperiodicCSI-triggeringStatePerCC", max_num_aperiodic_csi_trigger_state_per_cc.to_string());
  j.write_int("maxNumberSemiPersistentCSI-PerBWP-ForBeamReport", max_num_semi_persistent_csi_per_bwp_for_beam_report);
  j.write_int("simultaneousCSI-ReportsPerCC", simul_csi_reports_per_cc);
  j.end_obj();
}

const char* csi_report_framework_s::max_num_aperiodic_csi_trigger_state_per_cc_opts::to_string() const
{
  static const char* names[] = {"n3", "n7", "n15", "n31", "n63", "n128"};
  return convert_enum_idx(names, 6, value, "csi_report_framework_s::max_num_aperiodic_csi_trigger_state_per_cc_e_");
}
uint8_t csi_report_framework_s::max_num_aperiodic_csi_trigger_state_per_cc_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 7, 15, 31, 63, 128};
  return map_enum_number(numbers, 6, value, "csi_report_framework_s::max_num_aperiodic_csi_trigger_state_per_cc_e_");
}

// CSI-ReportFrameworkExt-r16 ::= SEQUENCE
SRSASN_CODE csi_report_framework_ext_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, max_num_aperiodic_csi_per_bwp_for_csi_report_ext_r16, (uint8_t)5u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE csi_report_framework_ext_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(max_num_aperiodic_csi_per_bwp_for_csi_report_ext_r16, bref, (uint8_t)5u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void csi_report_framework_ext_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxNumberAperiodicCSI-PerBWP-ForCSI-ReportExt-r16",
              max_num_aperiodic_csi_per_bwp_for_csi_report_ext_r16);
  j.end_obj();
}

// CodebookComboParameterMixedType-r17 ::= SEQUENCE
SRSASN_CODE codebook_combo_param_mixed_type_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(type1_sp_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_fe_type2_ps_m2_r2_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));

  if (type1_sp_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_fe_type2_ps_m2_r2_null_r1, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_sp_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_fe_type2_ps_m2_r2_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1_mp_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_combo_param_mixed_type_r17_s::unpack(cbit_ref& bref)
{
  bool type1_sp_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_fe_type2_ps_null_r17_present, 1));
  bool type1_sp_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool type1_sp_fe_type2_ps_m2_r2_null_r1_present;
  HANDLE_CODE(bref.unpack(type1_sp_fe_type2_ps_m2_r2_null_r1_present, 1));
  bool type1_sp_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_type2_fe_type2_ps_m1_r17_present, 1));
  bool type1_sp_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool type1_sp_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));
  bool type1_mp_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_fe_type2_ps_null_r17_present, 1));
  bool type1_mp_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool type1_mp_fe_type2_ps_m2_r2_null_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_fe_type2_ps_m2_r2_null_r17_present, 1));
  bool type1_mp_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_type2_fe_type2_ps_m1_r17_present, 1));
  bool type1_mp_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool type1_mp_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));

  if (type1_sp_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_fe_type2_ps_m2_r2_null_r1_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_fe_type2_ps_m2_r2_null_r1, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_sp_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_fe_type2_ps_m2_r2_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_fe_type2_ps_m2_r2_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_mp_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_combo_param_mixed_type_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (type1_sp_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("type1SP-feType2PS-null-r17");
    for (const auto& e1 : type1_sp_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("type1SP-feType2PS-M2R1-null-r17");
    for (const auto& e1 : type1_sp_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0) {
    j.start_array("type1SP-feType2PS-M2R2-null-r1");
    for (const auto& e1 : type1_sp_fe_type2_ps_m2_r2_null_r1) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1SP-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : type1_sp_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1SP-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_sp_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1SP-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : type1_sp_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1SP-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("type1MP-feType2PS-null-r17");
    for (const auto& e1 : type1_mp_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("type1MP-feType2PS-M2R1-null-r17");
    for (const auto& e1 : type1_mp_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    j.start_array("type1MP-feType2PS-M2R2-null-r17");
    for (const auto& e1 : type1_mp_fe_type2_ps_m2_r2_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1MP-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : type1_mp_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1MP-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_mp_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("type1MP-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : type1_mp_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("type1MP-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : type1_mp_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// CodebookComboParameterMultiTRP-r17 ::= SEQUENCE
SRSASN_CODE codebook_combo_param_multi_trp_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ncjt_null_null.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_null_null.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_type2_ps_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r2_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r2_ps_null_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_type2_ps_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_fe_type2_ps_m2_r2_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_fe_type2_ps_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0, 1));

  if (ncjt_null_null.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_null_null, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_null_null.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_null_null, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_type2_ps_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_type2_ps_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r2_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_ps_null_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r2_ps_null_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_type2_ps_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_type2_ps_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_fe_type2_ps_m2_r2_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_fe_type2_ps_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_fe_type2_ps_m2_r1_null_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_fe_type2_ps_m2_r2_null_r1, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_type2_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_combo_param_multi_trp_r17_s::unpack(cbit_ref& bref)
{
  bool ncjt_null_null_present;
  HANDLE_CODE(bref.unpack(ncjt_null_null_present, 1));
  bool ncjt1_sp_null_null_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_null_null_present, 1));
  bool ncjt_type2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_null_r16_present, 1));
  bool ncjt_type2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_ps_null_r16_present, 1));
  bool ncjt_e_type2_r1_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_null_r16_present, 1));
  bool ncjt_e_type2_r2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r2_null_r16_present, 1));
  bool ncjt_e_type2_r1_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_ps_null_r16_present, 1));
  bool ncjt_e_type2_r2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r2_ps_null_r16_present, 1));
  bool ncjt_type2_type2_ps_r16_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_type2_ps_r16_present, 1));
  bool ncjt1_sp_type2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_null_r16_present, 1));
  bool ncjt1_sp_type2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_ps_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r1_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r2_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r2_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r1_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_ps_null_r16_present, 1));
  bool ncjt1_sp_e_type2_r2_ps_null_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r2_ps_null_r16_present, 1));
  bool ncjt1_sp_type2_type2_ps_r16_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_type2_ps_r16_present, 1));
  bool ncjt_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_fe_type2_ps_null_r17_present, 1));
  bool ncjt_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool ncjt_fe_type2_ps_m2_r2_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_fe_type2_ps_m2_r2_null_r17_present, 1));
  bool ncjt_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_fe_type2_ps_m1_r17_present, 1));
  bool ncjt_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool ncjt_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));
  bool ncjt1_sp_fe_type2_ps_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_fe_type2_ps_null_r17_present, 1));
  bool ncjt1_sp_fe_type2_ps_m2_r1_null_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_fe_type2_ps_m2_r1_null_r17_present, 1));
  bool ncjt1_sp_fe_type2_ps_m2_r2_null_r1_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_fe_type2_ps_m2_r2_null_r1_present, 1));
  bool ncjt1_sp_type2_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_fe_type2_ps_m1_r17_present, 1));
  bool ncjt1_sp_type2_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_type2_fe_type2_ps_m2_r1_r17_present, 1));
  bool ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17_present, 1));
  bool ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present;
  HANDLE_CODE(bref.unpack(ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present, 1));

  if (ncjt_null_null_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_null_null, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_null_null_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_null_null, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r1_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r1_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_type2_ps_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r2_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_e_type2_r2_ps_null_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_type2_ps_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_fe_type2_ps_m2_r2_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_fe_type2_ps_m2_r2_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_fe_type2_ps_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r1_null_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_fe_type2_ps_m2_r1_null_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_fe_type2_ps_m2_r2_null_r1_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_fe_type2_ps_m2_r2_null_r1, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_type2_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ncjt1_sp_type2_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_combo_param_multi_trp_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ncjt_null_null.size() > 0) {
    j.start_array("nCJT-null-null");
    for (const auto& e1 : ncjt_null_null) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_null_null.size() > 0) {
    j.start_array("nCJT1SP-null-null");
    for (const auto& e1 : ncjt1_sp_null_null) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_null_r16.size() > 0) {
    j.start_array("nCJT-Type2-null-r16");
    for (const auto& e1 : ncjt_type2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_ps_null_r16.size() > 0) {
    j.start_array("nCJT-Type2PS-null-r16");
    for (const auto& e1 : ncjt_type2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R1-null-r16");
    for (const auto& e1 : ncjt_e_type2_r1_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r2_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R2-null-r16");
    for (const auto& e1 : ncjt_e_type2_r2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_ps_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R1PS-null-r16");
    for (const auto& e1 : ncjt_e_type2_r1_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r2_ps_null_r16.size() > 0) {
    j.start_array("nCJT-eType2R2PS-null-r16");
    for (const auto& e1 : ncjt_e_type2_r2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_type2_ps_r16.size() > 0) {
    j.start_array("nCJT-Type2-Type2PS-r16");
    for (const auto& e1 : ncjt_type2_type2_ps_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_null_r16.size() > 0) {
    j.start_array("nCJT1SP-Type2-null-r16");
    for (const auto& e1 : ncjt1_sp_type2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_ps_null_r16.size() > 0) {
    j.start_array("nCJT1SP-Type2PS-null-r16");
    for (const auto& e1 : ncjt1_sp_type2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R1-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r2_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R2-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r2_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_ps_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R1PS-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r2_ps_null_r16.size() > 0) {
    j.start_array("nCJT1SP-eType2R2PS-null-r16");
    for (const auto& e1 : ncjt1_sp_e_type2_r2_ps_null_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_type2_ps_r16.size() > 0) {
    j.start_array("nCJT1SP-Type2-Type2PS-r16");
    for (const auto& e1 : ncjt1_sp_type2_type2_ps_r16) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("nCJT-feType2PS-null-r17");
    for (const auto& e1 : ncjt_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("nCJT-feType2PS-M2R1-null-r17");
    for (const auto& e1 : ncjt_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_fe_type2_ps_m2_r2_null_r17.size() > 0) {
    j.start_array("nCJT-feType2PS-M2R2-null-r17");
    for (const auto& e1 : ncjt_fe_type2_ps_m2_r2_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_fe_type2_ps_null_r17.size() > 0) {
    j.start_array("nCJT1SP-feType2PS-null-r17");
    for (const auto& e1 : ncjt1_sp_fe_type2_ps_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_fe_type2_ps_m2_r1_null_r17.size() > 0) {
    j.start_array("nCJT1SP-feType2PS-M2R1-null-r17");
    for (const auto& e1 : ncjt1_sp_fe_type2_ps_m2_r1_null_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_fe_type2_ps_m2_r2_null_r1.size() > 0) {
    j.start_array("nCJT1SP-feType2PS-M2R2-null-r1");
    for (const auto& e1 : ncjt1_sp_fe_type2_ps_m2_r2_null_r1) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT1SP-Type2-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt1_sp_type2_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_type2_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT1SP-Type2-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt1_sp_type2_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17.size() > 0) {
    j.start_array("nCJT1SP-eType2R1-feType2-PS-M1-r17");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_fe_type2_ps_m1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17.size() > 0) {
    j.start_array("nCJT1SP-eType2R1-feType2-PS-M2R1-r17");
    for (const auto& e1 : ncjt1_sp_e_type2_r1_fe_type2_ps_m2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// CodebookComboParametersAddition-r16 ::= SEQUENCE
SRSASN_CODE codebook_combo_params_addition_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(type1_sp_type2_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r2_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r1_ps_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_sp_e_type2_r2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_sp_type2_type2_ps_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r2_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r1_ps_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_mp_e_type2_r2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_mp_type2_type2_ps_r16_present, 1));

  if (type1_sp_type2_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_sp_type2_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_ps_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_sp_type2_ps_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_sp_e_type2_r1_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_sp_e_type2_r2_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                type1_sp_e_type2_r1_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                1,
                                16,
                                integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                type1_sp_e_type2_r2_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                1,
                                16,
                                integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_type2_ps_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_sp_type2_type2_ps_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_mp_type2_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_ps_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_mp_type2_ps_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_mp_e_type2_r1_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_mp_e_type2_r2_null_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                type1_mp_e_type2_r1_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                1,
                                16,
                                integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                type1_mp_e_type2_r2_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                1,
                                16,
                                integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_type2_ps_r16_present) {
    HANDLE_CODE(pack_dyn_seq_of(
        bref, type1_mp_type2_type2_ps_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_combo_params_addition_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(type1_sp_type2_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_sp_type2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r2_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r1_ps_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_sp_e_type2_r2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_sp_type2_type2_ps_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_mp_type2_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_mp_type2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r2_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r1_ps_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_mp_e_type2_r2_ps_null_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_mp_type2_type2_ps_r16_present, 1));

  if (type1_sp_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_sp_type2_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_sp_type2_ps_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_sp_e_type2_r1_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_sp_e_type2_r2_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_e_type2_r1_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                  bref,
                                  1,
                                  16,
                                  integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_sp_e_type2_r2_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                  bref,
                                  1,
                                  16,
                                  integer_packer<uint16_t>(0, 511)));
  }
  if (type1_sp_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_sp_type2_type2_ps_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_mp_type2_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_mp_type2_ps_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_mp_e_type2_r1_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_mp_e_type2_r2_null_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r1_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_e_type2_r1_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                  bref,
                                  1,
                                  16,
                                  integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_e_type2_r2_ps_null_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1_mp_e_type2_r2_ps_null_r16.supported_csi_rs_res_list_add_r16,
                                  bref,
                                  1,
                                  16,
                                  integer_packer<uint16_t>(0, 511)));
  }
  if (type1_mp_type2_type2_ps_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(
        type1_mp_type2_type2_ps_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_combo_params_addition_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (type1_sp_type2_null_r16_present) {
    j.write_fieldname("type1SP-Type2-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_sp_type2_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_sp_type2_ps_null_r16_present) {
    j.write_fieldname("type1SP-Type2PS-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_sp_type2_ps_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_sp_e_type2_r1_null_r16_present) {
    j.write_fieldname("type1SP-eType2R1-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_sp_e_type2_r1_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_sp_e_type2_r2_null_r16_present) {
    j.write_fieldname("type1SP-eType2R2-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_sp_e_type2_r2_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_sp_e_type2_r1_ps_null_r16_present) {
    j.write_fieldname("type1SP-eType2R1PS-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_sp_e_type2_r1_ps_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_sp_e_type2_r2_ps_null_r16_present) {
    j.write_fieldname("type1SP-eType2R2PS-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_sp_e_type2_r2_ps_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_sp_type2_type2_ps_r16_present) {
    j.write_fieldname("type1SP-Type2-Type2PS-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_sp_type2_type2_ps_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_mp_type2_null_r16_present) {
    j.write_fieldname("type1MP-Type2-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_mp_type2_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_mp_type2_ps_null_r16_present) {
    j.write_fieldname("type1MP-Type2PS-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_mp_type2_ps_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_mp_e_type2_r1_null_r16_present) {
    j.write_fieldname("type1MP-eType2R1-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_mp_e_type2_r1_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_mp_e_type2_r2_null_r16_present) {
    j.write_fieldname("type1MP-eType2R2-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_mp_e_type2_r2_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_mp_e_type2_r1_ps_null_r16_present) {
    j.write_fieldname("type1MP-eType2R1PS-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_mp_e_type2_r1_ps_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_mp_e_type2_r2_ps_null_r16_present) {
    j.write_fieldname("type1MP-eType2R2PS-null-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_mp_e_type2_r2_ps_null_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  if (type1_mp_type2_type2_ps_r16_present) {
    j.write_fieldname("type1MP-Type2-Type2PS-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : type1_mp_type2_type2_ps_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
  }
  j.end_obj();
}

// CodebookParameters ::= SEQUENCE
SRSASN_CODE codebook_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(type2_present, 1));
  HANDLE_CODE(bref.pack(type2_port_sel_present, 1));

  HANDLE_CODE(bref.pack(type1.multi_panel_present, 1));
  HANDLE_CODE(pack_dyn_seq_of(bref, type1.single_panel.supported_csi_rs_res_list, 1, 7));
  HANDLE_CODE(type1.single_panel.modes.pack(bref));
  HANDLE_CODE(pack_integer(bref, type1.single_panel.max_num_csi_rs_per_res_set, (uint8_t)1u, (uint8_t)8u));
  if (type1.multi_panel_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type1.multi_panel.supported_csi_rs_res_list, 1, 7));
    HANDLE_CODE(type1.multi_panel.modes.pack(bref));
    HANDLE_CODE(type1.multi_panel.nrof_panels.pack(bref));
    HANDLE_CODE(pack_integer(bref, type1.multi_panel.max_num_csi_rs_per_res_set, (uint8_t)1u, (uint8_t)8u));
  }
  if (type2_present) {
    HANDLE_CODE(bref.pack(type2.amplitude_subset_restrict_present, 1));
    HANDLE_CODE(pack_dyn_seq_of(bref, type2.supported_csi_rs_res_list, 1, 7));
    HANDLE_CODE(pack_integer(bref, type2.param_lx, (uint8_t)2u, (uint8_t)4u));
    HANDLE_CODE(type2.amplitude_scaling_type.pack(bref));
  }
  if (type2_port_sel_present) {
    HANDLE_CODE(pack_dyn_seq_of(bref, type2_port_sel.supported_csi_rs_res_list, 1, 7));
    HANDLE_CODE(pack_integer(bref, type2_port_sel.param_lx, (uint8_t)2u, (uint8_t)4u));
    HANDLE_CODE(type2_port_sel.amplitude_scaling_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(type2_present, 1));
  HANDLE_CODE(bref.unpack(type2_port_sel_present, 1));

  HANDLE_CODE(bref.unpack(type1.multi_panel_present, 1));
  HANDLE_CODE(unpack_dyn_seq_of(type1.single_panel.supported_csi_rs_res_list, bref, 1, 7));
  HANDLE_CODE(type1.single_panel.modes.unpack(bref));
  HANDLE_CODE(unpack_integer(type1.single_panel.max_num_csi_rs_per_res_set, bref, (uint8_t)1u, (uint8_t)8u));
  if (type1.multi_panel_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type1.multi_panel.supported_csi_rs_res_list, bref, 1, 7));
    HANDLE_CODE(type1.multi_panel.modes.unpack(bref));
    HANDLE_CODE(type1.multi_panel.nrof_panels.unpack(bref));
    HANDLE_CODE(unpack_integer(type1.multi_panel.max_num_csi_rs_per_res_set, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (type2_present) {
    HANDLE_CODE(bref.unpack(type2.amplitude_subset_restrict_present, 1));
    HANDLE_CODE(unpack_dyn_seq_of(type2.supported_csi_rs_res_list, bref, 1, 7));
    HANDLE_CODE(unpack_integer(type2.param_lx, bref, (uint8_t)2u, (uint8_t)4u));
    HANDLE_CODE(type2.amplitude_scaling_type.unpack(bref));
  }
  if (type2_port_sel_present) {
    HANDLE_CODE(unpack_dyn_seq_of(type2_port_sel.supported_csi_rs_res_list, bref, 1, 7));
    HANDLE_CODE(unpack_integer(type2_port_sel.param_lx, bref, (uint8_t)2u, (uint8_t)4u));
    HANDLE_CODE(type2_port_sel.amplitude_scaling_type.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void codebook_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("type1");
  j.start_obj();
  j.write_fieldname("singlePanel");
  j.start_obj();
  j.start_array("supportedCSI-RS-ResourceList");
  for (const auto& e1 : type1.single_panel.supported_csi_rs_res_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_str("modes", type1.single_panel.modes.to_string());
  j.write_int("maxNumberCSI-RS-PerResourceSet", type1.single_panel.max_num_csi_rs_per_res_set);
  j.end_obj();
  if (type1.multi_panel_present) {
    j.write_fieldname("multiPanel");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceList");
    for (const auto& e1 : type1.multi_panel.supported_csi_rs_res_list) {
      e1.to_json(j);
    }
    j.end_array();
    j.write_str("modes", type1.multi_panel.modes.to_string());
    j.write_str("nrofPanels", type1.multi_panel.nrof_panels.to_string());
    j.write_int("maxNumberCSI-RS-PerResourceSet", type1.multi_panel.max_num_csi_rs_per_res_set);
    j.end_obj();
  }
  j.end_obj();
  if (type2_present) {
    j.write_fieldname("type2");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceList");
    for (const auto& e1 : type2.supported_csi_rs_res_list) {
      e1.to_json(j);
    }
    j.end_array();
    j.write_int("parameterLx", type2.param_lx);
    j.write_str("amplitudeScalingType", type2.amplitude_scaling_type.to_string());
    if (type2.amplitude_subset_restrict_present) {
      j.write_str("amplitudeSubsetRestriction", "supported");
    }
    j.end_obj();
  }
  if (type2_port_sel_present) {
    j.write_fieldname("type2-PortSelection");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceList");
    for (const auto& e1 : type2_port_sel.supported_csi_rs_res_list) {
      e1.to_json(j);
    }
    j.end_array();
    j.write_int("parameterLx", type2_port_sel.param_lx);
    j.write_str("amplitudeScalingType", type2_port_sel.amplitude_scaling_type.to_string());
    j.end_obj();
  }
  j.end_obj();
}

const char* codebook_params_s::type1_s_::single_panel_s_::modes_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode1andMode2"};
  return convert_enum_idx(names, 2, value, "codebook_params_s::type1_s_::single_panel_s_::modes_e_");
}

const char* codebook_params_s::type1_s_::multi_panel_s_::modes_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode2", "both"};
  return convert_enum_idx(names, 3, value, "codebook_params_s::type1_s_::multi_panel_s_::modes_e_");
}
uint8_t codebook_params_s::type1_s_::multi_panel_s_::modes_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "codebook_params_s::type1_s_::multi_panel_s_::modes_e_");
}

const char* codebook_params_s::type1_s_::multi_panel_s_::nrof_panels_opts::to_string() const
{
  static const char* names[] = {"n2", "n4"};
  return convert_enum_idx(names, 2, value, "codebook_params_s::type1_s_::multi_panel_s_::nrof_panels_e_");
}
uint8_t codebook_params_s::type1_s_::multi_panel_s_::nrof_panels_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4};
  return map_enum_number(numbers, 2, value, "codebook_params_s::type1_s_::multi_panel_s_::nrof_panels_e_");
}

const char* codebook_params_s::type2_s_::amplitude_scaling_type_opts::to_string() const
{
  static const char* names[] = {"wideband", "widebandAndSubband"};
  return convert_enum_idx(names, 2, value, "codebook_params_s::type2_s_::amplitude_scaling_type_e_");
}

const char* codebook_params_s::type2_port_sel_s_::amplitude_scaling_type_opts::to_string() const
{
  static const char* names[] = {"wideband", "widebandAndSubband"};
  return convert_enum_idx(names, 2, value, "codebook_params_s::type2_port_sel_s_::amplitude_scaling_type_e_");
}

// CodebookParametersAddition-r16 ::= SEQUENCE
SRSASN_CODE codebook_params_addition_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(etype2_r16_present, 1));
  HANDLE_CODE(bref.pack(etype2_ps_r16_present, 1));

  if (etype2_r16_present) {
    HANDLE_CODE(bref.pack(etype2_r16.etype2_r2_r16_present, 1));
    HANDLE_CODE(bref.pack(etype2_r16.param_comb7_8_r16_present, 1));
    HANDLE_CODE(bref.pack(etype2_r16.rank3_4_r16_present, 1));
    HANDLE_CODE(bref.pack(etype2_r16.amplitude_subset_restrict_r16_present, 1));
    HANDLE_CODE(pack_dyn_seq_of(
        bref, etype2_r16.etype2_r1_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
    if (etype2_r16.etype2_r2_r16_present) {
      HANDLE_CODE(pack_dyn_seq_of(
          bref, etype2_r16.etype2_r2_r16.supported_csi_rs_res_list_add_r16, 1, 16, integer_packer<uint16_t>(0, 511)));
    }
  }
  if (etype2_ps_r16_present) {
    HANDLE_CODE(bref.pack(etype2_ps_r16.etype2_r2_port_sel_r16_present, 1));
    HANDLE_CODE(bref.pack(etype2_ps_r16.rank3_4_r16_present, 1));
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                etype2_ps_r16.etype2_r1_port_sel_r16.supported_csi_rs_res_list_add_r16,
                                1,
                                16,
                                integer_packer<uint16_t>(0, 511)));
    if (etype2_ps_r16.etype2_r2_port_sel_r16_present) {
      HANDLE_CODE(pack_dyn_seq_of(bref,
                                  etype2_ps_r16.etype2_r2_port_sel_r16.supported_csi_rs_res_list_add_r16,
                                  1,
                                  16,
                                  integer_packer<uint16_t>(0, 511)));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_params_addition_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(etype2_r16_present, 1));
  HANDLE_CODE(bref.unpack(etype2_ps_r16_present, 1));

  if (etype2_r16_present) {
    HANDLE_CODE(bref.unpack(etype2_r16.etype2_r2_r16_present, 1));
    HANDLE_CODE(bref.unpack(etype2_r16.param_comb7_8_r16_present, 1));
    HANDLE_CODE(bref.unpack(etype2_r16.rank3_4_r16_present, 1));
    HANDLE_CODE(bref.unpack(etype2_r16.amplitude_subset_restrict_r16_present, 1));
    HANDLE_CODE(unpack_dyn_seq_of(
        etype2_r16.etype2_r1_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
    if (etype2_r16.etype2_r2_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(
          etype2_r16.etype2_r2_r16.supported_csi_rs_res_list_add_r16, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
    }
  }
  if (etype2_ps_r16_present) {
    HANDLE_CODE(bref.unpack(etype2_ps_r16.etype2_r2_port_sel_r16_present, 1));
    HANDLE_CODE(bref.unpack(etype2_ps_r16.rank3_4_r16_present, 1));
    HANDLE_CODE(unpack_dyn_seq_of(etype2_ps_r16.etype2_r1_port_sel_r16.supported_csi_rs_res_list_add_r16,
                                  bref,
                                  1,
                                  16,
                                  integer_packer<uint16_t>(0, 511)));
    if (etype2_ps_r16.etype2_r2_port_sel_r16_present) {
      HANDLE_CODE(unpack_dyn_seq_of(etype2_ps_r16.etype2_r2_port_sel_r16.supported_csi_rs_res_list_add_r16,
                                    bref,
                                    1,
                                    16,
                                    integer_packer<uint16_t>(0, 511)));
    }
  }

  return SRSASN_SUCCESS;
}
void codebook_params_addition_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (etype2_r16_present) {
    j.write_fieldname("etype2-r16");
    j.start_obj();
    j.write_fieldname("etype2R1-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : etype2_r16.etype2_r1_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
    if (etype2_r16.etype2_r2_r16_present) {
      j.write_fieldname("etype2R2-r16");
      j.start_obj();
      j.start_array("supportedCSI-RS-ResourceListAdd-r16");
      for (const auto& e1 : etype2_r16.etype2_r2_r16.supported_csi_rs_res_list_add_r16) {
        j.write_int(e1);
      }
      j.end_array();
      j.end_obj();
    }
    if (etype2_r16.param_comb7_8_r16_present) {
      j.write_str("paramComb7-8-r16", "supported");
    }
    if (etype2_r16.rank3_4_r16_present) {
      j.write_str("rank3-4-r16", "supported");
    }
    if (etype2_r16.amplitude_subset_restrict_r16_present) {
      j.write_str("amplitudeSubsetRestriction-r16", "supported");
    }
    j.end_obj();
  }
  if (etype2_ps_r16_present) {
    j.write_fieldname("etype2-PS-r16");
    j.start_obj();
    j.write_fieldname("etype2R1-PortSelection-r16");
    j.start_obj();
    j.start_array("supportedCSI-RS-ResourceListAdd-r16");
    for (const auto& e1 : etype2_ps_r16.etype2_r1_port_sel_r16.supported_csi_rs_res_list_add_r16) {
      j.write_int(e1);
    }
    j.end_array();
    j.end_obj();
    if (etype2_ps_r16.etype2_r2_port_sel_r16_present) {
      j.write_fieldname("etype2R2-PortSelection-r16");
      j.start_obj();
      j.start_array("supportedCSI-RS-ResourceListAdd-r16");
      for (const auto& e1 : etype2_ps_r16.etype2_r2_port_sel_r16.supported_csi_rs_res_list_add_r16) {
        j.write_int(e1);
      }
      j.end_array();
      j.end_obj();
    }
    if (etype2_ps_r16.rank3_4_r16_present) {
      j.write_str("rank3-4-r16", "supported");
    }
    j.end_obj();
  }
  j.end_obj();
}

// CodebookParametersfetype2-r17 ::= SEQUENCE
SRSASN_CODE codebook_paramsfetype2_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fetype2_r1_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(fetype2_r2_r17.size() > 0, 1));
  HANDLE_CODE(bref.pack(fetype2_rank3_rank4_r17_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, fetype2basic_r17, 1, 16, integer_packer<uint16_t>(0, 511)));
  if (fetype2_r1_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, fetype2_r1_r17, 1, 8, integer_packer<uint16_t>(0, 511)));
  }
  if (fetype2_r2_r17.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, fetype2_r2_r17, 1, 8, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE codebook_paramsfetype2_r17_s::unpack(cbit_ref& bref)
{
  bool fetype2_r1_r17_present;
  HANDLE_CODE(bref.unpack(fetype2_r1_r17_present, 1));
  bool fetype2_r2_r17_present;
  HANDLE_CODE(bref.unpack(fetype2_r2_r17_present, 1));
  HANDLE_CODE(bref.unpack(fetype2_rank3_rank4_r17_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(fetype2basic_r17, bref, 1, 16, integer_packer<uint16_t>(0, 511)));
  if (fetype2_r1_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(fetype2_r1_r17, bref, 1, 8, integer_packer<uint16_t>(0, 511)));
  }
  if (fetype2_r2_r17_present) {
    HANDLE_CODE(unpack_dyn_seq_of(fetype2_r2_r17, bref, 1, 8, integer_packer<uint16_t>(0, 511)));
  }

  return SRSASN_SUCCESS;
}
void codebook_paramsfetype2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("fetype2basic-r17");
  for (const auto& e1 : fetype2basic_r17) {
    j.write_int(e1);
  }
  j.end_array();
  if (fetype2_r1_r17.size() > 0) {
    j.start_array("fetype2R1-r17");
    for (const auto& e1 : fetype2_r1_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (fetype2_r2_r17.size() > 0) {
    j.start_array("fetype2R2-r17");
    for (const auto& e1 : fetype2_r2_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  if (fetype2_rank3_rank4_r17_present) {
    j.write_str("fetype2Rank3Rank4-r17", "supported");
  }
  j.end_obj();
}

// DummyG ::= SEQUENCE
SRSASN_CODE dummy_g_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_ssb_csi_rs_res_one_tx.pack(bref));
  HANDLE_CODE(max_num_ssb_csi_rs_res_two_tx.pack(bref));
  HANDLE_CODE(supported_csi_rs_density.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_g_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_ssb_csi_rs_res_one_tx.unpack(bref));
  HANDLE_CODE(max_num_ssb_csi_rs_res_two_tx.unpack(bref));
  HANDLE_CODE(supported_csi_rs_density.unpack(bref));

  return SRSASN_SUCCESS;
}
void dummy_g_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberSSB-CSI-RS-ResourceOneTx", max_num_ssb_csi_rs_res_one_tx.to_string());
  j.write_str("maxNumberSSB-CSI-RS-ResourceTwoTx", max_num_ssb_csi_rs_res_two_tx.to_string());
  j.write_str("supportedCSI-RS-Density", supported_csi_rs_density.to_string());
  j.end_obj();
}

const char* dummy_g_s::max_num_ssb_csi_rs_res_one_tx_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 4, value, "dummy_g_s::max_num_ssb_csi_rs_res_one_tx_e_");
}
uint8_t dummy_g_s::max_num_ssb_csi_rs_res_one_tx_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 64};
  return map_enum_number(numbers, 4, value, "dummy_g_s::max_num_ssb_csi_rs_res_one_tx_e_");
}

const char* dummy_g_s::max_num_ssb_csi_rs_res_two_tx_opts::to_string() const
{
  static const char* names[] = {"n0", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 6, value, "dummy_g_s::max_num_ssb_csi_rs_res_two_tx_e_");
}
uint8_t dummy_g_s::max_num_ssb_csi_rs_res_two_tx_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 4, 8, 16, 32, 64};
  return map_enum_number(numbers, 6, value, "dummy_g_s::max_num_ssb_csi_rs_res_two_tx_e_");
}

const char* dummy_g_s::supported_csi_rs_density_opts::to_string() const
{
  static const char* names[] = {"one", "three", "oneAndThree"};
  return convert_enum_idx(names, 3, value, "dummy_g_s::supported_csi_rs_density_e_");
}

// DummyH ::= SEQUENCE
SRSASN_CODE dummy_h_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, burst_len, (uint8_t)1u, (uint8_t)2u));
  HANDLE_CODE(pack_integer(bref, max_simul_res_sets_per_cc, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(pack_integer(bref, max_cfg_res_sets_per_cc, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, max_cfg_res_sets_all_cc, (uint8_t)1u, (uint8_t)128u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_h_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(burst_len, bref, (uint8_t)1u, (uint8_t)2u));
  HANDLE_CODE(unpack_integer(max_simul_res_sets_per_cc, bref, (uint8_t)1u, (uint8_t)8u));
  HANDLE_CODE(unpack_integer(max_cfg_res_sets_per_cc, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(max_cfg_res_sets_all_cc, bref, (uint8_t)1u, (uint8_t)128u));

  return SRSASN_SUCCESS;
}
void dummy_h_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("burstLength", burst_len);
  j.write_int("maxSimultaneousResourceSetsPerCC", max_simul_res_sets_per_cc);
  j.write_int("maxConfiguredResourceSetsPerCC", max_cfg_res_sets_per_cc);
  j.write_int("maxConfiguredResourceSetsAllCC", max_cfg_res_sets_all_cc);
  j.end_obj();
}

// PTRS-DensityRecommendationDL ::= SEQUENCE
SRSASN_CODE ptrs_density_recommendation_dl_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, freq_density1, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, freq_density2, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, time_density1, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(pack_integer(bref, time_density2, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(pack_integer(bref, time_density3, (uint8_t)0u, (uint8_t)29u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ptrs_density_recommendation_dl_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(freq_density1, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(freq_density2, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(time_density1, bref, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(unpack_integer(time_density2, bref, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(unpack_integer(time_density3, bref, (uint8_t)0u, (uint8_t)29u));

  return SRSASN_SUCCESS;
}
void ptrs_density_recommendation_dl_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("frequencyDensity1", freq_density1);
  j.write_int("frequencyDensity2", freq_density2);
  j.write_int("timeDensity1", time_density1);
  j.write_int("timeDensity2", time_density2);
  j.write_int("timeDensity3", time_density3);
  j.end_obj();
}

// PTRS-DensityRecommendationUL ::= SEQUENCE
SRSASN_CODE ptrs_density_recommendation_ul_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, freq_density1, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, freq_density2, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, time_density1, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(pack_integer(bref, time_density2, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(pack_integer(bref, time_density3, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(pack_integer(bref, sample_density1, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, sample_density2, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, sample_density3, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, sample_density4, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(pack_integer(bref, sample_density5, (uint16_t)1u, (uint16_t)276u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ptrs_density_recommendation_ul_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(freq_density1, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(freq_density2, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(time_density1, bref, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(unpack_integer(time_density2, bref, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(unpack_integer(time_density3, bref, (uint8_t)0u, (uint8_t)29u));
  HANDLE_CODE(unpack_integer(sample_density1, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(sample_density2, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(sample_density3, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(sample_density4, bref, (uint16_t)1u, (uint16_t)276u));
  HANDLE_CODE(unpack_integer(sample_density5, bref, (uint16_t)1u, (uint16_t)276u));

  return SRSASN_SUCCESS;
}
void ptrs_density_recommendation_ul_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("frequencyDensity1", freq_density1);
  j.write_int("frequencyDensity2", freq_density2);
  j.write_int("timeDensity1", time_density1);
  j.write_int("timeDensity2", time_density2);
  j.write_int("timeDensity3", time_density3);
  j.write_int("sampleDensity1", sample_density1);
  j.write_int("sampleDensity2", sample_density2);
  j.write_int("sampleDensity3", sample_density3);
  j.write_int("sampleDensity4", sample_density4);
  j.write_int("sampleDensity5", sample_density5);
  j.end_obj();
}

// SRS-Resources ::= SEQUENCE
SRSASN_CODE srs_res_features_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_aperiodic_srs_per_bwp.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_aperiodic_srs_per_bwp_per_slot, (uint8_t)1u, (uint8_t)6u));
  HANDLE_CODE(max_num_periodic_srs_per_bwp.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_periodic_srs_per_bwp_per_slot, (uint8_t)1u, (uint8_t)6u));
  HANDLE_CODE(max_num_semi_persistent_srs_per_bwp.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_semi_persistent_srs_per_bwp_per_slot, (uint8_t)1u, (uint8_t)6u));
  HANDLE_CODE(max_num_srs_ports_per_res.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_res_features_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_aperiodic_srs_per_bwp.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_aperiodic_srs_per_bwp_per_slot, bref, (uint8_t)1u, (uint8_t)6u));
  HANDLE_CODE(max_num_periodic_srs_per_bwp.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_periodic_srs_per_bwp_per_slot, bref, (uint8_t)1u, (uint8_t)6u));
  HANDLE_CODE(max_num_semi_persistent_srs_per_bwp.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_semi_persistent_srs_per_bwp_per_slot, bref, (uint8_t)1u, (uint8_t)6u));
  HANDLE_CODE(max_num_srs_ports_per_res.unpack(bref));

  return SRSASN_SUCCESS;
}
void srs_res_features_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberAperiodicSRS-PerBWP", max_num_aperiodic_srs_per_bwp.to_string());
  j.write_int("maxNumberAperiodicSRS-PerBWP-PerSlot", max_num_aperiodic_srs_per_bwp_per_slot);
  j.write_str("maxNumberPeriodicSRS-PerBWP", max_num_periodic_srs_per_bwp.to_string());
  j.write_int("maxNumberPeriodicSRS-PerBWP-PerSlot", max_num_periodic_srs_per_bwp_per_slot);
  j.write_str("maxNumberSemiPersistentSRS-PerBWP", max_num_semi_persistent_srs_per_bwp.to_string());
  j.write_int("maxNumberSemiPersistentSRS-PerBWP-PerSlot", max_num_semi_persistent_srs_per_bwp_per_slot);
  j.write_str("maxNumberSRS-Ports-PerResource", max_num_srs_ports_per_res.to_string());
  j.end_obj();
}

const char* srs_res_features_s::max_num_aperiodic_srs_per_bwp_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16"};
  return convert_enum_idx(names, 5, value, "srs_res_features_s::max_num_aperiodic_srs_per_bwp_e_");
}
uint8_t srs_res_features_s::max_num_aperiodic_srs_per_bwp_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16};
  return map_enum_number(numbers, 5, value, "srs_res_features_s::max_num_aperiodic_srs_per_bwp_e_");
}

const char* srs_res_features_s::max_num_periodic_srs_per_bwp_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16"};
  return convert_enum_idx(names, 5, value, "srs_res_features_s::max_num_periodic_srs_per_bwp_e_");
}
uint8_t srs_res_features_s::max_num_periodic_srs_per_bwp_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16};
  return map_enum_number(numbers, 5, value, "srs_res_features_s::max_num_periodic_srs_per_bwp_e_");
}

const char* srs_res_features_s::max_num_semi_persistent_srs_per_bwp_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16"};
  return convert_enum_idx(names, 5, value, "srs_res_features_s::max_num_semi_persistent_srs_per_bwp_e_");
}
uint8_t srs_res_features_s::max_num_semi_persistent_srs_per_bwp_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16};
  return map_enum_number(numbers, 5, value, "srs_res_features_s::max_num_semi_persistent_srs_per_bwp_e_");
}

const char* srs_res_features_s::max_num_srs_ports_per_res_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "srs_res_features_s::max_num_srs_ports_per_res_e_");
}
uint8_t srs_res_features_s::max_num_srs_ports_per_res_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "srs_res_features_s::max_num_srs_ports_per_res_e_");
}

// SpatialRelations ::= SEQUENCE
SRSASN_CODE spatial_relations_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(add_active_spatial_relation_pucch_present, 1));

  HANDLE_CODE(max_num_cfg_spatial_relations.pack(bref));
  HANDLE_CODE(max_num_active_spatial_relations.pack(bref));
  HANDLE_CODE(max_num_dl_rs_qcl_type_d.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE spatial_relations_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(add_active_spatial_relation_pucch_present, 1));

  HANDLE_CODE(max_num_cfg_spatial_relations.unpack(bref));
  HANDLE_CODE(max_num_active_spatial_relations.unpack(bref));
  HANDLE_CODE(max_num_dl_rs_qcl_type_d.unpack(bref));

  return SRSASN_SUCCESS;
}
void spatial_relations_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberConfiguredSpatialRelations", max_num_cfg_spatial_relations.to_string());
  j.write_str("maxNumberActiveSpatialRelations", max_num_active_spatial_relations.to_string());
  if (add_active_spatial_relation_pucch_present) {
    j.write_str("additionalActiveSpatialRelationPUCCH", "supported");
  }
  j.write_str("maxNumberDL-RS-QCL-TypeD", max_num_dl_rs_qcl_type_d.to_string());
  j.end_obj();
}

const char* spatial_relations_s::max_num_cfg_spatial_relations_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32", "n64", "n96"};
  return convert_enum_idx(names, 6, value, "spatial_relations_s::max_num_cfg_spatial_relations_e_");
}
uint8_t spatial_relations_s::max_num_cfg_spatial_relations_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32, 64, 96};
  return map_enum_number(numbers, 6, value, "spatial_relations_s::max_num_cfg_spatial_relations_e_");
}

const char* spatial_relations_s::max_num_active_spatial_relations_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n14"};
  return convert_enum_idx(names, 5, value, "spatial_relations_s::max_num_active_spatial_relations_e_");
}
uint8_t spatial_relations_s::max_num_active_spatial_relations_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 14};
  return map_enum_number(numbers, 5, value, "spatial_relations_s::max_num_active_spatial_relations_e_");
}

const char* spatial_relations_s::max_num_dl_rs_qcl_type_d_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n14"};
  return convert_enum_idx(names, 5, value, "spatial_relations_s::max_num_dl_rs_qcl_type_d_e_");
}
uint8_t spatial_relations_s::max_num_dl_rs_qcl_type_d_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 14};
  return map_enum_number(numbers, 5, value, "spatial_relations_s::max_num_dl_rs_qcl_type_d_e_");
}

// FR2-2-AccessParamsPerBand-r17 ::= SEQUENCE
SRSASN_CODE fr2_2_access_params_per_band_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dl_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(init_access_ssb_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(wideband_prach_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(multi_rb_pucch_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(multi_pdsch_single_dci_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(multi_pusch_single_dci_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(dl_fr2_2_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_fr2_2_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(init_access_ssb_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(wideband_prach_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(multi_rb_pucch_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(enhanced_pdcch_monitoring_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(dl_fr2_2_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_fr2_2_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(multi_rb_pucch_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(enhanced_pdcch_monitoring_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(type1_ch_access_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(type2_ch_access_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(reduced_beam_switch_timing_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.pack(support32_dl_harq_process_per_scs_r17_present, 1));
  HANDLE_CODE(bref.pack(support32_ul_harq_process_per_scs_r17_present, 1));

  if (enhanced_pdcch_monitoring_scs_960k_hz_r17_present) {
    HANDLE_CODE(bref.pack(enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring4_1_r17_present, 1));
    HANDLE_CODE(bref.pack(enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring4_2_r17_present, 1));
    HANDLE_CODE(bref.pack(enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring8_4_r17_present, 1));
  }
  if (support32_dl_harq_process_per_scs_r17_present) {
    HANDLE_CODE(bref.pack(support32_dl_harq_process_per_scs_r17.scs_120k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(support32_dl_harq_process_per_scs_r17.scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(support32_dl_harq_process_per_scs_r17.scs_960k_hz_r17_present, 1));
  }
  if (support32_ul_harq_process_per_scs_r17_present) {
    HANDLE_CODE(bref.pack(support32_ul_harq_process_per_scs_r17.scs_120k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(support32_ul_harq_process_per_scs_r17.scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(support32_ul_harq_process_per_scs_r17.scs_960k_hz_r17_present, 1));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= mod64_qam_pusch_fr2_2_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(mod64_qam_pusch_fr2_2_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE fr2_2_access_params_per_band_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dl_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(init_access_ssb_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(wideband_prach_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(multi_rb_pucch_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(multi_pdsch_single_dci_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(multi_pusch_single_dci_fr2_2_scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(dl_fr2_2_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_fr2_2_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(init_access_ssb_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(wideband_prach_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(multi_rb_pucch_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(enhanced_pdcch_monitoring_scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(dl_fr2_2_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_fr2_2_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(multi_rb_pucch_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(enhanced_pdcch_monitoring_scs_960k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(type1_ch_access_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(type2_ch_access_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(reduced_beam_switch_timing_fr2_2_r17_present, 1));
  HANDLE_CODE(bref.unpack(support32_dl_harq_process_per_scs_r17_present, 1));
  HANDLE_CODE(bref.unpack(support32_ul_harq_process_per_scs_r17_present, 1));

  if (enhanced_pdcch_monitoring_scs_960k_hz_r17_present) {
    HANDLE_CODE(bref.unpack(enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring4_1_r17_present, 1));
    HANDLE_CODE(bref.unpack(enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring4_2_r17_present, 1));
    HANDLE_CODE(bref.unpack(enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring8_4_r17_present, 1));
  }
  if (support32_dl_harq_process_per_scs_r17_present) {
    HANDLE_CODE(bref.unpack(support32_dl_harq_process_per_scs_r17.scs_120k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(support32_dl_harq_process_per_scs_r17.scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(support32_dl_harq_process_per_scs_r17.scs_960k_hz_r17_present, 1));
  }
  if (support32_ul_harq_process_per_scs_r17_present) {
    HANDLE_CODE(bref.unpack(support32_ul_harq_process_per_scs_r17.scs_120k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(support32_ul_harq_process_per_scs_r17.scs_480k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(support32_ul_harq_process_per_scs_r17.scs_960k_hz_r17_present, 1));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(mod64_qam_pusch_fr2_2_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void fr2_2_access_params_per_band_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_fr2_2_scs_120k_hz_r17_present) {
    j.write_str("dl-FR2-2-SCS-120kHz-r17", "supported");
  }
  if (ul_fr2_2_scs_120k_hz_r17_present) {
    j.write_str("ul-FR2-2-SCS-120kHz-r17", "supported");
  }
  if (init_access_ssb_120k_hz_r17_present) {
    j.write_str("initialAccessSSB-120kHz-r17", "supported");
  }
  if (wideband_prach_scs_120k_hz_r17_present) {
    j.write_str("widebandPRACH-SCS-120kHz-r17", "supported");
  }
  if (multi_rb_pucch_scs_120k_hz_r17_present) {
    j.write_str("multiRB-PUCCH-SCS-120kHz-r17", "supported");
  }
  if (multi_pdsch_single_dci_fr2_2_scs_120k_hz_r17_present) {
    j.write_str("multiPDSCH-SingleDCI-FR2-2-SCS-120kHz-r17", "supported");
  }
  if (multi_pusch_single_dci_fr2_2_scs_120k_hz_r17_present) {
    j.write_str("multiPUSCH-SingleDCI-FR2-2-SCS-120kHz-r17", "supported");
  }
  if (dl_fr2_2_scs_480k_hz_r17_present) {
    j.write_str("dl-FR2-2-SCS-480kHz-r17", "supported");
  }
  if (ul_fr2_2_scs_480k_hz_r17_present) {
    j.write_str("ul-FR2-2-SCS-480kHz-r17", "supported");
  }
  if (init_access_ssb_480k_hz_r17_present) {
    j.write_str("initialAccessSSB-480kHz-r17", "supported");
  }
  if (wideband_prach_scs_480k_hz_r17_present) {
    j.write_str("widebandPRACH-SCS-480kHz-r17", "supported");
  }
  if (multi_rb_pucch_scs_480k_hz_r17_present) {
    j.write_str("multiRB-PUCCH-SCS-480kHz-r17", "supported");
  }
  if (enhanced_pdcch_monitoring_scs_480k_hz_r17_present) {
    j.write_str("enhancedPDCCH-monitoringSCS-480kHz-r17", "supported");
  }
  if (dl_fr2_2_scs_960k_hz_r17_present) {
    j.write_str("dl-FR2-2-SCS-960kHz-r17", "supported");
  }
  if (ul_fr2_2_scs_960k_hz_r17_present) {
    j.write_str("ul-FR2-2-SCS-960kHz-r17", "supported");
  }
  if (multi_rb_pucch_scs_960k_hz_r17_present) {
    j.write_str("multiRB-PUCCH-SCS-960kHz-r17", "supported");
  }
  if (enhanced_pdcch_monitoring_scs_960k_hz_r17_present) {
    j.write_fieldname("enhancedPDCCH-monitoringSCS-960kHz-r17");
    j.start_obj();
    if (enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring4_1_r17_present) {
      j.write_str("pdcch-monitoring4-1-r17", "supported");
    }
    if (enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring4_2_r17_present) {
      j.write_str("pdcch-monitoring4-2-r17", "supported");
    }
    if (enhanced_pdcch_monitoring_scs_960k_hz_r17.pdcch_monitoring8_4_r17_present) {
      j.write_str("pdcch-monitoring8-4-r17", "supported");
    }
    j.end_obj();
  }
  if (type1_ch_access_fr2_2_r17_present) {
    j.write_str("type1-ChannelAccess-FR2-2-r17", "supported");
  }
  if (type2_ch_access_fr2_2_r17_present) {
    j.write_str("type2-ChannelAccess-FR2-2-r17", "supported");
  }
  if (reduced_beam_switch_timing_fr2_2_r17_present) {
    j.write_str("reduced-BeamSwitchTiming-FR2-2-r17", "supported");
  }
  if (support32_dl_harq_process_per_scs_r17_present) {
    j.write_fieldname("support32-DL-HARQ-ProcessPerSCS-r17");
    j.start_obj();
    if (support32_dl_harq_process_per_scs_r17.scs_120k_hz_r17_present) {
      j.write_str("scs-120kHz-r17", "supported");
    }
    if (support32_dl_harq_process_per_scs_r17.scs_480k_hz_r17_present) {
      j.write_str("scs-480kHz-r17", "supported");
    }
    if (support32_dl_harq_process_per_scs_r17.scs_960k_hz_r17_present) {
      j.write_str("scs-960kHz-r17", "supported");
    }
    j.end_obj();
  }
  if (support32_ul_harq_process_per_scs_r17_present) {
    j.write_fieldname("support32-UL-HARQ-ProcessPerSCS-r17");
    j.start_obj();
    if (support32_ul_harq_process_per_scs_r17.scs_120k_hz_r17_present) {
      j.write_str("scs-120kHz-r17", "supported");
    }
    if (support32_ul_harq_process_per_scs_r17.scs_480k_hz_r17_present) {
      j.write_str("scs-480kHz-r17", "supported");
    }
    if (support32_ul_harq_process_per_scs_r17.scs_960k_hz_r17_present) {
      j.write_str("scs-960kHz-r17", "supported");
    }
    j.end_obj();
  }
  if (ext) {
    if (mod64_qam_pusch_fr2_2_r17_present) {
      j.write_str("modulation64-QAM-PUSCH-FR2-2-r17", "supported");
    }
  }
  j.end_obj();
}

// MIMO-ParametersPerBand ::= SEQUENCE
SRSASN_CODE mimo_params_per_band_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(tci_state_pdsch_present, 1));
  HANDLE_CODE(bref.pack(add_active_tci_state_pdcch_present, 1));
  HANDLE_CODE(bref.pack(pusch_trans_coherence_present, 1));
  HANDLE_CODE(bref.pack(beam_correspondence_without_ul_beam_sweeping_present, 1));
  HANDLE_CODE(bref.pack(periodic_beam_report_present, 1));
  HANDLE_CODE(bref.pack(aperiodic_beam_report_present, 1));
  HANDLE_CODE(bref.pack(sp_beam_report_pucch_present, 1));
  HANDLE_CODE(bref.pack(sp_beam_report_pusch_present, 1));
  HANDLE_CODE(bref.pack(dummy1_present, 1));
  HANDLE_CODE(bref.pack(max_num_rx_beam_present, 1));
  HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl_present, 1));
  HANDLE_CODE(bref.pack(max_num_non_group_beam_report_present, 1));
  HANDLE_CODE(bref.pack(group_beam_report_present, 1));
  HANDLE_CODE(bref.pack(ul_beam_management_present, 1));
  HANDLE_CODE(bref.pack(max_num_csi_rs_bfd_present, 1));
  HANDLE_CODE(bref.pack(max_num_ssb_bfd_present, 1));
  HANDLE_CODE(bref.pack(max_num_csi_rs_ssb_cbd_present, 1));
  HANDLE_CODE(bref.pack(dummy2_present, 1));
  HANDLE_CODE(bref.pack(two_ports_ptrs_ul_present, 1));
  HANDLE_CODE(bref.pack(dummy5_present, 1));
  HANDLE_CODE(bref.pack(dummy3_present, 1));
  HANDLE_CODE(bref.pack(beam_report_timing_present, 1));
  HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_dl_present, 1));
  HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_ul_present, 1));
  HANDLE_CODE(bref.pack(dummy4_present, 1));
  HANDLE_CODE(bref.pack(aperiodic_trs_present, 1));

  if (tci_state_pdsch_present) {
    HANDLE_CODE(bref.pack(tci_state_pdsch.max_num_cfg_tci_states_per_cc_present, 1));
    HANDLE_CODE(bref.pack(tci_state_pdsch.max_num_active_tci_per_bwp_present, 1));
    if (tci_state_pdsch.max_num_cfg_tci_states_per_cc_present) {
      HANDLE_CODE(tci_state_pdsch.max_num_cfg_tci_states_per_cc.pack(bref));
    }
    if (tci_state_pdsch.max_num_active_tci_per_bwp_present) {
      HANDLE_CODE(tci_state_pdsch.max_num_active_tci_per_bwp.pack(bref));
    }
  }
  if (pusch_trans_coherence_present) {
    HANDLE_CODE(pusch_trans_coherence.pack(bref));
  }
  if (dummy1_present) {
    HANDLE_CODE(dummy1.pack(bref));
  }
  if (max_num_rx_beam_present) {
    HANDLE_CODE(pack_integer(bref, max_num_rx_beam, (uint8_t)2u, (uint8_t)8u));
  }
  if (max_num_rx_tx_beam_switch_dl_present) {
    HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl.scs_120k_hz_present, 1));
    HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl.scs_240k_hz_present, 1));
    if (max_num_rx_tx_beam_switch_dl.scs_15k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_15k_hz.pack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_30k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_30k_hz.pack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_60k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_60k_hz.pack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_120k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_120k_hz.pack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_240k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_240k_hz.pack(bref));
    }
  }
  if (max_num_non_group_beam_report_present) {
    HANDLE_CODE(max_num_non_group_beam_report.pack(bref));
  }
  if (ul_beam_management_present) {
    HANDLE_CODE(ul_beam_management.max_num_srs_res_per_set_bm.pack(bref));
    HANDLE_CODE(pack_integer(bref, ul_beam_management.max_num_srs_res_set, (uint8_t)1u, (uint8_t)8u));
  }
  if (max_num_csi_rs_bfd_present) {
    HANDLE_CODE(pack_integer(bref, max_num_csi_rs_bfd, (uint8_t)1u, (uint8_t)64u));
  }
  if (max_num_ssb_bfd_present) {
    HANDLE_CODE(pack_integer(bref, max_num_ssb_bfd, (uint8_t)1u, (uint8_t)64u));
  }
  if (max_num_csi_rs_ssb_cbd_present) {
    HANDLE_CODE(pack_integer(bref, max_num_csi_rs_ssb_cbd, (uint16_t)1u, (uint16_t)256u));
  }
  if (dummy5_present) {
    HANDLE_CODE(dummy5.pack(bref));
  }
  if (dummy3_present) {
    HANDLE_CODE(pack_integer(bref, dummy3, (uint8_t)1u, (uint8_t)4u));
  }
  if (beam_report_timing_present) {
    HANDLE_CODE(bref.pack(beam_report_timing.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(beam_report_timing.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(beam_report_timing.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(beam_report_timing.scs_120k_hz_present, 1));
    if (beam_report_timing.scs_15k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_15k_hz.pack(bref));
    }
    if (beam_report_timing.scs_30k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_30k_hz.pack(bref));
    }
    if (beam_report_timing.scs_60k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_60k_hz.pack(bref));
    }
    if (beam_report_timing.scs_120k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_120k_hz.pack(bref));
    }
  }
  if (ptrs_density_recommendation_set_dl_present) {
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_dl.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_dl.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_dl.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_dl.scs_120k_hz_present, 1));
    if (ptrs_density_recommendation_set_dl.scs_15k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_15k_hz.pack(bref));
    }
    if (ptrs_density_recommendation_set_dl.scs_30k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_30k_hz.pack(bref));
    }
    if (ptrs_density_recommendation_set_dl.scs_60k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_60k_hz.pack(bref));
    }
    if (ptrs_density_recommendation_set_dl.scs_120k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_120k_hz.pack(bref));
    }
  }
  if (ptrs_density_recommendation_set_ul_present) {
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_ul.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_ul.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_ul.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(ptrs_density_recommendation_set_ul.scs_120k_hz_present, 1));
    if (ptrs_density_recommendation_set_ul.scs_15k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_15k_hz.pack(bref));
    }
    if (ptrs_density_recommendation_set_ul.scs_30k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_30k_hz.pack(bref));
    }
    if (ptrs_density_recommendation_set_ul.scs_60k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_60k_hz.pack(bref));
    }
    if (ptrs_density_recommendation_set_ul.scs_120k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_120k_hz.pack(bref));
    }
  }
  if (dummy4_present) {
    HANDLE_CODE(dummy4.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= dummy6_present;
    group_flags[0] |= beam_management_ssb_csi_rs.is_present();
    group_flags[0] |= beam_switch_timing.is_present();
    group_flags[0] |= codebook_params.is_present();
    group_flags[0] |= csi_rs_im_reception_for_feedback.is_present();
    group_flags[0] |= csi_rs_proc_framework_for_srs.is_present();
    group_flags[0] |= csi_report_framework.is_present();
    group_flags[0] |= csi_rs_for_tracking.is_present();
    group_flags[0] |= srs_assoc_csi_rs.is_present();
    group_flags[0] |= spatial_relations.is_present();
    group_flags[1] |= default_qcl_two_tci_r16_present;
    group_flags[1] |= codebook_params_per_band_r16.is_present();
    group_flags[1] |= simul_spatial_relation_upd_pucch_res_group_r16_present;
    group_flags[1] |= max_num_scell_bfr_r16_present;
    group_flags[1] |= simul_reception_diff_type_d_r16_present;
    group_flags[1] |= ssb_csirs_sinr_meas_r16.is_present();
    group_flags[1] |= non_group_sinr_report_r16_present;
    group_flags[1] |= group_sinr_report_r16_present;
    group_flags[1] |= multi_dci_multi_trp_params_r16.is_present();
    group_flags[1] |= single_dci_sdm_scheme_params_r16.is_present();
    group_flags[1] |= support_fdm_scheme_a_r16_present;
    group_flags[1] |= support_code_word_soft_combining_r16_present;
    group_flags[1] |= support_tdm_scheme_a_r16_present;
    group_flags[1] |= support_inter_slot_tdm_r16.is_present();
    group_flags[1] |= low_papr_dmrs_pdsch_r16_present;
    group_flags[1] |= low_papr_dmrs_pusc_hwithout_precoding_r16_present;
    group_flags[1] |= low_papr_dmrs_pucch_r16_present;
    group_flags[1] |= low_papr_dmrs_pusc_hwith_precoding_r16_present;
    group_flags[1] |= csi_report_framework_ext_r16.is_present();
    group_flags[1] |= codebook_params_addition_r16.is_present();
    group_flags[1] |= codebook_combo_params_addition_r16.is_present();
    group_flags[1] |= beam_correspondence_ssb_based_r16_present;
    group_flags[1] |= beam_correspondence_csi_rs_based_r16_present;
    group_flags[1] |= beam_switch_timing_r16.is_present();
    group_flags[2] |= semi_persistent_l1_sinr_report_pucch_r16.is_present();
    group_flags[2] |= semi_persistent_l1_sinr_report_pusch_r16_present;
    group_flags[3] |= spatial_relations_v1640.is_present();
    group_flags[3] |= support64_candidate_beam_rs_bfr_r16_present;
    group_flags[4] |= max_mimo_layers_for_multi_dci_m_trp_r16_present;
    group_flags[5] |= supported_sinr_meas_v1670_present;
    group_flags[6] |= srs_increased_repeat_r17_present;
    group_flags[6] |= srs_partial_freq_sr17_present;
    group_flags[6] |= srs_start_rb_location_hop_partial_r17_present;
    group_flags[6] |= srs_comb_eight_r17_present;
    group_flags[6] |= codebook_paramsfetype2_r17.is_present();
    group_flags[6] |= mtrp_pusch_two_csi_rs_r17_present;
    group_flags[6] |= mtrp_pucch_inter_slot_r17_present;
    group_flags[6] |= mtrp_pucch_cyclic_map_r17_present;
    group_flags[6] |= mtrp_pucch_second_tpc_r17_present;
    group_flags[6] |= mtrp_bfr_two_bfd_rs_set_r17.is_present();
    group_flags[6] |= mtrp_bfr_pucch_sr_per_cg_r17_present;
    group_flags[6] |= mtrp_bfr_assoc_pucch_sr_r17_present;
    group_flags[6] |= sfn_simul_two_tci_across_multi_cc_r17_present;
    group_flags[6] |= sfn_default_dl_beam_setup_r17_present;
    group_flags[6] |= sfn_default_ul_beam_setup_r17_present;
    group_flags[6] |= srs_trigger_offset_r17_present;
    group_flags[6] |= srs_trigger_dci_r17_present;
    group_flags[6] |= codebook_combo_param_mixed_type_r17.is_present();
    group_flags[6] |= unified_joint_tci_r17.is_present();
    group_flags[6] |= unified_joint_tci_multi_mac_ce_r17.is_present();
    group_flags[6] |= unified_joint_tci_per_bwp_ca_r17_present;
    group_flags[6] |= unified_joint_tci_list_sharing_ca_r17_present;
    group_flags[6] |= unified_joint_tci_common_multi_cc_r17_present;
    group_flags[6] |= unified_joint_tci_beam_align_dl_rs_r17_present;
    group_flags[6] |= unified_joint_tci_pc_assoc_r17_present;
    group_flags[6] |= unified_joint_tci_legacy_r17_present;
    group_flags[6] |= unified_joint_tci_legacy_srs_r17_present;
    group_flags[6] |= unified_joint_tci_legacy_coreset0_r17_present;
    group_flags[6] |= unified_joint_tci_scell_bfr_r17_present;
    group_flags[6] |= unified_joint_tci_inter_cell_r17.is_present();
    group_flags[6] |= unified_separate_tci_r17.is_present();
    group_flags[6] |= unified_separate_tci_multi_mac_ce_r17.is_present();
    group_flags[6] |= unified_separate_tci_per_bwp_ca_r17_present;
    group_flags[6] |= unified_separate_tci_list_sharing_ca_r17.is_present();
    group_flags[6] |= unified_separate_tci_common_multi_cc_r17_present;
    group_flags[6] |= unified_separate_tci_inter_cell_r17.is_present();
    group_flags[6] |= unified_joint_tci_m_trp_inter_cell_bm_r17.is_present();
    group_flags[6] |= mpe_mitigation_r17.is_present();
    group_flags[6] |= srs_port_report_r17.is_present();
    group_flags[6] |= mtrp_pdcch_individual_r17_present;
    group_flags[6] |= mtrp_pdcch_any_span_3_symbols_r17_present;
    group_flags[6] |= mtrp_pdcch_two_qcl_type_d_r17_present;
    group_flags[6] |= mtrp_pusch_csi_rs_r17.is_present();
    group_flags[6] |= mtrp_pusch_cyclic_map_r17_present;
    group_flags[6] |= mtrp_pusch_second_tpc_r17_present;
    group_flags[6] |= mtrp_pusch_two_phr_report_r17_present;
    group_flags[6] |= mtrp_pusch_a_csi_r17_present;
    group_flags[6] |= mtrp_pusch_sp_csi_r17_present;
    group_flags[6] |= mtrp_pusch_cg_r17_present;
    group_flags[6] |= mtrp_pucch_mac_ce_r17_present;
    group_flags[6] |= mtrp_pucch_max_num_pc_fr1_r17_present;
    group_flags[6] |= mtrp_inter_cell_r17.is_present();
    group_flags[6] |= mtrp_group_based_l1_rsrp_r17.is_present();
    group_flags[6] |= mtrp_bfd_rs_mac_ce_r17_present;
    group_flags[6] |= mtrp_csi_enhancement_per_band_r17.is_present();
    group_flags[6] |= codebook_combo_param_multi_trp_r17.is_present();
    group_flags[6] |= mtrp_csi_add_csi_r17_present;
    group_flags[6] |= mtrp_csi_n_max2_r17_present;
    group_flags[6] |= mtrp_csi_cmr_r17_present;
    group_flags[6] |= srs_partial_freq_nohop_sr17_present;
    group_flags[6] |= beam_switch_timing_v1710.is_present();
    group_flags[6] |= beam_switch_timing_r17.is_present();
    group_flags[6] |= beam_report_timing_v1710.is_present();
    group_flags[6] |= max_num_rx_tx_beam_switch_dl_v1710.is_present();
    group_flags[7] |= srs_port_report_sp_ap_r17_present;
    group_flags[7] |= max_num_rx_beam_v1720_present;
    group_flags[7] |= sfn_implicit_rs_two_tci_r17_present;
    group_flags[7] |= sfn_qcl_type_d_collision_two_tci_r17_present;
    group_flags[7] |= mtrp_csi_num_cp_u_r17_present;
    group_flags[8] |= support_rep_num_pdsch_tdra_dci_1_2_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dummy6_present, 1));
      HANDLE_CODE(bref.pack(beam_management_ssb_csi_rs.is_present(), 1));
      HANDLE_CODE(bref.pack(beam_switch_timing.is_present(), 1));
      HANDLE_CODE(bref.pack(codebook_params.is_present(), 1));
      HANDLE_CODE(bref.pack(csi_rs_im_reception_for_feedback.is_present(), 1));
      HANDLE_CODE(bref.pack(csi_rs_proc_framework_for_srs.is_present(), 1));
      HANDLE_CODE(bref.pack(csi_report_framework.is_present(), 1));
      HANDLE_CODE(bref.pack(csi_rs_for_tracking.is_present(), 1));
      HANDLE_CODE(bref.pack(srs_assoc_csi_rs.is_present(), 1));
      HANDLE_CODE(bref.pack(spatial_relations.is_present(), 1));
      if (beam_management_ssb_csi_rs.is_present()) {
        HANDLE_CODE(beam_management_ssb_csi_rs->pack(bref));
      }
      if (beam_switch_timing.is_present()) {
        HANDLE_CODE(bref.pack(beam_switch_timing->scs_60k_hz_present, 1));
        HANDLE_CODE(bref.pack(beam_switch_timing->scs_120k_hz_present, 1));
        if (beam_switch_timing->scs_60k_hz_present) {
          HANDLE_CODE(beam_switch_timing->scs_60k_hz.pack(bref));
        }
        if (beam_switch_timing->scs_120k_hz_present) {
          HANDLE_CODE(beam_switch_timing->scs_120k_hz.pack(bref));
        }
      }
      if (codebook_params.is_present()) {
        HANDLE_CODE(codebook_params->pack(bref));
      }
      if (csi_rs_im_reception_for_feedback.is_present()) {
        HANDLE_CODE(csi_rs_im_reception_for_feedback->pack(bref));
      }
      if (csi_rs_proc_framework_for_srs.is_present()) {
        HANDLE_CODE(csi_rs_proc_framework_for_srs->pack(bref));
      }
      if (csi_report_framework.is_present()) {
        HANDLE_CODE(csi_report_framework->pack(bref));
      }
      if (csi_rs_for_tracking.is_present()) {
        HANDLE_CODE(csi_rs_for_tracking->pack(bref));
      }
      if (srs_assoc_csi_rs.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *srs_assoc_csi_rs, 1, 7));
      }
      if (spatial_relations.is_present()) {
        HANDLE_CODE(spatial_relations->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(default_qcl_two_tci_r16_present, 1));
      HANDLE_CODE(bref.pack(codebook_params_per_band_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_spatial_relation_upd_pucch_res_group_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_scell_bfr_r16_present, 1));
      HANDLE_CODE(bref.pack(simul_reception_diff_type_d_r16_present, 1));
      HANDLE_CODE(bref.pack(ssb_csirs_sinr_meas_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(non_group_sinr_report_r16_present, 1));
      HANDLE_CODE(bref.pack(group_sinr_report_r16_present, 1));
      HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(single_dci_sdm_scheme_params_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(support_fdm_scheme_a_r16_present, 1));
      HANDLE_CODE(bref.pack(support_code_word_soft_combining_r16_present, 1));
      HANDLE_CODE(bref.pack(support_tdm_scheme_a_r16_present, 1));
      HANDLE_CODE(bref.pack(support_inter_slot_tdm_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(low_papr_dmrs_pdsch_r16_present, 1));
      HANDLE_CODE(bref.pack(low_papr_dmrs_pusc_hwithout_precoding_r16_present, 1));
      HANDLE_CODE(bref.pack(low_papr_dmrs_pucch_r16_present, 1));
      HANDLE_CODE(bref.pack(low_papr_dmrs_pusc_hwith_precoding_r16_present, 1));
      HANDLE_CODE(bref.pack(csi_report_framework_ext_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(codebook_params_addition_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(codebook_combo_params_addition_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(beam_correspondence_ssb_based_r16_present, 1));
      HANDLE_CODE(bref.pack(beam_correspondence_csi_rs_based_r16_present, 1));
      HANDLE_CODE(bref.pack(beam_switch_timing_r16.is_present(), 1));
      if (codebook_params_per_band_r16.is_present()) {
        HANDLE_CODE(codebook_params_per_band_r16->pack(bref));
      }
      if (max_num_scell_bfr_r16_present) {
        HANDLE_CODE(max_num_scell_bfr_r16.pack(bref));
      }
      if (ssb_csirs_sinr_meas_r16.is_present()) {
        HANDLE_CODE(bref.pack(ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16_present, 1));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_ssb_csi_rs_one_tx_cmr_r16.pack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_csi_im_nzp_imr_res_r16.pack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_csi_rs_2_tx_res_r16.pack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_ssb_csi_rs_res_r16.pack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_csi_im_nzp_imr_res_mem_r16.pack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->supported_csi_rs_density_cmr_r16.pack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_aperiodic_csi_rs_res_r16.pack(bref));
        if (ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16_present) {
          HANDLE_CODE(ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16.pack(bref));
        }
      }
      if (non_group_sinr_report_r16_present) {
        HANDLE_CODE(non_group_sinr_report_r16.pack(bref));
      }
      if (multi_dci_multi_trp_params_r16.is_present()) {
        HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16_present, 1));
        HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16->overlap_pdsc_hs_in_time_partially_freq_r16_present, 1));
        HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16_present, 1));
        HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16->out_of_order_operation_ul_r16_present, 1));
        HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16->separate_crs_rate_matching_r16_present, 1));
        HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16->default_qcl_per_coreset_pool_idx_r16_present, 1));
        HANDLE_CODE(bref.pack(multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16_present, 1));
        if (multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16_present) {
          HANDLE_CODE(pack_integer(
              bref, multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16, (uint8_t)1u, (uint8_t)2u));
        }
        if (multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16_present) {
          HANDLE_CODE(bref.pack(
              multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16.support_pdcch_to_pdsch_r16_present, 1));
          HANDLE_CODE(bref.pack(
              multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16.support_pdsch_to_harq_ack_r16_present, 1));
        }
        if (multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16_present) {
          HANDLE_CODE(
              multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16.max_num_per_coreset_pool_r16.pack(bref));
          HANDLE_CODE(
              multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16.max_total_num_across_coreset_pool_r16.pack(
                  bref));
        }
      }
      if (single_dci_sdm_scheme_params_r16.is_present()) {
        HANDLE_CODE(bref.pack(single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16_present, 1));
        HANDLE_CODE(bref.pack(single_dci_sdm_scheme_params_r16->support_two_port_dl_ptrs_r16_present, 1));
        if (single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16_present) {
          HANDLE_CODE(single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16.pack(bref));
        }
      }
      if (support_tdm_scheme_a_r16_present) {
        HANDLE_CODE(support_tdm_scheme_a_r16.pack(bref));
      }
      if (support_inter_slot_tdm_r16.is_present()) {
        HANDLE_CODE(support_inter_slot_tdm_r16->support_rep_num_pdsch_tdra_r16.pack(bref));
        HANDLE_CODE(support_inter_slot_tdm_r16->max_tbs_size_r16.pack(bref));
        HANDLE_CODE(pack_integer(bref, support_inter_slot_tdm_r16->max_num_tci_states_r16, (uint8_t)1u, (uint8_t)2u));
      }
      if (csi_report_framework_ext_r16.is_present()) {
        HANDLE_CODE(csi_report_framework_ext_r16->pack(bref));
      }
      if (codebook_params_addition_r16.is_present()) {
        HANDLE_CODE(codebook_params_addition_r16->pack(bref));
      }
      if (codebook_combo_params_addition_r16.is_present()) {
        HANDLE_CODE(codebook_combo_params_addition_r16->pack(bref));
      }
      if (beam_switch_timing_r16.is_present()) {
        HANDLE_CODE(bref.pack(beam_switch_timing_r16->scs_60k_hz_r16_present, 1));
        HANDLE_CODE(bref.pack(beam_switch_timing_r16->scs_120k_hz_r16_present, 1));
        if (beam_switch_timing_r16->scs_60k_hz_r16_present) {
          HANDLE_CODE(beam_switch_timing_r16->scs_60k_hz_r16.pack(bref));
        }
        if (beam_switch_timing_r16->scs_120k_hz_r16_present) {
          HANDLE_CODE(beam_switch_timing_r16->scs_120k_hz_r16.pack(bref));
        }
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(semi_persistent_l1_sinr_report_pucch_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(semi_persistent_l1_sinr_report_pusch_r16_present, 1));
      if (semi_persistent_l1_sinr_report_pucch_r16.is_present()) {
        HANDLE_CODE(
            bref.pack(semi_persistent_l1_sinr_report_pucch_r16->support_report_format1_2_ofdm_syms_r16_present, 1));
        HANDLE_CODE(
            bref.pack(semi_persistent_l1_sinr_report_pucch_r16->support_report_format4_14_ofdm_syms_r16_present, 1));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(spatial_relations_v1640.is_present(), 1));
      HANDLE_CODE(bref.pack(support64_candidate_beam_rs_bfr_r16_present, 1));
      if (spatial_relations_v1640.is_present()) {
        HANDLE_CODE(spatial_relations_v1640->max_num_cfg_spatial_relations_v1640.pack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_mimo_layers_for_multi_dci_m_trp_r16_present, 1));
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_sinr_meas_v1670_present, 1));
      if (supported_sinr_meas_v1670_present) {
        HANDLE_CODE(supported_sinr_meas_v1670.pack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(srs_increased_repeat_r17_present, 1));
      HANDLE_CODE(bref.pack(srs_partial_freq_sr17_present, 1));
      HANDLE_CODE(bref.pack(srs_start_rb_location_hop_partial_r17_present, 1));
      HANDLE_CODE(bref.pack(srs_comb_eight_r17_present, 1));
      HANDLE_CODE(bref.pack(codebook_paramsfetype2_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_two_csi_rs_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pucch_inter_slot_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pucch_cyclic_map_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pucch_second_tpc_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_bfr_two_bfd_rs_set_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mtrp_bfr_pucch_sr_per_cg_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_bfr_assoc_pucch_sr_r17_present, 1));
      HANDLE_CODE(bref.pack(sfn_simul_two_tci_across_multi_cc_r17_present, 1));
      HANDLE_CODE(bref.pack(sfn_default_dl_beam_setup_r17_present, 1));
      HANDLE_CODE(bref.pack(sfn_default_ul_beam_setup_r17_present, 1));
      HANDLE_CODE(bref.pack(srs_trigger_offset_r17_present, 1));
      HANDLE_CODE(bref.pack(srs_trigger_dci_r17_present, 1));
      HANDLE_CODE(bref.pack(codebook_combo_param_mixed_type_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_multi_mac_ce_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_per_bwp_ca_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_list_sharing_ca_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_common_multi_cc_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_beam_align_dl_rs_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_pc_assoc_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_legacy_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_legacy_srs_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_legacy_coreset0_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_scell_bfr_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_inter_cell_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_separate_tci_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_separate_tci_multi_mac_ce_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_separate_tci_per_bwp_ca_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_separate_tci_list_sharing_ca_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_separate_tci_common_multi_cc_r17_present, 1));
      HANDLE_CODE(bref.pack(unified_separate_tci_inter_cell_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_m_trp_inter_cell_bm_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mpe_mitigation_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(srs_port_report_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mtrp_pdcch_individual_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pdcch_any_span_3_symbols_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pdcch_two_qcl_type_d_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_csi_rs_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_cyclic_map_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_second_tpc_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_two_phr_report_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_a_csi_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_sp_csi_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pusch_cg_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pucch_mac_ce_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pucch_max_num_pc_fr1_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_inter_cell_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mtrp_group_based_l1_rsrp_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mtrp_bfd_rs_mac_ce_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_csi_enhancement_per_band_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(codebook_combo_param_multi_trp_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(mtrp_csi_add_csi_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_csi_n_max2_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_csi_cmr_r17_present, 1));
      HANDLE_CODE(bref.pack(srs_partial_freq_nohop_sr17_present, 1));
      HANDLE_CODE(bref.pack(beam_switch_timing_v1710.is_present(), 1));
      HANDLE_CODE(bref.pack(beam_switch_timing_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(beam_report_timing_v1710.is_present(), 1));
      HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl_v1710.is_present(), 1));
      if (codebook_paramsfetype2_r17.is_present()) {
        HANDLE_CODE(codebook_paramsfetype2_r17->pack(bref));
      }
      if (mtrp_pucch_inter_slot_r17_present) {
        HANDLE_CODE(mtrp_pucch_inter_slot_r17.pack(bref));
      }
      if (mtrp_bfr_two_bfd_rs_set_r17.is_present()) {
        HANDLE_CODE(mtrp_bfr_two_bfd_rs_set_r17->max_bfd_rs_res_per_set_per_bwp_r17.pack(bref));
        HANDLE_CODE(pack_integer(bref, mtrp_bfr_two_bfd_rs_set_r17->max_bfr_r17, (uint8_t)1u, (uint8_t)9u));
        HANDLE_CODE(mtrp_bfr_two_bfd_rs_set_r17->max_bfd_rs_res_across_sets_per_bwp_r17.pack(bref));
      }
      if (mtrp_bfr_pucch_sr_per_cg_r17_present) {
        HANDLE_CODE(mtrp_bfr_pucch_sr_per_cg_r17.pack(bref));
      }
      if (srs_trigger_offset_r17_present) {
        HANDLE_CODE(srs_trigger_offset_r17.pack(bref));
      }
      if (codebook_combo_param_mixed_type_r17.is_present()) {
        HANDLE_CODE(codebook_combo_param_mixed_type_r17->pack(bref));
      }
      if (unified_joint_tci_r17.is_present()) {
        HANDLE_CODE(unified_joint_tci_r17->max_cfg_joint_tci_r17.pack(bref));
        HANDLE_CODE(unified_joint_tci_r17->max_activ_tci_across_cc_r17.pack(bref));
      }
      if (unified_joint_tci_multi_mac_ce_r17.is_present()) {
        HANDLE_CODE(bref.pack(unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17_present, 1));
        if (unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17_present) {
          HANDLE_CODE(unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17.pack(bref));
        }
        HANDLE_CODE(unified_joint_tci_multi_mac_ce_r17->max_num_mac_ce_per_cc.pack(bref));
      }
      if (unified_joint_tci_list_sharing_ca_r17_present) {
        HANDLE_CODE(unified_joint_tci_list_sharing_ca_r17.pack(bref));
      }
      if (unified_joint_tci_inter_cell_r17.is_present()) {
        HANDLE_CODE(unified_joint_tci_inter_cell_r17->add_mac_ce_per_cc_r17.pack(bref));
        HANDLE_CODE(unified_joint_tci_inter_cell_r17->add_mac_ce_across_cc_r17.pack(bref));
      }
      if (unified_separate_tci_r17.is_present()) {
        HANDLE_CODE(unified_separate_tci_r17->max_cfg_dl_tci_r17.pack(bref));
        HANDLE_CODE(unified_separate_tci_r17->max_cfg_ul_tci_r17.pack(bref));
        HANDLE_CODE(unified_separate_tci_r17->max_activ_dl_tci_across_cc_r17.pack(bref));
        HANDLE_CODE(unified_separate_tci_r17->max_activ_ul_tci_across_cc_r17.pack(bref));
      }
      if (unified_separate_tci_multi_mac_ce_r17.is_present()) {
        HANDLE_CODE(unified_separate_tci_multi_mac_ce_r17->min_beam_application_time_r17.pack(bref));
        HANDLE_CODE(pack_integer(
            bref, unified_separate_tci_multi_mac_ce_r17->max_activ_dl_tci_per_cc_r17, (uint8_t)2u, (uint8_t)8u));
        HANDLE_CODE(pack_integer(
            bref, unified_separate_tci_multi_mac_ce_r17->max_activ_ul_tci_per_cc_r17, (uint8_t)2u, (uint8_t)8u));
      }
      if (unified_separate_tci_list_sharing_ca_r17.is_present()) {
        HANDLE_CODE(bref.pack(unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17_present, 1));
        HANDLE_CODE(bref.pack(unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17_present, 1));
        if (unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17_present) {
          HANDLE_CODE(unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17.pack(bref));
        }
        if (unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17_present) {
          HANDLE_CODE(unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17.pack(bref));
        }
      }
      if (unified_separate_tci_inter_cell_r17.is_present()) {
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_dl_per_cc_r17.pack(bref));
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_ul_per_cc_r17.pack(bref));
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_dl_across_cc_r17.pack(bref));
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_ul_across_cc_r17.pack(bref));
      }
      if (unified_joint_tci_m_trp_inter_cell_bm_r17.is_present()) {
        HANDLE_CODE(pack_integer(
            bref, unified_joint_tci_m_trp_inter_cell_bm_r17->max_num_add_pci_l1_rsrp_r17, (uint8_t)1u, (uint8_t)7u));
        HANDLE_CODE(unified_joint_tci_m_trp_inter_cell_bm_r17->max_num_ssb_res_l1_rsrp_across_cc_r17.pack(bref));
      }
      if (mpe_mitigation_r17.is_present()) {
        HANDLE_CODE(pack_integer(bref, mpe_mitigation_r17->max_num_p_mpr_ri_pairs_r17, (uint8_t)1u, (uint8_t)4u));
        HANDLE_CODE(mpe_mitigation_r17->max_num_conf_rs_r17.pack(bref));
      }
      if (srs_port_report_r17.is_present()) {
        HANDLE_CODE(bref.pack(srs_port_report_r17->cap_val1_r17_present, 1));
        HANDLE_CODE(bref.pack(srs_port_report_r17->cap_val2_r17_present, 1));
        HANDLE_CODE(bref.pack(srs_port_report_r17->cap_val3_r17_present, 1));
        HANDLE_CODE(bref.pack(srs_port_report_r17->cap_val4_r17_present, 1));
        if (srs_port_report_r17->cap_val1_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val1_r17.pack(bref));
        }
        if (srs_port_report_r17->cap_val2_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val2_r17.pack(bref));
        }
        if (srs_port_report_r17->cap_val3_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val3_r17.pack(bref));
        }
        if (srs_port_report_r17->cap_val4_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val4_r17.pack(bref));
        }
      }
      if (mtrp_pusch_csi_rs_r17.is_present()) {
        HANDLE_CODE(pack_integer(bref, mtrp_pusch_csi_rs_r17->max_num_periodic_srs_r17, (uint8_t)1u, (uint8_t)8u));
        HANDLE_CODE(pack_integer(bref, mtrp_pusch_csi_rs_r17->max_num_aperiodic_srs_r17, (uint8_t)1u, (uint8_t)8u));
        HANDLE_CODE(pack_integer(bref, mtrp_pusch_csi_rs_r17->max_num_sp_srs_r17, (uint8_t)0u, (uint8_t)8u));
        HANDLE_CODE(pack_integer(bref, mtrp_pusch_csi_rs_r17->num_srs_res_per_cc_r17, (uint8_t)1u, (uint8_t)16u));
        HANDLE_CODE(pack_integer(bref, mtrp_pusch_csi_rs_r17->num_srs_res_non_codebook_r17, (uint8_t)1u, (uint8_t)2u));
      }
      if (mtrp_pusch_cyclic_map_r17_present) {
        HANDLE_CODE(mtrp_pusch_cyclic_map_r17.pack(bref));
      }
      if (mtrp_pucch_max_num_pc_fr1_r17_present) {
        HANDLE_CODE(pack_integer(bref, mtrp_pucch_max_num_pc_fr1_r17, (uint8_t)3u, (uint8_t)8u));
      }
      if (mtrp_inter_cell_r17.is_present()) {
        HANDLE_CODE(pack_integer(bref, mtrp_inter_cell_r17->max_num_add_pci_case1_r17, (uint8_t)1u, (uint8_t)7u));
        HANDLE_CODE(pack_integer(bref, mtrp_inter_cell_r17->max_num_add_pci_case2_r17, (uint8_t)0u, (uint8_t)7u));
      }
      if (mtrp_group_based_l1_rsrp_r17.is_present()) {
        HANDLE_CODE(
            pack_integer(bref, mtrp_group_based_l1_rsrp_r17->max_num_beam_groups_r17, (uint8_t)1u, (uint8_t)4u));
        HANDLE_CODE(mtrp_group_based_l1_rsrp_r17->max_num_rs_within_slot_r17.pack(bref));
        HANDLE_CODE(mtrp_group_based_l1_rsrp_r17->max_num_rs_across_slot_r17.pack(bref));
      }
      if (mtrp_bfd_rs_mac_ce_r17_present) {
        HANDLE_CODE(mtrp_bfd_rs_mac_ce_r17.pack(bref));
      }
      if (mtrp_csi_enhancement_per_band_r17.is_present()) {
        HANDLE_CODE(
            pack_integer(bref, mtrp_csi_enhancement_per_band_r17->max_num_nzp_csi_rs_r17, (uint8_t)2u, (uint8_t)8u));
        HANDLE_CODE(mtrp_csi_enhancement_per_band_r17->csi_report_mode_r17.pack(bref));
        HANDLE_CODE(pack_dyn_seq_of(bref, mtrp_csi_enhancement_per_band_r17->supported_combo_across_ccs_r17, 1, 16));
        HANDLE_CODE(mtrp_csi_enhancement_per_band_r17->codebook_mode_ncjt_r17.pack(bref));
      }
      if (codebook_combo_param_multi_trp_r17.is_present()) {
        HANDLE_CODE(codebook_combo_param_multi_trp_r17->pack(bref));
      }
      if (mtrp_csi_add_csi_r17_present) {
        HANDLE_CODE(mtrp_csi_add_csi_r17.pack(bref));
      }
      if (beam_switch_timing_v1710.is_present()) {
        HANDLE_CODE(bref.pack(beam_switch_timing_v1710->scs_480k_hz_present, 1));
        HANDLE_CODE(bref.pack(beam_switch_timing_v1710->scs_960k_hz_present, 1));
        if (beam_switch_timing_v1710->scs_480k_hz_present) {
          HANDLE_CODE(beam_switch_timing_v1710->scs_480k_hz.pack(bref));
        }
        if (beam_switch_timing_v1710->scs_960k_hz_present) {
          HANDLE_CODE(beam_switch_timing_v1710->scs_960k_hz.pack(bref));
        }
      }
      if (beam_switch_timing_r17.is_present()) {
        HANDLE_CODE(bref.pack(beam_switch_timing_r17->scs_480k_hz_r17_present, 1));
        HANDLE_CODE(bref.pack(beam_switch_timing_r17->scs_960k_hz_r17_present, 1));
        if (beam_switch_timing_r17->scs_480k_hz_r17_present) {
          HANDLE_CODE(beam_switch_timing_r17->scs_480k_hz_r17.pack(bref));
        }
        if (beam_switch_timing_r17->scs_960k_hz_r17_present) {
          HANDLE_CODE(beam_switch_timing_r17->scs_960k_hz_r17.pack(bref));
        }
      }
      if (beam_report_timing_v1710.is_present()) {
        HANDLE_CODE(bref.pack(beam_report_timing_v1710->scs_480k_hz_r17_present, 1));
        HANDLE_CODE(bref.pack(beam_report_timing_v1710->scs_960k_hz_r17_present, 1));
        if (beam_report_timing_v1710->scs_480k_hz_r17_present) {
          HANDLE_CODE(beam_report_timing_v1710->scs_480k_hz_r17.pack(bref));
        }
        if (beam_report_timing_v1710->scs_960k_hz_r17_present) {
          HANDLE_CODE(beam_report_timing_v1710->scs_960k_hz_r17.pack(bref));
        }
      }
      if (max_num_rx_tx_beam_switch_dl_v1710.is_present()) {
        HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17_present, 1));
        HANDLE_CODE(bref.pack(max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17_present, 1));
        if (max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17_present) {
          HANDLE_CODE(max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17.pack(bref));
        }
        if (max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17_present) {
          HANDLE_CODE(max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17.pack(bref));
        }
      }
    }
    if (group_flags[7]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(srs_port_report_sp_ap_r17_present, 1));
      HANDLE_CODE(bref.pack(max_num_rx_beam_v1720_present, 1));
      HANDLE_CODE(bref.pack(sfn_implicit_rs_two_tci_r17_present, 1));
      HANDLE_CODE(bref.pack(sfn_qcl_type_d_collision_two_tci_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_csi_num_cp_u_r17_present, 1));
      if (max_num_rx_beam_v1720_present) {
        HANDLE_CODE(pack_integer(bref, max_num_rx_beam_v1720, (uint8_t)9u, (uint8_t)12u));
      }
      if (mtrp_csi_num_cp_u_r17_present) {
        HANDLE_CODE(mtrp_csi_num_cp_u_r17.pack(bref));
      }
    }
    if (group_flags[8]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(support_rep_num_pdsch_tdra_dci_1_2_r17_present, 1));
      if (support_rep_num_pdsch_tdra_dci_1_2_r17_present) {
        HANDLE_CODE(support_rep_num_pdsch_tdra_dci_1_2_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mimo_params_per_band_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(tci_state_pdsch_present, 1));
  HANDLE_CODE(bref.unpack(add_active_tci_state_pdcch_present, 1));
  HANDLE_CODE(bref.unpack(pusch_trans_coherence_present, 1));
  HANDLE_CODE(bref.unpack(beam_correspondence_without_ul_beam_sweeping_present, 1));
  HANDLE_CODE(bref.unpack(periodic_beam_report_present, 1));
  HANDLE_CODE(bref.unpack(aperiodic_beam_report_present, 1));
  HANDLE_CODE(bref.unpack(sp_beam_report_pucch_present, 1));
  HANDLE_CODE(bref.unpack(sp_beam_report_pusch_present, 1));
  HANDLE_CODE(bref.unpack(dummy1_present, 1));
  HANDLE_CODE(bref.unpack(max_num_rx_beam_present, 1));
  HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl_present, 1));
  HANDLE_CODE(bref.unpack(max_num_non_group_beam_report_present, 1));
  HANDLE_CODE(bref.unpack(group_beam_report_present, 1));
  HANDLE_CODE(bref.unpack(ul_beam_management_present, 1));
  HANDLE_CODE(bref.unpack(max_num_csi_rs_bfd_present, 1));
  HANDLE_CODE(bref.unpack(max_num_ssb_bfd_present, 1));
  HANDLE_CODE(bref.unpack(max_num_csi_rs_ssb_cbd_present, 1));
  HANDLE_CODE(bref.unpack(dummy2_present, 1));
  HANDLE_CODE(bref.unpack(two_ports_ptrs_ul_present, 1));
  HANDLE_CODE(bref.unpack(dummy5_present, 1));
  HANDLE_CODE(bref.unpack(dummy3_present, 1));
  HANDLE_CODE(bref.unpack(beam_report_timing_present, 1));
  HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_dl_present, 1));
  HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_ul_present, 1));
  HANDLE_CODE(bref.unpack(dummy4_present, 1));
  HANDLE_CODE(bref.unpack(aperiodic_trs_present, 1));

  if (tci_state_pdsch_present) {
    HANDLE_CODE(bref.unpack(tci_state_pdsch.max_num_cfg_tci_states_per_cc_present, 1));
    HANDLE_CODE(bref.unpack(tci_state_pdsch.max_num_active_tci_per_bwp_present, 1));
    if (tci_state_pdsch.max_num_cfg_tci_states_per_cc_present) {
      HANDLE_CODE(tci_state_pdsch.max_num_cfg_tci_states_per_cc.unpack(bref));
    }
    if (tci_state_pdsch.max_num_active_tci_per_bwp_present) {
      HANDLE_CODE(tci_state_pdsch.max_num_active_tci_per_bwp.unpack(bref));
    }
  }
  if (pusch_trans_coherence_present) {
    HANDLE_CODE(pusch_trans_coherence.unpack(bref));
  }
  if (dummy1_present) {
    HANDLE_CODE(dummy1.unpack(bref));
  }
  if (max_num_rx_beam_present) {
    HANDLE_CODE(unpack_integer(max_num_rx_beam, bref, (uint8_t)2u, (uint8_t)8u));
  }
  if (max_num_rx_tx_beam_switch_dl_present) {
    HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl.scs_120k_hz_present, 1));
    HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl.scs_240k_hz_present, 1));
    if (max_num_rx_tx_beam_switch_dl.scs_15k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_15k_hz.unpack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_30k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_30k_hz.unpack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_60k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_60k_hz.unpack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_120k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_120k_hz.unpack(bref));
    }
    if (max_num_rx_tx_beam_switch_dl.scs_240k_hz_present) {
      HANDLE_CODE(max_num_rx_tx_beam_switch_dl.scs_240k_hz.unpack(bref));
    }
  }
  if (max_num_non_group_beam_report_present) {
    HANDLE_CODE(max_num_non_group_beam_report.unpack(bref));
  }
  if (ul_beam_management_present) {
    HANDLE_CODE(ul_beam_management.max_num_srs_res_per_set_bm.unpack(bref));
    HANDLE_CODE(unpack_integer(ul_beam_management.max_num_srs_res_set, bref, (uint8_t)1u, (uint8_t)8u));
  }
  if (max_num_csi_rs_bfd_present) {
    HANDLE_CODE(unpack_integer(max_num_csi_rs_bfd, bref, (uint8_t)1u, (uint8_t)64u));
  }
  if (max_num_ssb_bfd_present) {
    HANDLE_CODE(unpack_integer(max_num_ssb_bfd, bref, (uint8_t)1u, (uint8_t)64u));
  }
  if (max_num_csi_rs_ssb_cbd_present) {
    HANDLE_CODE(unpack_integer(max_num_csi_rs_ssb_cbd, bref, (uint16_t)1u, (uint16_t)256u));
  }
  if (dummy5_present) {
    HANDLE_CODE(dummy5.unpack(bref));
  }
  if (dummy3_present) {
    HANDLE_CODE(unpack_integer(dummy3, bref, (uint8_t)1u, (uint8_t)4u));
  }
  if (beam_report_timing_present) {
    HANDLE_CODE(bref.unpack(beam_report_timing.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(beam_report_timing.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(beam_report_timing.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(beam_report_timing.scs_120k_hz_present, 1));
    if (beam_report_timing.scs_15k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_15k_hz.unpack(bref));
    }
    if (beam_report_timing.scs_30k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_30k_hz.unpack(bref));
    }
    if (beam_report_timing.scs_60k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_60k_hz.unpack(bref));
    }
    if (beam_report_timing.scs_120k_hz_present) {
      HANDLE_CODE(beam_report_timing.scs_120k_hz.unpack(bref));
    }
  }
  if (ptrs_density_recommendation_set_dl_present) {
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_dl.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_dl.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_dl.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_dl.scs_120k_hz_present, 1));
    if (ptrs_density_recommendation_set_dl.scs_15k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_15k_hz.unpack(bref));
    }
    if (ptrs_density_recommendation_set_dl.scs_30k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_30k_hz.unpack(bref));
    }
    if (ptrs_density_recommendation_set_dl.scs_60k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_60k_hz.unpack(bref));
    }
    if (ptrs_density_recommendation_set_dl.scs_120k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_dl.scs_120k_hz.unpack(bref));
    }
  }
  if (ptrs_density_recommendation_set_ul_present) {
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_ul.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_ul.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_ul.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(ptrs_density_recommendation_set_ul.scs_120k_hz_present, 1));
    if (ptrs_density_recommendation_set_ul.scs_15k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_15k_hz.unpack(bref));
    }
    if (ptrs_density_recommendation_set_ul.scs_30k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_30k_hz.unpack(bref));
    }
    if (ptrs_density_recommendation_set_ul.scs_60k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_60k_hz.unpack(bref));
    }
    if (ptrs_density_recommendation_set_ul.scs_120k_hz_present) {
      HANDLE_CODE(ptrs_density_recommendation_set_ul.scs_120k_hz.unpack(bref));
    }
  }
  if (dummy4_present) {
    HANDLE_CODE(dummy4.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(9);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dummy6_present, 1));
      unpack_presence_flag(beam_management_ssb_csi_rs, bref);
      unpack_presence_flag(beam_switch_timing, bref);
      unpack_presence_flag(codebook_params, bref);
      unpack_presence_flag(csi_rs_im_reception_for_feedback, bref);
      unpack_presence_flag(csi_rs_proc_framework_for_srs, bref);
      unpack_presence_flag(csi_report_framework, bref);
      unpack_presence_flag(csi_rs_for_tracking, bref);
      unpack_presence_flag(srs_assoc_csi_rs, bref);
      unpack_presence_flag(spatial_relations, bref);
      if (beam_management_ssb_csi_rs.is_present()) {
        HANDLE_CODE(beam_management_ssb_csi_rs->unpack(bref));
      }
      if (beam_switch_timing.is_present()) {
        HANDLE_CODE(bref.unpack(beam_switch_timing->scs_60k_hz_present, 1));
        HANDLE_CODE(bref.unpack(beam_switch_timing->scs_120k_hz_present, 1));
        if (beam_switch_timing->scs_60k_hz_present) {
          HANDLE_CODE(beam_switch_timing->scs_60k_hz.unpack(bref));
        }
        if (beam_switch_timing->scs_120k_hz_present) {
          HANDLE_CODE(beam_switch_timing->scs_120k_hz.unpack(bref));
        }
      }
      if (codebook_params.is_present()) {
        HANDLE_CODE(codebook_params->unpack(bref));
      }
      if (csi_rs_im_reception_for_feedback.is_present()) {
        HANDLE_CODE(csi_rs_im_reception_for_feedback->unpack(bref));
      }
      if (csi_rs_proc_framework_for_srs.is_present()) {
        HANDLE_CODE(csi_rs_proc_framework_for_srs->unpack(bref));
      }
      if (csi_report_framework.is_present()) {
        HANDLE_CODE(csi_report_framework->unpack(bref));
      }
      if (csi_rs_for_tracking.is_present()) {
        HANDLE_CODE(csi_rs_for_tracking->unpack(bref));
      }
      if (srs_assoc_csi_rs.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*srs_assoc_csi_rs, bref, 1, 7));
      }
      if (spatial_relations.is_present()) {
        HANDLE_CODE(spatial_relations->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(default_qcl_two_tci_r16_present, 1));
      unpack_presence_flag(codebook_params_per_band_r16, bref);
      HANDLE_CODE(bref.unpack(simul_spatial_relation_upd_pucch_res_group_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_scell_bfr_r16_present, 1));
      HANDLE_CODE(bref.unpack(simul_reception_diff_type_d_r16_present, 1));
      unpack_presence_flag(ssb_csirs_sinr_meas_r16, bref);
      HANDLE_CODE(bref.unpack(non_group_sinr_report_r16_present, 1));
      HANDLE_CODE(bref.unpack(group_sinr_report_r16_present, 1));
      unpack_presence_flag(multi_dci_multi_trp_params_r16, bref);
      unpack_presence_flag(single_dci_sdm_scheme_params_r16, bref);
      HANDLE_CODE(bref.unpack(support_fdm_scheme_a_r16_present, 1));
      HANDLE_CODE(bref.unpack(support_code_word_soft_combining_r16_present, 1));
      HANDLE_CODE(bref.unpack(support_tdm_scheme_a_r16_present, 1));
      unpack_presence_flag(support_inter_slot_tdm_r16, bref);
      HANDLE_CODE(bref.unpack(low_papr_dmrs_pdsch_r16_present, 1));
      HANDLE_CODE(bref.unpack(low_papr_dmrs_pusc_hwithout_precoding_r16_present, 1));
      HANDLE_CODE(bref.unpack(low_papr_dmrs_pucch_r16_present, 1));
      HANDLE_CODE(bref.unpack(low_papr_dmrs_pusc_hwith_precoding_r16_present, 1));
      unpack_presence_flag(csi_report_framework_ext_r16, bref);
      unpack_presence_flag(codebook_params_addition_r16, bref);
      unpack_presence_flag(codebook_combo_params_addition_r16, bref);
      HANDLE_CODE(bref.unpack(beam_correspondence_ssb_based_r16_present, 1));
      HANDLE_CODE(bref.unpack(beam_correspondence_csi_rs_based_r16_present, 1));
      unpack_presence_flag(beam_switch_timing_r16, bref);
      if (codebook_params_per_band_r16.is_present()) {
        HANDLE_CODE(codebook_params_per_band_r16->unpack(bref));
      }
      if (max_num_scell_bfr_r16_present) {
        HANDLE_CODE(max_num_scell_bfr_r16.unpack(bref));
      }
      if (ssb_csirs_sinr_meas_r16.is_present()) {
        HANDLE_CODE(bref.unpack(ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16_present, 1));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_ssb_csi_rs_one_tx_cmr_r16.unpack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_csi_im_nzp_imr_res_r16.unpack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_csi_rs_2_tx_res_r16.unpack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_ssb_csi_rs_res_r16.unpack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_csi_im_nzp_imr_res_mem_r16.unpack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->supported_csi_rs_density_cmr_r16.unpack(bref));
        HANDLE_CODE(ssb_csirs_sinr_meas_r16->max_num_aperiodic_csi_rs_res_r16.unpack(bref));
        if (ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16_present) {
          HANDLE_CODE(ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16.unpack(bref));
        }
      }
      if (non_group_sinr_report_r16_present) {
        HANDLE_CODE(non_group_sinr_report_r16.unpack(bref));
      }
      if (multi_dci_multi_trp_params_r16.is_present()) {
        HANDLE_CODE(bref.unpack(multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16_present, 1));
        HANDLE_CODE(bref.unpack(multi_dci_multi_trp_params_r16->overlap_pdsc_hs_in_time_partially_freq_r16_present, 1));
        HANDLE_CODE(bref.unpack(multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16_present, 1));
        HANDLE_CODE(bref.unpack(multi_dci_multi_trp_params_r16->out_of_order_operation_ul_r16_present, 1));
        HANDLE_CODE(bref.unpack(multi_dci_multi_trp_params_r16->separate_crs_rate_matching_r16_present, 1));
        HANDLE_CODE(bref.unpack(multi_dci_multi_trp_params_r16->default_qcl_per_coreset_pool_idx_r16_present, 1));
        HANDLE_CODE(bref.unpack(multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16_present, 1));
        if (multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16_present) {
          HANDLE_CODE(unpack_integer(
              multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16, bref, (uint8_t)1u, (uint8_t)2u));
        }
        if (multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16_present) {
          HANDLE_CODE(bref.unpack(
              multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16.support_pdcch_to_pdsch_r16_present, 1));
          HANDLE_CODE(bref.unpack(
              multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16.support_pdsch_to_harq_ack_r16_present, 1));
        }
        if (multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16_present) {
          HANDLE_CODE(
              multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16.max_num_per_coreset_pool_r16.unpack(bref));
          HANDLE_CODE(
              multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16.max_total_num_across_coreset_pool_r16.unpack(
                  bref));
        }
      }
      if (single_dci_sdm_scheme_params_r16.is_present()) {
        HANDLE_CODE(bref.unpack(single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16_present, 1));
        HANDLE_CODE(bref.unpack(single_dci_sdm_scheme_params_r16->support_two_port_dl_ptrs_r16_present, 1));
        if (single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16_present) {
          HANDLE_CODE(single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16.unpack(bref));
        }
      }
      if (support_tdm_scheme_a_r16_present) {
        HANDLE_CODE(support_tdm_scheme_a_r16.unpack(bref));
      }
      if (support_inter_slot_tdm_r16.is_present()) {
        HANDLE_CODE(support_inter_slot_tdm_r16->support_rep_num_pdsch_tdra_r16.unpack(bref));
        HANDLE_CODE(support_inter_slot_tdm_r16->max_tbs_size_r16.unpack(bref));
        HANDLE_CODE(unpack_integer(support_inter_slot_tdm_r16->max_num_tci_states_r16, bref, (uint8_t)1u, (uint8_t)2u));
      }
      if (csi_report_framework_ext_r16.is_present()) {
        HANDLE_CODE(csi_report_framework_ext_r16->unpack(bref));
      }
      if (codebook_params_addition_r16.is_present()) {
        HANDLE_CODE(codebook_params_addition_r16->unpack(bref));
      }
      if (codebook_combo_params_addition_r16.is_present()) {
        HANDLE_CODE(codebook_combo_params_addition_r16->unpack(bref));
      }
      if (beam_switch_timing_r16.is_present()) {
        HANDLE_CODE(bref.unpack(beam_switch_timing_r16->scs_60k_hz_r16_present, 1));
        HANDLE_CODE(bref.unpack(beam_switch_timing_r16->scs_120k_hz_r16_present, 1));
        if (beam_switch_timing_r16->scs_60k_hz_r16_present) {
          HANDLE_CODE(beam_switch_timing_r16->scs_60k_hz_r16.unpack(bref));
        }
        if (beam_switch_timing_r16->scs_120k_hz_r16_present) {
          HANDLE_CODE(beam_switch_timing_r16->scs_120k_hz_r16.unpack(bref));
        }
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(semi_persistent_l1_sinr_report_pucch_r16, bref);
      HANDLE_CODE(bref.unpack(semi_persistent_l1_sinr_report_pusch_r16_present, 1));
      if (semi_persistent_l1_sinr_report_pucch_r16.is_present()) {
        HANDLE_CODE(
            bref.unpack(semi_persistent_l1_sinr_report_pucch_r16->support_report_format1_2_ofdm_syms_r16_present, 1));
        HANDLE_CODE(
            bref.unpack(semi_persistent_l1_sinr_report_pucch_r16->support_report_format4_14_ofdm_syms_r16_present, 1));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(spatial_relations_v1640, bref);
      HANDLE_CODE(bref.unpack(support64_candidate_beam_rs_bfr_r16_present, 1));
      if (spatial_relations_v1640.is_present()) {
        HANDLE_CODE(spatial_relations_v1640->max_num_cfg_spatial_relations_v1640.unpack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_mimo_layers_for_multi_dci_m_trp_r16_present, 1));
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(supported_sinr_meas_v1670_present, 1));
      if (supported_sinr_meas_v1670_present) {
        HANDLE_CODE(supported_sinr_meas_v1670.unpack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(srs_increased_repeat_r17_present, 1));
      HANDLE_CODE(bref.unpack(srs_partial_freq_sr17_present, 1));
      HANDLE_CODE(bref.unpack(srs_start_rb_location_hop_partial_r17_present, 1));
      HANDLE_CODE(bref.unpack(srs_comb_eight_r17_present, 1));
      unpack_presence_flag(codebook_paramsfetype2_r17, bref);
      HANDLE_CODE(bref.unpack(mtrp_pusch_two_csi_rs_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pucch_inter_slot_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pucch_cyclic_map_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pucch_second_tpc_r17_present, 1));
      unpack_presence_flag(mtrp_bfr_two_bfd_rs_set_r17, bref);
      HANDLE_CODE(bref.unpack(mtrp_bfr_pucch_sr_per_cg_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_bfr_assoc_pucch_sr_r17_present, 1));
      HANDLE_CODE(bref.unpack(sfn_simul_two_tci_across_multi_cc_r17_present, 1));
      HANDLE_CODE(bref.unpack(sfn_default_dl_beam_setup_r17_present, 1));
      HANDLE_CODE(bref.unpack(sfn_default_ul_beam_setup_r17_present, 1));
      HANDLE_CODE(bref.unpack(srs_trigger_offset_r17_present, 1));
      HANDLE_CODE(bref.unpack(srs_trigger_dci_r17_present, 1));
      unpack_presence_flag(codebook_combo_param_mixed_type_r17, bref);
      unpack_presence_flag(unified_joint_tci_r17, bref);
      unpack_presence_flag(unified_joint_tci_multi_mac_ce_r17, bref);
      HANDLE_CODE(bref.unpack(unified_joint_tci_per_bwp_ca_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_list_sharing_ca_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_common_multi_cc_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_beam_align_dl_rs_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_pc_assoc_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_legacy_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_legacy_srs_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_legacy_coreset0_r17_present, 1));
      HANDLE_CODE(bref.unpack(unified_joint_tci_scell_bfr_r17_present, 1));
      unpack_presence_flag(unified_joint_tci_inter_cell_r17, bref);
      unpack_presence_flag(unified_separate_tci_r17, bref);
      unpack_presence_flag(unified_separate_tci_multi_mac_ce_r17, bref);
      HANDLE_CODE(bref.unpack(unified_separate_tci_per_bwp_ca_r17_present, 1));
      unpack_presence_flag(unified_separate_tci_list_sharing_ca_r17, bref);
      HANDLE_CODE(bref.unpack(unified_separate_tci_common_multi_cc_r17_present, 1));
      unpack_presence_flag(unified_separate_tci_inter_cell_r17, bref);
      unpack_presence_flag(unified_joint_tci_m_trp_inter_cell_bm_r17, bref);
      unpack_presence_flag(mpe_mitigation_r17, bref);
      unpack_presence_flag(srs_port_report_r17, bref);
      HANDLE_CODE(bref.unpack(mtrp_pdcch_individual_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pdcch_any_span_3_symbols_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pdcch_two_qcl_type_d_r17_present, 1));
      unpack_presence_flag(mtrp_pusch_csi_rs_r17, bref);
      HANDLE_CODE(bref.unpack(mtrp_pusch_cyclic_map_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pusch_second_tpc_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pusch_two_phr_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pusch_a_csi_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pusch_sp_csi_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pusch_cg_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pucch_mac_ce_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pucch_max_num_pc_fr1_r17_present, 1));
      unpack_presence_flag(mtrp_inter_cell_r17, bref);
      unpack_presence_flag(mtrp_group_based_l1_rsrp_r17, bref);
      HANDLE_CODE(bref.unpack(mtrp_bfd_rs_mac_ce_r17_present, 1));
      unpack_presence_flag(mtrp_csi_enhancement_per_band_r17, bref);
      unpack_presence_flag(codebook_combo_param_multi_trp_r17, bref);
      HANDLE_CODE(bref.unpack(mtrp_csi_add_csi_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_csi_n_max2_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_csi_cmr_r17_present, 1));
      HANDLE_CODE(bref.unpack(srs_partial_freq_nohop_sr17_present, 1));
      unpack_presence_flag(beam_switch_timing_v1710, bref);
      unpack_presence_flag(beam_switch_timing_r17, bref);
      unpack_presence_flag(beam_report_timing_v1710, bref);
      unpack_presence_flag(max_num_rx_tx_beam_switch_dl_v1710, bref);
      if (codebook_paramsfetype2_r17.is_present()) {
        HANDLE_CODE(codebook_paramsfetype2_r17->unpack(bref));
      }
      if (mtrp_pucch_inter_slot_r17_present) {
        HANDLE_CODE(mtrp_pucch_inter_slot_r17.unpack(bref));
      }
      if (mtrp_bfr_two_bfd_rs_set_r17.is_present()) {
        HANDLE_CODE(mtrp_bfr_two_bfd_rs_set_r17->max_bfd_rs_res_per_set_per_bwp_r17.unpack(bref));
        HANDLE_CODE(unpack_integer(mtrp_bfr_two_bfd_rs_set_r17->max_bfr_r17, bref, (uint8_t)1u, (uint8_t)9u));
        HANDLE_CODE(mtrp_bfr_two_bfd_rs_set_r17->max_bfd_rs_res_across_sets_per_bwp_r17.unpack(bref));
      }
      if (mtrp_bfr_pucch_sr_per_cg_r17_present) {
        HANDLE_CODE(mtrp_bfr_pucch_sr_per_cg_r17.unpack(bref));
      }
      if (srs_trigger_offset_r17_present) {
        HANDLE_CODE(srs_trigger_offset_r17.unpack(bref));
      }
      if (codebook_combo_param_mixed_type_r17.is_present()) {
        HANDLE_CODE(codebook_combo_param_mixed_type_r17->unpack(bref));
      }
      if (unified_joint_tci_r17.is_present()) {
        HANDLE_CODE(unified_joint_tci_r17->max_cfg_joint_tci_r17.unpack(bref));
        HANDLE_CODE(unified_joint_tci_r17->max_activ_tci_across_cc_r17.unpack(bref));
      }
      if (unified_joint_tci_multi_mac_ce_r17.is_present()) {
        HANDLE_CODE(bref.unpack(unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17_present, 1));
        if (unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17_present) {
          HANDLE_CODE(unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17.unpack(bref));
        }
        HANDLE_CODE(unified_joint_tci_multi_mac_ce_r17->max_num_mac_ce_per_cc.unpack(bref));
      }
      if (unified_joint_tci_list_sharing_ca_r17_present) {
        HANDLE_CODE(unified_joint_tci_list_sharing_ca_r17.unpack(bref));
      }
      if (unified_joint_tci_inter_cell_r17.is_present()) {
        HANDLE_CODE(unified_joint_tci_inter_cell_r17->add_mac_ce_per_cc_r17.unpack(bref));
        HANDLE_CODE(unified_joint_tci_inter_cell_r17->add_mac_ce_across_cc_r17.unpack(bref));
      }
      if (unified_separate_tci_r17.is_present()) {
        HANDLE_CODE(unified_separate_tci_r17->max_cfg_dl_tci_r17.unpack(bref));
        HANDLE_CODE(unified_separate_tci_r17->max_cfg_ul_tci_r17.unpack(bref));
        HANDLE_CODE(unified_separate_tci_r17->max_activ_dl_tci_across_cc_r17.unpack(bref));
        HANDLE_CODE(unified_separate_tci_r17->max_activ_ul_tci_across_cc_r17.unpack(bref));
      }
      if (unified_separate_tci_multi_mac_ce_r17.is_present()) {
        HANDLE_CODE(unified_separate_tci_multi_mac_ce_r17->min_beam_application_time_r17.unpack(bref));
        HANDLE_CODE(unpack_integer(
            unified_separate_tci_multi_mac_ce_r17->max_activ_dl_tci_per_cc_r17, bref, (uint8_t)2u, (uint8_t)8u));
        HANDLE_CODE(unpack_integer(
            unified_separate_tci_multi_mac_ce_r17->max_activ_ul_tci_per_cc_r17, bref, (uint8_t)2u, (uint8_t)8u));
      }
      if (unified_separate_tci_list_sharing_ca_r17.is_present()) {
        HANDLE_CODE(bref.unpack(unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17_present, 1));
        HANDLE_CODE(bref.unpack(unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17_present, 1));
        if (unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17_present) {
          HANDLE_CODE(unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17.unpack(bref));
        }
        if (unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17_present) {
          HANDLE_CODE(unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17.unpack(bref));
        }
      }
      if (unified_separate_tci_inter_cell_r17.is_present()) {
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_dl_per_cc_r17.unpack(bref));
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_ul_per_cc_r17.unpack(bref));
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_dl_across_cc_r17.unpack(bref));
        HANDLE_CODE(unified_separate_tci_inter_cell_r17->k_ul_across_cc_r17.unpack(bref));
      }
      if (unified_joint_tci_m_trp_inter_cell_bm_r17.is_present()) {
        HANDLE_CODE(unpack_integer(
            unified_joint_tci_m_trp_inter_cell_bm_r17->max_num_add_pci_l1_rsrp_r17, bref, (uint8_t)1u, (uint8_t)7u));
        HANDLE_CODE(unified_joint_tci_m_trp_inter_cell_bm_r17->max_num_ssb_res_l1_rsrp_across_cc_r17.unpack(bref));
      }
      if (mpe_mitigation_r17.is_present()) {
        HANDLE_CODE(unpack_integer(mpe_mitigation_r17->max_num_p_mpr_ri_pairs_r17, bref, (uint8_t)1u, (uint8_t)4u));
        HANDLE_CODE(mpe_mitigation_r17->max_num_conf_rs_r17.unpack(bref));
      }
      if (srs_port_report_r17.is_present()) {
        HANDLE_CODE(bref.unpack(srs_port_report_r17->cap_val1_r17_present, 1));
        HANDLE_CODE(bref.unpack(srs_port_report_r17->cap_val2_r17_present, 1));
        HANDLE_CODE(bref.unpack(srs_port_report_r17->cap_val3_r17_present, 1));
        HANDLE_CODE(bref.unpack(srs_port_report_r17->cap_val4_r17_present, 1));
        if (srs_port_report_r17->cap_val1_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val1_r17.unpack(bref));
        }
        if (srs_port_report_r17->cap_val2_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val2_r17.unpack(bref));
        }
        if (srs_port_report_r17->cap_val3_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val3_r17.unpack(bref));
        }
        if (srs_port_report_r17->cap_val4_r17_present) {
          HANDLE_CODE(srs_port_report_r17->cap_val4_r17.unpack(bref));
        }
      }
      if (mtrp_pusch_csi_rs_r17.is_present()) {
        HANDLE_CODE(unpack_integer(mtrp_pusch_csi_rs_r17->max_num_periodic_srs_r17, bref, (uint8_t)1u, (uint8_t)8u));
        HANDLE_CODE(unpack_integer(mtrp_pusch_csi_rs_r17->max_num_aperiodic_srs_r17, bref, (uint8_t)1u, (uint8_t)8u));
        HANDLE_CODE(unpack_integer(mtrp_pusch_csi_rs_r17->max_num_sp_srs_r17, bref, (uint8_t)0u, (uint8_t)8u));
        HANDLE_CODE(unpack_integer(mtrp_pusch_csi_rs_r17->num_srs_res_per_cc_r17, bref, (uint8_t)1u, (uint8_t)16u));
        HANDLE_CODE(
            unpack_integer(mtrp_pusch_csi_rs_r17->num_srs_res_non_codebook_r17, bref, (uint8_t)1u, (uint8_t)2u));
      }
      if (mtrp_pusch_cyclic_map_r17_present) {
        HANDLE_CODE(mtrp_pusch_cyclic_map_r17.unpack(bref));
      }
      if (mtrp_pucch_max_num_pc_fr1_r17_present) {
        HANDLE_CODE(unpack_integer(mtrp_pucch_max_num_pc_fr1_r17, bref, (uint8_t)3u, (uint8_t)8u));
      }
      if (mtrp_inter_cell_r17.is_present()) {
        HANDLE_CODE(unpack_integer(mtrp_inter_cell_r17->max_num_add_pci_case1_r17, bref, (uint8_t)1u, (uint8_t)7u));
        HANDLE_CODE(unpack_integer(mtrp_inter_cell_r17->max_num_add_pci_case2_r17, bref, (uint8_t)0u, (uint8_t)7u));
      }
      if (mtrp_group_based_l1_rsrp_r17.is_present()) {
        HANDLE_CODE(
            unpack_integer(mtrp_group_based_l1_rsrp_r17->max_num_beam_groups_r17, bref, (uint8_t)1u, (uint8_t)4u));
        HANDLE_CODE(mtrp_group_based_l1_rsrp_r17->max_num_rs_within_slot_r17.unpack(bref));
        HANDLE_CODE(mtrp_group_based_l1_rsrp_r17->max_num_rs_across_slot_r17.unpack(bref));
      }
      if (mtrp_bfd_rs_mac_ce_r17_present) {
        HANDLE_CODE(mtrp_bfd_rs_mac_ce_r17.unpack(bref));
      }
      if (mtrp_csi_enhancement_per_band_r17.is_present()) {
        HANDLE_CODE(
            unpack_integer(mtrp_csi_enhancement_per_band_r17->max_num_nzp_csi_rs_r17, bref, (uint8_t)2u, (uint8_t)8u));
        HANDLE_CODE(mtrp_csi_enhancement_per_band_r17->csi_report_mode_r17.unpack(bref));
        HANDLE_CODE(unpack_dyn_seq_of(mtrp_csi_enhancement_per_band_r17->supported_combo_across_ccs_r17, bref, 1, 16));
        HANDLE_CODE(mtrp_csi_enhancement_per_band_r17->codebook_mode_ncjt_r17.unpack(bref));
      }
      if (codebook_combo_param_multi_trp_r17.is_present()) {
        HANDLE_CODE(codebook_combo_param_multi_trp_r17->unpack(bref));
      }
      if (mtrp_csi_add_csi_r17_present) {
        HANDLE_CODE(mtrp_csi_add_csi_r17.unpack(bref));
      }
      if (beam_switch_timing_v1710.is_present()) {
        HANDLE_CODE(bref.unpack(beam_switch_timing_v1710->scs_480k_hz_present, 1));
        HANDLE_CODE(bref.unpack(beam_switch_timing_v1710->scs_960k_hz_present, 1));
        if (beam_switch_timing_v1710->scs_480k_hz_present) {
          HANDLE_CODE(beam_switch_timing_v1710->scs_480k_hz.unpack(bref));
        }
        if (beam_switch_timing_v1710->scs_960k_hz_present) {
          HANDLE_CODE(beam_switch_timing_v1710->scs_960k_hz.unpack(bref));
        }
      }
      if (beam_switch_timing_r17.is_present()) {
        HANDLE_CODE(bref.unpack(beam_switch_timing_r17->scs_480k_hz_r17_present, 1));
        HANDLE_CODE(bref.unpack(beam_switch_timing_r17->scs_960k_hz_r17_present, 1));
        if (beam_switch_timing_r17->scs_480k_hz_r17_present) {
          HANDLE_CODE(beam_switch_timing_r17->scs_480k_hz_r17.unpack(bref));
        }
        if (beam_switch_timing_r17->scs_960k_hz_r17_present) {
          HANDLE_CODE(beam_switch_timing_r17->scs_960k_hz_r17.unpack(bref));
        }
      }
      if (beam_report_timing_v1710.is_present()) {
        HANDLE_CODE(bref.unpack(beam_report_timing_v1710->scs_480k_hz_r17_present, 1));
        HANDLE_CODE(bref.unpack(beam_report_timing_v1710->scs_960k_hz_r17_present, 1));
        if (beam_report_timing_v1710->scs_480k_hz_r17_present) {
          HANDLE_CODE(beam_report_timing_v1710->scs_480k_hz_r17.unpack(bref));
        }
        if (beam_report_timing_v1710->scs_960k_hz_r17_present) {
          HANDLE_CODE(beam_report_timing_v1710->scs_960k_hz_r17.unpack(bref));
        }
      }
      if (max_num_rx_tx_beam_switch_dl_v1710.is_present()) {
        HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17_present, 1));
        HANDLE_CODE(bref.unpack(max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17_present, 1));
        if (max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17_present) {
          HANDLE_CODE(max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17.unpack(bref));
        }
        if (max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17_present) {
          HANDLE_CODE(max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17.unpack(bref));
        }
      }
    }
    if (group_flags[7]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(srs_port_report_sp_ap_r17_present, 1));
      HANDLE_CODE(bref.unpack(max_num_rx_beam_v1720_present, 1));
      HANDLE_CODE(bref.unpack(sfn_implicit_rs_two_tci_r17_present, 1));
      HANDLE_CODE(bref.unpack(sfn_qcl_type_d_collision_two_tci_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_csi_num_cp_u_r17_present, 1));
      if (max_num_rx_beam_v1720_present) {
        HANDLE_CODE(unpack_integer(max_num_rx_beam_v1720, bref, (uint8_t)9u, (uint8_t)12u));
      }
      if (mtrp_csi_num_cp_u_r17_present) {
        HANDLE_CODE(mtrp_csi_num_cp_u_r17.unpack(bref));
      }
    }
    if (group_flags[8]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(support_rep_num_pdsch_tdra_dci_1_2_r17_present, 1));
      if (support_rep_num_pdsch_tdra_dci_1_2_r17_present) {
        HANDLE_CODE(support_rep_num_pdsch_tdra_dci_1_2_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void mimo_params_per_band_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (tci_state_pdsch_present) {
    j.write_fieldname("tci-StatePDSCH");
    j.start_obj();
    if (tci_state_pdsch.max_num_cfg_tci_states_per_cc_present) {
      j.write_str("maxNumberConfiguredTCI-StatesPerCC", tci_state_pdsch.max_num_cfg_tci_states_per_cc.to_string());
    }
    if (tci_state_pdsch.max_num_active_tci_per_bwp_present) {
      j.write_str("maxNumberActiveTCI-PerBWP", tci_state_pdsch.max_num_active_tci_per_bwp.to_string());
    }
    j.end_obj();
  }
  if (add_active_tci_state_pdcch_present) {
    j.write_str("additionalActiveTCI-StatePDCCH", "supported");
  }
  if (pusch_trans_coherence_present) {
    j.write_str("pusch-TransCoherence", pusch_trans_coherence.to_string());
  }
  if (beam_correspondence_without_ul_beam_sweeping_present) {
    j.write_str("beamCorrespondenceWithoutUL-BeamSweeping", "supported");
  }
  if (periodic_beam_report_present) {
    j.write_str("periodicBeamReport", "supported");
  }
  if (aperiodic_beam_report_present) {
    j.write_str("aperiodicBeamReport", "supported");
  }
  if (sp_beam_report_pucch_present) {
    j.write_str("sp-BeamReportPUCCH", "supported");
  }
  if (sp_beam_report_pusch_present) {
    j.write_str("sp-BeamReportPUSCH", "supported");
  }
  if (dummy1_present) {
    j.write_fieldname("dummy1");
    dummy1.to_json(j);
  }
  if (max_num_rx_beam_present) {
    j.write_int("maxNumberRxBeam", max_num_rx_beam);
  }
  if (max_num_rx_tx_beam_switch_dl_present) {
    j.write_fieldname("maxNumberRxTxBeamSwitchDL");
    j.start_obj();
    if (max_num_rx_tx_beam_switch_dl.scs_15k_hz_present) {
      j.write_str("scs-15kHz", max_num_rx_tx_beam_switch_dl.scs_15k_hz.to_string());
    }
    if (max_num_rx_tx_beam_switch_dl.scs_30k_hz_present) {
      j.write_str("scs-30kHz", max_num_rx_tx_beam_switch_dl.scs_30k_hz.to_string());
    }
    if (max_num_rx_tx_beam_switch_dl.scs_60k_hz_present) {
      j.write_str("scs-60kHz", max_num_rx_tx_beam_switch_dl.scs_60k_hz.to_string());
    }
    if (max_num_rx_tx_beam_switch_dl.scs_120k_hz_present) {
      j.write_str("scs-120kHz", max_num_rx_tx_beam_switch_dl.scs_120k_hz.to_string());
    }
    if (max_num_rx_tx_beam_switch_dl.scs_240k_hz_present) {
      j.write_str("scs-240kHz", max_num_rx_tx_beam_switch_dl.scs_240k_hz.to_string());
    }
    j.end_obj();
  }
  if (max_num_non_group_beam_report_present) {
    j.write_str("maxNumberNonGroupBeamReporting", max_num_non_group_beam_report.to_string());
  }
  if (group_beam_report_present) {
    j.write_str("groupBeamReporting", "supported");
  }
  if (ul_beam_management_present) {
    j.write_fieldname("uplinkBeamManagement");
    j.start_obj();
    j.write_str("maxNumberSRS-ResourcePerSet-BM", ul_beam_management.max_num_srs_res_per_set_bm.to_string());
    j.write_int("maxNumberSRS-ResourceSet", ul_beam_management.max_num_srs_res_set);
    j.end_obj();
  }
  if (max_num_csi_rs_bfd_present) {
    j.write_int("maxNumberCSI-RS-BFD", max_num_csi_rs_bfd);
  }
  if (max_num_ssb_bfd_present) {
    j.write_int("maxNumberSSB-BFD", max_num_ssb_bfd);
  }
  if (max_num_csi_rs_ssb_cbd_present) {
    j.write_int("maxNumberCSI-RS-SSB-CBD", max_num_csi_rs_ssb_cbd);
  }
  if (dummy2_present) {
    j.write_str("dummy2", "supported");
  }
  if (two_ports_ptrs_ul_present) {
    j.write_str("twoPortsPTRS-UL", "supported");
  }
  if (dummy5_present) {
    j.write_fieldname("dummy5");
    dummy5.to_json(j);
  }
  if (dummy3_present) {
    j.write_int("dummy3", dummy3);
  }
  if (beam_report_timing_present) {
    j.write_fieldname("beamReportTiming");
    j.start_obj();
    if (beam_report_timing.scs_15k_hz_present) {
      j.write_str("scs-15kHz", beam_report_timing.scs_15k_hz.to_string());
    }
    if (beam_report_timing.scs_30k_hz_present) {
      j.write_str("scs-30kHz", beam_report_timing.scs_30k_hz.to_string());
    }
    if (beam_report_timing.scs_60k_hz_present) {
      j.write_str("scs-60kHz", beam_report_timing.scs_60k_hz.to_string());
    }
    if (beam_report_timing.scs_120k_hz_present) {
      j.write_str("scs-120kHz", beam_report_timing.scs_120k_hz.to_string());
    }
    j.end_obj();
  }
  if (ptrs_density_recommendation_set_dl_present) {
    j.write_fieldname("ptrs-DensityRecommendationSetDL");
    j.start_obj();
    if (ptrs_density_recommendation_set_dl.scs_15k_hz_present) {
      j.write_fieldname("scs-15kHz");
      ptrs_density_recommendation_set_dl.scs_15k_hz.to_json(j);
    }
    if (ptrs_density_recommendation_set_dl.scs_30k_hz_present) {
      j.write_fieldname("scs-30kHz");
      ptrs_density_recommendation_set_dl.scs_30k_hz.to_json(j);
    }
    if (ptrs_density_recommendation_set_dl.scs_60k_hz_present) {
      j.write_fieldname("scs-60kHz");
      ptrs_density_recommendation_set_dl.scs_60k_hz.to_json(j);
    }
    if (ptrs_density_recommendation_set_dl.scs_120k_hz_present) {
      j.write_fieldname("scs-120kHz");
      ptrs_density_recommendation_set_dl.scs_120k_hz.to_json(j);
    }
    j.end_obj();
  }
  if (ptrs_density_recommendation_set_ul_present) {
    j.write_fieldname("ptrs-DensityRecommendationSetUL");
    j.start_obj();
    if (ptrs_density_recommendation_set_ul.scs_15k_hz_present) {
      j.write_fieldname("scs-15kHz");
      ptrs_density_recommendation_set_ul.scs_15k_hz.to_json(j);
    }
    if (ptrs_density_recommendation_set_ul.scs_30k_hz_present) {
      j.write_fieldname("scs-30kHz");
      ptrs_density_recommendation_set_ul.scs_30k_hz.to_json(j);
    }
    if (ptrs_density_recommendation_set_ul.scs_60k_hz_present) {
      j.write_fieldname("scs-60kHz");
      ptrs_density_recommendation_set_ul.scs_60k_hz.to_json(j);
    }
    if (ptrs_density_recommendation_set_ul.scs_120k_hz_present) {
      j.write_fieldname("scs-120kHz");
      ptrs_density_recommendation_set_ul.scs_120k_hz.to_json(j);
    }
    j.end_obj();
  }
  if (dummy4_present) {
    j.write_fieldname("dummy4");
    dummy4.to_json(j);
  }
  if (aperiodic_trs_present) {
    j.write_str("aperiodicTRS", "supported");
  }
  if (ext) {
    if (dummy6_present) {
      j.write_str("dummy6", "true");
    }
    if (beam_management_ssb_csi_rs.is_present()) {
      j.write_fieldname("beamManagementSSB-CSI-RS");
      beam_management_ssb_csi_rs->to_json(j);
    }
    if (beam_switch_timing.is_present()) {
      j.write_fieldname("beamSwitchTiming");
      j.start_obj();
      if (beam_switch_timing->scs_60k_hz_present) {
        j.write_str("scs-60kHz", beam_switch_timing->scs_60k_hz.to_string());
      }
      if (beam_switch_timing->scs_120k_hz_present) {
        j.write_str("scs-120kHz", beam_switch_timing->scs_120k_hz.to_string());
      }
      j.end_obj();
    }
    if (codebook_params.is_present()) {
      j.write_fieldname("codebookParameters");
      codebook_params->to_json(j);
    }
    if (csi_rs_im_reception_for_feedback.is_present()) {
      j.write_fieldname("csi-RS-IM-ReceptionForFeedback");
      csi_rs_im_reception_for_feedback->to_json(j);
    }
    if (csi_rs_proc_framework_for_srs.is_present()) {
      j.write_fieldname("csi-RS-ProcFrameworkForSRS");
      csi_rs_proc_framework_for_srs->to_json(j);
    }
    if (csi_report_framework.is_present()) {
      j.write_fieldname("csi-ReportFramework");
      csi_report_framework->to_json(j);
    }
    if (csi_rs_for_tracking.is_present()) {
      j.write_fieldname("csi-RS-ForTracking");
      csi_rs_for_tracking->to_json(j);
    }
    if (srs_assoc_csi_rs.is_present()) {
      j.start_array("srs-AssocCSI-RS");
      for (const auto& e1 : *srs_assoc_csi_rs) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (spatial_relations.is_present()) {
      j.write_fieldname("spatialRelations");
      spatial_relations->to_json(j);
    }
    if (default_qcl_two_tci_r16_present) {
      j.write_str("defaultQCL-TwoTCI-r16", "supported");
    }
    if (codebook_params_per_band_r16.is_present()) {
      j.write_fieldname("codebookParametersPerBand-r16");
      codebook_params_per_band_r16->to_json(j);
    }
    if (simul_spatial_relation_upd_pucch_res_group_r16_present) {
      j.write_str("simul-SpatialRelationUpdatePUCCHResGroup-r16", "supported");
    }
    if (max_num_scell_bfr_r16_present) {
      j.write_str("maxNumberSCellBFR-r16", max_num_scell_bfr_r16.to_string());
    }
    if (simul_reception_diff_type_d_r16_present) {
      j.write_str("simultaneousReceptionDiffTypeD-r16", "supported");
    }
    if (ssb_csirs_sinr_meas_r16.is_present()) {
      j.write_fieldname("ssb-csirs-SINR-measurement-r16");
      j.start_obj();
      j.write_str("maxNumberSSB-CSIRS-OneTx-CMR-r16",
                  ssb_csirs_sinr_meas_r16->max_num_ssb_csi_rs_one_tx_cmr_r16.to_string());
      j.write_str("maxNumberCSI-IM-NZP-IMR-res-r16",
                  ssb_csirs_sinr_meas_r16->max_num_csi_im_nzp_imr_res_r16.to_string());
      j.write_str("maxNumberCSIRS-2Tx-res-r16", ssb_csirs_sinr_meas_r16->max_num_csi_rs_2_tx_res_r16.to_string());
      j.write_str("maxNumberSSB-CSIRS-res-r16", ssb_csirs_sinr_meas_r16->max_num_ssb_csi_rs_res_r16.to_string());
      j.write_str("maxNumberCSI-IM-NZP-IMR-res-mem-r16",
                  ssb_csirs_sinr_meas_r16->max_num_csi_im_nzp_imr_res_mem_r16.to_string());
      j.write_str("supportedCSI-RS-Density-CMR-r16",
                  ssb_csirs_sinr_meas_r16->supported_csi_rs_density_cmr_r16.to_string());
      j.write_str("maxNumberAperiodicCSI-RS-Res-r16",
                  ssb_csirs_sinr_meas_r16->max_num_aperiodic_csi_rs_res_r16.to_string());
      if (ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16_present) {
        j.write_str("supportedSINR-meas-r16", ssb_csirs_sinr_meas_r16->supported_sinr_meas_r16.to_string());
      }
      j.end_obj();
    }
    if (non_group_sinr_report_r16_present) {
      j.write_str("nonGroupSINR-reporting-r16", non_group_sinr_report_r16.to_string());
    }
    if (group_sinr_report_r16_present) {
      j.write_str("groupSINR-reporting-r16", "supported");
    }
    if (multi_dci_multi_trp_params_r16.is_present()) {
      j.write_fieldname("multiDCI-multiTRP-Parameters-r16");
      j.start_obj();
      if (multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16_present) {
        j.write_int("overlapPDSCHsFullyFreqTime-r16",
                    multi_dci_multi_trp_params_r16->overlap_pdsc_hs_fully_freq_time_r16);
      }
      if (multi_dci_multi_trp_params_r16->overlap_pdsc_hs_in_time_partially_freq_r16_present) {
        j.write_str("overlapPDSCHsInTimePartiallyFreq-r16", "supported");
      }
      if (multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16_present) {
        j.write_fieldname("outOfOrderOperationDL-r16");
        j.start_obj();
        if (multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16.support_pdcch_to_pdsch_r16_present) {
          j.write_str("supportPDCCH-ToPDSCH-r16", "supported");
        }
        if (multi_dci_multi_trp_params_r16->out_of_order_operation_dl_r16.support_pdsch_to_harq_ack_r16_present) {
          j.write_str("supportPDSCH-ToHARQ-ACK-r16", "supported");
        }
        j.end_obj();
      }
      if (multi_dci_multi_trp_params_r16->out_of_order_operation_ul_r16_present) {
        j.write_str("outOfOrderOperationUL-r16", "supported");
      }
      if (multi_dci_multi_trp_params_r16->separate_crs_rate_matching_r16_present) {
        j.write_str("separateCRS-RateMatching-r16", "supported");
      }
      if (multi_dci_multi_trp_params_r16->default_qcl_per_coreset_pool_idx_r16_present) {
        j.write_str("defaultQCL-PerCORESETPoolIndex-r16", "supported");
      }
      if (multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16_present) {
        j.write_fieldname("maxNumberActivatedTCI-States-r16");
        j.start_obj();
        j.write_str(
            "maxNumberPerCORESET-Pool-r16",
            multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16.max_num_per_coreset_pool_r16.to_string());
        j.write_str("maxTotalNumberAcrossCORESET-Pool-r16",
                    multi_dci_multi_trp_params_r16->max_num_activ_tci_states_r16.max_total_num_across_coreset_pool_r16
                        .to_string());
        j.end_obj();
      }
      j.end_obj();
    }
    if (single_dci_sdm_scheme_params_r16.is_present()) {
      j.write_fieldname("singleDCI-SDM-scheme-Parameters-r16");
      j.start_obj();
      if (single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16_present) {
        j.write_str("supportNewDMRS-Port-r16", single_dci_sdm_scheme_params_r16->support_new_dmrs_port_r16.to_string());
      }
      if (single_dci_sdm_scheme_params_r16->support_two_port_dl_ptrs_r16_present) {
        j.write_str("supportTwoPortDL-PTRS-r16", "supported");
      }
      j.end_obj();
    }
    if (support_fdm_scheme_a_r16_present) {
      j.write_str("supportFDM-SchemeA-r16", "supported");
    }
    if (support_code_word_soft_combining_r16_present) {
      j.write_str("supportCodeWordSoftCombining-r16", "supported");
    }
    if (support_tdm_scheme_a_r16_present) {
      j.write_str("supportTDM-SchemeA-r16", support_tdm_scheme_a_r16.to_string());
    }
    if (support_inter_slot_tdm_r16.is_present()) {
      j.write_fieldname("supportInter-slotTDM-r16");
      j.start_obj();
      j.write_str("supportRepNumPDSCH-TDRA-r16",
                  support_inter_slot_tdm_r16->support_rep_num_pdsch_tdra_r16.to_string());
      j.write_str("maxTBS-Size-r16", support_inter_slot_tdm_r16->max_tbs_size_r16.to_string());
      j.write_int("maxNumberTCI-states-r16", support_inter_slot_tdm_r16->max_num_tci_states_r16);
      j.end_obj();
    }
    if (low_papr_dmrs_pdsch_r16_present) {
      j.write_str("lowPAPR-DMRS-PDSCH-r16", "supported");
    }
    if (low_papr_dmrs_pusc_hwithout_precoding_r16_present) {
      j.write_str("lowPAPR-DMRS-PUSCHwithoutPrecoding-r16", "supported");
    }
    if (low_papr_dmrs_pucch_r16_present) {
      j.write_str("lowPAPR-DMRS-PUCCH-r16", "supported");
    }
    if (low_papr_dmrs_pusc_hwith_precoding_r16_present) {
      j.write_str("lowPAPR-DMRS-PUSCHwithPrecoding-r16", "supported");
    }
    if (csi_report_framework_ext_r16.is_present()) {
      j.write_fieldname("csi-ReportFrameworkExt-r16");
      csi_report_framework_ext_r16->to_json(j);
    }
    if (codebook_params_addition_r16.is_present()) {
      j.write_fieldname("codebookParametersAddition-r16");
      codebook_params_addition_r16->to_json(j);
    }
    if (codebook_combo_params_addition_r16.is_present()) {
      j.write_fieldname("codebookComboParametersAddition-r16");
      codebook_combo_params_addition_r16->to_json(j);
    }
    if (beam_correspondence_ssb_based_r16_present) {
      j.write_str("beamCorrespondenceSSB-based-r16", "supported");
    }
    if (beam_correspondence_csi_rs_based_r16_present) {
      j.write_str("beamCorrespondenceCSI-RS-based-r16", "supported");
    }
    if (beam_switch_timing_r16.is_present()) {
      j.write_fieldname("beamSwitchTiming-r16");
      j.start_obj();
      if (beam_switch_timing_r16->scs_60k_hz_r16_present) {
        j.write_str("scs-60kHz-r16", beam_switch_timing_r16->scs_60k_hz_r16.to_string());
      }
      if (beam_switch_timing_r16->scs_120k_hz_r16_present) {
        j.write_str("scs-120kHz-r16", beam_switch_timing_r16->scs_120k_hz_r16.to_string());
      }
      j.end_obj();
    }
    if (semi_persistent_l1_sinr_report_pucch_r16.is_present()) {
      j.write_fieldname("semi-PersistentL1-SINR-Report-PUCCH-r16");
      j.start_obj();
      if (semi_persistent_l1_sinr_report_pucch_r16->support_report_format1_2_ofdm_syms_r16_present) {
        j.write_str("supportReportFormat1-2OFDM-syms-r16", "supported");
      }
      if (semi_persistent_l1_sinr_report_pucch_r16->support_report_format4_14_ofdm_syms_r16_present) {
        j.write_str("supportReportFormat4-14OFDM-syms-r16", "supported");
      }
      j.end_obj();
    }
    if (semi_persistent_l1_sinr_report_pusch_r16_present) {
      j.write_str("semi-PersistentL1-SINR-Report-PUSCH-r16", "supported");
    }
    if (spatial_relations_v1640.is_present()) {
      j.write_fieldname("spatialRelations-v1640");
      j.start_obj();
      j.write_str("maxNumberConfiguredSpatialRelations-v1640",
                  spatial_relations_v1640->max_num_cfg_spatial_relations_v1640.to_string());
      j.end_obj();
    }
    if (support64_candidate_beam_rs_bfr_r16_present) {
      j.write_str("support64CandidateBeamRS-BFR-r16", "supported");
    }
    if (max_mimo_layers_for_multi_dci_m_trp_r16_present) {
      j.write_str("maxMIMO-LayersForMulti-DCI-mTRP-r16", "supported");
    }
    if (supported_sinr_meas_v1670_present) {
      j.write_str("supportedSINR-meas-v1670", supported_sinr_meas_v1670.to_string());
    }
    if (srs_increased_repeat_r17_present) {
      j.write_str("srs-increasedRepetition-r17", "supported");
    }
    if (srs_partial_freq_sr17_present) {
      j.write_str("srs-partialFrequencySounding-r17", "supported");
    }
    if (srs_start_rb_location_hop_partial_r17_present) {
      j.write_str("srs-startRB-locationHoppingPartial-r17", "supported");
    }
    if (srs_comb_eight_r17_present) {
      j.write_str("srs-combEight-r17", "supported");
    }
    if (codebook_paramsfetype2_r17.is_present()) {
      j.write_fieldname("codebookParametersfetype2-r17");
      codebook_paramsfetype2_r17->to_json(j);
    }
    if (mtrp_pusch_two_csi_rs_r17_present) {
      j.write_str("mTRP-PUSCH-twoCSI-RS-r17", "supported");
    }
    if (mtrp_pucch_inter_slot_r17_present) {
      j.write_str("mTRP-PUCCH-InterSlot-r17", mtrp_pucch_inter_slot_r17.to_string());
    }
    if (mtrp_pucch_cyclic_map_r17_present) {
      j.write_str("mTRP-PUCCH-CyclicMapping-r17", "supported");
    }
    if (mtrp_pucch_second_tpc_r17_present) {
      j.write_str("mTRP-PUCCH-SecondTPC-r17", "supported");
    }
    if (mtrp_bfr_two_bfd_rs_set_r17.is_present()) {
      j.write_fieldname("mTRP-BFR-twoBFD-RS-Set-r17");
      j.start_obj();
      j.write_str("maxBFD-RS-resourcesPerSetPerBWP-r17",
                  mtrp_bfr_two_bfd_rs_set_r17->max_bfd_rs_res_per_set_per_bwp_r17.to_string());
      j.write_int("maxBFR-r17", mtrp_bfr_two_bfd_rs_set_r17->max_bfr_r17);
      j.write_str("maxBFD-RS-resourcesAcrossSetsPerBWP-r17",
                  mtrp_bfr_two_bfd_rs_set_r17->max_bfd_rs_res_across_sets_per_bwp_r17.to_string());
      j.end_obj();
    }
    if (mtrp_bfr_pucch_sr_per_cg_r17_present) {
      j.write_str("mTRP-BFR-PUCCH-SR-perCG-r17", mtrp_bfr_pucch_sr_per_cg_r17.to_string());
    }
    if (mtrp_bfr_assoc_pucch_sr_r17_present) {
      j.write_str("mTRP-BFR-association-PUCCH-SR-r17", "supported");
    }
    if (sfn_simul_two_tci_across_multi_cc_r17_present) {
      j.write_str("sfn-SimulTwoTCI-AcrossMultiCC-r17", "supported");
    }
    if (sfn_default_dl_beam_setup_r17_present) {
      j.write_str("sfn-DefaultDL-BeamSetup-r17", "supported");
    }
    if (sfn_default_ul_beam_setup_r17_present) {
      j.write_str("sfn-DefaultUL-BeamSetup-r17", "supported");
    }
    if (srs_trigger_offset_r17_present) {
      j.write_str("srs-TriggeringOffset-r17", srs_trigger_offset_r17.to_string());
    }
    if (srs_trigger_dci_r17_present) {
      j.write_str("srs-TriggeringDCI-r17", "supported");
    }
    if (codebook_combo_param_mixed_type_r17.is_present()) {
      j.write_fieldname("codebookComboParameterMixedType-r17");
      codebook_combo_param_mixed_type_r17->to_json(j);
    }
    if (unified_joint_tci_r17.is_present()) {
      j.write_fieldname("unifiedJointTCI-r17");
      j.start_obj();
      j.write_str("maxConfiguredJointTCI-r17", unified_joint_tci_r17->max_cfg_joint_tci_r17.to_string());
      j.write_str("maxActivatedTCIAcrossCC-r17", unified_joint_tci_r17->max_activ_tci_across_cc_r17.to_string());
      j.end_obj();
    }
    if (unified_joint_tci_multi_mac_ce_r17.is_present()) {
      j.write_fieldname("unifiedJointTCI-multiMAC-CE-r17");
      j.start_obj();
      if (unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17_present) {
        j.write_str("minBeamApplicationTime-r17",
                    unified_joint_tci_multi_mac_ce_r17->min_beam_application_time_r17.to_string());
      }
      j.write_str("maxNumMAC-CE-PerCC", unified_joint_tci_multi_mac_ce_r17->max_num_mac_ce_per_cc.to_string());
      j.end_obj();
    }
    if (unified_joint_tci_per_bwp_ca_r17_present) {
      j.write_str("unifiedJointTCI-perBWP-CA-r17", "supported");
    }
    if (unified_joint_tci_list_sharing_ca_r17_present) {
      j.write_str("unifiedJointTCI-ListSharingCA-r17", unified_joint_tci_list_sharing_ca_r17.to_string());
    }
    if (unified_joint_tci_common_multi_cc_r17_present) {
      j.write_str("unifiedJointTCI-commonMultiCC-r17", "supported");
    }
    if (unified_joint_tci_beam_align_dl_rs_r17_present) {
      j.write_str("unifiedJointTCI-BeamAlignDLRS-r17", "supported");
    }
    if (unified_joint_tci_pc_assoc_r17_present) {
      j.write_str("unifiedJointTCI-PC-association-r17", "supported");
    }
    if (unified_joint_tci_legacy_r17_present) {
      j.write_str("unifiedJointTCI-Legacy-r17", "supported");
    }
    if (unified_joint_tci_legacy_srs_r17_present) {
      j.write_str("unifiedJointTCI-Legacy-SRS-r17", "supported");
    }
    if (unified_joint_tci_legacy_coreset0_r17_present) {
      j.write_str("unifiedJointTCI-Legacy-CORESET0-r17", "supported");
    }
    if (unified_joint_tci_scell_bfr_r17_present) {
      j.write_str("unifiedJointTCI-SCellBFR-r17", "supported");
    }
    if (unified_joint_tci_inter_cell_r17.is_present()) {
      j.write_fieldname("unifiedJointTCI-InterCell-r17");
      j.start_obj();
      j.write_str("additionalMAC-CE-PerCC-r17", unified_joint_tci_inter_cell_r17->add_mac_ce_per_cc_r17.to_string());
      j.write_str("additionalMAC-CE-AcrossCC-r17",
                  unified_joint_tci_inter_cell_r17->add_mac_ce_across_cc_r17.to_string());
      j.end_obj();
    }
    if (unified_separate_tci_r17.is_present()) {
      j.write_fieldname("unifiedSeparateTCI-r17");
      j.start_obj();
      j.write_str("maxConfiguredDL-TCI-r17", unified_separate_tci_r17->max_cfg_dl_tci_r17.to_string());
      j.write_str("maxConfiguredUL-TCI-r17", unified_separate_tci_r17->max_cfg_ul_tci_r17.to_string());
      j.write_str("maxActivatedDL-TCIAcrossCC-r17",
                  unified_separate_tci_r17->max_activ_dl_tci_across_cc_r17.to_string());
      j.write_str("maxActivatedUL-TCIAcrossCC-r17",
                  unified_separate_tci_r17->max_activ_ul_tci_across_cc_r17.to_string());
      j.end_obj();
    }
    if (unified_separate_tci_multi_mac_ce_r17.is_present()) {
      j.write_fieldname("unifiedSeparateTCI-multiMAC-CE-r17");
      j.start_obj();
      j.write_str("minBeamApplicationTime-r17",
                  unified_separate_tci_multi_mac_ce_r17->min_beam_application_time_r17.to_string());
      j.write_int("maxActivatedDL-TCIPerCC-r17", unified_separate_tci_multi_mac_ce_r17->max_activ_dl_tci_per_cc_r17);
      j.write_int("maxActivatedUL-TCIPerCC-r17", unified_separate_tci_multi_mac_ce_r17->max_activ_ul_tci_per_cc_r17);
      j.end_obj();
    }
    if (unified_separate_tci_per_bwp_ca_r17_present) {
      j.write_str("unifiedSeparateTCI-perBWP-CA-r17", "supported");
    }
    if (unified_separate_tci_list_sharing_ca_r17.is_present()) {
      j.write_fieldname("unifiedSeparateTCI-ListSharingCA-r17");
      j.start_obj();
      if (unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17_present) {
        j.write_str("maxNumListDL-TCI-r17",
                    unified_separate_tci_list_sharing_ca_r17->max_num_list_dl_tci_r17.to_string());
      }
      if (unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17_present) {
        j.write_str("maxNumListUL-TCI-r17",
                    unified_separate_tci_list_sharing_ca_r17->max_num_list_ul_tci_r17.to_string());
      }
      j.end_obj();
    }
    if (unified_separate_tci_common_multi_cc_r17_present) {
      j.write_str("unifiedSeparateTCI-commonMultiCC-r17", "supported");
    }
    if (unified_separate_tci_inter_cell_r17.is_present()) {
      j.write_fieldname("unifiedSeparateTCI-InterCell-r17");
      j.start_obj();
      j.write_str("k-DL-PerCC-r17", unified_separate_tci_inter_cell_r17->k_dl_per_cc_r17.to_string());
      j.write_str("k-UL-PerCC-r17", unified_separate_tci_inter_cell_r17->k_ul_per_cc_r17.to_string());
      j.write_str("k-DL-AcrossCC-r17", unified_separate_tci_inter_cell_r17->k_dl_across_cc_r17.to_string());
      j.write_str("k-UL-AcrossCC-r17", unified_separate_tci_inter_cell_r17->k_ul_across_cc_r17.to_string());
      j.end_obj();
    }
    if (unified_joint_tci_m_trp_inter_cell_bm_r17.is_present()) {
      j.write_fieldname("unifiedJointTCI-mTRP-InterCell-BM-r17");
      j.start_obj();
      j.write_int("maxNumAdditionalPCI-L1-RSRP-r17",
                  unified_joint_tci_m_trp_inter_cell_bm_r17->max_num_add_pci_l1_rsrp_r17);
      j.write_str("maxNumSSB-ResourceL1-RSRP-AcrossCC-r17",
                  unified_joint_tci_m_trp_inter_cell_bm_r17->max_num_ssb_res_l1_rsrp_across_cc_r17.to_string());
      j.end_obj();
    }
    if (mpe_mitigation_r17.is_present()) {
      j.write_fieldname("mpe-Mitigation-r17");
      j.start_obj();
      j.write_int("maxNumP-MPR-RI-pairs-r17", mpe_mitigation_r17->max_num_p_mpr_ri_pairs_r17);
      j.write_str("maxNumConfRS-r17", mpe_mitigation_r17->max_num_conf_rs_r17.to_string());
      j.end_obj();
    }
    if (srs_port_report_r17.is_present()) {
      j.write_fieldname("srs-PortReport-r17");
      j.start_obj();
      if (srs_port_report_r17->cap_val1_r17_present) {
        j.write_str("capVal1-r17", srs_port_report_r17->cap_val1_r17.to_string());
      }
      if (srs_port_report_r17->cap_val2_r17_present) {
        j.write_str("capVal2-r17", srs_port_report_r17->cap_val2_r17.to_string());
      }
      if (srs_port_report_r17->cap_val3_r17_present) {
        j.write_str("capVal3-r17", srs_port_report_r17->cap_val3_r17.to_string());
      }
      if (srs_port_report_r17->cap_val4_r17_present) {
        j.write_str("capVal4-r17", srs_port_report_r17->cap_val4_r17.to_string());
      }
      j.end_obj();
    }
    if (mtrp_pdcch_individual_r17_present) {
      j.write_str("mTRP-PDCCH-individual-r17", "supported");
    }
    if (mtrp_pdcch_any_span_3_symbols_r17_present) {
      j.write_str("mTRP-PDCCH-anySpan-3Symbols-r17", "supported");
    }
    if (mtrp_pdcch_two_qcl_type_d_r17_present) {
      j.write_str("mTRP-PDCCH-TwoQCL-TypeD-r17", "supported");
    }
    if (mtrp_pusch_csi_rs_r17.is_present()) {
      j.write_fieldname("mTRP-PUSCH-CSI-RS-r17");
      j.start_obj();
      j.write_int("maxNumPeriodicSRS-r17", mtrp_pusch_csi_rs_r17->max_num_periodic_srs_r17);
      j.write_int("maxNumAperiodicSRS-r17", mtrp_pusch_csi_rs_r17->max_num_aperiodic_srs_r17);
      j.write_int("maxNumSP-SRS-r17", mtrp_pusch_csi_rs_r17->max_num_sp_srs_r17);
      j.write_int("numSRS-ResourcePerCC-r17", mtrp_pusch_csi_rs_r17->num_srs_res_per_cc_r17);
      j.write_int("numSRS-ResourceNonCodebook-r17", mtrp_pusch_csi_rs_r17->num_srs_res_non_codebook_r17);
      j.end_obj();
    }
    if (mtrp_pusch_cyclic_map_r17_present) {
      j.write_str("mTRP-PUSCH-cyclicMapping-r17", mtrp_pusch_cyclic_map_r17.to_string());
    }
    if (mtrp_pusch_second_tpc_r17_present) {
      j.write_str("mTRP-PUSCH-secondTPC-r17", "supported");
    }
    if (mtrp_pusch_two_phr_report_r17_present) {
      j.write_str("mTRP-PUSCH-twoPHR-Reporting-r17", "supported");
    }
    if (mtrp_pusch_a_csi_r17_present) {
      j.write_str("mTRP-PUSCH-A-CSI-r17", "supported");
    }
    if (mtrp_pusch_sp_csi_r17_present) {
      j.write_str("mTRP-PUSCH-SP-CSI-r17", "supported");
    }
    if (mtrp_pusch_cg_r17_present) {
      j.write_str("mTRP-PUSCH-CG-r17", "supported");
    }
    if (mtrp_pucch_mac_ce_r17_present) {
      j.write_str("mTRP-PUCCH-MAC-CE-r17", "supported");
    }
    if (mtrp_pucch_max_num_pc_fr1_r17_present) {
      j.write_int("mTRP-PUCCH-maxNum-PC-FR1-r17", mtrp_pucch_max_num_pc_fr1_r17);
    }
    if (mtrp_inter_cell_r17.is_present()) {
      j.write_fieldname("mTRP-inter-Cell-r17");
      j.start_obj();
      j.write_int("maxNumAdditionalPCI-Case1-r17", mtrp_inter_cell_r17->max_num_add_pci_case1_r17);
      j.write_int("maxNumAdditionalPCI-Case2-r17", mtrp_inter_cell_r17->max_num_add_pci_case2_r17);
      j.end_obj();
    }
    if (mtrp_group_based_l1_rsrp_r17.is_present()) {
      j.write_fieldname("mTRP-GroupBasedL1-RSRP-r17");
      j.start_obj();
      j.write_int("maxNumBeamGroups-r17", mtrp_group_based_l1_rsrp_r17->max_num_beam_groups_r17);
      j.write_str("maxNumRS-WithinSlot-r17", mtrp_group_based_l1_rsrp_r17->max_num_rs_within_slot_r17.to_string());
      j.write_str("maxNumRS-AcrossSlot-r17", mtrp_group_based_l1_rsrp_r17->max_num_rs_across_slot_r17.to_string());
      j.end_obj();
    }
    if (mtrp_bfd_rs_mac_ce_r17_present) {
      j.write_str("mTRP-BFD-RS-MAC-CE-r17", mtrp_bfd_rs_mac_ce_r17.to_string());
    }
    if (mtrp_csi_enhancement_per_band_r17.is_present()) {
      j.write_fieldname("mTRP-CSI-EnhancementPerBand-r17");
      j.start_obj();
      j.write_int("maxNumNZP-CSI-RS-r17", mtrp_csi_enhancement_per_band_r17->max_num_nzp_csi_rs_r17);
      j.write_str("cSI-Report-mode-r17", mtrp_csi_enhancement_per_band_r17->csi_report_mode_r17.to_string());
      j.start_array("supportedComboAcrossCCs-r17");
      for (const auto& e1 : mtrp_csi_enhancement_per_band_r17->supported_combo_across_ccs_r17) {
        e1.to_json(j);
      }
      j.end_array();
      j.write_str("codebookModeNCJT-r17", mtrp_csi_enhancement_per_band_r17->codebook_mode_ncjt_r17.to_string());
      j.end_obj();
    }
    if (codebook_combo_param_multi_trp_r17.is_present()) {
      j.write_fieldname("codebookComboParameterMultiTRP-r17");
      codebook_combo_param_multi_trp_r17->to_json(j);
    }
    if (mtrp_csi_add_csi_r17_present) {
      j.write_str("mTRP-CSI-additionalCSI-r17", mtrp_csi_add_csi_r17.to_string());
    }
    if (mtrp_csi_n_max2_r17_present) {
      j.write_str("mTRP-CSI-N-Max2-r17", "supported");
    }
    if (mtrp_csi_cmr_r17_present) {
      j.write_str("mTRP-CSI-CMR-r17", "supported");
    }
    if (srs_partial_freq_nohop_sr17_present) {
      j.write_str("srs-partialFreqSounding-r17", "supported");
    }
    if (beam_switch_timing_v1710.is_present()) {
      j.write_fieldname("beamSwitchTiming-v1710");
      j.start_obj();
      if (beam_switch_timing_v1710->scs_480k_hz_present) {
        j.write_str("scs-480kHz", beam_switch_timing_v1710->scs_480k_hz.to_string());
      }
      if (beam_switch_timing_v1710->scs_960k_hz_present) {
        j.write_str("scs-960kHz", beam_switch_timing_v1710->scs_960k_hz.to_string());
      }
      j.end_obj();
    }
    if (beam_switch_timing_r17.is_present()) {
      j.write_fieldname("beamSwitchTiming-r17");
      j.start_obj();
      if (beam_switch_timing_r17->scs_480k_hz_r17_present) {
        j.write_str("scs-480kHz-r17", beam_switch_timing_r17->scs_480k_hz_r17.to_string());
      }
      if (beam_switch_timing_r17->scs_960k_hz_r17_present) {
        j.write_str("scs-960kHz-r17", beam_switch_timing_r17->scs_960k_hz_r17.to_string());
      }
      j.end_obj();
    }
    if (beam_report_timing_v1710.is_present()) {
      j.write_fieldname("beamReportTiming-v1710");
      j.start_obj();
      if (beam_report_timing_v1710->scs_480k_hz_r17_present) {
        j.write_str("scs-480kHz-r17", beam_report_timing_v1710->scs_480k_hz_r17.to_string());
      }
      if (beam_report_timing_v1710->scs_960k_hz_r17_present) {
        j.write_str("scs-960kHz-r17", beam_report_timing_v1710->scs_960k_hz_r17.to_string());
      }
      j.end_obj();
    }
    if (max_num_rx_tx_beam_switch_dl_v1710.is_present()) {
      j.write_fieldname("maxNumberRxTxBeamSwitchDL-v1710");
      j.start_obj();
      if (max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17_present) {
        j.write_str("scs-480kHz-r17", max_num_rx_tx_beam_switch_dl_v1710->scs_480k_hz_r17.to_string());
      }
      if (max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17_present) {
        j.write_str("scs-960kHz-r17", max_num_rx_tx_beam_switch_dl_v1710->scs_960k_hz_r17.to_string());
      }
      j.end_obj();
    }
    if (srs_port_report_sp_ap_r17_present) {
      j.write_str("srs-PortReportSP-AP-r17", "supported");
    }
    if (max_num_rx_beam_v1720_present) {
      j.write_int("maxNumberRxBeam-v1720", max_num_rx_beam_v1720);
    }
    if (sfn_implicit_rs_two_tci_r17_present) {
      j.write_str("sfn-ImplicitRS-twoTCI-r17", "supported");
    }
    if (sfn_qcl_type_d_collision_two_tci_r17_present) {
      j.write_str("sfn-QCL-TypeD-Collision-twoTCI-r17", "supported");
    }
    if (mtrp_csi_num_cp_u_r17_present) {
      j.write_str("mTRP-CSI-numCPU-r17", mtrp_csi_num_cp_u_r17.to_string());
    }
    if (support_rep_num_pdsch_tdra_dci_1_2_r17_present) {
      j.write_str("supportRepNumPDSCH-TDRA-DCI-1-2-r17", support_rep_num_pdsch_tdra_dci_1_2_r17.to_string());
    }
  }
  j.end_obj();
}

const char* mimo_params_per_band_s::tci_state_pdsch_s_::max_num_cfg_tci_states_per_cc_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32", "n64", "n128"};
  return convert_enum_idx(
      names, 6, value, "mimo_params_per_band_s::tci_state_pdsch_s_::max_num_cfg_tci_states_per_cc_e_");
}
uint8_t mimo_params_per_band_s::tci_state_pdsch_s_::max_num_cfg_tci_states_per_cc_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32, 64, 128};
  return map_enum_number(
      numbers, 6, value, "mimo_params_per_band_s::tci_state_pdsch_s_::max_num_cfg_tci_states_per_cc_e_");
}

const char* mimo_params_per_band_s::tci_state_pdsch_s_::max_num_active_tci_per_bwp_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(names, 4, value, "mimo_params_per_band_s::tci_state_pdsch_s_::max_num_active_tci_per_bwp_e_");
}
uint8_t mimo_params_per_band_s::tci_state_pdsch_s_::max_num_active_tci_per_bwp_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::tci_state_pdsch_s_::max_num_active_tci_per_bwp_e_");
}

const char* mimo_params_per_band_s::pusch_trans_coherence_opts::to_string() const
{
  static const char* names[] = {"nonCoherent", "partialCoherent", "fullCoherent"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::pusch_trans_coherence_e_");
}

const char* mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_15k_hz_opts::to_string() const
{
  static const char* names[] = {"n4", "n7", "n14"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_15k_hz_e_");
}
uint8_t mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_15k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 7, 14};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_15k_hz_e_");
}

const char* mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_30k_hz_opts::to_string() const
{
  static const char* names[] = {"n4", "n7", "n14"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_30k_hz_e_");
}
uint8_t mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_30k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 7, 14};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_30k_hz_e_");
}

const char* mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_60k_hz_opts::to_string() const
{
  static const char* names[] = {"n4", "n7", "n14"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_60k_hz_e_");
}
uint8_t mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_60k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 7, 14};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_60k_hz_e_");
}

const char* mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_120k_hz_opts::to_string() const
{
  static const char* names[] = {"n4", "n7", "n14"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_120k_hz_e_");
}
uint8_t mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_120k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 7, 14};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_120k_hz_e_");
}

const char* mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_240k_hz_opts::to_string() const
{
  static const char* names[] = {"n4", "n7", "n14"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_240k_hz_e_");
}
uint8_t mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_240k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 7, 14};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_s_::scs_240k_hz_e_");
}

const char* mimo_params_per_band_s::max_num_non_group_beam_report_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::max_num_non_group_beam_report_e_");
}
uint8_t mimo_params_per_band_s::max_num_non_group_beam_report_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::max_num_non_group_beam_report_e_");
}

const char* mimo_params_per_band_s::ul_beam_management_s_::max_num_srs_res_per_set_bm_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8", "n16"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::ul_beam_management_s_::max_num_srs_res_per_set_bm_e_");
}
uint8_t mimo_params_per_band_s::ul_beam_management_s_::max_num_srs_res_per_set_bm_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 16};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::ul_beam_management_s_::max_num_srs_res_per_set_bm_e_");
}

const char* mimo_params_per_band_s::beam_report_timing_s_::scs_15k_hz_opts::to_string() const
{
  static const char* names[] = {"sym2", "sym4", "sym8"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_15k_hz_e_");
}
uint8_t mimo_params_per_band_s::beam_report_timing_s_::scs_15k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_15k_hz_e_");
}

const char* mimo_params_per_band_s::beam_report_timing_s_::scs_30k_hz_opts::to_string() const
{
  static const char* names[] = {"sym4", "sym8", "sym14", "sym28"};
  return convert_enum_idx(names, 4, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_30k_hz_e_");
}
uint8_t mimo_params_per_band_s::beam_report_timing_s_::scs_30k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 14, 28};
  return map_enum_number(numbers, 4, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_30k_hz_e_");
}

const char* mimo_params_per_band_s::beam_report_timing_s_::scs_60k_hz_opts::to_string() const
{
  static const char* names[] = {"sym8", "sym14", "sym28"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_60k_hz_e_");
}
uint8_t mimo_params_per_band_s::beam_report_timing_s_::scs_60k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 14, 28};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_60k_hz_e_");
}

const char* mimo_params_per_band_s::beam_report_timing_s_::scs_120k_hz_opts::to_string() const
{
  static const char* names[] = {"sym14", "sym28", "sym56"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_120k_hz_e_");
}
uint8_t mimo_params_per_band_s::beam_report_timing_s_::scs_120k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {14, 28, 56};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::beam_report_timing_s_::scs_120k_hz_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_s_::scs_60k_hz_opts::to_string() const
{
  static const char* names[] = {"sym14", "sym28", "sym48", "sym224", "sym336"};
  return convert_enum_idx(names, 5, value, "mimo_params_per_band_s::beam_switch_timing_s_::scs_60k_hz_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_s_::scs_60k_hz_opts::to_number() const
{
  static const uint16_t numbers[] = {14, 28, 48, 224, 336};
  return map_enum_number(numbers, 5, value, "mimo_params_per_band_s::beam_switch_timing_s_::scs_60k_hz_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_s_::scs_120k_hz_opts::to_string() const
{
  static const char* names[] = {"sym14", "sym28", "sym48", "sym224", "sym336"};
  return convert_enum_idx(names, 5, value, "mimo_params_per_band_s::beam_switch_timing_s_::scs_120k_hz_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_s_::scs_120k_hz_opts::to_number() const
{
  static const uint16_t numbers[] = {14, 28, 48, 224, 336};
  return map_enum_number(numbers, 5, value, "mimo_params_per_band_s::beam_switch_timing_s_::scs_120k_hz_e_");
}

const char* mimo_params_per_band_s::max_num_scell_bfr_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(names, 4, value, "mimo_params_per_band_s::max_num_scell_bfr_r16_e_");
}
uint8_t mimo_params_per_band_s::max_num_scell_bfr_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "mimo_params_per_band_s::max_num_scell_bfr_r16_e_");
}

const char*
mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_one_tx_cmr_r16_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_one_tx_cmr_r16_e_");
}
uint8_t mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_one_tx_cmr_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 64};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_one_tx_cmr_r16_e_");
}

const char* mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_r16_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_r16_e_");
}
uint8_t mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 64};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_r16_e_");
}

const char* mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_rs_2_tx_res_r16_opts::to_string() const
{
  static const char* names[] = {"n0", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 6, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_rs_2_tx_res_r16_e_");
}
uint8_t mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_rs_2_tx_res_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers, 6, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_rs_2_tx_res_r16_e_");
}

const char* mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_res_r16_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n64", "n128"};
  return convert_enum_idx(
      names, 5, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_res_r16_e_");
}
uint8_t mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_res_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 64, 128};
  return map_enum_number(
      numbers, 5, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_ssb_csi_rs_res_r16_e_");
}

const char*
mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_mem_r16_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n64", "n128"};
  return convert_enum_idx(
      names, 5, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_mem_r16_e_");
}
uint8_t mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_mem_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 64, 128};
  return map_enum_number(
      numbers, 5, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_csi_im_nzp_imr_res_mem_r16_e_");
}

const char* mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::supported_csi_rs_density_cmr_r16_opts::to_string() const
{
  static const char* names[] = {"one", "three", "oneAndThree"};
  return convert_enum_idx(
      names, 3, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::supported_csi_rs_density_cmr_r16_e_");
}

const char* mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_aperiodic_csi_rs_res_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 6, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_aperiodic_csi_rs_res_r16_e_");
}
uint8_t mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_aperiodic_csi_rs_res_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers, 6, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::max_num_aperiodic_csi_rs_res_r16_e_");
}

const char* mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::supported_sinr_meas_r16_opts::to_string() const
{
  static const char* names[] = {"ssbWithCSI-IM", "ssbWithNZP-IMR", "csirsWithNZP-IMR", "csi-RSWithoutIMR"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::ssb_csirs_sinr_meas_r16_s_::supported_sinr_meas_r16_e_");
}

const char* mimo_params_per_band_s::non_group_sinr_report_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::non_group_sinr_report_r16_e_");
}
uint8_t mimo_params_per_band_s::non_group_sinr_report_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::non_group_sinr_report_r16_e_");
}

const char* mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::
    max_num_per_coreset_pool_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(names,
                          4,
                          value,
                          "mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::"
                          "max_num_per_coreset_pool_r16_e_");
}
uint8_t mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::
    max_num_per_coreset_pool_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers,
                         4,
                         value,
                         "mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::"
                         "max_num_per_coreset_pool_r16_e_");
}

const char* mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::
    max_total_num_across_coreset_pool_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8", "n16"};
  return convert_enum_idx(names,
                          4,
                          value,
                          "mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::"
                          "max_total_num_across_coreset_pool_r16_e_");
}
uint8_t mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::
    max_total_num_across_coreset_pool_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 16};
  return map_enum_number(numbers,
                         4,
                         value,
                         "mimo_params_per_band_s::multi_dci_multi_trp_params_r16_s_::max_num_activ_tci_states_r16_s_::"
                         "max_total_num_across_coreset_pool_r16_e_");
}

const char*
mimo_params_per_band_s::single_dci_sdm_scheme_params_r16_s_::support_new_dmrs_port_r16_opts::to_string() const
{
  static const char* names[] = {"supported1", "supported2", "supported3"};
  return convert_enum_idx(
      names, 3, value, "mimo_params_per_band_s::single_dci_sdm_scheme_params_r16_s_::support_new_dmrs_port_r16_e_");
}
uint8_t mimo_params_per_band_s::single_dci_sdm_scheme_params_r16_s_::support_new_dmrs_port_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers, 3, value, "mimo_params_per_band_s::single_dci_sdm_scheme_params_r16_s_::support_new_dmrs_port_r16_e_");
}

const char* mimo_params_per_band_s::support_tdm_scheme_a_r16_opts::to_string() const
{
  static const char* names[] = {"kb3", "kb5", "kb10", "kb20", "noRestriction"};
  return convert_enum_idx(names, 5, value, "mimo_params_per_band_s::support_tdm_scheme_a_r16_e_");
}
uint8_t mimo_params_per_band_s::support_tdm_scheme_a_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 5, 10, 20};
  return map_enum_number(numbers, 4, value, "mimo_params_per_band_s::support_tdm_scheme_a_r16_e_");
}

const char*
mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::support_rep_num_pdsch_tdra_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4", "n5", "n6", "n7", "n8", "n16"};
  return convert_enum_idx(
      names, 8, value, "mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::support_rep_num_pdsch_tdra_r16_e_");
}
uint8_t mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::support_rep_num_pdsch_tdra_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 5, 6, 7, 8, 16};
  return map_enum_number(
      numbers, 8, value, "mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::support_rep_num_pdsch_tdra_r16_e_");
}

const char* mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::max_tbs_size_r16_opts::to_string() const
{
  static const char* names[] = {"kb3", "kb5", "kb10", "kb20", "noRestriction"};
  return convert_enum_idx(
      names, 5, value, "mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::max_tbs_size_r16_e_");
}
uint8_t mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::max_tbs_size_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {3, 5, 10, 20};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::support_inter_slot_tdm_r16_s_::max_tbs_size_r16_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sym224", "sym336"};
  return convert_enum_idx(names, 2, value, "mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_60k_hz_r16_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_60k_hz_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {224, 336};
  return map_enum_number(numbers, 2, value, "mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_60k_hz_r16_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sym224", "sym336"};
  return convert_enum_idx(names, 2, value, "mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_120k_hz_r16_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_120k_hz_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {224, 336};
  return map_enum_number(numbers, 2, value, "mimo_params_per_band_s::beam_switch_timing_r16_s_::scs_120k_hz_r16_e_");
}

const char*
mimo_params_per_band_s::spatial_relations_v1640_s_::max_num_cfg_spatial_relations_v1640_opts::to_string() const
{
  static const char* names[] = {"n96", "n128", "n160", "n192", "n224", "n256", "n288", "n320"};
  return convert_enum_idx(
      names, 8, value, "mimo_params_per_band_s::spatial_relations_v1640_s_::max_num_cfg_spatial_relations_v1640_e_");
}
uint16_t mimo_params_per_band_s::spatial_relations_v1640_s_::max_num_cfg_spatial_relations_v1640_opts::to_number() const
{
  static const uint16_t numbers[] = {96, 128, 160, 192, 224, 256, 288, 320};
  return map_enum_number(
      numbers, 8, value, "mimo_params_per_band_s::spatial_relations_v1640_s_::max_num_cfg_spatial_relations_v1640_e_");
}

const char* mimo_params_per_band_s::mtrp_pucch_inter_slot_r17_opts::to_string() const
{
  static const char* names[] = {"pf0-2", "pf1-3-4", "pf0-4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::mtrp_pucch_inter_slot_r17_e_");
}

const char*
mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_per_set_per_bwp_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2"};
  return convert_enum_idx(
      names, 2, value, "mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_per_set_per_bwp_r17_e_");
}
uint8_t
mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_per_set_per_bwp_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers,
      2,
      value,
      "mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_per_set_per_bwp_r17_e_");
}

const char*
mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_across_sets_per_bwp_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4"};
  return convert_enum_idx(
      names,
      3,
      value,
      "mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_across_sets_per_bwp_r17_e_");
}
uint8_t
mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_across_sets_per_bwp_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4};
  return map_enum_number(
      numbers,
      3,
      value,
      "mimo_params_per_band_s::mtrp_bfr_two_bfd_rs_set_r17_s_::max_bfd_rs_res_across_sets_per_bwp_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_bfr_pucch_sr_per_cg_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2"};
  return convert_enum_idx(names, 2, value, "mimo_params_per_band_s::mtrp_bfr_pucch_sr_per_cg_r17_e_");
}
uint8_t mimo_params_per_band_s::mtrp_bfr_pucch_sr_per_cg_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "mimo_params_per_band_s::mtrp_bfr_pucch_sr_per_cg_r17_e_");
}

const char* mimo_params_per_band_s::srs_trigger_offset_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::srs_trigger_offset_r17_e_");
}
uint8_t mimo_params_per_band_s::srs_trigger_offset_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::srs_trigger_offset_r17_e_");
}

const char* mimo_params_per_band_s::unified_joint_tci_r17_s_::max_cfg_joint_tci_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n12", "n16", "n24", "n32", "n48", "n64", "n128"};
  return convert_enum_idx(
      names, 8, value, "mimo_params_per_band_s::unified_joint_tci_r17_s_::max_cfg_joint_tci_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_joint_tci_r17_s_::max_cfg_joint_tci_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 12, 16, 24, 32, 48, 64, 128};
  return map_enum_number(
      numbers, 8, value, "mimo_params_per_band_s::unified_joint_tci_r17_s_::max_cfg_joint_tci_r17_e_");
}

const char* mimo_params_per_band_s::unified_joint_tci_r17_s_::max_activ_tci_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16"};
  return convert_enum_idx(
      names, 5, value, "mimo_params_per_band_s::unified_joint_tci_r17_s_::max_activ_tci_across_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_joint_tci_r17_s_::max_activ_tci_across_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16};
  return map_enum_number(
      numbers, 5, value, "mimo_params_per_band_s::unified_joint_tci_r17_s_::max_activ_tci_across_cc_r17_e_");
}

const char*
mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_opts::to_string() const
{
  static const char* names[] = {
      "n1", "n2", "n4", "n7", "n14", "n28", "n42", "n56", "n70", "n84", "n98", "n112", "n224", "n336"};
  return convert_enum_idx(
      names,
      14,
      value,
      "mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_e_");
}
uint16_t
mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {1, 2, 4, 7, 14, 28, 42, 56, 70, 84, 98, 112, 224, 336};
  return map_enum_number(
      numbers,
      14,
      value,
      "mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_e_");
}

const char* mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::max_num_mac_ce_per_cc_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4", "n5", "n6", "n7", "n8"};
  return convert_enum_idx(
      names, 7, value, "mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::max_num_mac_ce_per_cc_e_");
}
uint8_t mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::max_num_mac_ce_per_cc_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 5, 6, 7, 8};
  return map_enum_number(
      numbers, 7, value, "mimo_params_per_band_s::unified_joint_tci_multi_mac_ce_r17_s_::max_num_mac_ce_per_cc_e_");
}

const char* mimo_params_per_band_s::unified_joint_tci_list_sharing_ca_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(names, 4, value, "mimo_params_per_band_s::unified_joint_tci_list_sharing_ca_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_joint_tci_list_sharing_ca_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(numbers, 4, value, "mimo_params_per_band_s::unified_joint_tci_list_sharing_ca_r17_e_");
}

const char* mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_per_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n2", "n4"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_per_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_per_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_per_cc_r17_e_");
}

const char*
mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n2", "n4"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_across_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_across_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::unified_joint_tci_inter_cell_r17_s_::add_mac_ce_across_cc_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_dl_tci_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n12", "n16", "n24", "n32", "n48", "n64", "n128"};
  return convert_enum_idx(
      names, 9, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_dl_tci_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_dl_tci_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 12, 16, 24, 32, 48, 64, 128};
  return map_enum_number(
      numbers, 9, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_dl_tci_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_ul_tci_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(
      names, 8, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_ul_tci_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_ul_tci_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(
      numbers, 8, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_cfg_ul_tci_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_dl_tci_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16"};
  return convert_enum_idx(
      names, 5, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_dl_tci_across_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_dl_tci_across_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16};
  return map_enum_number(
      numbers, 5, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_dl_tci_across_cc_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_ul_tci_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16"};
  return convert_enum_idx(
      names, 5, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_ul_tci_across_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_ul_tci_across_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16};
  return map_enum_number(
      numbers, 5, value, "mimo_params_per_band_s::unified_separate_tci_r17_s_::max_activ_ul_tci_across_cc_r17_e_");
}

const char*
mimo_params_per_band_s::unified_separate_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_opts::to_string() const
{
  static const char* names[] = {
      "n1", "n2", "n4", "n7", "n14", "n28", "n42", "n56", "n70", "n84", "n98", "n112", "n224", "n336"};
  return convert_enum_idx(
      names,
      14,
      value,
      "mimo_params_per_band_s::unified_separate_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_e_");
}
uint16_t
mimo_params_per_band_s::unified_separate_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {1, 2, 4, 7, 14, 28, 42, 56, 70, 84, 98, 112, 224, 336};
  return map_enum_number(
      numbers,
      14,
      value,
      "mimo_params_per_band_s::unified_separate_tci_multi_mac_ce_r17_s_::min_beam_application_time_r17_e_");
}

const char*
mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_dl_tci_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(
      names,
      4,
      value,
      "mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_dl_tci_r17_e_");
}
uint8_t
mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_dl_tci_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(
      numbers,
      4,
      value,
      "mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_dl_tci_r17_e_");
}

const char*
mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_ul_tci_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(
      names,
      4,
      value,
      "mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_ul_tci_r17_e_");
}
uint8_t
mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_ul_tci_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(
      numbers,
      4,
      value,
      "mimo_params_per_band_s::unified_separate_tci_list_sharing_ca_r17_s_::max_num_list_ul_tci_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_per_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n2", "n4"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_per_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_per_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_per_cc_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_per_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n2", "n4"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_per_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_per_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_per_cc_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n2", "n4"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_across_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_across_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_dl_across_cc_r17_e_");
}

const char* mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n2", "n4"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_across_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_across_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::unified_separate_tci_inter_cell_r17_s_::k_ul_across_cc_r17_e_");
}

const char* mimo_params_per_band_s::unified_joint_tci_m_trp_inter_cell_bm_r17_s_::
    max_num_ssb_res_l1_rsrp_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(
      names,
      4,
      value,
      "mimo_params_per_band_s::unified_joint_tci_m_trp_inter_cell_bm_r17_s_::max_num_ssb_res_l1_rsrp_across_cc_r17_e_");
}
uint8_t mimo_params_per_band_s::unified_joint_tci_m_trp_inter_cell_bm_r17_s_::
    max_num_ssb_res_l1_rsrp_across_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(
      numbers,
      4,
      value,
      "mimo_params_per_band_s::unified_joint_tci_m_trp_inter_cell_bm_r17_s_::max_num_ssb_res_l1_rsrp_across_cc_r17_e_");
}

const char* mimo_params_per_band_s::mpe_mitigation_r17_s_::max_num_conf_rs_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n12", "n16", "n28", "n32", "n48", "n64"};
  return convert_enum_idx(names, 10, value, "mimo_params_per_band_s::mpe_mitigation_r17_s_::max_num_conf_rs_r17_e_");
}
uint8_t mimo_params_per_band_s::mpe_mitigation_r17_s_::max_num_conf_rs_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 12, 16, 28, 32, 48, 64};
  return map_enum_number(numbers, 10, value, "mimo_params_per_band_s::mpe_mitigation_r17_s_::max_num_conf_rs_r17_e_");
}

const char* mimo_params_per_band_s::srs_port_report_r17_s_::cap_val1_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val1_r17_e_");
}
uint8_t mimo_params_per_band_s::srs_port_report_r17_s_::cap_val1_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val1_r17_e_");
}

const char* mimo_params_per_band_s::srs_port_report_r17_s_::cap_val2_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val2_r17_e_");
}
uint8_t mimo_params_per_band_s::srs_port_report_r17_s_::cap_val2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val2_r17_e_");
}

const char* mimo_params_per_band_s::srs_port_report_r17_s_::cap_val3_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val3_r17_e_");
}
uint8_t mimo_params_per_band_s::srs_port_report_r17_s_::cap_val3_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val3_r17_e_");
}

const char* mimo_params_per_band_s::srs_port_report_r17_s_::cap_val4_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val4_r17_e_");
}
uint8_t mimo_params_per_band_s::srs_port_report_r17_s_::cap_val4_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::srs_port_report_r17_s_::cap_val4_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_pusch_cyclic_map_r17_opts::to_string() const
{
  static const char* names[] = {"typeA", "typeB", "both"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::mtrp_pusch_cyclic_map_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_within_slot_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 7, value, "mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_within_slot_r17_e_");
}
uint8_t mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_within_slot_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers, 7, value, "mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_within_slot_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_across_slot_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n64", "n128"};
  return convert_enum_idx(
      names, 5, value, "mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_across_slot_r17_e_");
}
uint8_t mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_across_slot_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 64, 128};
  return map_enum_number(
      numbers, 5, value, "mimo_params_per_band_s::mtrp_group_based_l1_rsrp_r17_s_::max_num_rs_across_slot_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_bfd_rs_mac_ce_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n12", "n16", "n32", "n48", "n64"};
  return convert_enum_idx(names, 7, value, "mimo_params_per_band_s::mtrp_bfd_rs_mac_ce_r17_e_");
}
uint8_t mimo_params_per_band_s::mtrp_bfd_rs_mac_ce_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 12, 16, 32, 48, 64};
  return map_enum_number(numbers, 7, value, "mimo_params_per_band_s::mtrp_bfd_rs_mac_ce_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_csi_enhancement_per_band_r17_s_::csi_report_mode_r17_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode2", "both"};
  return convert_enum_idx(
      names, 3, value, "mimo_params_per_band_s::mtrp_csi_enhancement_per_band_r17_s_::csi_report_mode_r17_e_");
}
uint8_t mimo_params_per_band_s::mtrp_csi_enhancement_per_band_r17_s_::csi_report_mode_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "mimo_params_per_band_s::mtrp_csi_enhancement_per_band_r17_s_::csi_report_mode_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_csi_enhancement_per_band_r17_s_::codebook_mode_ncjt_r17_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode1And2"};
  return convert_enum_idx(
      names, 2, value, "mimo_params_per_band_s::mtrp_csi_enhancement_per_band_r17_s_::codebook_mode_ncjt_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_csi_add_csi_r17_opts::to_string() const
{
  static const char* names[] = {"x1", "x2"};
  return convert_enum_idx(names, 2, value, "mimo_params_per_band_s::mtrp_csi_add_csi_r17_e_");
}
uint8_t mimo_params_per_band_s::mtrp_csi_add_csi_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "mimo_params_per_band_s::mtrp_csi_add_csi_r17_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_480k_hz_opts::to_string() const
{
  static const char* names[] = {"sym56", "sym112", "sym192", "sym896", "sym1344"};
  return convert_enum_idx(names, 5, value, "mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_480k_hz_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_480k_hz_opts::to_number() const
{
  static const uint16_t numbers[] = {56, 112, 192, 896, 1344};
  return map_enum_number(numbers, 5, value, "mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_480k_hz_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_960k_hz_opts::to_string() const
{
  static const char* names[] = {"sym112", "sym224", "sym384", "sym1792", "sym2688"};
  return convert_enum_idx(names, 5, value, "mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_960k_hz_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_960k_hz_opts::to_number() const
{
  static const uint16_t numbers[] = {112, 224, 384, 1792, 2688};
  return map_enum_number(numbers, 5, value, "mimo_params_per_band_s::beam_switch_timing_v1710_s_::scs_960k_hz_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_480k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym896", "sym1344"};
  return convert_enum_idx(names, 2, value, "mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_480k_hz_r17_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_480k_hz_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {896, 1344};
  return map_enum_number(numbers, 2, value, "mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_480k_hz_r17_e_");
}

const char* mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_960k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym1792", "sym2688"};
  return convert_enum_idx(names, 2, value, "mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_960k_hz_r17_e_");
}
uint16_t mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_960k_hz_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {1792, 2688};
  return map_enum_number(numbers, 2, value, "mimo_params_per_band_s::beam_switch_timing_r17_s_::scs_960k_hz_r17_e_");
}

const char* mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_480k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym56", "sym112", "sym224"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_480k_hz_r17_e_");
}
uint8_t mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_480k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {56, 112, 224};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_480k_hz_r17_e_");
}

const char* mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_960k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym112", "sym224", "sym448"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_960k_hz_r17_e_");
}
uint16_t mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_960k_hz_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {112, 224, 448};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::beam_report_timing_v1710_s_::scs_960k_hz_r17_e_");
}

const char* mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_480k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n7"};
  return convert_enum_idx(
      names, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_480k_hz_r17_e_");
}
uint8_t mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_480k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_480k_hz_r17_e_");
}

const char* mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_960k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n7"};
  return convert_enum_idx(
      names, 4, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_960k_hz_r17_e_");
}
uint8_t mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_960k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers, 4, value, "mimo_params_per_band_s::max_num_rx_tx_beam_switch_dl_v1710_s_::scs_960k_hz_r17_e_");
}

const char* mimo_params_per_band_s::mtrp_csi_num_cp_u_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4"};
  return convert_enum_idx(names, 3, value, "mimo_params_per_band_s::mtrp_csi_num_cp_u_r17_e_");
}
uint8_t mimo_params_per_band_s::mtrp_csi_num_cp_u_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4};
  return map_enum_number(numbers, 3, value, "mimo_params_per_band_s::mtrp_csi_num_cp_u_r17_e_");
}

const char* mimo_params_per_band_s::support_rep_num_pdsch_tdra_dci_1_2_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4", "n5", "n6", "n7", "n8", "n16"};
  return convert_enum_idx(names, 8, value, "mimo_params_per_band_s::support_rep_num_pdsch_tdra_dci_1_2_r17_e_");
}
uint8_t mimo_params_per_band_s::support_rep_num_pdsch_tdra_dci_1_2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 5, 6, 7, 8, 16};
  return map_enum_number(numbers, 8, value, "mimo_params_per_band_s::support_rep_num_pdsch_tdra_dci_1_2_r17_e_");
}

// OLPC-SRS-Pos-r16 ::= SEQUENCE
SRSASN_CODE olpc_srs_pos_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(olpc_srs_pos_based_on_prs_serving_r16_present, 1));
  HANDLE_CODE(bref.pack(olpc_srs_pos_based_on_ssb_neigh_r16_present, 1));
  HANDLE_CODE(bref.pack(olpc_srs_pos_based_on_prs_neigh_r16_present, 1));
  HANDLE_CODE(bref.pack(max_num_path_loss_estimate_per_serving_r16_present, 1));

  if (max_num_path_loss_estimate_per_serving_r16_present) {
    HANDLE_CODE(max_num_path_loss_estimate_per_serving_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE olpc_srs_pos_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(olpc_srs_pos_based_on_prs_serving_r16_present, 1));
  HANDLE_CODE(bref.unpack(olpc_srs_pos_based_on_ssb_neigh_r16_present, 1));
  HANDLE_CODE(bref.unpack(olpc_srs_pos_based_on_prs_neigh_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_num_path_loss_estimate_per_serving_r16_present, 1));

  if (max_num_path_loss_estimate_per_serving_r16_present) {
    HANDLE_CODE(max_num_path_loss_estimate_per_serving_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void olpc_srs_pos_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (olpc_srs_pos_based_on_prs_serving_r16_present) {
    j.write_str("olpc-SRS-PosBasedOnPRS-Serving-r16", "supported");
  }
  if (olpc_srs_pos_based_on_ssb_neigh_r16_present) {
    j.write_str("olpc-SRS-PosBasedOnSSB-Neigh-r16", "supported");
  }
  if (olpc_srs_pos_based_on_prs_neigh_r16_present) {
    j.write_str("olpc-SRS-PosBasedOnPRS-Neigh-r16", "supported");
  }
  if (max_num_path_loss_estimate_per_serving_r16_present) {
    j.write_str("maxNumberPathLossEstimatePerServing-r16", max_num_path_loss_estimate_per_serving_r16.to_string());
  }
  j.end_obj();
}

const char* olpc_srs_pos_r16_s::max_num_path_loss_estimate_per_serving_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n4", "n8", "n16"};
  return convert_enum_idx(names, 4, value, "olpc_srs_pos_r16_s::max_num_path_loss_estimate_per_serving_r16_e_");
}
uint8_t olpc_srs_pos_r16_s::max_num_path_loss_estimate_per_serving_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 4, 8, 16};
  return map_enum_number(numbers, 4, value, "olpc_srs_pos_r16_s::max_num_path_loss_estimate_per_serving_r16_e_");
}

// PRS-ProcessingCapabilityOutsideMGinPPWperType-r17 ::= SEQUENCE
SRSASN_CODE prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ppw_dur_of_prs_processing_r17_present, 1));
  HANDLE_CODE(bref.pack(ppw_max_num_of_dl_bw_r17_present, 1));

  HANDLE_CODE(prs_processing_type_r17.pack(bref));
  HANDLE_CODE(ppw_dl_prs_buffer_type_r17.pack(bref));
  if (ppw_dur_of_prs_processing_r17_present) {
    HANDLE_CODE(ppw_dur_of_prs_processing_r17.pack(bref));
  }
  bref.pack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.ext, 1);
  HANDLE_CODE(bref.pack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17_present, 1));
  HANDLE_CODE(bref.pack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17_present, 1));
  HANDLE_CODE(bref.pack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17_present, 1));
  HANDLE_CODE(bref.pack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17_present, 1));
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17.pack(bref));
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17.pack(bref));
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17.pack(bref));
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17.pack(bref));
  }
  if (ppw_max_num_of_dl_bw_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_bw_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ppw_dur_of_prs_processing_r17_present, 1));
  HANDLE_CODE(bref.unpack(ppw_max_num_of_dl_bw_r17_present, 1));

  HANDLE_CODE(prs_processing_type_r17.unpack(bref));
  HANDLE_CODE(ppw_dl_prs_buffer_type_r17.unpack(bref));
  if (ppw_dur_of_prs_processing_r17_present) {
    HANDLE_CODE(ppw_dur_of_prs_processing_r17.unpack(bref));
  }
  bref.unpack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.ext, 1);
  HANDLE_CODE(bref.unpack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17_present, 1));
  HANDLE_CODE(bref.unpack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17_present, 1));
  HANDLE_CODE(bref.unpack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17_present, 1));
  HANDLE_CODE(bref.unpack(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17_present, 1));
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17.unpack(bref));
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17.unpack(bref));
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17.unpack(bref));
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17.unpack(bref));
  }
  if (ppw_max_num_of_dl_bw_r17_present) {
    HANDLE_CODE(ppw_max_num_of_dl_bw_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("prsProcessingType-r17", prs_processing_type_r17.to_string());
  j.write_str("ppw-dl-PRS-BufferType-r17", ppw_dl_prs_buffer_type_r17.to_string());
  if (ppw_dur_of_prs_processing_r17_present) {
    j.write_fieldname("ppw-durationOfPRS-Processing-r17");
    ppw_dur_of_prs_processing_r17.to_json(j);
  }
  j.write_fieldname("ppw-maxNumOfDL-PRS-ResProcessedPerSlot-r17");
  j.start_obj();
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17_present) {
    j.write_str("scs15-r17", ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs15_r17.to_string());
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17_present) {
    j.write_str("scs30-r17", ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs30_r17.to_string());
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17_present) {
    j.write_str("scs60-r17", ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs60_r17.to_string());
  }
  if (ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17_present) {
    j.write_str("scs120-r17", ppw_max_num_of_dl_prs_res_processed_per_slot_r17.scs120_r17.to_string());
  }
  j.end_obj();
  if (ppw_max_num_of_dl_bw_r17_present) {
    j.write_fieldname("ppw-maxNumOfDL-Bandwidth-r17");
    ppw_max_num_of_dl_bw_r17.to_json(j);
  }
  j.end_obj();
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::prs_processing_type_r17_opts::to_string() const
{
  static const char* names[] = {"type1A", "type1B", "type2"};
  return convert_enum_idx(
      names, 3, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::prs_processing_type_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dl_prs_buffer_type_r17_opts::to_string() const
{
  static const char* names[] = {"type1", "type2"};
  return convert_enum_idx(
      names, 2, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dl_prs_buffer_type_r17_e_");
}
uint8_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dl_prs_buffer_type_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dl_prs_buffer_type_r17_e_");
}

void prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::destroy_()
{
  switch (type_) {
    case types::ppw_dur_of_prs_processing1_r17:
      c.destroy<ppw_dur_of_prs_processing1_r17_s_>();
      break;
    case types::ppw_dur_of_prs_processing2_r17:
      c.destroy<ppw_dur_of_prs_processing2_r17_s_>();
      break;
    default:
      break;
  }
}
void prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ppw_dur_of_prs_processing1_r17:
      c.init<ppw_dur_of_prs_processing1_r17_s_>();
      break;
    case types::ppw_dur_of_prs_processing2_r17:
      c.init<ppw_dur_of_prs_processing2_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_");
  }
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::ppw_dur_of_prs_processing_r17_c_(
    const prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ppw_dur_of_prs_processing1_r17:
      c.init(other.c.get<ppw_dur_of_prs_processing1_r17_s_>());
      break;
    case types::ppw_dur_of_prs_processing2_r17:
      c.init(other.c.get<ppw_dur_of_prs_processing2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_");
  }
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_&
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::operator=(
    const prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ppw_dur_of_prs_processing1_r17:
      c.set(other.c.get<ppw_dur_of_prs_processing1_r17_s_>());
      break;
    case types::ppw_dur_of_prs_processing2_r17:
      c.set(other.c.get<ppw_dur_of_prs_processing2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_");
  }

  return *this;
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing1_r17_s_&
    prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
        set_ppw_dur_of_prs_processing1_r17()
{
  set(types::ppw_dur_of_prs_processing1_r17);
  return c.get<ppw_dur_of_prs_processing1_r17_s_>();
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing2_r17_s_&
    prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
        set_ppw_dur_of_prs_processing2_r17()
{
  set(types::ppw_dur_of_prs_processing2_r17);
  return c.get<ppw_dur_of_prs_processing2_r17_s_>();
}
void prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::to_json(
    json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ppw_dur_of_prs_processing1_r17:
      j.write_fieldname("ppw-durationOfPRS-Processing1-r17");
      j.start_obj();
      j.write_str("ppw-durationOfPRS-ProcessingSymbolsN-r17",
                  c.get<ppw_dur_of_prs_processing1_r17_s_>().ppw_dur_of_prs_processing_symbols_n_r17.to_string());
      j.write_str("ppw-durationOfPRS-ProcessingSymbolsT-r17",
                  c.get<ppw_dur_of_prs_processing1_r17_s_>().ppw_dur_of_prs_processing_symbols_t_r17.to_string());
      j.end_obj();
      break;
    case types::ppw_dur_of_prs_processing2_r17:
      j.write_fieldname("ppw-durationOfPRS-Processing2-r17");
      j.start_obj();
      j.write_str("ppw-durationOfPRS-ProcessingSymbolsN2-r17",
                  c.get<ppw_dur_of_prs_processing2_r17_s_>().ppw_dur_of_prs_processing_symbols_n2_r17.to_string());
      j.write_str("ppw-durationOfPRS-ProcessingSymbolsT2-r17",
                  c.get<ppw_dur_of_prs_processing2_r17_s_>().ppw_dur_of_prs_processing_symbols_t2_r17.to_string());
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_,
                            "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::ppw_dur_of_prs_processing1_r17:
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing1_r17_s_>().ppw_dur_of_prs_processing_symbols_n_r17.pack(bref));
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing1_r17_s_>().ppw_dur_of_prs_processing_symbols_t_r17.pack(bref));
      break;
    case types::ppw_dur_of_prs_processing2_r17:
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing2_r17_s_>().ppw_dur_of_prs_processing_symbols_n2_r17.pack(bref));
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing2_r17_s_>().ppw_dur_of_prs_processing_symbols_t2_r17.pack(bref));
      break;
    default:
      log_invalid_choice_id(type_,
                            "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::ppw_dur_of_prs_processing1_r17:
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing1_r17_s_>().ppw_dur_of_prs_processing_symbols_n_r17.unpack(bref));
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing1_r17_s_>().ppw_dur_of_prs_processing_symbols_t_r17.unpack(bref));
      break;
    case types::ppw_dur_of_prs_processing2_r17:
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing2_r17_s_>().ppw_dur_of_prs_processing_symbols_n2_r17.unpack(bref));
      HANDLE_CODE(c.get<ppw_dur_of_prs_processing2_r17_s_>().ppw_dur_of_prs_processing_symbols_t2_r17.unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_,
                            "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing1_r17_s_::ppw_dur_of_prs_processing_symbols_n_r17_opts::to_string() const
{
  static const char* names[] = {"msDot125",
                                "msDot25",
                                "msDot5",
                                "ms1",
                                "ms2",
                                "ms4",
                                "ms6",
                                "ms8",
                                "ms12",
                                "ms16",
                                "ms20",
                                "ms25",
                                "ms30",
                                "ms32",
                                "ms35",
                                "ms40",
                                "ms45",
                                "ms50"};
  return convert_enum_idx(names,
                          18,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::ppw_"
                          "dur_of_prs_processing1_r17_s_::ppw_dur_of_prs_processing_symbols_n_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing1_r17_s_::ppw_dur_of_prs_processing_symbols_t_r17_opts::to_string() const
{
  static const char* names[] = {
      "ms1", "ms2", "ms4", "ms8", "ms16", "ms20", "ms30", "ms40", "ms80", "ms160", "ms320", "ms640", "ms1280"};
  return convert_enum_idx(names,
                          13,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::ppw_"
                          "dur_of_prs_processing1_r17_s_::ppw_dur_of_prs_processing_symbols_t_r17_e_");
}
uint16_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing1_r17_s_::ppw_dur_of_prs_processing_symbols_t_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {1, 2, 4, 8, 16, 20, 30, 40, 80, 160, 320, 640, 1280};
  return map_enum_number(numbers,
                         13,
                         value,
                         "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::ppw_"
                         "dur_of_prs_processing1_r17_s_::ppw_dur_of_prs_processing_symbols_t_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing2_r17_s_::ppw_dur_of_prs_processing_symbols_n2_r17_opts::to_string() const
{
  static const char* names[] = {
      "msDot125", "msDot25", "msDot5", "ms1", "ms2", "ms3", "ms4", "ms5", "ms6", "ms8", "ms12"};
  return convert_enum_idx(names,
                          11,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::ppw_"
                          "dur_of_prs_processing2_r17_s_::ppw_dur_of_prs_processing_symbols_n2_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing2_r17_s_::ppw_dur_of_prs_processing_symbols_t2_r17_opts::to_string() const
{
  static const char* names[] = {"ms4", "ms5", "ms6", "ms8"};
  return convert_enum_idx(names,
                          4,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::ppw_"
                          "dur_of_prs_processing2_r17_s_::ppw_dur_of_prs_processing_symbols_t2_r17_e_");
}
uint8_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::
    ppw_dur_of_prs_processing2_r17_s_::ppw_dur_of_prs_processing_symbols_t2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 5, 6, 8};
  return map_enum_number(numbers,
                         4,
                         value,
                         "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_dur_of_prs_processing_r17_c_::ppw_"
                         "dur_of_prs_processing2_r17_s_::ppw_dur_of_prs_processing_symbols_t2_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs15_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(names,
                          11,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_"
                          "per_slot_r17_s_::scs15_r17_e_");
}
uint8_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs15_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(numbers,
                         11,
                         value,
                         "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_"
                         "slot_r17_s_::scs15_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs30_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(names,
                          11,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_"
                          "per_slot_r17_s_::scs30_r17_e_");
}
uint8_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs30_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(numbers,
                         11,
                         value,
                         "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_"
                         "slot_r17_s_::scs30_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs60_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(names,
                          11,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_"
                          "per_slot_r17_s_::scs60_r17_e_");
}
uint8_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs60_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(numbers,
                         11,
                         value,
                         "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_"
                         "slot_r17_s_::scs60_r17_e_");
}

const char* prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs120_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(names,
                          11,
                          value,
                          "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_"
                          "per_slot_r17_s_::scs120_r17_e_");
}
uint8_t prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_slot_r17_s_::
    scs120_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(numbers,
                         11,
                         value,
                         "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_prs_res_processed_per_"
                         "slot_r17_s_::scs120_r17_e_");
}

void prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::destroy_() {}
void prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::ppw_max_num_of_dl_bw_r17_c_(
    const prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r17:
      c.init(other.c.get<fr1_r17_e_>());
      break;
    case types::fr2_r17:
      c.init(other.c.get<fr2_r17_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_");
  }
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_&
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::operator=(
    const prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r17:
      c.set(other.c.get<fr1_r17_e_>());
      break;
    case types::fr2_r17:
      c.set(other.c.get<fr2_r17_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_");
  }

  return *this;
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr1_r17_e_&
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::set_fr1_r17()
{
  set(types::fr1_r17);
  return c.get<fr1_r17_e_>();
}
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr2_r17_e_&
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::set_fr2_r17()
{
  set(types::fr2_r17);
  return c.get<fr2_r17_e_>();
}
void prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r17:
      j.write_str("fr1-r17", c.get<fr1_r17_e_>().to_string());
      break;
    case types::fr2_r17:
      j.write_str("fr2-r17", c.get<fr2_r17_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(c.get<fr1_r17_e_>().pack(bref));
      break;
    case types::fr2_r17:
      HANDLE_CODE(c.get<fr2_r17_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(c.get<fr1_r17_e_>().unpack(bref));
      break;
    case types::fr2_r17:
      HANDLE_CODE(c.get<fr2_r17_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char*
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr1_r17_opts::to_string() const
{
  static const char* names[] = {"mhz5", "mhz10", "mhz20", "mhz40", "mhz50", "mhz80", "mhz100"};
  return convert_enum_idx(
      names, 7, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr1_r17_e_");
}
uint8_t
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr1_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 20, 40, 50, 80, 100};
  return map_enum_number(
      numbers,
      7,
      value,
      "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr1_r17_e_");
}

const char*
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr2_r17_opts::to_string() const
{
  static const char* names[] = {"mhz50", "mhz100", "mhz200", "mhz400"};
  return convert_enum_idx(
      names, 4, value, "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr2_r17_e_");
}
uint16_t
prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr2_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 200, 400};
  return map_enum_number(
      numbers,
      4,
      value,
      "prs_processing_cap_outside_m_gin_ppw_per_type_r17_s::ppw_max_num_of_dl_bw_r17_c_::fr2_r17_e_");
}

// PosSRS-RRC-Inactive-OutsideInitialUL-BWP-r17 ::= SEQUENCE
SRSASN_CODE pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_present, 1));
  HANDLE_CODE(bref.pack(max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_of_srs_pos_res_sets_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_of_periodic_srs_pos_res_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_of_periodic_srs_pos_res_per_slot_r17_present, 1));
  HANDLE_CODE(bref.pack(different_numerology_between_srs_pos_and_init_bwp_r17_present, 1));
  HANDLE_CODE(bref.pack(srs_pos_without_restrict_on_bwp_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_of_periodic_and_semipersistent_srs_pos_res_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17_present, 1));
  HANDLE_CODE(bref.pack(different_center_freq_between_srs_pos_and_init_bwp_r17_present, 1));
  HANDLE_CODE(bref.pack(switching_time_srs_tx_other_tx_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_of_semi_persistent_srs_pos_res_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_of_semi_persistent_srs_pos_res_per_slot_r17_present, 1));

  if (max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_present) {
    HANDLE_CODE(max_srs_pos_bw_for_each_scs_within_cc_fr1_r17.pack(bref));
  }
  if (max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_present) {
    HANDLE_CODE(max_srs_pos_bw_for_each_scs_within_cc_fr2_r17.pack(bref));
  }
  if (max_num_of_srs_pos_res_sets_r17_present) {
    HANDLE_CODE(max_num_of_srs_pos_res_sets_r17.pack(bref));
  }
  if (max_num_of_periodic_srs_pos_res_r17_present) {
    HANDLE_CODE(max_num_of_periodic_srs_pos_res_r17.pack(bref));
  }
  if (max_num_of_periodic_srs_pos_res_per_slot_r17_present) {
    HANDLE_CODE(max_num_of_periodic_srs_pos_res_per_slot_r17.pack(bref));
  }
  if (max_num_of_periodic_and_semipersistent_srs_pos_res_r17_present) {
    HANDLE_CODE(max_num_of_periodic_and_semipersistent_srs_pos_res_r17.pack(bref));
  }
  if (max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17_present) {
    HANDLE_CODE(max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17.pack(bref));
  }
  if (switching_time_srs_tx_other_tx_r17_present) {
    HANDLE_CODE(switching_time_srs_tx_other_tx_r17.pack(bref));
  }
  if (max_num_of_semi_persistent_srs_pos_res_r17_present) {
    HANDLE_CODE(max_num_of_semi_persistent_srs_pos_res_r17.pack(bref));
  }
  if (max_num_of_semi_persistent_srs_pos_res_per_slot_r17_present) {
    HANDLE_CODE(max_num_of_semi_persistent_srs_pos_res_per_slot_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_of_srs_pos_res_sets_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_of_periodic_srs_pos_res_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_of_periodic_srs_pos_res_per_slot_r17_present, 1));
  HANDLE_CODE(bref.unpack(different_numerology_between_srs_pos_and_init_bwp_r17_present, 1));
  HANDLE_CODE(bref.unpack(srs_pos_without_restrict_on_bwp_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_of_periodic_and_semipersistent_srs_pos_res_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17_present, 1));
  HANDLE_CODE(bref.unpack(different_center_freq_between_srs_pos_and_init_bwp_r17_present, 1));
  HANDLE_CODE(bref.unpack(switching_time_srs_tx_other_tx_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_of_semi_persistent_srs_pos_res_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_of_semi_persistent_srs_pos_res_per_slot_r17_present, 1));

  if (max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_present) {
    HANDLE_CODE(max_srs_pos_bw_for_each_scs_within_cc_fr1_r17.unpack(bref));
  }
  if (max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_present) {
    HANDLE_CODE(max_srs_pos_bw_for_each_scs_within_cc_fr2_r17.unpack(bref));
  }
  if (max_num_of_srs_pos_res_sets_r17_present) {
    HANDLE_CODE(max_num_of_srs_pos_res_sets_r17.unpack(bref));
  }
  if (max_num_of_periodic_srs_pos_res_r17_present) {
    HANDLE_CODE(max_num_of_periodic_srs_pos_res_r17.unpack(bref));
  }
  if (max_num_of_periodic_srs_pos_res_per_slot_r17_present) {
    HANDLE_CODE(max_num_of_periodic_srs_pos_res_per_slot_r17.unpack(bref));
  }
  if (max_num_of_periodic_and_semipersistent_srs_pos_res_r17_present) {
    HANDLE_CODE(max_num_of_periodic_and_semipersistent_srs_pos_res_r17.unpack(bref));
  }
  if (max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17_present) {
    HANDLE_CODE(max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17.unpack(bref));
  }
  if (switching_time_srs_tx_other_tx_r17_present) {
    HANDLE_CODE(switching_time_srs_tx_other_tx_r17.unpack(bref));
  }
  if (max_num_of_semi_persistent_srs_pos_res_r17_present) {
    HANDLE_CODE(max_num_of_semi_persistent_srs_pos_res_r17.unpack(bref));
  }
  if (max_num_of_semi_persistent_srs_pos_res_per_slot_r17_present) {
    HANDLE_CODE(max_num_of_semi_persistent_srs_pos_res_per_slot_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_present) {
    j.write_str("maxSRSposBandwidthForEachSCS-withinCC-FR1-r17",
                max_srs_pos_bw_for_each_scs_within_cc_fr1_r17.to_string());
  }
  if (max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_present) {
    j.write_str("maxSRSposBandwidthForEachSCS-withinCC-FR2-r17",
                max_srs_pos_bw_for_each_scs_within_cc_fr2_r17.to_string());
  }
  if (max_num_of_srs_pos_res_sets_r17_present) {
    j.write_str("maxNumOfSRSposResourceSets-r17", max_num_of_srs_pos_res_sets_r17.to_string());
  }
  if (max_num_of_periodic_srs_pos_res_r17_present) {
    j.write_str("maxNumOfPeriodicSRSposResources-r17", max_num_of_periodic_srs_pos_res_r17.to_string());
  }
  if (max_num_of_periodic_srs_pos_res_per_slot_r17_present) {
    j.write_str("maxNumOfPeriodicSRSposResourcesPerSlot-r17", max_num_of_periodic_srs_pos_res_per_slot_r17.to_string());
  }
  if (different_numerology_between_srs_pos_and_init_bwp_r17_present) {
    j.write_str("differentNumerologyBetweenSRSposAndInitialBWP-r17", "supported");
  }
  if (srs_pos_without_restrict_on_bwp_r17_present) {
    j.write_str("srsPosWithoutRestrictionOnBWP-r17", "supported");
  }
  if (max_num_of_periodic_and_semipersistent_srs_pos_res_r17_present) {
    j.write_str("maxNumOfPeriodicAndSemipersistentSRSposResources-r17",
                max_num_of_periodic_and_semipersistent_srs_pos_res_r17.to_string());
  }
  if (max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17_present) {
    j.write_str("maxNumOfPeriodicAndSemipersistentSRSposResourcesPerSlot-r17",
                max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17.to_string());
  }
  if (different_center_freq_between_srs_pos_and_init_bwp_r17_present) {
    j.write_str("differentCenterFreqBetweenSRSposAndInitialBWP-r17", "supported");
  }
  if (switching_time_srs_tx_other_tx_r17_present) {
    j.write_str("switchingTimeSRS-TX-OtherTX-r17", switching_time_srs_tx_other_tx_r17.to_string());
  }
  if (max_num_of_semi_persistent_srs_pos_res_r17_present) {
    j.write_str("maxNumOfSemiPersistentSRSposResources-r17", max_num_of_semi_persistent_srs_pos_res_r17.to_string());
  }
  if (max_num_of_semi_persistent_srs_pos_res_per_slot_r17_present) {
    j.write_str("maxNumOfSemiPersistentSRSposResourcesPerSlot-r17",
                max_num_of_semi_persistent_srs_pos_res_per_slot_r17.to_string());
  }
  j.end_obj();
}

const char*
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_opts::to_string() const
{
  static const char* names[] = {"bw5",
                                "bw10",
                                "bw15",
                                "bw20",
                                "bw25",
                                "bw30",
                                "bw35",
                                "bw40",
                                "bw45",
                                "bw50",
                                "bw60",
                                "bw70",
                                "bw80",
                                "bw90",
                                "bw100"};
  return convert_enum_idx(
      names,
      15,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_e_");
}
uint8_t
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100};
  return map_enum_number(
      numbers,
      15,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr1_r17_e_");
}

const char*
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_opts::to_string() const
{
  static const char* names[] = {"bw50", "bw100", "bw200", "bw400"};
  return convert_enum_idx(
      names,
      4,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_e_");
}
uint16_t
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 200, 400};
  return map_enum_number(
      numbers,
      4,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_srs_pos_bw_for_each_scs_within_cc_fr2_r17_e_");
}

const char* pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_srs_pos_res_sets_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n12", "n16"};
  return convert_enum_idx(
      names, 6, value, "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_srs_pos_res_sets_r17_e_");
}
uint8_t pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_srs_pos_res_sets_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 12, 16};
  return map_enum_number(
      numbers, 6, value, "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_srs_pos_res_sets_r17_e_");
}

const char* pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 7, value, "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_r17_e_");
}
uint8_t pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers, 7, value, "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_r17_e_");
}

const char*
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_per_slot_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10", "n12", "n14"};
  return convert_enum_idx(
      names,
      10,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_per_slot_r17_e_");
}
uint8_t
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_per_slot_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10, 12, 14};
  return map_enum_number(
      numbers,
      10,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_srs_pos_res_per_slot_r17_e_");
}

const char*
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_and_semipersistent_srs_pos_res_r17_opts::to_string()
    const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names,
      7,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_and_semipersistent_srs_pos_res_r17_e_");
}
uint8_t
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_and_semipersistent_srs_pos_res_r17_opts::to_number()
    const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers,
      7,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_and_semipersistent_srs_pos_res_r17_e_");
}

const char* pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::
    max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10", "n12", "n14"};
  return convert_enum_idx(names,
                          10,
                          value,
                          "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_and_semipersistent_srs_"
                          "pos_res_per_slot_r17_e_");
}
uint8_t pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::
    max_num_of_periodic_and_semipersistent_srs_pos_res_per_slot_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10, 12, 14};
  return map_enum_number(numbers,
                         10,
                         value,
                         "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_periodic_and_semipersistent_srs_"
                         "pos_res_per_slot_r17_e_");
}

const char* pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::switching_time_srs_tx_other_tx_r17_opts::to_string() const
{
  static const char* names[] = {"us100", "us140", "us200", "us300", "us500"};
  return convert_enum_idx(
      names, 5, value, "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::switching_time_srs_tx_other_tx_r17_e_");
}
uint16_t pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::switching_time_srs_tx_other_tx_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {100, 140, 200, 300, 500};
  return map_enum_number(
      numbers, 5, value, "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::switching_time_srs_tx_other_tx_r17_e_");
}

const char*
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 7, value, "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_r17_e_");
}
uint8_t
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers,
      7,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_r17_e_");
}

const char*
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_per_slot_r17_opts::to_string()
    const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10", "n12", "n14"};
  return convert_enum_idx(
      names,
      10,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_per_slot_r17_e_");
}
uint8_t
pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_per_slot_r17_opts::to_number()
    const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10, 12, 14};
  return map_enum_number(
      numbers,
      10,
      value,
      "pos_srs_rrc_inactive_outside_init_ul_bwp_r17_s::max_num_of_semi_persistent_srs_pos_res_per_slot_r17_e_");
}

// SRS-AllPosResourcesRRC-Inactive-r17 ::= SEQUENCE
SRSASN_CODE srs_all_pos_res_rrc_inactive_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_srs_pos_res_set_per_bwp_r17.pack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_srs_pos_res_per_bwp_r17.pack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_srs_res_per_bwp_per_slot_r17.pack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_periodic_srs_pos_res_per_bwp_r17.pack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_periodic_srs_pos_res_per_bwp_per_slot_r17.pack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.dummy1.pack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.dummy2.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_all_pos_res_rrc_inactive_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_srs_pos_res_set_per_bwp_r17.unpack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_srs_pos_res_per_bwp_r17.unpack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_srs_res_per_bwp_per_slot_r17.unpack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_periodic_srs_pos_res_per_bwp_r17.unpack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.max_num_periodic_srs_pos_res_per_bwp_per_slot_r17.unpack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.dummy1.unpack(bref));
  HANDLE_CODE(srs_pos_res_rrc_inactive_r17.dummy2.unpack(bref));

  return SRSASN_SUCCESS;
}
void srs_all_pos_res_rrc_inactive_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("srs-PosResourcesRRC-Inactive-r17");
  j.start_obj();
  j.write_str("maxNumberSRS-PosResourceSetPerBWP-r17",
              srs_pos_res_rrc_inactive_r17.max_num_srs_pos_res_set_per_bwp_r17.to_string());
  j.write_str("maxNumberSRS-PosResourcesPerBWP-r17",
              srs_pos_res_rrc_inactive_r17.max_num_srs_pos_res_per_bwp_r17.to_string());
  j.write_str("maxNumberSRS-ResourcesPerBWP-PerSlot-r17",
              srs_pos_res_rrc_inactive_r17.max_num_srs_res_per_bwp_per_slot_r17.to_string());
  j.write_str("maxNumberPeriodicSRS-PosResourcesPerBWP-r17",
              srs_pos_res_rrc_inactive_r17.max_num_periodic_srs_pos_res_per_bwp_r17.to_string());
  j.write_str("maxNumberPeriodicSRS-PosResourcesPerBWP-PerSlot-r17",
              srs_pos_res_rrc_inactive_r17.max_num_periodic_srs_pos_res_per_bwp_per_slot_r17.to_string());
  j.write_str("dummy1", srs_pos_res_rrc_inactive_r17.dummy1.to_string());
  j.write_str("dummy2", srs_pos_res_rrc_inactive_r17.dummy2.to_string());
  j.end_obj();
  j.end_obj();
}

const char* srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::
    max_num_srs_pos_res_set_per_bwp_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n12", "n16"};
  return convert_enum_idx(
      names,
      6,
      value,
      "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_pos_res_set_per_bwp_r17_e_");
}
uint8_t srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_pos_res_set_per_bwp_r17_opts::
    to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 12, 16};
  return map_enum_number(
      numbers,
      6,
      value,
      "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_pos_res_set_per_bwp_r17_e_");
}

const char*
srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_pos_res_per_bwp_r17_opts::to_string()
    const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names,
      7,
      value,
      "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_pos_res_per_bwp_r17_e_");
}
uint8_t
srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_pos_res_per_bwp_r17_opts::to_number()
    const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers,
      7,
      value,
      "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_pos_res_per_bwp_r17_e_");
}

const char* srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::
    max_num_srs_res_per_bwp_per_slot_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10", "n12", "n14"};
  return convert_enum_idx(
      names,
      10,
      value,
      "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_res_per_bwp_per_slot_r17_e_");
}
uint8_t srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_res_per_bwp_per_slot_r17_opts::
    to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10, 12, 14};
  return map_enum_number(
      numbers,
      10,
      value,
      "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_srs_res_per_bwp_per_slot_r17_e_");
}

const char* srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::
    max_num_periodic_srs_pos_res_per_bwp_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names,
                          7,
                          value,
                          "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_periodic_srs_"
                          "pos_res_per_bwp_r17_e_");
}
uint8_t srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::
    max_num_periodic_srs_pos_res_per_bwp_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(numbers,
                         7,
                         value,
                         "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_periodic_srs_"
                         "pos_res_per_bwp_r17_e_");
}

const char* srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::
    max_num_periodic_srs_pos_res_per_bwp_per_slot_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10", "n12", "n14"};
  return convert_enum_idx(names,
                          10,
                          value,
                          "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_periodic_srs_"
                          "pos_res_per_bwp_per_slot_r17_e_");
}
uint8_t srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::
    max_num_periodic_srs_pos_res_per_bwp_per_slot_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10, 12, 14};
  return map_enum_number(numbers,
                         10,
                         value,
                         "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::max_num_periodic_srs_"
                         "pos_res_per_bwp_per_slot_r17_e_");
}

const char* srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy1_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names, 7, value, "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy1_e_");
}
uint8_t srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy1_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers, 7, value, "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy1_e_");
}

const char* srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy2_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10", "n12", "n14"};
  return convert_enum_idx(
      names, 10, value, "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy2_e_");
}
uint8_t srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy2_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10, 12, 14};
  return map_enum_number(
      numbers, 10, value, "srs_all_pos_res_rrc_inactive_r17_s::srs_pos_res_rrc_inactive_r17_s_::dummy2_e_");
}

// SharedSpectrumChAccessParamsPerBand-r16 ::= SEQUENCE
SRSASN_CODE shared_spec_ch_access_params_per_band_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_rrm_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_rrm_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(mib_acquisition_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_rlm_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_rlm_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(sib1_acquisition_r16_present, 1));
  HANDLE_CODE(bref.pack(ext_ra_resp_win_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_bfd_cbd_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_bfd_cbd_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(csi_rs_bfd_cbd_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_ch_bw_scell_10mhz_r16_present, 1));
  HANDLE_CODE(bref.pack(rssi_ch_occupancy_report_r16_present, 1));
  HANDLE_CODE(bref.pack(srs_start_any_ofdm_symbol_r16_present, 1));
  HANDLE_CODE(bref.pack(search_space_freq_monitor_location_r16_present, 1));
  HANDLE_CODE(bref.pack(coreset_rb_offset_r16_present, 1));
  HANDLE_CODE(bref.pack(cgi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.pack(cfg_ul_tx_r16_present, 1));
  HANDLE_CODE(bref.pack(prach_wideband_r16_present, 1));
  HANDLE_CODE(bref.pack(dci_available_rb_set_r16_present, 1));
  HANDLE_CODE(bref.pack(dci_ch_occupancy_dur_r16_present, 1));
  HANDLE_CODE(bref.pack(type_b_pdsch_len_r16_present, 1));
  HANDLE_CODE(bref.pack(search_space_switch_with_dci_r16_present, 1));
  HANDLE_CODE(bref.pack(search_space_switch_without_dci_r16_present, 1));
  HANDLE_CODE(bref.pack(search_space_switch_cap2_r16_present, 1));
  HANDLE_CODE(bref.pack(non_numerical_pdsch_harq_timing_r16_present, 1));
  HANDLE_CODE(bref.pack(enhanced_dyn_harq_codebook_r16_present, 1));
  HANDLE_CODE(bref.pack(one_shot_harq_feedback_r16_present, 1));
  HANDLE_CODE(bref.pack(multi_pusch_ul_grant_r16_present, 1));
  HANDLE_CODE(bref.pack(csi_rs_rlm_r16_present, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));
  HANDLE_CODE(bref.pack(periodic_and_semi_persistent_csi_rs_r16_present, 1));
  HANDLE_CODE(bref.pack(pusch_prb_interlace_r16_present, 1));
  HANDLE_CODE(bref.pack(pucch_f0_f1_prb_interlace_r16_present, 1));
  HANDLE_CODE(bref.pack(occ_prb_pf2_pf3_r16_present, 1));
  HANDLE_CODE(bref.pack(ext_cp_range_cg_pusch_r16_present, 1));
  HANDLE_CODE(bref.pack(cfg_grant_with_re_tx_r16_present, 1));
  HANDLE_CODE(bref.pack(ed_thres_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_dl_cot_sharing_r16_present, 1));
  HANDLE_CODE(bref.pack(mux_cg_uci_harq_ack_r16_present, 1));
  HANDLE_CODE(bref.pack(cg_res_cfg_r16_present, 1));

  if (search_space_freq_monitor_location_r16_present) {
    HANDLE_CODE(pack_integer(bref, search_space_freq_monitor_location_r16, (uint8_t)1u, (uint8_t)5u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE shared_spec_ch_access_params_per_band_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_rrm_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_rrm_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(mib_acquisition_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_rlm_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_rlm_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(sib1_acquisition_r16_present, 1));
  HANDLE_CODE(bref.unpack(ext_ra_resp_win_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_bfd_cbd_dyn_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_bfd_cbd_semi_static_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(csi_rs_bfd_cbd_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_ch_bw_scell_10mhz_r16_present, 1));
  HANDLE_CODE(bref.unpack(rssi_ch_occupancy_report_r16_present, 1));
  HANDLE_CODE(bref.unpack(srs_start_any_ofdm_symbol_r16_present, 1));
  HANDLE_CODE(bref.unpack(search_space_freq_monitor_location_r16_present, 1));
  HANDLE_CODE(bref.unpack(coreset_rb_offset_r16_present, 1));
  HANDLE_CODE(bref.unpack(cgi_acquisition_r16_present, 1));
  HANDLE_CODE(bref.unpack(cfg_ul_tx_r16_present, 1));
  HANDLE_CODE(bref.unpack(prach_wideband_r16_present, 1));
  HANDLE_CODE(bref.unpack(dci_available_rb_set_r16_present, 1));
  HANDLE_CODE(bref.unpack(dci_ch_occupancy_dur_r16_present, 1));
  HANDLE_CODE(bref.unpack(type_b_pdsch_len_r16_present, 1));
  HANDLE_CODE(bref.unpack(search_space_switch_with_dci_r16_present, 1));
  HANDLE_CODE(bref.unpack(search_space_switch_without_dci_r16_present, 1));
  HANDLE_CODE(bref.unpack(search_space_switch_cap2_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_numerical_pdsch_harq_timing_r16_present, 1));
  HANDLE_CODE(bref.unpack(enhanced_dyn_harq_codebook_r16_present, 1));
  HANDLE_CODE(bref.unpack(one_shot_harq_feedback_r16_present, 1));
  HANDLE_CODE(bref.unpack(multi_pusch_ul_grant_r16_present, 1));
  HANDLE_CODE(bref.unpack(csi_rs_rlm_r16_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));
  HANDLE_CODE(bref.unpack(periodic_and_semi_persistent_csi_rs_r16_present, 1));
  HANDLE_CODE(bref.unpack(pusch_prb_interlace_r16_present, 1));
  HANDLE_CODE(bref.unpack(pucch_f0_f1_prb_interlace_r16_present, 1));
  HANDLE_CODE(bref.unpack(occ_prb_pf2_pf3_r16_present, 1));
  HANDLE_CODE(bref.unpack(ext_cp_range_cg_pusch_r16_present, 1));
  HANDLE_CODE(bref.unpack(cfg_grant_with_re_tx_r16_present, 1));
  HANDLE_CODE(bref.unpack(ed_thres_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_dl_cot_sharing_r16_present, 1));
  HANDLE_CODE(bref.unpack(mux_cg_uci_harq_ack_r16_present, 1));
  HANDLE_CODE(bref.unpack(cg_res_cfg_r16_present, 1));

  if (search_space_freq_monitor_location_r16_present) {
    HANDLE_CODE(unpack_integer(search_space_freq_monitor_location_r16, bref, (uint8_t)1u, (uint8_t)5u));
  }

  return SRSASN_SUCCESS;
}
void shared_spec_ch_access_params_per_band_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_dyn_ch_access_r16_present) {
    j.write_str("ul-DynamicChAccess-r16", "supported");
  }
  if (ul_semi_static_ch_access_r16_present) {
    j.write_str("ul-Semi-StaticChAccess-r16", "supported");
  }
  if (ssb_rrm_dyn_ch_access_r16_present) {
    j.write_str("ssb-RRM-DynamicChAccess-r16", "supported");
  }
  if (ssb_rrm_semi_static_ch_access_r16_present) {
    j.write_str("ssb-RRM-Semi-StaticChAccess-r16", "supported");
  }
  if (mib_acquisition_r16_present) {
    j.write_str("mib-Acquisition-r16", "supported");
  }
  if (ssb_rlm_dyn_ch_access_r16_present) {
    j.write_str("ssb-RLM-DynamicChAccess-r16", "supported");
  }
  if (ssb_rlm_semi_static_ch_access_r16_present) {
    j.write_str("ssb-RLM-Semi-StaticChAccess-r16", "supported");
  }
  if (sib1_acquisition_r16_present) {
    j.write_str("sib1-Acquisition-r16", "supported");
  }
  if (ext_ra_resp_win_r16_present) {
    j.write_str("extRA-ResponseWindow-r16", "supported");
  }
  if (ssb_bfd_cbd_dyn_ch_access_r16_present) {
    j.write_str("ssb-BFD-CBD-dynamicChannelAccess-r16", "supported");
  }
  if (ssb_bfd_cbd_semi_static_ch_access_r16_present) {
    j.write_str("ssb-BFD-CBD-semi-staticChannelAccess-r16", "supported");
  }
  if (csi_rs_bfd_cbd_r16_present) {
    j.write_str("csi-RS-BFD-CBD-r16", "supported");
  }
  if (ul_ch_bw_scell_10mhz_r16_present) {
    j.write_str("ul-ChannelBW-SCell-10mhz-r16", "supported");
  }
  if (rssi_ch_occupancy_report_r16_present) {
    j.write_str("rssi-ChannelOccupancyReporting-r16", "supported");
  }
  if (srs_start_any_ofdm_symbol_r16_present) {
    j.write_str("srs-StartAnyOFDM-Symbol-r16", "supported");
  }
  if (search_space_freq_monitor_location_r16_present) {
    j.write_int("searchSpaceFreqMonitorLocation-r16", search_space_freq_monitor_location_r16);
  }
  if (coreset_rb_offset_r16_present) {
    j.write_str("coreset-RB-Offset-r16", "supported");
  }
  if (cgi_acquisition_r16_present) {
    j.write_str("cgi-Acquisition-r16", "supported");
  }
  if (cfg_ul_tx_r16_present) {
    j.write_str("configuredUL-Tx-r16", "supported");
  }
  if (prach_wideband_r16_present) {
    j.write_str("prach-Wideband-r16", "supported");
  }
  if (dci_available_rb_set_r16_present) {
    j.write_str("dci-AvailableRB-Set-r16", "supported");
  }
  if (dci_ch_occupancy_dur_r16_present) {
    j.write_str("dci-ChOccupancyDuration-r16", "supported");
  }
  if (type_b_pdsch_len_r16_present) {
    j.write_str("typeB-PDSCH-length-r16", "supported");
  }
  if (search_space_switch_with_dci_r16_present) {
    j.write_str("searchSpaceSwitchWithDCI-r16", "supported");
  }
  if (search_space_switch_without_dci_r16_present) {
    j.write_str("searchSpaceSwitchWithoutDCI-r16", "supported");
  }
  if (search_space_switch_cap2_r16_present) {
    j.write_str("searchSpaceSwitchCapability2-r16", "supported");
  }
  if (non_numerical_pdsch_harq_timing_r16_present) {
    j.write_str("non-numericalPDSCH-HARQ-timing-r16", "supported");
  }
  if (enhanced_dyn_harq_codebook_r16_present) {
    j.write_str("enhancedDynamicHARQ-codebook-r16", "supported");
  }
  if (one_shot_harq_feedback_r16_present) {
    j.write_str("oneShotHARQ-feedback-r16", "supported");
  }
  if (multi_pusch_ul_grant_r16_present) {
    j.write_str("multiPUSCH-UL-grant-r16", "supported");
  }
  if (csi_rs_rlm_r16_present) {
    j.write_str("csi-RS-RLM-r16", "supported");
  }
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  if (periodic_and_semi_persistent_csi_rs_r16_present) {
    j.write_str("periodicAndSemi-PersistentCSI-RS-r16", "supported");
  }
  if (pusch_prb_interlace_r16_present) {
    j.write_str("pusch-PRB-interlace-r16", "supported");
  }
  if (pucch_f0_f1_prb_interlace_r16_present) {
    j.write_str("pucch-F0-F1-PRB-Interlace-r16", "supported");
  }
  if (occ_prb_pf2_pf3_r16_present) {
    j.write_str("occ-PRB-PF2-PF3-r16", "supported");
  }
  if (ext_cp_range_cg_pusch_r16_present) {
    j.write_str("extCP-rangeCG-PUSCH-r16", "supported");
  }
  if (cfg_grant_with_re_tx_r16_present) {
    j.write_str("configuredGrantWithReTx-r16", "supported");
  }
  if (ed_thres_r16_present) {
    j.write_str("ed-Threshold-r16", "supported");
  }
  if (ul_dl_cot_sharing_r16_present) {
    j.write_str("ul-DL-COT-Sharing-r16", "supported");
  }
  if (mux_cg_uci_harq_ack_r16_present) {
    j.write_str("mux-CG-UCI-HARQ-ACK-r16", "supported");
  }
  if (cg_res_cfg_r16_present) {
    j.write_str("cg-resourceConfig-r16", "supported");
  }
  j.end_obj();
}

// SharedSpectrumChAccessParamsPerBand-v1630 ::= SEQUENCE
SRSASN_CODE shared_spec_ch_access_params_per_band_v1630_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(dl_reception_intra_cell_guardband_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_reception_lbt_subset_rb_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE shared_spec_ch_access_params_per_band_v1630_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(dl_reception_intra_cell_guardband_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_reception_lbt_subset_rb_r16_present, 1));

  return SRSASN_SUCCESS;
}
void shared_spec_ch_access_params_per_band_v1630_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dl_reception_intra_cell_guardband_r16_present) {
    j.write_str("dl-ReceptionIntraCellGuardband-r16", "supported");
  }
  if (dl_reception_lbt_subset_rb_r16_present) {
    j.write_str("dl-ReceptionLBT-subsetRB-r16", "supported");
  }
  j.end_obj();
}

// SharedSpectrumChAccessParamsPerBand-v1640 ::= SEQUENCE
SRSASN_CODE shared_spec_ch_access_params_per_band_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(csi_rsrp_and_rsrq_meas_with_ssb_r16_present, 1));
  HANDLE_CODE(bref.pack(csi_rsrp_and_rsrq_meas_without_ssb_r16_present, 1));
  HANDLE_CODE(bref.pack(csi_sinr_meas_r16_present, 1));
  HANDLE_CODE(bref.pack(ssb_and_csi_rs_rlm_r16_present, 1));
  HANDLE_CODE(bref.pack(csi_rs_cfra_for_ho_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE shared_spec_ch_access_params_per_band_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(csi_rsrp_and_rsrq_meas_with_ssb_r16_present, 1));
  HANDLE_CODE(bref.unpack(csi_rsrp_and_rsrq_meas_without_ssb_r16_present, 1));
  HANDLE_CODE(bref.unpack(csi_sinr_meas_r16_present, 1));
  HANDLE_CODE(bref.unpack(ssb_and_csi_rs_rlm_r16_present, 1));
  HANDLE_CODE(bref.unpack(csi_rs_cfra_for_ho_r16_present, 1));

  return SRSASN_SUCCESS;
}
void shared_spec_ch_access_params_per_band_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (csi_rsrp_and_rsrq_meas_with_ssb_r16_present) {
    j.write_str("csi-RSRP-AndRSRQ-MeasWithSSB-r16", "supported");
  }
  if (csi_rsrp_and_rsrq_meas_without_ssb_r16_present) {
    j.write_str("csi-RSRP-AndRSRQ-MeasWithoutSSB-r16", "supported");
  }
  if (csi_sinr_meas_r16_present) {
    j.write_str("csi-SINR-Meas-r16", "supported");
  }
  if (ssb_and_csi_rs_rlm_r16_present) {
    j.write_str("ssb-AndCSI-RS-RLM-r16", "supported");
  }
  if (csi_rs_cfra_for_ho_r16_present) {
    j.write_str("csi-RS-CFRA-ForHO-r16", "supported");
  }
  j.end_obj();
}

// SharedSpectrumChAccessParamsPerBand-v1650 ::= SEQUENCE
SRSASN_CODE shared_spec_ch_access_params_per_band_v1650_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(extended_search_space_switch_with_dci_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE shared_spec_ch_access_params_per_band_v1650_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(extended_search_space_switch_with_dci_r16_present, 1));

  return SRSASN_SUCCESS;
}
void shared_spec_ch_access_params_per_band_v1650_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (extended_search_space_switch_with_dci_r16_present) {
    j.write_str("extendedSearchSpaceSwitchWithDCI-r16", "supported");
  }
  j.end_obj();
}

// SharedSpectrumChAccessParamsPerBand-v1710 ::= SEQUENCE
SRSASN_CODE shared_spec_ch_access_params_per_band_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_semi_static_ch_access_dependent_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_semi_static_ch_access_independent_cfg_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE shared_spec_ch_access_params_per_band_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_semi_static_ch_access_dependent_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_semi_static_ch_access_independent_cfg_r17_present, 1));

  return SRSASN_SUCCESS;
}
void shared_spec_ch_access_params_per_band_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_semi_static_ch_access_dependent_cfg_r17_present) {
    j.write_str("ul-Semi-StaticChAccessDependentConfig-r17", "supported");
  }
  if (ul_semi_static_ch_access_independent_cfg_r17_present) {
    j.write_str("ul-Semi-StaticChAccessIndependentConfig-r17", "supported");
  }
  j.end_obj();
}

// SpatialRelationsSRS-Pos-r16 ::= SEQUENCE
SRSASN_CODE spatial_relations_srs_pos_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(spatial_relation_srs_pos_based_on_ssb_serving_r16_present, 1));
  HANDLE_CODE(bref.pack(spatial_relation_srs_pos_based_on_csi_rs_serving_r16_present, 1));
  HANDLE_CODE(bref.pack(spatial_relation_srs_pos_based_on_prs_serving_r16_present, 1));
  HANDLE_CODE(bref.pack(spatial_relation_srs_pos_based_on_srs_r16_present, 1));
  HANDLE_CODE(bref.pack(spatial_relation_srs_pos_based_on_ssb_neigh_r16_present, 1));
  HANDLE_CODE(bref.pack(spatial_relation_srs_pos_based_on_prs_neigh_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE spatial_relations_srs_pos_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(spatial_relation_srs_pos_based_on_ssb_serving_r16_present, 1));
  HANDLE_CODE(bref.unpack(spatial_relation_srs_pos_based_on_csi_rs_serving_r16_present, 1));
  HANDLE_CODE(bref.unpack(spatial_relation_srs_pos_based_on_prs_serving_r16_present, 1));
  HANDLE_CODE(bref.unpack(spatial_relation_srs_pos_based_on_srs_r16_present, 1));
  HANDLE_CODE(bref.unpack(spatial_relation_srs_pos_based_on_ssb_neigh_r16_present, 1));
  HANDLE_CODE(bref.unpack(spatial_relation_srs_pos_based_on_prs_neigh_r16_present, 1));

  return SRSASN_SUCCESS;
}
void spatial_relations_srs_pos_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (spatial_relation_srs_pos_based_on_ssb_serving_r16_present) {
    j.write_str("spatialRelation-SRS-PosBasedOnSSB-Serving-r16", "supported");
  }
  if (spatial_relation_srs_pos_based_on_csi_rs_serving_r16_present) {
    j.write_str("spatialRelation-SRS-PosBasedOnCSI-RS-Serving-r16", "supported");
  }
  if (spatial_relation_srs_pos_based_on_prs_serving_r16_present) {
    j.write_str("spatialRelation-SRS-PosBasedOnPRS-Serving-r16", "supported");
  }
  if (spatial_relation_srs_pos_based_on_srs_r16_present) {
    j.write_str("spatialRelation-SRS-PosBasedOnSRS-r16", "supported");
  }
  if (spatial_relation_srs_pos_based_on_ssb_neigh_r16_present) {
    j.write_str("spatialRelation-SRS-PosBasedOnSSB-Neigh-r16", "supported");
  }
  if (spatial_relation_srs_pos_based_on_prs_neigh_r16_present) {
    j.write_str("spatialRelation-SRS-PosBasedOnPRS-Neigh-r16", "supported");
  }
  j.end_obj();
}

// BandNR ::= SEQUENCE
SRSASN_CODE band_nr_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(modified_mpr_behaviour_present, 1));
  HANDLE_CODE(bref.pack(mimo_params_per_band_present, 1));
  HANDLE_CODE(bref.pack(extended_cp_present, 1));
  HANDLE_CODE(bref.pack(multiple_tci_present, 1));
  HANDLE_CODE(bref.pack(bwp_without_restrict_present, 1));
  HANDLE_CODE(bref.pack(bwp_same_numerology_present, 1));
  HANDLE_CODE(bref.pack(bwp_diff_numerology_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_same_scs_present, 1));
  HANDLE_CODE(bref.pack(pdsch_256_qam_fr2_present, 1));
  HANDLE_CODE(bref.pack(pusch_256_qam_present, 1));
  HANDLE_CODE(bref.pack(ue_pwr_class_present, 1));
  HANDLE_CODE(bref.pack(rate_matching_lte_crs_present, 1));
  HANDLE_CODE(bref.pack(ch_bws_dl_present, 1));
  HANDLE_CODE(bref.pack(ch_bws_ul_present, 1));

  HANDLE_CODE(pack_integer(bref, band_nr, (uint16_t)1u, (uint16_t)1024u));
  if (modified_mpr_behaviour_present) {
    HANDLE_CODE(modified_mpr_behaviour.pack(bref));
  }
  if (mimo_params_per_band_present) {
    HANDLE_CODE(mimo_params_per_band.pack(bref));
  }
  if (bwp_same_numerology_present) {
    HANDLE_CODE(bwp_same_numerology.pack(bref));
  }
  if (ue_pwr_class_present) {
    HANDLE_CODE(ue_pwr_class.pack(bref));
  }
  if (ch_bws_dl_present) {
    HANDLE_CODE(ch_bws_dl.pack(bref));
  }
  if (ch_bws_ul_present) {
    HANDLE_CODE(ch_bws_ul.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= max_ul_duty_cycle_pc2_fr1_present;
    group_flags[1] |= pucch_spatial_rel_info_mac_ce_present;
    group_flags[1] |= pwr_boosting_pi2_bpsk_present;
    group_flags[2] |= max_ul_duty_cycle_fr2_present;
    group_flags[3] |= ch_bws_dl_v1590.is_present();
    group_flags[3] |= ch_bws_ul_v1590.is_present();
    group_flags[4] |= asymmetric_bw_combination_set_present;
    group_flags[5] |= shared_spec_ch_access_params_per_band_r16.is_present();
    group_flags[5] |= cancel_overlapping_pusch_r16_present;
    group_flags[5] |= multiple_rate_matching_eutra_crs_r16.is_present();
    group_flags[5] |= overlap_rate_matching_eutra_crs_r16_present;
    group_flags[5] |= pdsch_map_type_b_alt_r16_present;
    group_flags[5] |= one_slot_periodic_trs_r16_present;
    group_flags[5] |= olpc_srs_pos_r16.is_present();
    group_flags[5] |= spatial_relations_srs_pos_r16.is_present();
    group_flags[5] |= simul_srs_mimo_trans_within_band_r16_present;
    group_flags[5] |= ch_bw_dl_iab_r16.is_present();
    group_flags[5] |= ch_bw_ul_iab_r16.is_present();
    group_flags[5] |= raster_shift7dot5_iab_r16_present;
    group_flags[5] |= ue_pwr_class_v1610_present;
    group_flags[5] |= cond_ho_r16_present;
    group_flags[5] |= cond_ho_fail_r16_present;
    group_flags[5] |= cond_ho_two_trigger_events_r16_present;
    group_flags[5] |= cond_pscell_change_r16_present;
    group_flags[5] |= cond_pscell_change_two_trigger_events_r16_present;
    group_flags[5] |= mpr_pwr_boost_fr2_r16_present;
    group_flags[5] |= active_cfg_grant_r16.is_present();
    group_flags[5] |= joint_release_cfg_grant_type2_r16_present;
    group_flags[5] |= sps_r16.is_present();
    group_flags[5] |= joint_release_sps_r16_present;
    group_flags[5] |= simul_srs_trans_within_band_r16_present;
    group_flags[5] |= trs_add_bw_r16_present;
    group_flags[5] |= ho_intra_f_iab_r16_present;
    group_flags[6] |= simul_tx_srs_ant_switching_intra_band_ul_ca_r16.is_present();
    group_flags[6] |= shared_spec_ch_access_params_per_band_v1630.is_present();
    group_flags[7] |= ho_utra_fdd_r16_present;
    group_flags[7] |= enhanced_ul_transient_period_r16_present;
    group_flags[7] |= shared_spec_ch_access_params_per_band_v1640.is_present();
    group_flags[8] |= type1_pusch_repeat_multi_slots_v1650_present;
    group_flags[8] |= type2_pusch_repeat_multi_slots_v1650_present;
    group_flags[8] |= pusch_repeat_multi_slots_v1650_present;
    group_flags[8] |= cfg_ul_grant_type1_v1650_present;
    group_flags[8] |= cfg_ul_grant_type2_v1650_present;
    group_flags[8] |= shared_spec_ch_access_params_per_band_v1650.is_present();
    group_flags[9] |= enhanced_skip_ul_tx_cfg_v1660_present;
    group_flags[9] |= enhanced_skip_ul_tx_dyn_v1660_present;
    group_flags[10] |= max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_present;
    group_flags[10] |= tx_diversity_r16_present;
    group_flags[11] |= pdsch_1024_qam_fr1_r17_present;
    group_flags[11] |= ue_pwr_class_v1700_present;
    group_flags[11] |= fr2_2_access_params_per_band_r17.is_present();
    group_flags[11] |= rlm_relaxation_r17_present;
    group_flags[11] |= bfd_relaxation_r17_present;
    group_flags[11] |= cg_sdt_r17_present;
    group_flags[11] |= location_based_cond_ho_r17_present;
    group_flags[11] |= time_based_cond_ho_r17_present;
    group_flags[11] |= event_a4_based_cond_ho_r17_present;
    group_flags[11] |= mn_initiated_cond_pscell_change_nrdc_r17_present;
    group_flags[11] |= sn_initiated_cond_pscell_change_nrdc_r17_present;
    group_flags[11] |= pdcch_skipping_without_sssg_r17_present;
    group_flags[11] |= sssg_switching_1_bit_ind_r17_present;
    group_flags[11] |= sssg_switching_2_bit_ind_r17_present;
    group_flags[11] |= pdcch_skipping_with_sssg_r17_present;
    group_flags[11] |= search_space_set_grp_switch_cap2_r17_present;
    group_flags[11] |= ul_pre_compensation_r17_present;
    group_flags[11] |= ul_ta_report_r17_present;
    group_flags[11] |= max_harq_process_num_r17_present;
    group_flags[11] |= type2_harq_codebook_r17_present;
    group_flags[11] |= type1_harq_codebook_r17_present;
    group_flags[11] |= type3_harq_codebook_r17_present;
    group_flags[11] |= ue_specific_k_offset_r17_present;
    group_flags[11] |= multi_pdsch_single_dci_fr2_1_scs_120k_hz_r17_present;
    group_flags[11] |= multi_pusch_single_dci_fr2_1_scs_120k_hz_r17_present;
    group_flags[11] |= parallel_prs_meas_rrc_inactive_r17_present;
    group_flags[11] |= nr_ue_tx_teg_id_max_support_r17_present;
    group_flags[11] |= prs_processing_rrc_inactive_r17_present;
    group_flags[11] |= prs_processing_win_type1_a_r17_present;
    group_flags[11] |= prs_processing_win_type1_b_r17_present;
    group_flags[11] |= prs_processing_win_type2_r17_present;
    group_flags[11] |= srs_all_pos_res_rrc_inactive_r17.is_present();
    group_flags[11] |= olpc_srs_pos_rrc_inactive_r17.is_present();
    group_flags[11] |= spatial_relations_srs_pos_rrc_inactive_r17.is_present();
    group_flags[11] |= max_num_pusch_type_a_repeat_r17_present;
    group_flags[11] |= pusch_type_a_repeats_avail_slot_r17_present;
    group_flags[11] |= tb_processing_multi_slot_pusch_r17_present;
    group_flags[11] |= tb_processing_rep_multi_slot_pusch_r17_present;
    group_flags[11] |= max_dur_dmrs_bundling_r17.is_present();
    group_flags[11] |= pusch_repeat_msg3_r17_present;
    group_flags[11] |= shared_spec_ch_access_params_per_band_v1710.is_present();
    group_flags[11] |= parallel_meas_without_restrict_r17_present;
    group_flags[11] |= max_num_ngso_satellites_within_one_smtc_r17_present;
    group_flags[11] |= k1_range_ext_r17_present;
    group_flags[11] |= aperiodic_csi_rs_fast_scell_activation_r17.is_present();
    group_flags[11] |= aperiodic_csi_rs_add_bw_r17_present;
    group_flags[11] |= bwp_without_cd_ssb_or_ncd_ssb_red_cap_r17_present;
    group_flags[11] |= half_duplex_fdd_type_a_red_cap_r17_present;
    group_flags[11] |= pos_srs_rrc_inactive_outside_init_ul_bwp_r17.is_present();
    group_flags[11] |= ch_bws_dl_scs_480k_hz_fr2_2_r17_present;
    group_flags[11] |= ch_bws_ul_scs_480k_hz_fr2_2_r17_present;
    group_flags[11] |= ch_bws_dl_scs_960k_hz_fr2_2_r17_present;
    group_flags[11] |= ch_bws_ul_scs_960k_hz_fr2_2_r17_present;
    group_flags[11] |= ul_gap_fr2_r17_present;
    group_flags[11] |= one_shot_harq_feedback_triggered_by_dci_1_2_r17_present;
    group_flags[11] |= one_shot_harq_feedback_phy_prio_r17_present;
    group_flags[11] |= enhanced_type3_harq_codebook_feedback_r17.is_present();
    group_flags[11] |= triggered_harq_codebook_retx_r17.is_present();
    group_flags[12] |= ue_one_shot_ul_timing_adj_r17_present;
    group_flags[12] |= pucch_repeat_f0_2_r17_present;
    group_flags[12] |= cqi_4_bits_subband_ntn_shared_spec_ch_access_r17_present;
    group_flags[12] |= mux_harq_ack_diff_priorities_r17_present;
    group_flags[12] |= ta_based_pdc_ntn_shared_spec_ch_access_r17_present;
    group_flags[12] |= ack_nack_feedback_for_multicast_with_dci_enabler_r17_present;
    group_flags[12] |= max_num_g_rnti_r17_present;
    group_flags[12] |= dyn_multicast_dci_format4_2_r17_present;
    group_flags[12] |= max_mod_order_for_multicast_r17.is_present();
    group_flags[12] |= dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_present;
    group_flags[12] |= dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_present;
    group_flags[12] |= nack_only_feedback_for_multicast_with_dci_enabler_r17_present;
    group_flags[12] |= ack_nack_feedback_for_sps_multicast_with_dci_enabler_r17_present;
    group_flags[12] |= max_num_g_cs_rnti_r17_present;
    group_flags[12] |= re_level_rate_matching_for_multicast_r17_present;
    group_flags[12] |= pdsch_1024_qam_2_mimo_fr1_r17_present;
    group_flags[12] |= prs_meas_without_mg_r17_present;
    group_flags[12] |= max_num_leo_satellites_per_carrier_r17_present;
    group_flags[12] |= prs_processing_cap_outside_m_gin_ppw_r17.is_present();
    group_flags[12] |= srs_semi_persistent_pos_res_rrc_inactive_r17.is_present();
    group_flags[12] |= ch_bws_dl_scs_120k_hz_fr2_2_r17_present;
    group_flags[12] |= ch_bws_ul_scs_120k_hz_fr2_2_r17_present;
    group_flags[13] |= dmrs_bundling_pusch_rep_type_a_r17_present;
    group_flags[13] |= dmrs_bundling_pusch_rep_type_b_r17_present;
    group_flags[13] |= dmrs_bundling_pusch_multi_slot_r17_present;
    group_flags[13] |= dmrs_bundling_pucch_rep_r17_present;
    group_flags[13] |= inter_slot_freq_hop_inter_slot_bundling_pusch_r17_present;
    group_flags[13] |= inter_slot_freq_hop_pucch_r17_present;
    group_flags[13] |= dmrs_bundling_restart_r17_present;
    group_flags[13] |= dmrs_bundling_non_back_to_back_tx_r17_present;
    group_flags[14] |= max_dyn_slot_repeat_for_sps_multicast_r17_present;
    group_flags[14] |= nack_only_feedback_for_sps_multicast_with_dci_enabler_r17_present;
    group_flags[14] |= sps_multicast_dci_format4_2_r17_present;
    group_flags[14] |= sps_multicast_multi_cfg_r17_present;
    group_flags[14] |= prio_ind_in_dci_multicast_r17_present;
    group_flags[14] |= prio_ind_in_dci_sps_multicast_r17_present;
    group_flags[14] |= two_harq_ack_codebook_for_unicast_and_multicast_r17_present;
    group_flags[14] |= multi_pucch_harq_ack_for_multicast_unicast_r17_present;
    group_flags[14] |= release_sps_multicast_with_cs_rnti_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_ul_duty_cycle_pc2_fr1_present, 1));
      if (max_ul_duty_cycle_pc2_fr1_present) {
        HANDLE_CODE(max_ul_duty_cycle_pc2_fr1.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pucch_spatial_rel_info_mac_ce_present, 1));
      HANDLE_CODE(bref.pack(pwr_boosting_pi2_bpsk_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_ul_duty_cycle_fr2_present, 1));
      if (max_ul_duty_cycle_fr2_present) {
        HANDLE_CODE(max_ul_duty_cycle_fr2.pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ch_bws_dl_v1590.is_present(), 1));
      HANDLE_CODE(bref.pack(ch_bws_ul_v1590.is_present(), 1));
      if (ch_bws_dl_v1590.is_present()) {
        HANDLE_CODE(ch_bws_dl_v1590->pack(bref));
      }
      if (ch_bws_ul_v1590.is_present()) {
        HANDLE_CODE(ch_bws_ul_v1590->pack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(asymmetric_bw_combination_set_present, 1));
      if (asymmetric_bw_combination_set_present) {
        HANDLE_CODE(asymmetric_bw_combination_set.pack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(shared_spec_ch_access_params_per_band_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(cancel_overlapping_pusch_r16_present, 1));
      HANDLE_CODE(bref.pack(multiple_rate_matching_eutra_crs_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(overlap_rate_matching_eutra_crs_r16_present, 1));
      HANDLE_CODE(bref.pack(pdsch_map_type_b_alt_r16_present, 1));
      HANDLE_CODE(bref.pack(one_slot_periodic_trs_r16_present, 1));
      HANDLE_CODE(bref.pack(olpc_srs_pos_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(spatial_relations_srs_pos_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(simul_srs_mimo_trans_within_band_r16_present, 1));
      HANDLE_CODE(bref.pack(ch_bw_dl_iab_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(ch_bw_ul_iab_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(raster_shift7dot5_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(ue_pwr_class_v1610_present, 1));
      HANDLE_CODE(bref.pack(cond_ho_r16_present, 1));
      HANDLE_CODE(bref.pack(cond_ho_fail_r16_present, 1));
      HANDLE_CODE(bref.pack(cond_ho_two_trigger_events_r16_present, 1));
      HANDLE_CODE(bref.pack(cond_pscell_change_r16_present, 1));
      HANDLE_CODE(bref.pack(cond_pscell_change_two_trigger_events_r16_present, 1));
      HANDLE_CODE(bref.pack(mpr_pwr_boost_fr2_r16_present, 1));
      HANDLE_CODE(bref.pack(active_cfg_grant_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(joint_release_cfg_grant_type2_r16_present, 1));
      HANDLE_CODE(bref.pack(sps_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(joint_release_sps_r16_present, 1));
      HANDLE_CODE(bref.pack(simul_srs_trans_within_band_r16_present, 1));
      HANDLE_CODE(bref.pack(trs_add_bw_r16_present, 1));
      HANDLE_CODE(bref.pack(ho_intra_f_iab_r16_present, 1));
      if (shared_spec_ch_access_params_per_band_r16.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_r16->pack(bref));
      }
      if (multiple_rate_matching_eutra_crs_r16.is_present()) {
        HANDLE_CODE(
            pack_integer(bref, multiple_rate_matching_eutra_crs_r16->max_num_patterns_r16, (uint8_t)2u, (uint8_t)6u));
        HANDLE_CODE(pack_integer(
            bref, multiple_rate_matching_eutra_crs_r16->max_num_non_overlap_patterns_r16, (uint8_t)1u, (uint8_t)3u));
      }
      if (olpc_srs_pos_r16.is_present()) {
        HANDLE_CODE(olpc_srs_pos_r16->pack(bref));
      }
      if (spatial_relations_srs_pos_r16.is_present()) {
        HANDLE_CODE(spatial_relations_srs_pos_r16->pack(bref));
      }
      if (ch_bw_dl_iab_r16.is_present()) {
        HANDLE_CODE(ch_bw_dl_iab_r16->pack(bref));
      }
      if (ch_bw_ul_iab_r16.is_present()) {
        HANDLE_CODE(ch_bw_ul_iab_r16->pack(bref));
      }
      if (active_cfg_grant_r16.is_present()) {
        HANDLE_CODE(active_cfg_grant_r16->max_num_cfgs_per_bwp_r16.pack(bref));
        HANDLE_CODE(pack_integer(bref, active_cfg_grant_r16->max_num_cfgs_all_cc_r16, (uint8_t)2u, (uint8_t)32u));
      }
      if (sps_r16.is_present()) {
        HANDLE_CODE(pack_integer(bref, sps_r16->max_num_cfgs_per_bwp_r16, (uint8_t)1u, (uint8_t)8u));
        HANDLE_CODE(pack_integer(bref, sps_r16->max_num_cfgs_all_cc_r16, (uint8_t)2u, (uint8_t)32u));
      }
      if (trs_add_bw_r16_present) {
        HANDLE_CODE(trs_add_bw_r16.pack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(simul_tx_srs_ant_switching_intra_band_ul_ca_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(shared_spec_ch_access_params_per_band_v1630.is_present(), 1));
      if (simul_tx_srs_ant_switching_intra_band_ul_ca_r16.is_present()) {
        HANDLE_CODE(simul_tx_srs_ant_switching_intra_band_ul_ca_r16->pack(bref));
      }
      if (shared_spec_ch_access_params_per_band_v1630.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1630->pack(bref));
      }
    }
    if (group_flags[7]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ho_utra_fdd_r16_present, 1));
      HANDLE_CODE(bref.pack(enhanced_ul_transient_period_r16_present, 1));
      HANDLE_CODE(bref.pack(shared_spec_ch_access_params_per_band_v1640.is_present(), 1));
      if (enhanced_ul_transient_period_r16_present) {
        HANDLE_CODE(enhanced_ul_transient_period_r16.pack(bref));
      }
      if (shared_spec_ch_access_params_per_band_v1640.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1640->pack(bref));
      }
    }
    if (group_flags[8]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(type1_pusch_repeat_multi_slots_v1650_present, 1));
      HANDLE_CODE(bref.pack(type2_pusch_repeat_multi_slots_v1650_present, 1));
      HANDLE_CODE(bref.pack(pusch_repeat_multi_slots_v1650_present, 1));
      HANDLE_CODE(bref.pack(cfg_ul_grant_type1_v1650_present, 1));
      HANDLE_CODE(bref.pack(cfg_ul_grant_type2_v1650_present, 1));
      HANDLE_CODE(bref.pack(shared_spec_ch_access_params_per_band_v1650.is_present(), 1));
      if (shared_spec_ch_access_params_per_band_v1650.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1650->pack(bref));
      }
    }
    if (group_flags[9]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(enhanced_skip_ul_tx_cfg_v1660_present, 1));
      HANDLE_CODE(bref.pack(enhanced_skip_ul_tx_dyn_v1660_present, 1));
    }
    if (group_flags[10]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_present, 1));
      HANDLE_CODE(bref.pack(tx_diversity_r16_present, 1));
      if (max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_present) {
        HANDLE_CODE(max_ul_duty_cycle_pc1dot5_mpe_fr1_r16.pack(bref));
      }
    }
    if (group_flags[11]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pdsch_1024_qam_fr1_r17_present, 1));
      HANDLE_CODE(bref.pack(ue_pwr_class_v1700_present, 1));
      HANDLE_CODE(bref.pack(fr2_2_access_params_per_band_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(rlm_relaxation_r17_present, 1));
      HANDLE_CODE(bref.pack(bfd_relaxation_r17_present, 1));
      HANDLE_CODE(bref.pack(cg_sdt_r17_present, 1));
      HANDLE_CODE(bref.pack(location_based_cond_ho_r17_present, 1));
      HANDLE_CODE(bref.pack(time_based_cond_ho_r17_present, 1));
      HANDLE_CODE(bref.pack(event_a4_based_cond_ho_r17_present, 1));
      HANDLE_CODE(bref.pack(mn_initiated_cond_pscell_change_nrdc_r17_present, 1));
      HANDLE_CODE(bref.pack(sn_initiated_cond_pscell_change_nrdc_r17_present, 1));
      HANDLE_CODE(bref.pack(pdcch_skipping_without_sssg_r17_present, 1));
      HANDLE_CODE(bref.pack(sssg_switching_1_bit_ind_r17_present, 1));
      HANDLE_CODE(bref.pack(sssg_switching_2_bit_ind_r17_present, 1));
      HANDLE_CODE(bref.pack(pdcch_skipping_with_sssg_r17_present, 1));
      HANDLE_CODE(bref.pack(search_space_set_grp_switch_cap2_r17_present, 1));
      HANDLE_CODE(bref.pack(ul_pre_compensation_r17_present, 1));
      HANDLE_CODE(bref.pack(ul_ta_report_r17_present, 1));
      HANDLE_CODE(bref.pack(max_harq_process_num_r17_present, 1));
      HANDLE_CODE(bref.pack(type2_harq_codebook_r17_present, 1));
      HANDLE_CODE(bref.pack(type1_harq_codebook_r17_present, 1));
      HANDLE_CODE(bref.pack(type3_harq_codebook_r17_present, 1));
      HANDLE_CODE(bref.pack(ue_specific_k_offset_r17_present, 1));
      HANDLE_CODE(bref.pack(multi_pdsch_single_dci_fr2_1_scs_120k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(multi_pusch_single_dci_fr2_1_scs_120k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(parallel_prs_meas_rrc_inactive_r17_present, 1));
      HANDLE_CODE(bref.pack(nr_ue_tx_teg_id_max_support_r17_present, 1));
      HANDLE_CODE(bref.pack(prs_processing_rrc_inactive_r17_present, 1));
      HANDLE_CODE(bref.pack(prs_processing_win_type1_a_r17_present, 1));
      HANDLE_CODE(bref.pack(prs_processing_win_type1_b_r17_present, 1));
      HANDLE_CODE(bref.pack(prs_processing_win_type2_r17_present, 1));
      HANDLE_CODE(bref.pack(srs_all_pos_res_rrc_inactive_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(olpc_srs_pos_rrc_inactive_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(spatial_relations_srs_pos_rrc_inactive_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(max_num_pusch_type_a_repeat_r17_present, 1));
      HANDLE_CODE(bref.pack(pusch_type_a_repeats_avail_slot_r17_present, 1));
      HANDLE_CODE(bref.pack(tb_processing_multi_slot_pusch_r17_present, 1));
      HANDLE_CODE(bref.pack(tb_processing_rep_multi_slot_pusch_r17_present, 1));
      HANDLE_CODE(bref.pack(max_dur_dmrs_bundling_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(pusch_repeat_msg3_r17_present, 1));
      HANDLE_CODE(bref.pack(shared_spec_ch_access_params_per_band_v1710.is_present(), 1));
      HANDLE_CODE(bref.pack(parallel_meas_without_restrict_r17_present, 1));
      HANDLE_CODE(bref.pack(max_num_ngso_satellites_within_one_smtc_r17_present, 1));
      HANDLE_CODE(bref.pack(k1_range_ext_r17_present, 1));
      HANDLE_CODE(bref.pack(aperiodic_csi_rs_fast_scell_activation_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(aperiodic_csi_rs_add_bw_r17_present, 1));
      HANDLE_CODE(bref.pack(bwp_without_cd_ssb_or_ncd_ssb_red_cap_r17_present, 1));
      HANDLE_CODE(bref.pack(half_duplex_fdd_type_a_red_cap_r17_present, 1));
      HANDLE_CODE(bref.pack(pos_srs_rrc_inactive_outside_init_ul_bwp_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(ch_bws_dl_scs_480k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.pack(ch_bws_ul_scs_480k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.pack(ch_bws_dl_scs_960k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.pack(ch_bws_ul_scs_960k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.pack(ul_gap_fr2_r17_present, 1));
      HANDLE_CODE(bref.pack(one_shot_harq_feedback_triggered_by_dci_1_2_r17_present, 1));
      HANDLE_CODE(bref.pack(one_shot_harq_feedback_phy_prio_r17_present, 1));
      HANDLE_CODE(bref.pack(enhanced_type3_harq_codebook_feedback_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(triggered_harq_codebook_retx_r17.is_present(), 1));
      if (ue_pwr_class_v1700_present) {
        HANDLE_CODE(ue_pwr_class_v1700.pack(bref));
      }
      if (fr2_2_access_params_per_band_r17.is_present()) {
        HANDLE_CODE(fr2_2_access_params_per_band_r17->pack(bref));
      }
      if (max_harq_process_num_r17_present) {
        HANDLE_CODE(max_harq_process_num_r17.pack(bref));
      }
      if (nr_ue_tx_teg_id_max_support_r17_present) {
        HANDLE_CODE(nr_ue_tx_teg_id_max_support_r17.pack(bref));
      }
      if (prs_processing_win_type1_a_r17_present) {
        HANDLE_CODE(prs_processing_win_type1_a_r17.pack(bref));
      }
      if (prs_processing_win_type1_b_r17_present) {
        HANDLE_CODE(prs_processing_win_type1_b_r17.pack(bref));
      }
      if (prs_processing_win_type2_r17_present) {
        HANDLE_CODE(prs_processing_win_type2_r17.pack(bref));
      }
      if (srs_all_pos_res_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(srs_all_pos_res_rrc_inactive_r17->pack(bref));
      }
      if (olpc_srs_pos_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(olpc_srs_pos_rrc_inactive_r17->pack(bref));
      }
      if (spatial_relations_srs_pos_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(spatial_relations_srs_pos_rrc_inactive_r17->pack(bref));
      }
      if (max_dur_dmrs_bundling_r17.is_present()) {
        HANDLE_CODE(bref.pack(max_dur_dmrs_bundling_r17->fdd_r17_present, 1));
        HANDLE_CODE(bref.pack(max_dur_dmrs_bundling_r17->tdd_r17_present, 1));
        if (max_dur_dmrs_bundling_r17->fdd_r17_present) {
          HANDLE_CODE(max_dur_dmrs_bundling_r17->fdd_r17.pack(bref));
        }
        if (max_dur_dmrs_bundling_r17->tdd_r17_present) {
          HANDLE_CODE(max_dur_dmrs_bundling_r17->tdd_r17.pack(bref));
        }
      }
      if (shared_spec_ch_access_params_per_band_v1710.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1710->pack(bref));
      }
      if (max_num_ngso_satellites_within_one_smtc_r17_present) {
        HANDLE_CODE(max_num_ngso_satellites_within_one_smtc_r17.pack(bref));
      }
      if (aperiodic_csi_rs_fast_scell_activation_r17.is_present()) {
        HANDLE_CODE(aperiodic_csi_rs_fast_scell_activation_r17->max_num_aperiodic_csi_rs_per_cc_r17.pack(bref));
        HANDLE_CODE(aperiodic_csi_rs_fast_scell_activation_r17->max_num_aperiodic_csi_rs_across_ccs_r17.pack(bref));
      }
      if (aperiodic_csi_rs_add_bw_r17_present) {
        HANDLE_CODE(aperiodic_csi_rs_add_bw_r17.pack(bref));
      }
      if (pos_srs_rrc_inactive_outside_init_ul_bwp_r17.is_present()) {
        HANDLE_CODE(pos_srs_rrc_inactive_outside_init_ul_bwp_r17->pack(bref));
      }
      if (ch_bws_dl_scs_480k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_dl_scs_480k_hz_fr2_2_r17.pack(bref));
      }
      if (ch_bws_ul_scs_480k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_ul_scs_480k_hz_fr2_2_r17.pack(bref));
      }
      if (ch_bws_dl_scs_960k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_dl_scs_960k_hz_fr2_2_r17.pack(bref));
      }
      if (ch_bws_ul_scs_960k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_ul_scs_960k_hz_fr2_2_r17.pack(bref));
      }
      if (enhanced_type3_harq_codebook_feedback_r17.is_present()) {
        HANDLE_CODE(enhanced_type3_harq_codebook_feedback_r17->enhanced_type3_harq_codebooks_r17.pack(bref));
        HANDLE_CODE(enhanced_type3_harq_codebook_feedback_r17->max_num_pucch_txs_r17.pack(bref));
      }
      if (triggered_harq_codebook_retx_r17.is_present()) {
        HANDLE_CODE(triggered_harq_codebook_retx_r17->min_harq_retx_offset_r17.pack(bref));
        HANDLE_CODE(triggered_harq_codebook_retx_r17->max_harq_retx_offset_r17.pack(bref));
      }
    }
    if (group_flags[12]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ue_one_shot_ul_timing_adj_r17_present, 1));
      HANDLE_CODE(bref.pack(pucch_repeat_f0_2_r17_present, 1));
      HANDLE_CODE(bref.pack(cqi_4_bits_subband_ntn_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.pack(mux_harq_ack_diff_priorities_r17_present, 1));
      HANDLE_CODE(bref.pack(ta_based_pdc_ntn_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.pack(ack_nack_feedback_for_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.pack(max_num_g_rnti_r17_present, 1));
      HANDLE_CODE(bref.pack(dyn_multicast_dci_format4_2_r17_present, 1));
      HANDLE_CODE(bref.pack(max_mod_order_for_multicast_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.pack(dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.pack(nack_only_feedback_for_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.pack(ack_nack_feedback_for_sps_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.pack(max_num_g_cs_rnti_r17_present, 1));
      HANDLE_CODE(bref.pack(re_level_rate_matching_for_multicast_r17_present, 1));
      HANDLE_CODE(bref.pack(pdsch_1024_qam_2_mimo_fr1_r17_present, 1));
      HANDLE_CODE(bref.pack(prs_meas_without_mg_r17_present, 1));
      HANDLE_CODE(bref.pack(max_num_leo_satellites_per_carrier_r17_present, 1));
      HANDLE_CODE(bref.pack(prs_processing_cap_outside_m_gin_ppw_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(srs_semi_persistent_pos_res_rrc_inactive_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(ch_bws_dl_scs_120k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.pack(ch_bws_ul_scs_120k_hz_fr2_2_r17_present, 1));
      if (max_num_g_rnti_r17_present) {
        HANDLE_CODE(pack_integer(bref, max_num_g_rnti_r17, (uint8_t)2u, (uint8_t)8u));
      }
      if (max_mod_order_for_multicast_r17.is_present()) {
        HANDLE_CODE(max_mod_order_for_multicast_r17->pack(bref));
      }
      if (dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_present) {
        HANDLE_CODE(dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17.pack(bref));
      }
      if (dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_present) {
        HANDLE_CODE(dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17.pack(bref));
      }
      if (max_num_g_cs_rnti_r17_present) {
        HANDLE_CODE(pack_integer(bref, max_num_g_cs_rnti_r17, (uint8_t)2u, (uint8_t)8u));
      }
      if (prs_meas_without_mg_r17_present) {
        HANDLE_CODE(prs_meas_without_mg_r17.pack(bref));
      }
      if (max_num_leo_satellites_per_carrier_r17_present) {
        HANDLE_CODE(pack_integer(bref, max_num_leo_satellites_per_carrier_r17, (uint8_t)3u, (uint8_t)4u));
      }
      if (prs_processing_cap_outside_m_gin_ppw_r17.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *prs_processing_cap_outside_m_gin_ppw_r17, 1, 3));
      }
      if (srs_semi_persistent_pos_res_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(
            srs_semi_persistent_pos_res_rrc_inactive_r17->max_num_of_semi_persistent_srs_pos_res_r17.pack(bref));
        HANDLE_CODE(
            srs_semi_persistent_pos_res_rrc_inactive_r17->max_num_of_semi_persistent_srs_pos_res_per_slot_r17.pack(
                bref));
      }
      if (ch_bws_dl_scs_120k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_dl_scs_120k_hz_fr2_2_r17.pack(bref));
      }
      if (ch_bws_ul_scs_120k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_ul_scs_120k_hz_fr2_2_r17.pack(bref));
      }
    }
    if (group_flags[13]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dmrs_bundling_pusch_rep_type_a_r17_present, 1));
      HANDLE_CODE(bref.pack(dmrs_bundling_pusch_rep_type_b_r17_present, 1));
      HANDLE_CODE(bref.pack(dmrs_bundling_pusch_multi_slot_r17_present, 1));
      HANDLE_CODE(bref.pack(dmrs_bundling_pucch_rep_r17_present, 1));
      HANDLE_CODE(bref.pack(inter_slot_freq_hop_inter_slot_bundling_pusch_r17_present, 1));
      HANDLE_CODE(bref.pack(inter_slot_freq_hop_pucch_r17_present, 1));
      HANDLE_CODE(bref.pack(dmrs_bundling_restart_r17_present, 1));
      HANDLE_CODE(bref.pack(dmrs_bundling_non_back_to_back_tx_r17_present, 1));
    }
    if (group_flags[14]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_dyn_slot_repeat_for_sps_multicast_r17_present, 1));
      HANDLE_CODE(bref.pack(nack_only_feedback_for_sps_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.pack(sps_multicast_dci_format4_2_r17_present, 1));
      HANDLE_CODE(bref.pack(sps_multicast_multi_cfg_r17_present, 1));
      HANDLE_CODE(bref.pack(prio_ind_in_dci_multicast_r17_present, 1));
      HANDLE_CODE(bref.pack(prio_ind_in_dci_sps_multicast_r17_present, 1));
      HANDLE_CODE(bref.pack(two_harq_ack_codebook_for_unicast_and_multicast_r17_present, 1));
      HANDLE_CODE(bref.pack(multi_pucch_harq_ack_for_multicast_unicast_r17_present, 1));
      HANDLE_CODE(bref.pack(release_sps_multicast_with_cs_rnti_r17_present, 1));
      if (max_dyn_slot_repeat_for_sps_multicast_r17_present) {
        HANDLE_CODE(max_dyn_slot_repeat_for_sps_multicast_r17.pack(bref));
      }
      if (sps_multicast_multi_cfg_r17_present) {
        HANDLE_CODE(pack_integer(bref, sps_multicast_multi_cfg_r17, (uint8_t)1u, (uint8_t)8u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(modified_mpr_behaviour_present, 1));
  HANDLE_CODE(bref.unpack(mimo_params_per_band_present, 1));
  HANDLE_CODE(bref.unpack(extended_cp_present, 1));
  HANDLE_CODE(bref.unpack(multiple_tci_present, 1));
  HANDLE_CODE(bref.unpack(bwp_without_restrict_present, 1));
  HANDLE_CODE(bref.unpack(bwp_same_numerology_present, 1));
  HANDLE_CODE(bref.unpack(bwp_diff_numerology_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_same_scs_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_256_qam_fr2_present, 1));
  HANDLE_CODE(bref.unpack(pusch_256_qam_present, 1));
  HANDLE_CODE(bref.unpack(ue_pwr_class_present, 1));
  HANDLE_CODE(bref.unpack(rate_matching_lte_crs_present, 1));
  HANDLE_CODE(bref.unpack(ch_bws_dl_present, 1));
  HANDLE_CODE(bref.unpack(ch_bws_ul_present, 1));

  HANDLE_CODE(unpack_integer(band_nr, bref, (uint16_t)1u, (uint16_t)1024u));
  if (modified_mpr_behaviour_present) {
    HANDLE_CODE(modified_mpr_behaviour.unpack(bref));
  }
  if (mimo_params_per_band_present) {
    HANDLE_CODE(mimo_params_per_band.unpack(bref));
  }
  if (bwp_same_numerology_present) {
    HANDLE_CODE(bwp_same_numerology.unpack(bref));
  }
  if (ue_pwr_class_present) {
    HANDLE_CODE(ue_pwr_class.unpack(bref));
  }
  if (ch_bws_dl_present) {
    HANDLE_CODE(ch_bws_dl.unpack(bref));
  }
  if (ch_bws_ul_present) {
    HANDLE_CODE(ch_bws_ul.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(15);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_ul_duty_cycle_pc2_fr1_present, 1));
      if (max_ul_duty_cycle_pc2_fr1_present) {
        HANDLE_CODE(max_ul_duty_cycle_pc2_fr1.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(pucch_spatial_rel_info_mac_ce_present, 1));
      HANDLE_CODE(bref.unpack(pwr_boosting_pi2_bpsk_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_ul_duty_cycle_fr2_present, 1));
      if (max_ul_duty_cycle_fr2_present) {
        HANDLE_CODE(max_ul_duty_cycle_fr2.unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(ch_bws_dl_v1590, bref);
      unpack_presence_flag(ch_bws_ul_v1590, bref);
      if (ch_bws_dl_v1590.is_present()) {
        HANDLE_CODE(ch_bws_dl_v1590->unpack(bref));
      }
      if (ch_bws_ul_v1590.is_present()) {
        HANDLE_CODE(ch_bws_ul_v1590->unpack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(asymmetric_bw_combination_set_present, 1));
      if (asymmetric_bw_combination_set_present) {
        HANDLE_CODE(asymmetric_bw_combination_set.unpack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(shared_spec_ch_access_params_per_band_r16, bref);
      HANDLE_CODE(bref.unpack(cancel_overlapping_pusch_r16_present, 1));
      unpack_presence_flag(multiple_rate_matching_eutra_crs_r16, bref);
      HANDLE_CODE(bref.unpack(overlap_rate_matching_eutra_crs_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_map_type_b_alt_r16_present, 1));
      HANDLE_CODE(bref.unpack(one_slot_periodic_trs_r16_present, 1));
      unpack_presence_flag(olpc_srs_pos_r16, bref);
      unpack_presence_flag(spatial_relations_srs_pos_r16, bref);
      HANDLE_CODE(bref.unpack(simul_srs_mimo_trans_within_band_r16_present, 1));
      unpack_presence_flag(ch_bw_dl_iab_r16, bref);
      unpack_presence_flag(ch_bw_ul_iab_r16, bref);
      HANDLE_CODE(bref.unpack(raster_shift7dot5_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(ue_pwr_class_v1610_present, 1));
      HANDLE_CODE(bref.unpack(cond_ho_r16_present, 1));
      HANDLE_CODE(bref.unpack(cond_ho_fail_r16_present, 1));
      HANDLE_CODE(bref.unpack(cond_ho_two_trigger_events_r16_present, 1));
      HANDLE_CODE(bref.unpack(cond_pscell_change_r16_present, 1));
      HANDLE_CODE(bref.unpack(cond_pscell_change_two_trigger_events_r16_present, 1));
      HANDLE_CODE(bref.unpack(mpr_pwr_boost_fr2_r16_present, 1));
      unpack_presence_flag(active_cfg_grant_r16, bref);
      HANDLE_CODE(bref.unpack(joint_release_cfg_grant_type2_r16_present, 1));
      unpack_presence_flag(sps_r16, bref);
      HANDLE_CODE(bref.unpack(joint_release_sps_r16_present, 1));
      HANDLE_CODE(bref.unpack(simul_srs_trans_within_band_r16_present, 1));
      HANDLE_CODE(bref.unpack(trs_add_bw_r16_present, 1));
      HANDLE_CODE(bref.unpack(ho_intra_f_iab_r16_present, 1));
      if (shared_spec_ch_access_params_per_band_r16.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_r16->unpack(bref));
      }
      if (multiple_rate_matching_eutra_crs_r16.is_present()) {
        HANDLE_CODE(
            unpack_integer(multiple_rate_matching_eutra_crs_r16->max_num_patterns_r16, bref, (uint8_t)2u, (uint8_t)6u));
        HANDLE_CODE(unpack_integer(
            multiple_rate_matching_eutra_crs_r16->max_num_non_overlap_patterns_r16, bref, (uint8_t)1u, (uint8_t)3u));
      }
      if (olpc_srs_pos_r16.is_present()) {
        HANDLE_CODE(olpc_srs_pos_r16->unpack(bref));
      }
      if (spatial_relations_srs_pos_r16.is_present()) {
        HANDLE_CODE(spatial_relations_srs_pos_r16->unpack(bref));
      }
      if (ch_bw_dl_iab_r16.is_present()) {
        HANDLE_CODE(ch_bw_dl_iab_r16->unpack(bref));
      }
      if (ch_bw_ul_iab_r16.is_present()) {
        HANDLE_CODE(ch_bw_ul_iab_r16->unpack(bref));
      }
      if (active_cfg_grant_r16.is_present()) {
        HANDLE_CODE(active_cfg_grant_r16->max_num_cfgs_per_bwp_r16.unpack(bref));
        HANDLE_CODE(unpack_integer(active_cfg_grant_r16->max_num_cfgs_all_cc_r16, bref, (uint8_t)2u, (uint8_t)32u));
      }
      if (sps_r16.is_present()) {
        HANDLE_CODE(unpack_integer(sps_r16->max_num_cfgs_per_bwp_r16, bref, (uint8_t)1u, (uint8_t)8u));
        HANDLE_CODE(unpack_integer(sps_r16->max_num_cfgs_all_cc_r16, bref, (uint8_t)2u, (uint8_t)32u));
      }
      if (trs_add_bw_r16_present) {
        HANDLE_CODE(trs_add_bw_r16.unpack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(simul_tx_srs_ant_switching_intra_band_ul_ca_r16, bref);
      unpack_presence_flag(shared_spec_ch_access_params_per_band_v1630, bref);
      if (simul_tx_srs_ant_switching_intra_band_ul_ca_r16.is_present()) {
        HANDLE_CODE(simul_tx_srs_ant_switching_intra_band_ul_ca_r16->unpack(bref));
      }
      if (shared_spec_ch_access_params_per_band_v1630.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1630->unpack(bref));
      }
    }
    if (group_flags[7]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ho_utra_fdd_r16_present, 1));
      HANDLE_CODE(bref.unpack(enhanced_ul_transient_period_r16_present, 1));
      unpack_presence_flag(shared_spec_ch_access_params_per_band_v1640, bref);
      if (enhanced_ul_transient_period_r16_present) {
        HANDLE_CODE(enhanced_ul_transient_period_r16.unpack(bref));
      }
      if (shared_spec_ch_access_params_per_band_v1640.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1640->unpack(bref));
      }
    }
    if (group_flags[8]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(type1_pusch_repeat_multi_slots_v1650_present, 1));
      HANDLE_CODE(bref.unpack(type2_pusch_repeat_multi_slots_v1650_present, 1));
      HANDLE_CODE(bref.unpack(pusch_repeat_multi_slots_v1650_present, 1));
      HANDLE_CODE(bref.unpack(cfg_ul_grant_type1_v1650_present, 1));
      HANDLE_CODE(bref.unpack(cfg_ul_grant_type2_v1650_present, 1));
      unpack_presence_flag(shared_spec_ch_access_params_per_band_v1650, bref);
      if (shared_spec_ch_access_params_per_band_v1650.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1650->unpack(bref));
      }
    }
    if (group_flags[9]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(enhanced_skip_ul_tx_cfg_v1660_present, 1));
      HANDLE_CODE(bref.unpack(enhanced_skip_ul_tx_dyn_v1660_present, 1));
    }
    if (group_flags[10]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_present, 1));
      HANDLE_CODE(bref.unpack(tx_diversity_r16_present, 1));
      if (max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_present) {
        HANDLE_CODE(max_ul_duty_cycle_pc1dot5_mpe_fr1_r16.unpack(bref));
      }
    }
    if (group_flags[11]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(pdsch_1024_qam_fr1_r17_present, 1));
      HANDLE_CODE(bref.unpack(ue_pwr_class_v1700_present, 1));
      unpack_presence_flag(fr2_2_access_params_per_band_r17, bref);
      HANDLE_CODE(bref.unpack(rlm_relaxation_r17_present, 1));
      HANDLE_CODE(bref.unpack(bfd_relaxation_r17_present, 1));
      HANDLE_CODE(bref.unpack(cg_sdt_r17_present, 1));
      HANDLE_CODE(bref.unpack(location_based_cond_ho_r17_present, 1));
      HANDLE_CODE(bref.unpack(time_based_cond_ho_r17_present, 1));
      HANDLE_CODE(bref.unpack(event_a4_based_cond_ho_r17_present, 1));
      HANDLE_CODE(bref.unpack(mn_initiated_cond_pscell_change_nrdc_r17_present, 1));
      HANDLE_CODE(bref.unpack(sn_initiated_cond_pscell_change_nrdc_r17_present, 1));
      HANDLE_CODE(bref.unpack(pdcch_skipping_without_sssg_r17_present, 1));
      HANDLE_CODE(bref.unpack(sssg_switching_1_bit_ind_r17_present, 1));
      HANDLE_CODE(bref.unpack(sssg_switching_2_bit_ind_r17_present, 1));
      HANDLE_CODE(bref.unpack(pdcch_skipping_with_sssg_r17_present, 1));
      HANDLE_CODE(bref.unpack(search_space_set_grp_switch_cap2_r17_present, 1));
      HANDLE_CODE(bref.unpack(ul_pre_compensation_r17_present, 1));
      HANDLE_CODE(bref.unpack(ul_ta_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(max_harq_process_num_r17_present, 1));
      HANDLE_CODE(bref.unpack(type2_harq_codebook_r17_present, 1));
      HANDLE_CODE(bref.unpack(type1_harq_codebook_r17_present, 1));
      HANDLE_CODE(bref.unpack(type3_harq_codebook_r17_present, 1));
      HANDLE_CODE(bref.unpack(ue_specific_k_offset_r17_present, 1));
      HANDLE_CODE(bref.unpack(multi_pdsch_single_dci_fr2_1_scs_120k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(multi_pusch_single_dci_fr2_1_scs_120k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(parallel_prs_meas_rrc_inactive_r17_present, 1));
      HANDLE_CODE(bref.unpack(nr_ue_tx_teg_id_max_support_r17_present, 1));
      HANDLE_CODE(bref.unpack(prs_processing_rrc_inactive_r17_present, 1));
      HANDLE_CODE(bref.unpack(prs_processing_win_type1_a_r17_present, 1));
      HANDLE_CODE(bref.unpack(prs_processing_win_type1_b_r17_present, 1));
      HANDLE_CODE(bref.unpack(prs_processing_win_type2_r17_present, 1));
      unpack_presence_flag(srs_all_pos_res_rrc_inactive_r17, bref);
      unpack_presence_flag(olpc_srs_pos_rrc_inactive_r17, bref);
      unpack_presence_flag(spatial_relations_srs_pos_rrc_inactive_r17, bref);
      HANDLE_CODE(bref.unpack(max_num_pusch_type_a_repeat_r17_present, 1));
      HANDLE_CODE(bref.unpack(pusch_type_a_repeats_avail_slot_r17_present, 1));
      HANDLE_CODE(bref.unpack(tb_processing_multi_slot_pusch_r17_present, 1));
      HANDLE_CODE(bref.unpack(tb_processing_rep_multi_slot_pusch_r17_present, 1));
      unpack_presence_flag(max_dur_dmrs_bundling_r17, bref);
      HANDLE_CODE(bref.unpack(pusch_repeat_msg3_r17_present, 1));
      unpack_presence_flag(shared_spec_ch_access_params_per_band_v1710, bref);
      HANDLE_CODE(bref.unpack(parallel_meas_without_restrict_r17_present, 1));
      HANDLE_CODE(bref.unpack(max_num_ngso_satellites_within_one_smtc_r17_present, 1));
      HANDLE_CODE(bref.unpack(k1_range_ext_r17_present, 1));
      unpack_presence_flag(aperiodic_csi_rs_fast_scell_activation_r17, bref);
      HANDLE_CODE(bref.unpack(aperiodic_csi_rs_add_bw_r17_present, 1));
      HANDLE_CODE(bref.unpack(bwp_without_cd_ssb_or_ncd_ssb_red_cap_r17_present, 1));
      HANDLE_CODE(bref.unpack(half_duplex_fdd_type_a_red_cap_r17_present, 1));
      unpack_presence_flag(pos_srs_rrc_inactive_outside_init_ul_bwp_r17, bref);
      HANDLE_CODE(bref.unpack(ch_bws_dl_scs_480k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(ch_bws_ul_scs_480k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(ch_bws_dl_scs_960k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(ch_bws_ul_scs_960k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(ul_gap_fr2_r17_present, 1));
      HANDLE_CODE(bref.unpack(one_shot_harq_feedback_triggered_by_dci_1_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(one_shot_harq_feedback_phy_prio_r17_present, 1));
      unpack_presence_flag(enhanced_type3_harq_codebook_feedback_r17, bref);
      unpack_presence_flag(triggered_harq_codebook_retx_r17, bref);
      if (ue_pwr_class_v1700_present) {
        HANDLE_CODE(ue_pwr_class_v1700.unpack(bref));
      }
      if (fr2_2_access_params_per_band_r17.is_present()) {
        HANDLE_CODE(fr2_2_access_params_per_band_r17->unpack(bref));
      }
      if (max_harq_process_num_r17_present) {
        HANDLE_CODE(max_harq_process_num_r17.unpack(bref));
      }
      if (nr_ue_tx_teg_id_max_support_r17_present) {
        HANDLE_CODE(nr_ue_tx_teg_id_max_support_r17.unpack(bref));
      }
      if (prs_processing_win_type1_a_r17_present) {
        HANDLE_CODE(prs_processing_win_type1_a_r17.unpack(bref));
      }
      if (prs_processing_win_type1_b_r17_present) {
        HANDLE_CODE(prs_processing_win_type1_b_r17.unpack(bref));
      }
      if (prs_processing_win_type2_r17_present) {
        HANDLE_CODE(prs_processing_win_type2_r17.unpack(bref));
      }
      if (srs_all_pos_res_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(srs_all_pos_res_rrc_inactive_r17->unpack(bref));
      }
      if (olpc_srs_pos_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(olpc_srs_pos_rrc_inactive_r17->unpack(bref));
      }
      if (spatial_relations_srs_pos_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(spatial_relations_srs_pos_rrc_inactive_r17->unpack(bref));
      }
      if (max_dur_dmrs_bundling_r17.is_present()) {
        HANDLE_CODE(bref.unpack(max_dur_dmrs_bundling_r17->fdd_r17_present, 1));
        HANDLE_CODE(bref.unpack(max_dur_dmrs_bundling_r17->tdd_r17_present, 1));
        if (max_dur_dmrs_bundling_r17->fdd_r17_present) {
          HANDLE_CODE(max_dur_dmrs_bundling_r17->fdd_r17.unpack(bref));
        }
        if (max_dur_dmrs_bundling_r17->tdd_r17_present) {
          HANDLE_CODE(max_dur_dmrs_bundling_r17->tdd_r17.unpack(bref));
        }
      }
      if (shared_spec_ch_access_params_per_band_v1710.is_present()) {
        HANDLE_CODE(shared_spec_ch_access_params_per_band_v1710->unpack(bref));
      }
      if (max_num_ngso_satellites_within_one_smtc_r17_present) {
        HANDLE_CODE(max_num_ngso_satellites_within_one_smtc_r17.unpack(bref));
      }
      if (aperiodic_csi_rs_fast_scell_activation_r17.is_present()) {
        HANDLE_CODE(aperiodic_csi_rs_fast_scell_activation_r17->max_num_aperiodic_csi_rs_per_cc_r17.unpack(bref));
        HANDLE_CODE(aperiodic_csi_rs_fast_scell_activation_r17->max_num_aperiodic_csi_rs_across_ccs_r17.unpack(bref));
      }
      if (aperiodic_csi_rs_add_bw_r17_present) {
        HANDLE_CODE(aperiodic_csi_rs_add_bw_r17.unpack(bref));
      }
      if (pos_srs_rrc_inactive_outside_init_ul_bwp_r17.is_present()) {
        HANDLE_CODE(pos_srs_rrc_inactive_outside_init_ul_bwp_r17->unpack(bref));
      }
      if (ch_bws_dl_scs_480k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_dl_scs_480k_hz_fr2_2_r17.unpack(bref));
      }
      if (ch_bws_ul_scs_480k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_ul_scs_480k_hz_fr2_2_r17.unpack(bref));
      }
      if (ch_bws_dl_scs_960k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_dl_scs_960k_hz_fr2_2_r17.unpack(bref));
      }
      if (ch_bws_ul_scs_960k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_ul_scs_960k_hz_fr2_2_r17.unpack(bref));
      }
      if (enhanced_type3_harq_codebook_feedback_r17.is_present()) {
        HANDLE_CODE(enhanced_type3_harq_codebook_feedback_r17->enhanced_type3_harq_codebooks_r17.unpack(bref));
        HANDLE_CODE(enhanced_type3_harq_codebook_feedback_r17->max_num_pucch_txs_r17.unpack(bref));
      }
      if (triggered_harq_codebook_retx_r17.is_present()) {
        HANDLE_CODE(triggered_harq_codebook_retx_r17->min_harq_retx_offset_r17.unpack(bref));
        HANDLE_CODE(triggered_harq_codebook_retx_r17->max_harq_retx_offset_r17.unpack(bref));
      }
    }
    if (group_flags[12]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ue_one_shot_ul_timing_adj_r17_present, 1));
      HANDLE_CODE(bref.unpack(pucch_repeat_f0_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(cqi_4_bits_subband_ntn_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.unpack(mux_harq_ack_diff_priorities_r17_present, 1));
      HANDLE_CODE(bref.unpack(ta_based_pdc_ntn_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.unpack(ack_nack_feedback_for_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.unpack(max_num_g_rnti_r17_present, 1));
      HANDLE_CODE(bref.unpack(dyn_multicast_dci_format4_2_r17_present, 1));
      unpack_presence_flag(max_mod_order_for_multicast_r17, bref);
      HANDLE_CODE(bref.unpack(dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.unpack(dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.unpack(nack_only_feedback_for_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.unpack(ack_nack_feedback_for_sps_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.unpack(max_num_g_cs_rnti_r17_present, 1));
      HANDLE_CODE(bref.unpack(re_level_rate_matching_for_multicast_r17_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_1024_qam_2_mimo_fr1_r17_present, 1));
      HANDLE_CODE(bref.unpack(prs_meas_without_mg_r17_present, 1));
      HANDLE_CODE(bref.unpack(max_num_leo_satellites_per_carrier_r17_present, 1));
      unpack_presence_flag(prs_processing_cap_outside_m_gin_ppw_r17, bref);
      unpack_presence_flag(srs_semi_persistent_pos_res_rrc_inactive_r17, bref);
      HANDLE_CODE(bref.unpack(ch_bws_dl_scs_120k_hz_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(ch_bws_ul_scs_120k_hz_fr2_2_r17_present, 1));
      if (max_num_g_rnti_r17_present) {
        HANDLE_CODE(unpack_integer(max_num_g_rnti_r17, bref, (uint8_t)2u, (uint8_t)8u));
      }
      if (max_mod_order_for_multicast_r17.is_present()) {
        HANDLE_CODE(max_mod_order_for_multicast_r17->unpack(bref));
      }
      if (dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_present) {
        HANDLE_CODE(dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17.unpack(bref));
      }
      if (dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_present) {
        HANDLE_CODE(dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17.unpack(bref));
      }
      if (max_num_g_cs_rnti_r17_present) {
        HANDLE_CODE(unpack_integer(max_num_g_cs_rnti_r17, bref, (uint8_t)2u, (uint8_t)8u));
      }
      if (prs_meas_without_mg_r17_present) {
        HANDLE_CODE(prs_meas_without_mg_r17.unpack(bref));
      }
      if (max_num_leo_satellites_per_carrier_r17_present) {
        HANDLE_CODE(unpack_integer(max_num_leo_satellites_per_carrier_r17, bref, (uint8_t)3u, (uint8_t)4u));
      }
      if (prs_processing_cap_outside_m_gin_ppw_r17.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*prs_processing_cap_outside_m_gin_ppw_r17, bref, 1, 3));
      }
      if (srs_semi_persistent_pos_res_rrc_inactive_r17.is_present()) {
        HANDLE_CODE(
            srs_semi_persistent_pos_res_rrc_inactive_r17->max_num_of_semi_persistent_srs_pos_res_r17.unpack(bref));
        HANDLE_CODE(
            srs_semi_persistent_pos_res_rrc_inactive_r17->max_num_of_semi_persistent_srs_pos_res_per_slot_r17.unpack(
                bref));
      }
      if (ch_bws_dl_scs_120k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_dl_scs_120k_hz_fr2_2_r17.unpack(bref));
      }
      if (ch_bws_ul_scs_120k_hz_fr2_2_r17_present) {
        HANDLE_CODE(ch_bws_ul_scs_120k_hz_fr2_2_r17.unpack(bref));
      }
    }
    if (group_flags[13]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dmrs_bundling_pusch_rep_type_a_r17_present, 1));
      HANDLE_CODE(bref.unpack(dmrs_bundling_pusch_rep_type_b_r17_present, 1));
      HANDLE_CODE(bref.unpack(dmrs_bundling_pusch_multi_slot_r17_present, 1));
      HANDLE_CODE(bref.unpack(dmrs_bundling_pucch_rep_r17_present, 1));
      HANDLE_CODE(bref.unpack(inter_slot_freq_hop_inter_slot_bundling_pusch_r17_present, 1));
      HANDLE_CODE(bref.unpack(inter_slot_freq_hop_pucch_r17_present, 1));
      HANDLE_CODE(bref.unpack(dmrs_bundling_restart_r17_present, 1));
      HANDLE_CODE(bref.unpack(dmrs_bundling_non_back_to_back_tx_r17_present, 1));
    }
    if (group_flags[14]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_dyn_slot_repeat_for_sps_multicast_r17_present, 1));
      HANDLE_CODE(bref.unpack(nack_only_feedback_for_sps_multicast_with_dci_enabler_r17_present, 1));
      HANDLE_CODE(bref.unpack(sps_multicast_dci_format4_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(sps_multicast_multi_cfg_r17_present, 1));
      HANDLE_CODE(bref.unpack(prio_ind_in_dci_multicast_r17_present, 1));
      HANDLE_CODE(bref.unpack(prio_ind_in_dci_sps_multicast_r17_present, 1));
      HANDLE_CODE(bref.unpack(two_harq_ack_codebook_for_unicast_and_multicast_r17_present, 1));
      HANDLE_CODE(bref.unpack(multi_pucch_harq_ack_for_multicast_unicast_r17_present, 1));
      HANDLE_CODE(bref.unpack(release_sps_multicast_with_cs_rnti_r17_present, 1));
      if (max_dyn_slot_repeat_for_sps_multicast_r17_present) {
        HANDLE_CODE(max_dyn_slot_repeat_for_sps_multicast_r17.unpack(bref));
      }
      if (sps_multicast_multi_cfg_r17_present) {
        HANDLE_CODE(unpack_integer(sps_multicast_multi_cfg_r17, bref, (uint8_t)1u, (uint8_t)8u));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void band_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandNR", band_nr);
  if (modified_mpr_behaviour_present) {
    j.write_str("modifiedMPR-Behaviour", modified_mpr_behaviour.to_string());
  }
  if (mimo_params_per_band_present) {
    j.write_fieldname("mimo-ParametersPerBand");
    mimo_params_per_band.to_json(j);
  }
  if (extended_cp_present) {
    j.write_str("extendedCP", "supported");
  }
  if (multiple_tci_present) {
    j.write_str("multipleTCI", "supported");
  }
  if (bwp_without_restrict_present) {
    j.write_str("bwp-WithoutRestriction", "supported");
  }
  if (bwp_same_numerology_present) {
    j.write_str("bwp-SameNumerology", bwp_same_numerology.to_string());
  }
  if (bwp_diff_numerology_present) {
    j.write_str("bwp-DiffNumerology", "upto4");
  }
  if (cross_carrier_sched_same_scs_present) {
    j.write_str("crossCarrierScheduling-SameSCS", "supported");
  }
  if (pdsch_256_qam_fr2_present) {
    j.write_str("pdsch-256QAM-FR2", "supported");
  }
  if (pusch_256_qam_present) {
    j.write_str("pusch-256QAM", "supported");
  }
  if (ue_pwr_class_present) {
    j.write_str("ue-PowerClass", ue_pwr_class.to_string());
  }
  if (rate_matching_lte_crs_present) {
    j.write_str("rateMatchingLTE-CRS", "supported");
  }
  if (ch_bws_dl_present) {
    j.write_fieldname("channelBWs-DL");
    ch_bws_dl.to_json(j);
  }
  if (ch_bws_ul_present) {
    j.write_fieldname("channelBWs-UL");
    ch_bws_ul.to_json(j);
  }
  if (ext) {
    if (max_ul_duty_cycle_pc2_fr1_present) {
      j.write_str("maxUplinkDutyCycle-PC2-FR1", max_ul_duty_cycle_pc2_fr1.to_string());
    }
    if (pucch_spatial_rel_info_mac_ce_present) {
      j.write_str("pucch-SpatialRelInfoMAC-CE", "supported");
    }
    if (pwr_boosting_pi2_bpsk_present) {
      j.write_str("powerBoosting-pi2BPSK", "supported");
    }
    if (max_ul_duty_cycle_fr2_present) {
      j.write_str("maxUplinkDutyCycle-FR2", max_ul_duty_cycle_fr2.to_string());
    }
    if (ch_bws_dl_v1590.is_present()) {
      j.write_fieldname("channelBWs-DL-v1590");
      ch_bws_dl_v1590->to_json(j);
    }
    if (ch_bws_ul_v1590.is_present()) {
      j.write_fieldname("channelBWs-UL-v1590");
      ch_bws_ul_v1590->to_json(j);
    }
    if (asymmetric_bw_combination_set_present) {
      j.write_str("asymmetricBandwidthCombinationSet", asymmetric_bw_combination_set.to_string());
    }
    if (shared_spec_ch_access_params_per_band_r16.is_present()) {
      j.write_fieldname("sharedSpectrumChAccessParamsPerBand-r16");
      shared_spec_ch_access_params_per_band_r16->to_json(j);
    }
    if (cancel_overlapping_pusch_r16_present) {
      j.write_str("cancelOverlappingPUSCH-r16", "supported");
    }
    if (multiple_rate_matching_eutra_crs_r16.is_present()) {
      j.write_fieldname("multipleRateMatchingEUTRA-CRS-r16");
      j.start_obj();
      j.write_int("maxNumberPatterns-r16", multiple_rate_matching_eutra_crs_r16->max_num_patterns_r16);
      j.write_int("maxNumberNon-OverlapPatterns-r16",
                  multiple_rate_matching_eutra_crs_r16->max_num_non_overlap_patterns_r16);
      j.end_obj();
    }
    if (overlap_rate_matching_eutra_crs_r16_present) {
      j.write_str("overlapRateMatchingEUTRA-CRS-r16", "supported");
    }
    if (pdsch_map_type_b_alt_r16_present) {
      j.write_str("pdsch-MappingTypeB-Alt-r16", "supported");
    }
    if (one_slot_periodic_trs_r16_present) {
      j.write_str("oneSlotPeriodicTRS-r16", "supported");
    }
    if (olpc_srs_pos_r16.is_present()) {
      j.write_fieldname("olpc-SRS-Pos-r16");
      olpc_srs_pos_r16->to_json(j);
    }
    if (spatial_relations_srs_pos_r16.is_present()) {
      j.write_fieldname("spatialRelationsSRS-Pos-r16");
      spatial_relations_srs_pos_r16->to_json(j);
    }
    if (simul_srs_mimo_trans_within_band_r16_present) {
      j.write_str("simulSRS-MIMO-TransWithinBand-r16", "n2");
    }
    if (ch_bw_dl_iab_r16.is_present()) {
      j.write_fieldname("channelBW-DL-IAB-r16");
      ch_bw_dl_iab_r16->to_json(j);
    }
    if (ch_bw_ul_iab_r16.is_present()) {
      j.write_fieldname("channelBW-UL-IAB-r16");
      ch_bw_ul_iab_r16->to_json(j);
    }
    if (raster_shift7dot5_iab_r16_present) {
      j.write_str("rasterShift7dot5-IAB-r16", "supported");
    }
    if (ue_pwr_class_v1610_present) {
      j.write_str("ue-PowerClass-v1610", "pc1dot5");
    }
    if (cond_ho_r16_present) {
      j.write_str("condHandover-r16", "supported");
    }
    if (cond_ho_fail_r16_present) {
      j.write_str("condHandoverFailure-r16", "supported");
    }
    if (cond_ho_two_trigger_events_r16_present) {
      j.write_str("condHandoverTwoTriggerEvents-r16", "supported");
    }
    if (cond_pscell_change_r16_present) {
      j.write_str("condPSCellChange-r16", "supported");
    }
    if (cond_pscell_change_two_trigger_events_r16_present) {
      j.write_str("condPSCellChangeTwoTriggerEvents-r16", "supported");
    }
    if (mpr_pwr_boost_fr2_r16_present) {
      j.write_str("mpr-PowerBoost-FR2-r16", "supported");
    }
    if (active_cfg_grant_r16.is_present()) {
      j.write_fieldname("activeConfiguredGrant-r16");
      j.start_obj();
      j.write_str("maxNumberConfigsPerBWP-r16", active_cfg_grant_r16->max_num_cfgs_per_bwp_r16.to_string());
      j.write_int("maxNumberConfigsAllCC-r16", active_cfg_grant_r16->max_num_cfgs_all_cc_r16);
      j.end_obj();
    }
    if (joint_release_cfg_grant_type2_r16_present) {
      j.write_str("jointReleaseConfiguredGrantType2-r16", "supported");
    }
    if (sps_r16.is_present()) {
      j.write_fieldname("sps-r16");
      j.start_obj();
      j.write_int("maxNumberConfigsPerBWP-r16", sps_r16->max_num_cfgs_per_bwp_r16);
      j.write_int("maxNumberConfigsAllCC-r16", sps_r16->max_num_cfgs_all_cc_r16);
      j.end_obj();
    }
    if (joint_release_sps_r16_present) {
      j.write_str("jointReleaseSPS-r16", "supported");
    }
    if (simul_srs_trans_within_band_r16_present) {
      j.write_str("simulSRS-TransWithinBand-r16", "n2");
    }
    if (trs_add_bw_r16_present) {
      j.write_str("trs-AdditionalBandwidth-r16", trs_add_bw_r16.to_string());
    }
    if (ho_intra_f_iab_r16_present) {
      j.write_str("handoverIntraF-IAB-r16", "supported");
    }
    if (simul_tx_srs_ant_switching_intra_band_ul_ca_r16.is_present()) {
      j.write_fieldname("simulTX-SRS-AntSwitchingIntraBandUL-CA-r16");
      simul_tx_srs_ant_switching_intra_band_ul_ca_r16->to_json(j);
    }
    if (shared_spec_ch_access_params_per_band_v1630.is_present()) {
      j.write_fieldname("sharedSpectrumChAccessParamsPerBand-v1630");
      shared_spec_ch_access_params_per_band_v1630->to_json(j);
    }
    if (ho_utra_fdd_r16_present) {
      j.write_str("handoverUTRA-FDD-r16", "supported");
    }
    if (enhanced_ul_transient_period_r16_present) {
      j.write_str("enhancedUL-TransientPeriod-r16", enhanced_ul_transient_period_r16.to_string());
    }
    if (shared_spec_ch_access_params_per_band_v1640.is_present()) {
      j.write_fieldname("sharedSpectrumChAccessParamsPerBand-v1640");
      shared_spec_ch_access_params_per_band_v1640->to_json(j);
    }
    if (type1_pusch_repeat_multi_slots_v1650_present) {
      j.write_str("type1-PUSCH-RepetitionMultiSlots-v1650", "supported");
    }
    if (type2_pusch_repeat_multi_slots_v1650_present) {
      j.write_str("type2-PUSCH-RepetitionMultiSlots-v1650", "supported");
    }
    if (pusch_repeat_multi_slots_v1650_present) {
      j.write_str("pusch-RepetitionMultiSlots-v1650", "supported");
    }
    if (cfg_ul_grant_type1_v1650_present) {
      j.write_str("configuredUL-GrantType1-v1650", "supported");
    }
    if (cfg_ul_grant_type2_v1650_present) {
      j.write_str("configuredUL-GrantType2-v1650", "supported");
    }
    if (shared_spec_ch_access_params_per_band_v1650.is_present()) {
      j.write_fieldname("sharedSpectrumChAccessParamsPerBand-v1650");
      shared_spec_ch_access_params_per_band_v1650->to_json(j);
    }
    if (enhanced_skip_ul_tx_cfg_v1660_present) {
      j.write_str("enhancedSkipUplinkTxConfigured-v1660", "supported");
    }
    if (enhanced_skip_ul_tx_dyn_v1660_present) {
      j.write_str("enhancedSkipUplinkTxDynamic-v1660", "supported");
    }
    if (max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_present) {
      j.write_str("maxUplinkDutyCycle-PC1dot5-MPE-FR1-r16", max_ul_duty_cycle_pc1dot5_mpe_fr1_r16.to_string());
    }
    if (tx_diversity_r16_present) {
      j.write_str("txDiversity-r16", "supported");
    }
    if (pdsch_1024_qam_fr1_r17_present) {
      j.write_str("pdsch-1024QAM-FR1-r17", "supported");
    }
    if (ue_pwr_class_v1700_present) {
      j.write_str("ue-PowerClass-v1700", ue_pwr_class_v1700.to_string());
    }
    if (fr2_2_access_params_per_band_r17.is_present()) {
      j.write_fieldname("fr2-2-AccessParamsPerBand-r17");
      fr2_2_access_params_per_band_r17->to_json(j);
    }
    if (rlm_relaxation_r17_present) {
      j.write_str("rlm-Relaxation-r17", "supported");
    }
    if (bfd_relaxation_r17_present) {
      j.write_str("bfd-Relaxation-r17", "supported");
    }
    if (cg_sdt_r17_present) {
      j.write_str("cg-SDT-r17", "supported");
    }
    if (location_based_cond_ho_r17_present) {
      j.write_str("locationBasedCondHandover-r17", "supported");
    }
    if (time_based_cond_ho_r17_present) {
      j.write_str("timeBasedCondHandover-r17", "supported");
    }
    if (event_a4_based_cond_ho_r17_present) {
      j.write_str("eventA4BasedCondHandover-r17", "supported");
    }
    if (mn_initiated_cond_pscell_change_nrdc_r17_present) {
      j.write_str("mn-InitiatedCondPSCellChangeNRDC-r17", "supported");
    }
    if (sn_initiated_cond_pscell_change_nrdc_r17_present) {
      j.write_str("sn-InitiatedCondPSCellChangeNRDC-r17", "supported");
    }
    if (pdcch_skipping_without_sssg_r17_present) {
      j.write_str("pdcch-SkippingWithoutSSSG-r17", "supported");
    }
    if (sssg_switching_1_bit_ind_r17_present) {
      j.write_str("sssg-Switching-1BitInd-r17", "supported");
    }
    if (sssg_switching_2_bit_ind_r17_present) {
      j.write_str("sssg-Switching-2BitInd-r17", "supported");
    }
    if (pdcch_skipping_with_sssg_r17_present) {
      j.write_str("pdcch-SkippingWithSSSG-r17", "supported");
    }
    if (search_space_set_grp_switch_cap2_r17_present) {
      j.write_str("searchSpaceSetGrp-switchCap2-r17", "supported");
    }
    if (ul_pre_compensation_r17_present) {
      j.write_str("uplinkPreCompensation-r17", "supported");
    }
    if (ul_ta_report_r17_present) {
      j.write_str("uplink-TA-Reporting-r17", "supported");
    }
    if (max_harq_process_num_r17_present) {
      j.write_str("max-HARQ-ProcessNumber-r17", max_harq_process_num_r17.to_string());
    }
    if (type2_harq_codebook_r17_present) {
      j.write_str("type2-HARQ-Codebook-r17", "supported");
    }
    if (type1_harq_codebook_r17_present) {
      j.write_str("type1-HARQ-Codebook-r17", "supported");
    }
    if (type3_harq_codebook_r17_present) {
      j.write_str("type3-HARQ-Codebook-r17", "supported");
    }
    if (ue_specific_k_offset_r17_present) {
      j.write_str("ue-specific-K-Offset-r17", "supported");
    }
    if (multi_pdsch_single_dci_fr2_1_scs_120k_hz_r17_present) {
      j.write_str("multiPDSCH-SingleDCI-FR2-1-SCS-120kHz-r17", "supported");
    }
    if (multi_pusch_single_dci_fr2_1_scs_120k_hz_r17_present) {
      j.write_str("multiPUSCH-SingleDCI-FR2-1-SCS-120kHz-r17", "supported");
    }
    if (parallel_prs_meas_rrc_inactive_r17_present) {
      j.write_str("parallelPRS-MeasRRC-Inactive-r17", "supported");
    }
    if (nr_ue_tx_teg_id_max_support_r17_present) {
      j.write_str("nr-UE-TxTEG-ID-MaxSupport-r17", nr_ue_tx_teg_id_max_support_r17.to_string());
    }
    if (prs_processing_rrc_inactive_r17_present) {
      j.write_str("prs-ProcessingRRC-Inactive-r17", "supported");
    }
    if (prs_processing_win_type1_a_r17_present) {
      j.write_str("prs-ProcessingWindowType1A-r17", prs_processing_win_type1_a_r17.to_string());
    }
    if (prs_processing_win_type1_b_r17_present) {
      j.write_str("prs-ProcessingWindowType1B-r17", prs_processing_win_type1_b_r17.to_string());
    }
    if (prs_processing_win_type2_r17_present) {
      j.write_str("prs-ProcessingWindowType2-r17", prs_processing_win_type2_r17.to_string());
    }
    if (srs_all_pos_res_rrc_inactive_r17.is_present()) {
      j.write_fieldname("srs-AllPosResourcesRRC-Inactive-r17");
      srs_all_pos_res_rrc_inactive_r17->to_json(j);
    }
    if (olpc_srs_pos_rrc_inactive_r17.is_present()) {
      j.write_fieldname("olpc-SRS-PosRRC-Inactive-r17");
      olpc_srs_pos_rrc_inactive_r17->to_json(j);
    }
    if (spatial_relations_srs_pos_rrc_inactive_r17.is_present()) {
      j.write_fieldname("spatialRelationsSRS-PosRRC-Inactive-r17");
      spatial_relations_srs_pos_rrc_inactive_r17->to_json(j);
    }
    if (max_num_pusch_type_a_repeat_r17_present) {
      j.write_str("maxNumberPUSCH-TypeA-Repetition-r17", "supported");
    }
    if (pusch_type_a_repeats_avail_slot_r17_present) {
      j.write_str("puschTypeA-RepetitionsAvailSlot-r17", "supported");
    }
    if (tb_processing_multi_slot_pusch_r17_present) {
      j.write_str("tb-ProcessingMultiSlotPUSCH-r17", "supported");
    }
    if (tb_processing_rep_multi_slot_pusch_r17_present) {
      j.write_str("tb-ProcessingRepMultiSlotPUSCH-r17", "supported");
    }
    if (max_dur_dmrs_bundling_r17.is_present()) {
      j.write_fieldname("maxDurationDMRS-Bundling-r17");
      j.start_obj();
      if (max_dur_dmrs_bundling_r17->fdd_r17_present) {
        j.write_str("fdd-r17", max_dur_dmrs_bundling_r17->fdd_r17.to_string());
      }
      if (max_dur_dmrs_bundling_r17->tdd_r17_present) {
        j.write_str("tdd-r17", max_dur_dmrs_bundling_r17->tdd_r17.to_string());
      }
      j.end_obj();
    }
    if (pusch_repeat_msg3_r17_present) {
      j.write_str("pusch-RepetitionMsg3-r17", "supported");
    }
    if (shared_spec_ch_access_params_per_band_v1710.is_present()) {
      j.write_fieldname("sharedSpectrumChAccessParamsPerBand-v1710");
      shared_spec_ch_access_params_per_band_v1710->to_json(j);
    }
    if (parallel_meas_without_restrict_r17_present) {
      j.write_str("parallelMeasurementWithoutRestriction-r17", "supported");
    }
    if (max_num_ngso_satellites_within_one_smtc_r17_present) {
      j.write_str("maxNumber-NGSO-SatellitesWithinOneSMTC-r17",
                  max_num_ngso_satellites_within_one_smtc_r17.to_string());
    }
    if (k1_range_ext_r17_present) {
      j.write_str("k1-RangeExtension-r17", "supported");
    }
    if (aperiodic_csi_rs_fast_scell_activation_r17.is_present()) {
      j.write_fieldname("aperiodicCSI-RS-FastScellActivation-r17");
      j.start_obj();
      j.write_str("maxNumberAperiodicCSI-RS-PerCC-r17",
                  aperiodic_csi_rs_fast_scell_activation_r17->max_num_aperiodic_csi_rs_per_cc_r17.to_string());
      j.write_str("maxNumberAperiodicCSI-RS-AcrossCCs-r17",
                  aperiodic_csi_rs_fast_scell_activation_r17->max_num_aperiodic_csi_rs_across_ccs_r17.to_string());
      j.end_obj();
    }
    if (aperiodic_csi_rs_add_bw_r17_present) {
      j.write_str("aperiodicCSI-RS-AdditionalBandwidth-r17", aperiodic_csi_rs_add_bw_r17.to_string());
    }
    if (bwp_without_cd_ssb_or_ncd_ssb_red_cap_r17_present) {
      j.write_str("bwp-WithoutCD-SSB-OrNCD-SSB-RedCap-r17", "supported");
    }
    if (half_duplex_fdd_type_a_red_cap_r17_present) {
      j.write_str("halfDuplexFDD-TypeA-RedCap-r17", "supported");
    }
    if (pos_srs_rrc_inactive_outside_init_ul_bwp_r17.is_present()) {
      j.write_fieldname("posSRS-RRC-Inactive-OutsideInitialUL-BWP-r17");
      pos_srs_rrc_inactive_outside_init_ul_bwp_r17->to_json(j);
    }
    if (ch_bws_dl_scs_480k_hz_fr2_2_r17_present) {
      j.write_str("channelBWs-DL-SCS-480kHz-FR2-2-r17", ch_bws_dl_scs_480k_hz_fr2_2_r17.to_string());
    }
    if (ch_bws_ul_scs_480k_hz_fr2_2_r17_present) {
      j.write_str("channelBWs-UL-SCS-480kHz-FR2-2-r17", ch_bws_ul_scs_480k_hz_fr2_2_r17.to_string());
    }
    if (ch_bws_dl_scs_960k_hz_fr2_2_r17_present) {
      j.write_str("channelBWs-DL-SCS-960kHz-FR2-2-r17", ch_bws_dl_scs_960k_hz_fr2_2_r17.to_string());
    }
    if (ch_bws_ul_scs_960k_hz_fr2_2_r17_present) {
      j.write_str("channelBWs-UL-SCS-960kHz-FR2-2-r17", ch_bws_ul_scs_960k_hz_fr2_2_r17.to_string());
    }
    if (ul_gap_fr2_r17_present) {
      j.write_str("ul-GapFR2-r17", "supported");
    }
    if (one_shot_harq_feedback_triggered_by_dci_1_2_r17_present) {
      j.write_str("oneShotHARQ-feedbackTriggeredByDCI-1-2-r17", "supported");
    }
    if (one_shot_harq_feedback_phy_prio_r17_present) {
      j.write_str("oneShotHARQ-feedbackPhy-Priority-r17", "supported");
    }
    if (enhanced_type3_harq_codebook_feedback_r17.is_present()) {
      j.write_fieldname("enhancedType3-HARQ-CodebookFeedback-r17");
      j.start_obj();
      j.write_str("enhancedType3-HARQ-Codebooks-r17",
                  enhanced_type3_harq_codebook_feedback_r17->enhanced_type3_harq_codebooks_r17.to_string());
      j.write_str("maxNumberPUCCH-Transmissions-r17",
                  enhanced_type3_harq_codebook_feedback_r17->max_num_pucch_txs_r17.to_string());
      j.end_obj();
    }
    if (triggered_harq_codebook_retx_r17.is_present()) {
      j.write_fieldname("triggeredHARQ-CodebookRetx-r17");
      j.start_obj();
      j.write_str("minHARQ-Retx-Offset-r17", triggered_harq_codebook_retx_r17->min_harq_retx_offset_r17.to_string());
      j.write_str("maxHARQ-Retx-Offset-r17", triggered_harq_codebook_retx_r17->max_harq_retx_offset_r17.to_string());
      j.end_obj();
    }
    if (ue_one_shot_ul_timing_adj_r17_present) {
      j.write_str("ue-OneShotUL-TimingAdj-r17", "supported");
    }
    if (pucch_repeat_f0_2_r17_present) {
      j.write_str("pucch-Repetition-F0-2-r17", "supported");
    }
    if (cqi_4_bits_subband_ntn_shared_spec_ch_access_r17_present) {
      j.write_str("cqi-4-BitsSubbandNTN-SharedSpectrumChAccess-r17", "supported");
    }
    if (mux_harq_ack_diff_priorities_r17_present) {
      j.write_str("mux-HARQ-ACK-DiffPriorities-r17", "supported");
    }
    if (ta_based_pdc_ntn_shared_spec_ch_access_r17_present) {
      j.write_str("ta-BasedPDC-NTN-SharedSpectrumChAccess-r17", "supported");
    }
    if (ack_nack_feedback_for_multicast_with_dci_enabler_r17_present) {
      j.write_str("ack-NACK-FeedbackForMulticastWithDCI-Enabler-r17", "supported");
    }
    if (max_num_g_rnti_r17_present) {
      j.write_int("maxNumberG-RNTI-r17", max_num_g_rnti_r17);
    }
    if (dyn_multicast_dci_format4_2_r17_present) {
      j.write_str("dynamicMulticastDCI-Format4-2-r17", "supported");
    }
    if (max_mod_order_for_multicast_r17.is_present()) {
      j.write_fieldname("maxModulationOrderForMulticast-r17");
      max_mod_order_for_multicast_r17->to_json(j);
    }
    if (dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_present) {
      j.write_str("dynamicSlotRepetitionMulticastTN-NonSharedSpectrumChAccess-r17",
                  dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17.to_string());
    }
    if (dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_present) {
      j.write_str("dynamicSlotRepetitionMulticastNTN-SharedSpectrumChAccess-r17",
                  dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17.to_string());
    }
    if (nack_only_feedback_for_multicast_with_dci_enabler_r17_present) {
      j.write_str("nack-OnlyFeedbackForMulticastWithDCI-Enabler-r17", "supported");
    }
    if (ack_nack_feedback_for_sps_multicast_with_dci_enabler_r17_present) {
      j.write_str("ack-NACK-FeedbackForSPS-MulticastWithDCI-Enabler-r17", "supported");
    }
    if (max_num_g_cs_rnti_r17_present) {
      j.write_int("maxNumberG-CS-RNTI-r17", max_num_g_cs_rnti_r17);
    }
    if (re_level_rate_matching_for_multicast_r17_present) {
      j.write_str("re-LevelRateMatchingForMulticast-r17", "supported");
    }
    if (pdsch_1024_qam_2_mimo_fr1_r17_present) {
      j.write_str("pdsch-1024QAM-2MIMO-FR1-r17", "supported");
    }
    if (prs_meas_without_mg_r17_present) {
      j.write_str("prs-MeasurementWithoutMG-r17", prs_meas_without_mg_r17.to_string());
    }
    if (max_num_leo_satellites_per_carrier_r17_present) {
      j.write_int("maxNumber-LEO-SatellitesPerCarrier-r17", max_num_leo_satellites_per_carrier_r17);
    }
    if (prs_processing_cap_outside_m_gin_ppw_r17.is_present()) {
      j.start_array("prs-ProcessingCapabilityOutsideMGinPPW-r17");
      for (const auto& e1 : *prs_processing_cap_outside_m_gin_ppw_r17) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (srs_semi_persistent_pos_res_rrc_inactive_r17.is_present()) {
      j.write_fieldname("srs-SemiPersistent-PosResourcesRRC-Inactive-r17");
      j.start_obj();
      j.write_str("maxNumOfSemiPersistentSRSposResources-r17",
                  srs_semi_persistent_pos_res_rrc_inactive_r17->max_num_of_semi_persistent_srs_pos_res_r17.to_string());
      j.write_str("maxNumOfSemiPersistentSRSposResourcesPerSlot-r17",
                  srs_semi_persistent_pos_res_rrc_inactive_r17->max_num_of_semi_persistent_srs_pos_res_per_slot_r17
                      .to_string());
      j.end_obj();
    }
    if (ch_bws_dl_scs_120k_hz_fr2_2_r17_present) {
      j.write_str("channelBWs-DL-SCS-120kHz-FR2-2-r17", ch_bws_dl_scs_120k_hz_fr2_2_r17.to_string());
    }
    if (ch_bws_ul_scs_120k_hz_fr2_2_r17_present) {
      j.write_str("channelBWs-UL-SCS-120kHz-FR2-2-r17", ch_bws_ul_scs_120k_hz_fr2_2_r17.to_string());
    }
    if (dmrs_bundling_pusch_rep_type_a_r17_present) {
      j.write_str("dmrs-BundlingPUSCH-RepTypeA-r17", "supported");
    }
    if (dmrs_bundling_pusch_rep_type_b_r17_present) {
      j.write_str("dmrs-BundlingPUSCH-RepTypeB-r17", "supported");
    }
    if (dmrs_bundling_pusch_multi_slot_r17_present) {
      j.write_str("dmrs-BundlingPUSCH-multiSlot-r17", "supported");
    }
    if (dmrs_bundling_pucch_rep_r17_present) {
      j.write_str("dmrs-BundlingPUCCH-Rep-r17", "supported");
    }
    if (inter_slot_freq_hop_inter_slot_bundling_pusch_r17_present) {
      j.write_str("interSlotFreqHopInterSlotBundlingPUSCH-r17", "supported");
    }
    if (inter_slot_freq_hop_pucch_r17_present) {
      j.write_str("interSlotFreqHopPUCCH-r17", "supported");
    }
    if (dmrs_bundling_restart_r17_present) {
      j.write_str("dmrs-BundlingRestart-r17", "supported");
    }
    if (dmrs_bundling_non_back_to_back_tx_r17_present) {
      j.write_str("dmrs-BundlingNonBackToBackTX-r17", "supported");
    }
    if (max_dyn_slot_repeat_for_sps_multicast_r17_present) {
      j.write_str("maxDynamicSlotRepetitionForSPS-Multicast-r17",
                  max_dyn_slot_repeat_for_sps_multicast_r17.to_string());
    }
    if (nack_only_feedback_for_sps_multicast_with_dci_enabler_r17_present) {
      j.write_str("nack-OnlyFeedbackForSPS-MulticastWithDCI-Enabler-r17", "supported");
    }
    if (sps_multicast_dci_format4_2_r17_present) {
      j.write_str("sps-MulticastDCI-Format4-2-r17", "supported");
    }
    if (sps_multicast_multi_cfg_r17_present) {
      j.write_int("sps-MulticastMultiConfig-r17", sps_multicast_multi_cfg_r17);
    }
    if (prio_ind_in_dci_multicast_r17_present) {
      j.write_str("priorityIndicatorInDCI-Multicast-r17", "supported");
    }
    if (prio_ind_in_dci_sps_multicast_r17_present) {
      j.write_str("priorityIndicatorInDCI-SPS-Multicast-r17", "supported");
    }
    if (two_harq_ack_codebook_for_unicast_and_multicast_r17_present) {
      j.write_str("twoHARQ-ACK-CodebookForUnicastAndMulticast-r17", "supported");
    }
    if (multi_pucch_harq_ack_for_multicast_unicast_r17_present) {
      j.write_str("multiPUCCH-HARQ-ACK-ForMulticastUnicast-r17", "supported");
    }
    if (release_sps_multicast_with_cs_rnti_r17_present) {
      j.write_str("releaseSPS-MulticastWithCS-RNTI-r17", "supported");
    }
  }
  j.end_obj();
}

const char* band_nr_s::bwp_same_numerology_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4"};
  return convert_enum_idx(names, 2, value, "band_nr_s::bwp_same_numerology_e_");
}
uint8_t band_nr_s::bwp_same_numerology_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4};
  return map_enum_number(numbers, 2, value, "band_nr_s::bwp_same_numerology_e_");
}

const char* band_nr_s::ue_pwr_class_opts::to_string() const
{
  static const char* names[] = {"pc1", "pc2", "pc3", "pc4"};
  return convert_enum_idx(names, 4, value, "band_nr_s::ue_pwr_class_e_");
}
uint8_t band_nr_s::ue_pwr_class_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4};
  return map_enum_number(numbers, 4, value, "band_nr_s::ue_pwr_class_e_");
}

void band_nr_s::ch_bws_dl_c_::destroy_()
{
  switch (type_) {
    case types::fr1:
      c.destroy<fr1_s_>();
      break;
    case types::fr2:
      c.destroy<fr2_s_>();
      break;
    default:
      break;
  }
}
void band_nr_s::ch_bws_dl_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1:
      c.init<fr1_s_>();
      break;
    case types::fr2:
      c.init<fr2_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_c_");
  }
}
band_nr_s::ch_bws_dl_c_::ch_bws_dl_c_(const band_nr_s::ch_bws_dl_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1:
      c.init(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.init(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_c_");
  }
}
band_nr_s::ch_bws_dl_c_& band_nr_s::ch_bws_dl_c_::operator=(const band_nr_s::ch_bws_dl_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1:
      c.set(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.set(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_c_");
  }

  return *this;
}
band_nr_s::ch_bws_dl_c_::fr1_s_& band_nr_s::ch_bws_dl_c_::set_fr1()
{
  set(types::fr1);
  return c.get<fr1_s_>();
}
band_nr_s::ch_bws_dl_c_::fr2_s_& band_nr_s::ch_bws_dl_c_::set_fr2()
{
  set(types::fr2);
  return c.get<fr2_s_>();
}
void band_nr_s::ch_bws_dl_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1:
      j.write_fieldname("fr1");
      j.start_obj();
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        j.write_str("scs-15kHz", c.get<fr1_s_>().scs_15k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        j.write_str("scs-30kHz", c.get<fr1_s_>().scs_30k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr1_s_>().scs_60k_hz.to_string());
      }
      j.end_obj();
      break;
    case types::fr2:
      j.write_fieldname("fr2");
      j.start_obj();
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr2_s_>().scs_60k_hz.to_string());
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        j.write_str("scs-120kHz", c.get<fr2_s_>().scs_120k_hz.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_nr_s::ch_bws_dl_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.pack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.pack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::ch_bws_dl_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.unpack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.unpack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void band_nr_s::ch_bws_ul_c_::destroy_()
{
  switch (type_) {
    case types::fr1:
      c.destroy<fr1_s_>();
      break;
    case types::fr2:
      c.destroy<fr2_s_>();
      break;
    default:
      break;
  }
}
void band_nr_s::ch_bws_ul_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1:
      c.init<fr1_s_>();
      break;
    case types::fr2:
      c.init<fr2_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_c_");
  }
}
band_nr_s::ch_bws_ul_c_::ch_bws_ul_c_(const band_nr_s::ch_bws_ul_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1:
      c.init(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.init(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_c_");
  }
}
band_nr_s::ch_bws_ul_c_& band_nr_s::ch_bws_ul_c_::operator=(const band_nr_s::ch_bws_ul_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1:
      c.set(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.set(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_c_");
  }

  return *this;
}
band_nr_s::ch_bws_ul_c_::fr1_s_& band_nr_s::ch_bws_ul_c_::set_fr1()
{
  set(types::fr1);
  return c.get<fr1_s_>();
}
band_nr_s::ch_bws_ul_c_::fr2_s_& band_nr_s::ch_bws_ul_c_::set_fr2()
{
  set(types::fr2);
  return c.get<fr2_s_>();
}
void band_nr_s::ch_bws_ul_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1:
      j.write_fieldname("fr1");
      j.start_obj();
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        j.write_str("scs-15kHz", c.get<fr1_s_>().scs_15k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        j.write_str("scs-30kHz", c.get<fr1_s_>().scs_30k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr1_s_>().scs_60k_hz.to_string());
      }
      j.end_obj();
      break;
    case types::fr2:
      j.write_fieldname("fr2");
      j.start_obj();
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr2_s_>().scs_60k_hz.to_string());
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        j.write_str("scs-120kHz", c.get<fr2_s_>().scs_120k_hz.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_nr_s::ch_bws_ul_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.pack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.pack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::ch_bws_ul_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.unpack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.unpack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_nr_s::max_ul_duty_cycle_pc2_fr1_opts::to_string() const
{
  static const char* names[] = {"n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(names, 5, value, "band_nr_s::max_ul_duty_cycle_pc2_fr1_e_");
}
uint8_t band_nr_s::max_ul_duty_cycle_pc2_fr1_opts::to_number() const
{
  static const uint8_t numbers[] = {60, 70, 80, 90, 100};
  return map_enum_number(numbers, 5, value, "band_nr_s::max_ul_duty_cycle_pc2_fr1_e_");
}

const char* band_nr_s::max_ul_duty_cycle_fr2_opts::to_string() const
{
  static const char* names[] = {"n15", "n20", "n25", "n30", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(names, 11, value, "band_nr_s::max_ul_duty_cycle_fr2_e_");
}
uint8_t band_nr_s::max_ul_duty_cycle_fr2_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(numbers, 11, value, "band_nr_s::max_ul_duty_cycle_fr2_e_");
}

void band_nr_s::ch_bws_dl_v1590_c_::destroy_()
{
  switch (type_) {
    case types::fr1:
      c.destroy<fr1_s_>();
      break;
    case types::fr2:
      c.destroy<fr2_s_>();
      break;
    default:
      break;
  }
}
void band_nr_s::ch_bws_dl_v1590_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1:
      c.init<fr1_s_>();
      break;
    case types::fr2:
      c.init<fr2_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_v1590_c_");
  }
}
band_nr_s::ch_bws_dl_v1590_c_::ch_bws_dl_v1590_c_(const band_nr_s::ch_bws_dl_v1590_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1:
      c.init(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.init(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_v1590_c_");
  }
}
band_nr_s::ch_bws_dl_v1590_c_& band_nr_s::ch_bws_dl_v1590_c_::operator=(const band_nr_s::ch_bws_dl_v1590_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1:
      c.set(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.set(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_v1590_c_");
  }

  return *this;
}
band_nr_s::ch_bws_dl_v1590_c_::fr1_s_& band_nr_s::ch_bws_dl_v1590_c_::set_fr1()
{
  set(types::fr1);
  return c.get<fr1_s_>();
}
band_nr_s::ch_bws_dl_v1590_c_::fr2_s_& band_nr_s::ch_bws_dl_v1590_c_::set_fr2()
{
  set(types::fr2);
  return c.get<fr2_s_>();
}
void band_nr_s::ch_bws_dl_v1590_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1:
      j.write_fieldname("fr1");
      j.start_obj();
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        j.write_str("scs-15kHz", c.get<fr1_s_>().scs_15k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        j.write_str("scs-30kHz", c.get<fr1_s_>().scs_30k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr1_s_>().scs_60k_hz.to_string());
      }
      j.end_obj();
      break;
    case types::fr2:
      j.write_fieldname("fr2");
      j.start_obj();
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr2_s_>().scs_60k_hz.to_string());
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        j.write_str("scs-120kHz", c.get<fr2_s_>().scs_120k_hz.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_v1590_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_nr_s::ch_bws_dl_v1590_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.pack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.pack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_v1590_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::ch_bws_dl_v1590_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.unpack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.unpack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_dl_v1590_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void band_nr_s::ch_bws_ul_v1590_c_::destroy_()
{
  switch (type_) {
    case types::fr1:
      c.destroy<fr1_s_>();
      break;
    case types::fr2:
      c.destroy<fr2_s_>();
      break;
    default:
      break;
  }
}
void band_nr_s::ch_bws_ul_v1590_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1:
      c.init<fr1_s_>();
      break;
    case types::fr2:
      c.init<fr2_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_v1590_c_");
  }
}
band_nr_s::ch_bws_ul_v1590_c_::ch_bws_ul_v1590_c_(const band_nr_s::ch_bws_ul_v1590_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1:
      c.init(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.init(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_v1590_c_");
  }
}
band_nr_s::ch_bws_ul_v1590_c_& band_nr_s::ch_bws_ul_v1590_c_::operator=(const band_nr_s::ch_bws_ul_v1590_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1:
      c.set(other.c.get<fr1_s_>());
      break;
    case types::fr2:
      c.set(other.c.get<fr2_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_v1590_c_");
  }

  return *this;
}
band_nr_s::ch_bws_ul_v1590_c_::fr1_s_& band_nr_s::ch_bws_ul_v1590_c_::set_fr1()
{
  set(types::fr1);
  return c.get<fr1_s_>();
}
band_nr_s::ch_bws_ul_v1590_c_::fr2_s_& band_nr_s::ch_bws_ul_v1590_c_::set_fr2()
{
  set(types::fr2);
  return c.get<fr2_s_>();
}
void band_nr_s::ch_bws_ul_v1590_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1:
      j.write_fieldname("fr1");
      j.start_obj();
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        j.write_str("scs-15kHz", c.get<fr1_s_>().scs_15k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        j.write_str("scs-30kHz", c.get<fr1_s_>().scs_30k_hz.to_string());
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr1_s_>().scs_60k_hz.to_string());
      }
      j.end_obj();
      break;
    case types::fr2:
      j.write_fieldname("fr2");
      j.start_obj();
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", c.get<fr2_s_>().scs_60k_hz.to_string());
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        j.write_str("scs-120kHz", c.get<fr2_s_>().scs_120k_hz.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_v1590_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_nr_s::ch_bws_ul_v1590_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.pack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.pack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.pack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_v1590_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::ch_bws_ul_v1590_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_s_>().scs_60k_hz_present, 1));
      if (c.get<fr1_s_>().scs_15k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_15k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_30k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_30k_hz.unpack(bref));
      }
      if (c.get<fr1_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr1_s_>().scs_60k_hz.unpack(bref));
      }
      break;
    case types::fr2:
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_s_>().scs_120k_hz_present, 1));
      if (c.get<fr2_s_>().scs_60k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_60k_hz.unpack(bref));
      }
      if (c.get<fr2_s_>().scs_120k_hz_present) {
        HANDLE_CODE(c.get<fr2_s_>().scs_120k_hz.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bws_ul_v1590_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void band_nr_s::ch_bw_dl_iab_r16_c_::destroy_()
{
  switch (type_) {
    case types::fr1_100mhz:
      c.destroy<fr1_100mhz_s_>();
      break;
    case types::fr2_200mhz:
      c.destroy<fr2_200mhz_s_>();
      break;
    default:
      break;
  }
}
void band_nr_s::ch_bw_dl_iab_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_100mhz:
      c.init<fr1_100mhz_s_>();
      break;
    case types::fr2_200mhz:
      c.init<fr2_200mhz_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_dl_iab_r16_c_");
  }
}
band_nr_s::ch_bw_dl_iab_r16_c_::ch_bw_dl_iab_r16_c_(const band_nr_s::ch_bw_dl_iab_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_100mhz:
      c.init(other.c.get<fr1_100mhz_s_>());
      break;
    case types::fr2_200mhz:
      c.init(other.c.get<fr2_200mhz_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_dl_iab_r16_c_");
  }
}
band_nr_s::ch_bw_dl_iab_r16_c_& band_nr_s::ch_bw_dl_iab_r16_c_::operator=(const band_nr_s::ch_bw_dl_iab_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_100mhz:
      c.set(other.c.get<fr1_100mhz_s_>());
      break;
    case types::fr2_200mhz:
      c.set(other.c.get<fr2_200mhz_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_dl_iab_r16_c_");
  }

  return *this;
}
band_nr_s::ch_bw_dl_iab_r16_c_::fr1_100mhz_s_& band_nr_s::ch_bw_dl_iab_r16_c_::set_fr1_100mhz()
{
  set(types::fr1_100mhz);
  return c.get<fr1_100mhz_s_>();
}
band_nr_s::ch_bw_dl_iab_r16_c_::fr2_200mhz_s_& band_nr_s::ch_bw_dl_iab_r16_c_::set_fr2_200mhz()
{
  set(types::fr2_200mhz);
  return c.get<fr2_200mhz_s_>();
}
void band_nr_s::ch_bw_dl_iab_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_100mhz:
      j.write_fieldname("fr1-100mhz");
      j.start_obj();
      if (c.get<fr1_100mhz_s_>().scs_15k_hz_present) {
        j.write_str("scs-15kHz", "supported");
      }
      if (c.get<fr1_100mhz_s_>().scs_30k_hz_present) {
        j.write_str("scs-30kHz", "supported");
      }
      if (c.get<fr1_100mhz_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", "supported");
      }
      j.end_obj();
      break;
    case types::fr2_200mhz:
      j.write_fieldname("fr2-200mhz");
      j.start_obj();
      if (c.get<fr2_200mhz_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", "supported");
      }
      if (c.get<fr2_200mhz_s_>().scs_120k_hz_present) {
        j.write_str("scs-120kHz", "supported");
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_dl_iab_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_nr_s::ch_bw_dl_iab_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_100mhz:
      HANDLE_CODE(bref.pack(c.get<fr1_100mhz_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_100mhz_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_100mhz_s_>().scs_60k_hz_present, 1));
      break;
    case types::fr2_200mhz:
      HANDLE_CODE(bref.pack(c.get<fr2_200mhz_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_200mhz_s_>().scs_120k_hz_present, 1));
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_dl_iab_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::ch_bw_dl_iab_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_100mhz:
      HANDLE_CODE(bref.unpack(c.get<fr1_100mhz_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_100mhz_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_100mhz_s_>().scs_60k_hz_present, 1));
      break;
    case types::fr2_200mhz:
      HANDLE_CODE(bref.unpack(c.get<fr2_200mhz_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_200mhz_s_>().scs_120k_hz_present, 1));
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_dl_iab_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

void band_nr_s::ch_bw_ul_iab_r16_c_::destroy_()
{
  switch (type_) {
    case types::fr1_100mhz:
      c.destroy<fr1_100mhz_s_>();
      break;
    case types::fr2_200mhz:
      c.destroy<fr2_200mhz_s_>();
      break;
    default:
      break;
  }
}
void band_nr_s::ch_bw_ul_iab_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_100mhz:
      c.init<fr1_100mhz_s_>();
      break;
    case types::fr2_200mhz:
      c.init<fr2_200mhz_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_ul_iab_r16_c_");
  }
}
band_nr_s::ch_bw_ul_iab_r16_c_::ch_bw_ul_iab_r16_c_(const band_nr_s::ch_bw_ul_iab_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_100mhz:
      c.init(other.c.get<fr1_100mhz_s_>());
      break;
    case types::fr2_200mhz:
      c.init(other.c.get<fr2_200mhz_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_ul_iab_r16_c_");
  }
}
band_nr_s::ch_bw_ul_iab_r16_c_& band_nr_s::ch_bw_ul_iab_r16_c_::operator=(const band_nr_s::ch_bw_ul_iab_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_100mhz:
      c.set(other.c.get<fr1_100mhz_s_>());
      break;
    case types::fr2_200mhz:
      c.set(other.c.get<fr2_200mhz_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_ul_iab_r16_c_");
  }

  return *this;
}
band_nr_s::ch_bw_ul_iab_r16_c_::fr1_100mhz_s_& band_nr_s::ch_bw_ul_iab_r16_c_::set_fr1_100mhz()
{
  set(types::fr1_100mhz);
  return c.get<fr1_100mhz_s_>();
}
band_nr_s::ch_bw_ul_iab_r16_c_::fr2_200mhz_s_& band_nr_s::ch_bw_ul_iab_r16_c_::set_fr2_200mhz()
{
  set(types::fr2_200mhz);
  return c.get<fr2_200mhz_s_>();
}
void band_nr_s::ch_bw_ul_iab_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_100mhz:
      j.write_fieldname("fr1-100mhz");
      j.start_obj();
      if (c.get<fr1_100mhz_s_>().scs_15k_hz_present) {
        j.write_str("scs-15kHz", "supported");
      }
      if (c.get<fr1_100mhz_s_>().scs_30k_hz_present) {
        j.write_str("scs-30kHz", "supported");
      }
      if (c.get<fr1_100mhz_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", "supported");
      }
      j.end_obj();
      break;
    case types::fr2_200mhz:
      j.write_fieldname("fr2-200mhz");
      j.start_obj();
      if (c.get<fr2_200mhz_s_>().scs_60k_hz_present) {
        j.write_str("scs-60kHz", "supported");
      }
      if (c.get<fr2_200mhz_s_>().scs_120k_hz_present) {
        j.write_str("scs-120kHz", "supported");
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_ul_iab_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_nr_s::ch_bw_ul_iab_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_100mhz:
      HANDLE_CODE(bref.pack(c.get<fr1_100mhz_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_100mhz_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_100mhz_s_>().scs_60k_hz_present, 1));
      break;
    case types::fr2_200mhz:
      HANDLE_CODE(bref.pack(c.get<fr2_200mhz_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_200mhz_s_>().scs_120k_hz_present, 1));
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_ul_iab_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::ch_bw_ul_iab_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_100mhz:
      HANDLE_CODE(bref.unpack(c.get<fr1_100mhz_s_>().scs_15k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_100mhz_s_>().scs_30k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_100mhz_s_>().scs_60k_hz_present, 1));
      break;
    case types::fr2_200mhz:
      HANDLE_CODE(bref.unpack(c.get<fr2_200mhz_s_>().scs_60k_hz_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_200mhz_s_>().scs_120k_hz_present, 1));
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::ch_bw_ul_iab_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_nr_s::active_cfg_grant_r16_s_::max_num_cfgs_per_bwp_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n12"};
  return convert_enum_idx(names, 5, value, "band_nr_s::active_cfg_grant_r16_s_::max_num_cfgs_per_bwp_r16_e_");
}
uint8_t band_nr_s::active_cfg_grant_r16_s_::max_num_cfgs_per_bwp_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 12};
  return map_enum_number(numbers, 5, value, "band_nr_s::active_cfg_grant_r16_s_::max_num_cfgs_per_bwp_r16_e_");
}

const char* band_nr_s::trs_add_bw_r16_opts::to_string() const
{
  static const char* names[] = {"trs-AddBW-Set1", "trs-AddBW-Set2"};
  return convert_enum_idx(names, 2, value, "band_nr_s::trs_add_bw_r16_e_");
}
uint8_t band_nr_s::trs_add_bw_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::trs_add_bw_r16_e_");
}

const char* band_nr_s::enhanced_ul_transient_period_r16_opts::to_string() const
{
  static const char* names[] = {"us2", "us4", "us7"};
  return convert_enum_idx(names, 3, value, "band_nr_s::enhanced_ul_transient_period_r16_e_");
}
uint8_t band_nr_s::enhanced_ul_transient_period_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(numbers, 3, value, "band_nr_s::enhanced_ul_transient_period_r16_e_");
}

const char* band_nr_s::max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_opts::to_string() const
{
  static const char* names[] = {"n10", "n15", "n20", "n25", "n30", "n40", "n50", "n60", "n70", "n80", "n90", "n100"};
  return convert_enum_idx(names, 12, value, "band_nr_s::max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_e_");
}
uint8_t band_nr_s::max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100};
  return map_enum_number(numbers, 12, value, "band_nr_s::max_ul_duty_cycle_pc1dot5_mpe_fr1_r16_e_");
}

const char* band_nr_s::ue_pwr_class_v1700_opts::to_string() const
{
  static const char* names[] = {"pc5", "pc6", "pc7"};
  return convert_enum_idx(names, 3, value, "band_nr_s::ue_pwr_class_v1700_e_");
}
uint8_t band_nr_s::ue_pwr_class_v1700_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 6, 7};
  return map_enum_number(numbers, 3, value, "band_nr_s::ue_pwr_class_v1700_e_");
}

const char* band_nr_s::max_harq_process_num_r17_opts::to_string() const
{
  static const char* names[] = {"u16d32", "u32d16", "u32d32"};
  return convert_enum_idx(names, 3, value, "band_nr_s::max_harq_process_num_r17_e_");
}

const char* band_nr_s::nr_ue_tx_teg_id_max_support_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n6", "n8"};
  return convert_enum_idx(names, 6, value, "band_nr_s::nr_ue_tx_teg_id_max_support_r17_e_");
}
uint8_t band_nr_s::nr_ue_tx_teg_id_max_support_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 6, 8};
  return map_enum_number(numbers, 6, value, "band_nr_s::nr_ue_tx_teg_id_max_support_r17_e_");
}

const char* band_nr_s::prs_processing_win_type1_a_r17_opts::to_string() const
{
  static const char* names[] = {"option1", "option2", "option3"};
  return convert_enum_idx(names, 3, value, "band_nr_s::prs_processing_win_type1_a_r17_e_");
}
uint8_t band_nr_s::prs_processing_win_type1_a_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(numbers, 3, value, "band_nr_s::prs_processing_win_type1_a_r17_e_");
}

const char* band_nr_s::prs_processing_win_type1_b_r17_opts::to_string() const
{
  static const char* names[] = {"option1", "option2", "option3"};
  return convert_enum_idx(names, 3, value, "band_nr_s::prs_processing_win_type1_b_r17_e_");
}
uint8_t band_nr_s::prs_processing_win_type1_b_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(numbers, 3, value, "band_nr_s::prs_processing_win_type1_b_r17_e_");
}

const char* band_nr_s::prs_processing_win_type2_r17_opts::to_string() const
{
  static const char* names[] = {"option1", "option2", "option3"};
  return convert_enum_idx(names, 3, value, "band_nr_s::prs_processing_win_type2_r17_e_");
}
uint8_t band_nr_s::prs_processing_win_type2_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(numbers, 3, value, "band_nr_s::prs_processing_win_type2_r17_e_");
}

const char* band_nr_s::max_dur_dmrs_bundling_r17_s_::fdd_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32"};
  return convert_enum_idx(names, 4, value, "band_nr_s::max_dur_dmrs_bundling_r17_s_::fdd_r17_e_");
}
uint8_t band_nr_s::max_dur_dmrs_bundling_r17_s_::fdd_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32};
  return map_enum_number(numbers, 4, value, "band_nr_s::max_dur_dmrs_bundling_r17_s_::fdd_r17_e_");
}

const char* band_nr_s::max_dur_dmrs_bundling_r17_s_::tdd_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8", "n16"};
  return convert_enum_idx(names, 4, value, "band_nr_s::max_dur_dmrs_bundling_r17_s_::tdd_r17_e_");
}
uint8_t band_nr_s::max_dur_dmrs_bundling_r17_s_::tdd_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 16};
  return map_enum_number(numbers, 4, value, "band_nr_s::max_dur_dmrs_bundling_r17_s_::tdd_r17_e_");
}

const char* band_nr_s::max_num_ngso_satellites_within_one_smtc_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4"};
  return convert_enum_idx(names, 4, value, "band_nr_s::max_num_ngso_satellites_within_one_smtc_r17_e_");
}
uint8_t band_nr_s::max_num_ngso_satellites_within_one_smtc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4};
  return map_enum_number(numbers, 4, value, "band_nr_s::max_num_ngso_satellites_within_one_smtc_r17_e_");
}

const char*
band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_per_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n48", "n64", "n128", "n255"};
  return convert_enum_idx(
      names,
      7,
      value,
      "band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_per_cc_r17_e_");
}
uint16_t
band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_per_cc_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {8, 16, 32, 48, 64, 128, 255};
  return map_enum_number(
      numbers,
      7,
      value,
      "band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_per_cc_r17_e_");
}

const char*
band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_across_ccs_r17_opts::to_string()
    const
{
  static const char* names[] = {"n8", "n16", "n32", "n64", "n128", "n256", "n512", "n1024"};
  return convert_enum_idx(
      names,
      8,
      value,
      "band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_across_ccs_r17_e_");
}
uint16_t
band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_across_ccs_r17_opts::to_number()
    const
{
  static const uint16_t numbers[] = {8, 16, 32, 64, 128, 256, 512, 1024};
  return map_enum_number(
      numbers,
      8,
      value,
      "band_nr_s::aperiodic_csi_rs_fast_scell_activation_r17_s_::max_num_aperiodic_csi_rs_across_ccs_r17_e_");
}

const char* band_nr_s::aperiodic_csi_rs_add_bw_r17_opts::to_string() const
{
  static const char* names[] = {"addBW-Set1", "addBW-Set2"};
  return convert_enum_idx(names, 2, value, "band_nr_s::aperiodic_csi_rs_add_bw_r17_e_");
}
uint8_t band_nr_s::aperiodic_csi_rs_add_bw_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_nr_s::aperiodic_csi_rs_add_bw_r17_e_");
}

const char*
band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::enhanced_type3_harq_codebooks_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8"};
  return convert_enum_idx(
      names, 4, value, "band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::enhanced_type3_harq_codebooks_r17_e_");
}
uint8_t
band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::enhanced_type3_harq_codebooks_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8};
  return map_enum_number(
      numbers,
      4,
      value,
      "band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::enhanced_type3_harq_codebooks_r17_e_");
}

const char* band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::max_num_pucch_txs_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n7"};
  return convert_enum_idx(
      names, 7, value, "band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::max_num_pucch_txs_r17_e_");
}
uint8_t band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::max_num_pucch_txs_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 7};
  return map_enum_number(
      numbers, 7, value, "band_nr_s::enhanced_type3_harq_codebook_feedback_r17_s_::max_num_pucch_txs_r17_e_");
}

const char* band_nr_s::triggered_harq_codebook_retx_r17_s_::min_harq_retx_offset_r17_opts::to_string() const
{
  static const char* names[] = {"n-7", "n-5", "n-3", "n-1", "n1"};
  return convert_enum_idx(
      names, 5, value, "band_nr_s::triggered_harq_codebook_retx_r17_s_::min_harq_retx_offset_r17_e_");
}
int8_t band_nr_s::triggered_harq_codebook_retx_r17_s_::min_harq_retx_offset_r17_opts::to_number() const
{
  static const int8_t numbers[] = {-7, -5, -3, -1, 1};
  return map_enum_number(
      numbers, 5, value, "band_nr_s::triggered_harq_codebook_retx_r17_s_::min_harq_retx_offset_r17_e_");
}

const char* band_nr_s::triggered_harq_codebook_retx_r17_s_::max_harq_retx_offset_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n6", "n8", "n10", "n12", "n14", "n16", "n18", "n20", "n22", "n24"};
  return convert_enum_idx(
      names, 11, value, "band_nr_s::triggered_harq_codebook_retx_r17_s_::max_harq_retx_offset_r17_e_");
}
uint8_t band_nr_s::triggered_harq_codebook_retx_r17_s_::max_harq_retx_offset_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24};
  return map_enum_number(
      numbers, 11, value, "band_nr_s::triggered_harq_codebook_retx_r17_s_::max_harq_retx_offset_r17_e_");
}

void band_nr_s::max_mod_order_for_multicast_r17_c_::destroy_() {}
void band_nr_s::max_mod_order_for_multicast_r17_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
band_nr_s::max_mod_order_for_multicast_r17_c_::max_mod_order_for_multicast_r17_c_(
    const band_nr_s::max_mod_order_for_multicast_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r17:
      c.init(other.c.get<fr1_r17_e_>());
      break;
    case types::fr2_r17:
      c.init(other.c.get<fr2_r17_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::max_mod_order_for_multicast_r17_c_");
  }
}
band_nr_s::max_mod_order_for_multicast_r17_c_&
band_nr_s::max_mod_order_for_multicast_r17_c_::operator=(const band_nr_s::max_mod_order_for_multicast_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r17:
      c.set(other.c.get<fr1_r17_e_>());
      break;
    case types::fr2_r17:
      c.set(other.c.get<fr2_r17_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::max_mod_order_for_multicast_r17_c_");
  }

  return *this;
}
band_nr_s::max_mod_order_for_multicast_r17_c_::fr1_r17_e_& band_nr_s::max_mod_order_for_multicast_r17_c_::set_fr1_r17()
{
  set(types::fr1_r17);
  return c.get<fr1_r17_e_>();
}
band_nr_s::max_mod_order_for_multicast_r17_c_::fr2_r17_e_& band_nr_s::max_mod_order_for_multicast_r17_c_::set_fr2_r17()
{
  set(types::fr2_r17);
  return c.get<fr2_r17_e_>();
}
void band_nr_s::max_mod_order_for_multicast_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r17:
      j.write_str("fr1-r17", c.get<fr1_r17_e_>().to_string());
      break;
    case types::fr2_r17:
      j.write_str("fr2-r17", c.get<fr2_r17_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::max_mod_order_for_multicast_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_nr_s::max_mod_order_for_multicast_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(c.get<fr1_r17_e_>().pack(bref));
      break;
    case types::fr2_r17:
      HANDLE_CODE(c.get<fr2_r17_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::max_mod_order_for_multicast_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_nr_s::max_mod_order_for_multicast_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(c.get<fr1_r17_e_>().unpack(bref));
      break;
    case types::fr2_r17:
      HANDLE_CODE(c.get<fr2_r17_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "band_nr_s::max_mod_order_for_multicast_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_nr_s::max_mod_order_for_multicast_r17_c_::fr1_r17_opts::to_string() const
{
  static const char* names[] = {"qam256", "qam1024"};
  return convert_enum_idx(names, 2, value, "band_nr_s::max_mod_order_for_multicast_r17_c_::fr1_r17_e_");
}
uint16_t band_nr_s::max_mod_order_for_multicast_r17_c_::fr1_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {256, 1024};
  return map_enum_number(numbers, 2, value, "band_nr_s::max_mod_order_for_multicast_r17_c_::fr1_r17_e_");
}

const char* band_nr_s::max_mod_order_for_multicast_r17_c_::fr2_r17_opts::to_string() const
{
  static const char* names[] = {"qam64", "qam256"};
  return convert_enum_idx(names, 2, value, "band_nr_s::max_mod_order_for_multicast_r17_c_::fr2_r17_e_");
}
uint16_t band_nr_s::max_mod_order_for_multicast_r17_c_::fr2_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {64, 256};
  return map_enum_number(numbers, 2, value, "band_nr_s::max_mod_order_for_multicast_r17_c_::fr2_r17_e_");
}

const char* band_nr_s::dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(names, 2, value, "band_nr_s::dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_e_");
}
uint8_t band_nr_s::dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(numbers, 2, value, "band_nr_s::dyn_slot_repeat_multicast_tn_non_shared_spec_ch_access_r17_e_");
}

const char* band_nr_s::dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(names, 2, value, "band_nr_s::dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_e_");
}
uint8_t band_nr_s::dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(numbers, 2, value, "band_nr_s::dyn_slot_repeat_multicast_ntn_shared_spec_ch_access_r17_e_");
}

const char* band_nr_s::prs_meas_without_mg_r17_opts::to_string() const
{
  static const char* names[] = {"cpLength", "quarterSymbol", "halfSymbol", "halfSlot"};
  return convert_enum_idx(names, 4, value, "band_nr_s::prs_meas_without_mg_r17_e_");
}

const char*
band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::max_num_of_semi_persistent_srs_pos_res_r17_opts::to_string()
    const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(
      names,
      7,
      value,
      "band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::max_num_of_semi_persistent_srs_pos_res_r17_e_");
}
uint8_t
band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::max_num_of_semi_persistent_srs_pos_res_r17_opts::to_number()
    const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(
      numbers,
      7,
      value,
      "band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::max_num_of_semi_persistent_srs_pos_res_r17_e_");
}

const char* band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::
    max_num_of_semi_persistent_srs_pos_res_per_slot_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n5", "n6", "n8", "n10", "n12", "n14"};
  return convert_enum_idx(names,
                          10,
                          value,
                          "band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::max_num_of_semi_persistent_srs_"
                          "pos_res_per_slot_r17_e_");
}
uint8_t band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::
    max_num_of_semi_persistent_srs_pos_res_per_slot_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 5, 6, 8, 10, 12, 14};
  return map_enum_number(numbers,
                         10,
                         value,
                         "band_nr_s::srs_semi_persistent_pos_res_rrc_inactive_r17_s_::max_num_of_semi_persistent_srs_"
                         "pos_res_per_slot_r17_e_");
}

const char* band_nr_s::max_dyn_slot_repeat_for_sps_multicast_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(names, 2, value, "band_nr_s::max_dyn_slot_repeat_for_sps_multicast_r17_e_");
}
uint8_t band_nr_s::max_dyn_slot_repeat_for_sps_multicast_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(numbers, 2, value, "band_nr_s::max_dyn_slot_repeat_for_sps_multicast_r17_e_");
}

// BandSidelink-r16 ::= SEQUENCE
SRSASN_CODE band_sidelink_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_reception_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_mode1_r16_present, 1));
  HANDLE_CODE(bref.pack(sync_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(sl_tx_256_qam_r16_present, 1));
  HANDLE_CODE(bref.pack(psfch_format_zero_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(low_se_64_qam_mcs_table_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(enb_sync_sidelink_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, freq_band_sidelink_r16, (uint16_t)1u, (uint16_t)1024u));
  if (sl_reception_r16_present) {
    HANDLE_CODE(bref.pack(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present, 1));
    HANDLE_CODE(bref.pack(sl_reception_r16.extended_cp_rx_sidelink_r16_present, 1));
    HANDLE_CODE(sl_reception_r16.harq_rx_process_sidelink_r16.pack(bref));
    HANDLE_CODE(sl_reception_r16.pscch_rx_sidelink_r16.pack(bref));
    if (sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present) {
      HANDLE_CODE(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16.pack(bref));
    }
  }
  if (sl_tx_mode1_r16_present) {
    HANDLE_CODE(bref.pack(sl_tx_mode1_r16.extended_cp_tx_sidelink_r16_present, 1));
    HANDLE_CODE(bref.pack(sl_tx_mode1_r16.harq_report_on_pucch_r16_present, 1));
    HANDLE_CODE(sl_tx_mode1_r16.harq_tx_process_mode_one_sidelink_r16.pack(bref));
    HANDLE_CODE(sl_tx_mode1_r16.scs_cp_pattern_tx_sidelink_mode_one_r16.pack(bref));
  }
  if (sync_sidelink_r16_present) {
    HANDLE_CODE(bref.pack(sync_sidelink_r16.gnb_sync_r16_present, 1));
    HANDLE_CODE(bref.pack(sync_sidelink_r16.gnb_gnss_ue_sync_with_prio_on_gnb_enb_r16_present, 1));
    HANDLE_CODE(bref.pack(sync_sidelink_r16.gnb_gnss_ue_sync_with_prio_on_gnss_r16_present, 1));
  }
  if (psfch_format_zero_sidelink_r16_present) {
    HANDLE_CODE(psfch_format_zero_sidelink_r16.psfch_rx_num.pack(bref));
    HANDLE_CODE(psfch_format_zero_sidelink_r16.psfch_tx_num.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sl_tx_mode2_r16.is_present();
    group_flags[0] |= congestion_ctrl_sidelink_r16.is_present();
    group_flags[0] |= fewer_symbol_slot_sidelink_r16_present;
    group_flags[0] |= sl_open_loop_pc_rsrp_report_sidelink_r16_present;
    group_flags[0] |= sl_rx_256_qam_r16_present;
    group_flags[1] |= ue_pwr_class_sidelink_r16_present;
    group_flags[2] |= sl_tx_mode2_random_res_sel_r17.is_present();
    group_flags[2] |= sync_sidelink_v1710.is_present();
    group_flags[2] |= enb_sync_sidelink_v1710_present;
    group_flags[2] |= rx_iuc_scheme1_preferred_mode2_sidelink_r17_present;
    group_flags[2] |= rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present;
    group_flags[2] |= rx_iuc_scheme2_mode2_sidelink_r17_present;
    group_flags[2] |= rx_iuc_scheme1_sci_r17_present;
    group_flags[2] |= rx_iuc_scheme1_sci_explicit_req_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_tx_mode2_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(congestion_ctrl_sidelink_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(fewer_symbol_slot_sidelink_r16_present, 1));
      HANDLE_CODE(bref.pack(sl_open_loop_pc_rsrp_report_sidelink_r16_present, 1));
      HANDLE_CODE(bref.pack(sl_rx_256_qam_r16_present, 1));
      if (sl_tx_mode2_r16.is_present()) {
        HANDLE_CODE(bref.pack(sl_tx_mode2_r16->scs_cp_pattern_tx_sidelink_mode_two_r16_present, 1));
        HANDLE_CODE(bref.pack(sl_tx_mode2_r16->dl_open_loop_pc_sidelink_r16_present, 1));
        HANDLE_CODE(sl_tx_mode2_r16->harq_tx_process_mode_two_sidelink_r16.pack(bref));
      }
      if (congestion_ctrl_sidelink_r16.is_present()) {
        HANDLE_CODE(bref.pack(congestion_ctrl_sidelink_r16->cbr_report_sidelink_r16_present, 1));
        HANDLE_CODE(congestion_ctrl_sidelink_r16->cbr_cr_time_limit_sidelink_r16.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ue_pwr_class_sidelink_r16_present, 1));
      if (ue_pwr_class_sidelink_r16_present) {
        HANDLE_CODE(ue_pwr_class_sidelink_r16.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sl_tx_mode2_random_res_sel_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(sync_sidelink_v1710.is_present(), 1));
      HANDLE_CODE(bref.pack(enb_sync_sidelink_v1710_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme1_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme2_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme1_sci_r17_present, 1));
      HANDLE_CODE(bref.pack(rx_iuc_scheme1_sci_explicit_req_r17_present, 1));
      if (sl_tx_mode2_random_res_sel_r17.is_present()) {
        HANDLE_CODE(bref.pack(sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17_present, 1));
        HANDLE_CODE(bref.pack(sl_tx_mode2_random_res_sel_r17->extended_cp_mode2_random_r17_present, 1));
        HANDLE_CODE(bref.pack(sl_tx_mode2_random_res_sel_r17->dl_open_loop_pc_sidelink_r17_present, 1));
        HANDLE_CODE(sl_tx_mode2_random_res_sel_r17->harq_tx_process_mode_two_sidelink_r17.pack(bref));
        if (sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
          HANDLE_CODE(sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17.pack(bref));
        }
      }
      if (sync_sidelink_v1710.is_present()) {
        HANDLE_CODE(bref.pack(sync_sidelink_v1710->sync_gnss_r17_present, 1));
        HANDLE_CODE(bref.pack(sync_sidelink_v1710->gnb_sync_r17_present, 1));
        HANDLE_CODE(bref.pack(sync_sidelink_v1710->gnb_gnss_ue_sync_with_prio_on_gnb_enb_r17_present, 1));
        HANDLE_CODE(bref.pack(sync_sidelink_v1710->gnb_gnss_ue_sync_with_prio_on_gnss_r17_present, 1));
      }
      if (rx_iuc_scheme2_mode2_sidelink_r17_present) {
        HANDLE_CODE(rx_iuc_scheme2_mode2_sidelink_r17.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_sidelink_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(sl_reception_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_mode1_r16_present, 1));
  HANDLE_CODE(bref.unpack(sync_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(sl_tx_256_qam_r16_present, 1));
  HANDLE_CODE(bref.unpack(psfch_format_zero_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(low_se_64_qam_mcs_table_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(enb_sync_sidelink_r16_present, 1));

  HANDLE_CODE(unpack_integer(freq_band_sidelink_r16, bref, (uint16_t)1u, (uint16_t)1024u));
  if (sl_reception_r16_present) {
    HANDLE_CODE(bref.unpack(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present, 1));
    HANDLE_CODE(bref.unpack(sl_reception_r16.extended_cp_rx_sidelink_r16_present, 1));
    HANDLE_CODE(sl_reception_r16.harq_rx_process_sidelink_r16.unpack(bref));
    HANDLE_CODE(sl_reception_r16.pscch_rx_sidelink_r16.unpack(bref));
    if (sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present) {
      HANDLE_CODE(sl_reception_r16.scs_cp_pattern_rx_sidelink_r16.unpack(bref));
    }
  }
  if (sl_tx_mode1_r16_present) {
    HANDLE_CODE(bref.unpack(sl_tx_mode1_r16.extended_cp_tx_sidelink_r16_present, 1));
    HANDLE_CODE(bref.unpack(sl_tx_mode1_r16.harq_report_on_pucch_r16_present, 1));
    HANDLE_CODE(sl_tx_mode1_r16.harq_tx_process_mode_one_sidelink_r16.unpack(bref));
    HANDLE_CODE(sl_tx_mode1_r16.scs_cp_pattern_tx_sidelink_mode_one_r16.unpack(bref));
  }
  if (sync_sidelink_r16_present) {
    HANDLE_CODE(bref.unpack(sync_sidelink_r16.gnb_sync_r16_present, 1));
    HANDLE_CODE(bref.unpack(sync_sidelink_r16.gnb_gnss_ue_sync_with_prio_on_gnb_enb_r16_present, 1));
    HANDLE_CODE(bref.unpack(sync_sidelink_r16.gnb_gnss_ue_sync_with_prio_on_gnss_r16_present, 1));
  }
  if (psfch_format_zero_sidelink_r16_present) {
    HANDLE_CODE(psfch_format_zero_sidelink_r16.psfch_rx_num.unpack(bref));
    HANDLE_CODE(psfch_format_zero_sidelink_r16.psfch_tx_num.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_tx_mode2_r16, bref);
      unpack_presence_flag(congestion_ctrl_sidelink_r16, bref);
      HANDLE_CODE(bref.unpack(fewer_symbol_slot_sidelink_r16_present, 1));
      HANDLE_CODE(bref.unpack(sl_open_loop_pc_rsrp_report_sidelink_r16_present, 1));
      HANDLE_CODE(bref.unpack(sl_rx_256_qam_r16_present, 1));
      if (sl_tx_mode2_r16.is_present()) {
        HANDLE_CODE(bref.unpack(sl_tx_mode2_r16->scs_cp_pattern_tx_sidelink_mode_two_r16_present, 1));
        HANDLE_CODE(bref.unpack(sl_tx_mode2_r16->dl_open_loop_pc_sidelink_r16_present, 1));
        HANDLE_CODE(sl_tx_mode2_r16->harq_tx_process_mode_two_sidelink_r16.unpack(bref));
      }
      if (congestion_ctrl_sidelink_r16.is_present()) {
        HANDLE_CODE(bref.unpack(congestion_ctrl_sidelink_r16->cbr_report_sidelink_r16_present, 1));
        HANDLE_CODE(congestion_ctrl_sidelink_r16->cbr_cr_time_limit_sidelink_r16.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ue_pwr_class_sidelink_r16_present, 1));
      if (ue_pwr_class_sidelink_r16_present) {
        HANDLE_CODE(ue_pwr_class_sidelink_r16.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sl_tx_mode2_random_res_sel_r17, bref);
      unpack_presence_flag(sync_sidelink_v1710, bref);
      HANDLE_CODE(bref.unpack(enb_sync_sidelink_v1710_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme2_mode2_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_sci_r17_present, 1));
      HANDLE_CODE(bref.unpack(rx_iuc_scheme1_sci_explicit_req_r17_present, 1));
      if (sl_tx_mode2_random_res_sel_r17.is_present()) {
        HANDLE_CODE(bref.unpack(sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17_present, 1));
        HANDLE_CODE(bref.unpack(sl_tx_mode2_random_res_sel_r17->extended_cp_mode2_random_r17_present, 1));
        HANDLE_CODE(bref.unpack(sl_tx_mode2_random_res_sel_r17->dl_open_loop_pc_sidelink_r17_present, 1));
        HANDLE_CODE(sl_tx_mode2_random_res_sel_r17->harq_tx_process_mode_two_sidelink_r17.unpack(bref));
        if (sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
          HANDLE_CODE(sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17.unpack(bref));
        }
      }
      if (sync_sidelink_v1710.is_present()) {
        HANDLE_CODE(bref.unpack(sync_sidelink_v1710->sync_gnss_r17_present, 1));
        HANDLE_CODE(bref.unpack(sync_sidelink_v1710->gnb_sync_r17_present, 1));
        HANDLE_CODE(bref.unpack(sync_sidelink_v1710->gnb_gnss_ue_sync_with_prio_on_gnb_enb_r17_present, 1));
        HANDLE_CODE(bref.unpack(sync_sidelink_v1710->gnb_gnss_ue_sync_with_prio_on_gnss_r17_present, 1));
      }
      if (rx_iuc_scheme2_mode2_sidelink_r17_present) {
        HANDLE_CODE(rx_iuc_scheme2_mode2_sidelink_r17.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void band_sidelink_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("freqBandSidelink-r16", freq_band_sidelink_r16);
  if (sl_reception_r16_present) {
    j.write_fieldname("sl-Reception-r16");
    j.start_obj();
    j.write_str("harq-RxProcessSidelink-r16", sl_reception_r16.harq_rx_process_sidelink_r16.to_string());
    j.write_str("pscch-RxSidelink-r16", sl_reception_r16.pscch_rx_sidelink_r16.to_string());
    if (sl_reception_r16.scs_cp_pattern_rx_sidelink_r16_present) {
      j.write_fieldname("scs-CP-PatternRxSidelink-r16");
      sl_reception_r16.scs_cp_pattern_rx_sidelink_r16.to_json(j);
    }
    if (sl_reception_r16.extended_cp_rx_sidelink_r16_present) {
      j.write_str("extendedCP-RxSidelink-r16", "supported");
    }
    j.end_obj();
  }
  if (sl_tx_mode1_r16_present) {
    j.write_fieldname("sl-TransmissionMode1-r16");
    j.start_obj();
    j.write_str("harq-TxProcessModeOneSidelink-r16", sl_tx_mode1_r16.harq_tx_process_mode_one_sidelink_r16.to_string());
    j.write_fieldname("scs-CP-PatternTxSidelinkModeOne-r16");
    sl_tx_mode1_r16.scs_cp_pattern_tx_sidelink_mode_one_r16.to_json(j);
    if (sl_tx_mode1_r16.extended_cp_tx_sidelink_r16_present) {
      j.write_str("extendedCP-TxSidelink-r16", "supported");
    }
    if (sl_tx_mode1_r16.harq_report_on_pucch_r16_present) {
      j.write_str("harq-ReportOnPUCCH-r16", "supported");
    }
    j.end_obj();
  }
  if (sync_sidelink_r16_present) {
    j.write_fieldname("sync-Sidelink-r16");
    j.start_obj();
    if (sync_sidelink_r16.gnb_sync_r16_present) {
      j.write_str("gNB-Sync-r16", "supported");
    }
    if (sync_sidelink_r16.gnb_gnss_ue_sync_with_prio_on_gnb_enb_r16_present) {
      j.write_str("gNB-GNSS-UE-SyncWithPriorityOnGNB-ENB-r16", "supported");
    }
    if (sync_sidelink_r16.gnb_gnss_ue_sync_with_prio_on_gnss_r16_present) {
      j.write_str("gNB-GNSS-UE-SyncWithPriorityOnGNSS-r16", "supported");
    }
    j.end_obj();
  }
  if (sl_tx_256_qam_r16_present) {
    j.write_str("sl-Tx-256QAM-r16", "supported");
  }
  if (psfch_format_zero_sidelink_r16_present) {
    j.write_fieldname("psfch-FormatZeroSidelink-r16");
    j.start_obj();
    j.write_str("psfch-RxNumber", psfch_format_zero_sidelink_r16.psfch_rx_num.to_string());
    j.write_str("psfch-TxNumber", psfch_format_zero_sidelink_r16.psfch_tx_num.to_string());
    j.end_obj();
  }
  if (low_se_64_qam_mcs_table_sidelink_r16_present) {
    j.write_str("lowSE-64QAM-MCS-TableSidelink-r16", "supported");
  }
  if (enb_sync_sidelink_r16_present) {
    j.write_str("enb-sync-Sidelink-r16", "supported");
  }
  if (ext) {
    if (sl_tx_mode2_r16.is_present()) {
      j.write_fieldname("sl-TransmissionMode2-r16");
      j.start_obj();
      j.write_str("harq-TxProcessModeTwoSidelink-r16",
                  sl_tx_mode2_r16->harq_tx_process_mode_two_sidelink_r16.to_string());
      if (sl_tx_mode2_r16->scs_cp_pattern_tx_sidelink_mode_two_r16_present) {
        j.write_str("scs-CP-PatternTxSidelinkModeTwo-r16", "supported");
      }
      if (sl_tx_mode2_r16->dl_open_loop_pc_sidelink_r16_present) {
        j.write_str("dl-openLoopPC-Sidelink-r16", "supported");
      }
      j.end_obj();
    }
    if (congestion_ctrl_sidelink_r16.is_present()) {
      j.write_fieldname("congestionControlSidelink-r16");
      j.start_obj();
      if (congestion_ctrl_sidelink_r16->cbr_report_sidelink_r16_present) {
        j.write_str("cbr-ReportSidelink-r16", "supported");
      }
      j.write_str("cbr-CR-TimeLimitSidelink-r16",
                  congestion_ctrl_sidelink_r16->cbr_cr_time_limit_sidelink_r16.to_string());
      j.end_obj();
    }
    if (fewer_symbol_slot_sidelink_r16_present) {
      j.write_str("fewerSymbolSlotSidelink-r16", "supported");
    }
    if (sl_open_loop_pc_rsrp_report_sidelink_r16_present) {
      j.write_str("sl-openLoopPC-RSRP-ReportSidelink-r16", "supported");
    }
    if (sl_rx_256_qam_r16_present) {
      j.write_str("sl-Rx-256QAM-r16", "supported");
    }
    if (ue_pwr_class_sidelink_r16_present) {
      j.write_str("ue-PowerClassSidelink-r16", ue_pwr_class_sidelink_r16.to_string());
    }
    if (sl_tx_mode2_random_res_sel_r17.is_present()) {
      j.write_fieldname("sl-TransmissionMode2-RandomResourceSelection-r17");
      j.start_obj();
      j.write_str("harq-TxProcessModeTwoSidelink-r17",
                  sl_tx_mode2_random_res_sel_r17->harq_tx_process_mode_two_sidelink_r17.to_string());
      if (sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17_present) {
        j.write_fieldname("scs-CP-PatternTxSidelinkModeTwo-r17");
        sl_tx_mode2_random_res_sel_r17->scs_cp_pattern_tx_sidelink_mode_two_r17.to_json(j);
      }
      if (sl_tx_mode2_random_res_sel_r17->extended_cp_mode2_random_r17_present) {
        j.write_str("extendedCP-Mode2Random-r17", "supported");
      }
      if (sl_tx_mode2_random_res_sel_r17->dl_open_loop_pc_sidelink_r17_present) {
        j.write_str("dl-openLoopPC-Sidelink-r17", "supported");
      }
      j.end_obj();
    }
    if (sync_sidelink_v1710.is_present()) {
      j.write_fieldname("sync-Sidelink-v1710");
      j.start_obj();
      if (sync_sidelink_v1710->sync_gnss_r17_present) {
        j.write_str("sync-GNSS-r17", "supported");
      }
      if (sync_sidelink_v1710->gnb_sync_r17_present) {
        j.write_str("gNB-Sync-r17", "supported");
      }
      if (sync_sidelink_v1710->gnb_gnss_ue_sync_with_prio_on_gnb_enb_r17_present) {
        j.write_str("gNB-GNSS-UE-SyncWithPriorityOnGNB-ENB-r17", "supported");
      }
      if (sync_sidelink_v1710->gnb_gnss_ue_sync_with_prio_on_gnss_r17_present) {
        j.write_str("gNB-GNSS-UE-SyncWithPriorityOnGNSS-r17", "supported");
      }
      j.end_obj();
    }
    if (enb_sync_sidelink_v1710_present) {
      j.write_str("enb-sync-Sidelink-v1710", "supported");
    }
    if (rx_iuc_scheme1_preferred_mode2_sidelink_r17_present) {
      j.write_str("rx-IUC-Scheme1-PreferredMode2Sidelink-r17", "supported");
    }
    if (rx_iuc_scheme1_non_preferred_mode2_sidelink_r17_present) {
      j.write_str("rx-IUC-Scheme1-NonPreferredMode2Sidelink-r17", "supported");
    }
    if (rx_iuc_scheme2_mode2_sidelink_r17_present) {
      j.write_str("rx-IUC-Scheme2-Mode2Sidelink-r17", rx_iuc_scheme2_mode2_sidelink_r17.to_string());
    }
    if (rx_iuc_scheme1_sci_r17_present) {
      j.write_str("rx-IUC-Scheme1-SCI-r17", "supported");
    }
    if (rx_iuc_scheme1_sci_explicit_req_r17_present) {
      j.write_str("rx-IUC-Scheme1-SCI-ExplicitReq-r17", "supported");
    }
  }
  j.end_obj();
}

const char* band_sidelink_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(names, 5, value, "band_sidelink_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_e_");
}
uint8_t band_sidelink_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {16, 24, 32, 48, 64};
  return map_enum_number(
      numbers, 5, value, "band_sidelink_r16_s::sl_reception_r16_s_::harq_rx_process_sidelink_r16_e_");
}

const char* band_sidelink_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"value1", "value2"};
  return convert_enum_idx(names, 2, value, "band_sidelink_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_e_");
}
uint8_t band_sidelink_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "band_sidelink_r16_s::sl_reception_r16_s_::pscch_rx_sidelink_r16_e_");
}

void band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::destroy_()
{
  switch (type_) {
    case types::fr1_r16:
      c.destroy<fr1_r16_s_>();
      break;
    case types::fr2_r16:
      c.destroy<fr2_r16_s_>();
      break;
    default:
      break;
  }
}
void band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_r16:
      c.init<fr1_r16_s_>();
      break;
    case types::fr2_r16:
      c.init<fr2_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }
}
band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::scs_cp_pattern_rx_sidelink_r16_c_(
    const band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r16:
      c.init(other.c.get<fr1_r16_s_>());
      break;
    case types::fr2_r16:
      c.init(other.c.get<fr2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }
}
band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_&
band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::operator=(
    const band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r16:
      c.set(other.c.get<fr1_r16_s_>());
      break;
    case types::fr2_r16:
      c.set(other.c.get<fr2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }

  return *this;
}
band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::fr1_r16_s_&
band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::set_fr1_r16()
{
  set(types::fr1_r16);
  return c.get<fr1_r16_s_>();
}
band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::fr2_r16_s_&
band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::set_fr2_r16()
{
  set(types::fr2_r16);
  return c.get<fr2_r16_s_>();
}
void band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r16:
      j.write_fieldname("fr1-r16");
      j.start_obj();
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        j.write_str("scs-15kHz-r16", c.get<fr1_r16_s_>().scs_15k_hz_r16.to_string());
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        j.write_str("scs-30kHz-r16", c.get<fr1_r16_s_>().scs_30k_hz_r16.to_string());
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        j.write_str("scs-60kHz-r16", c.get<fr1_r16_s_>().scs_60k_hz_r16.to_string());
      }
      j.end_obj();
      break;
    case types::fr2_r16:
      j.write_fieldname("fr2-r16");
      j.start_obj();
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        j.write_str("scs-60kHz-r16", c.get<fr2_r16_s_>().scs_60k_hz_r16.to_string());
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        j.write_str("scs-120kHz-r16", c.get<fr2_r16_s_>().scs_120k_hz_r16.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r16:
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_30k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_60k_hz_r16_present, 1));
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_15k_hz_r16.pack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_30k_hz_r16.pack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_60k_hz_r16.pack(bref));
      }
      break;
    case types::fr2_r16:
      HANDLE_CODE(bref.pack(c.get<fr2_r16_s_>().scs_60k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_r16_s_>().scs_120k_hz_r16_present, 1));
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_60k_hz_r16.pack(bref));
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_120k_hz_r16.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r16:
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_30k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_60k_hz_r16_present, 1));
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_15k_hz_r16.unpack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_30k_hz_r16.unpack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_60k_hz_r16.unpack(bref));
      }
      break;
    case types::fr2_r16:
      HANDLE_CODE(bref.unpack(c.get<fr2_r16_s_>().scs_60k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_r16_s_>().scs_120k_hz_r16_present, 1));
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_60k_hz_r16.unpack(bref));
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_120k_hz_r16.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_, "band_sidelink_r16_s::sl_reception_r16_s_::scs_cp_pattern_rx_sidelink_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_sidelink_r16_s::sl_tx_mode1_r16_s_::harq_tx_process_mode_one_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(
      names, 2, value, "band_sidelink_r16_s::sl_tx_mode1_r16_s_::harq_tx_process_mode_one_sidelink_r16_e_");
}
uint8_t band_sidelink_r16_s::sl_tx_mode1_r16_s_::harq_tx_process_mode_one_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(
      numbers, 2, value, "band_sidelink_r16_s::sl_tx_mode1_r16_s_::harq_tx_process_mode_one_sidelink_r16_e_");
}

void band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::destroy_()
{
  switch (type_) {
    case types::fr1_r16:
      c.destroy<fr1_r16_s_>();
      break;
    case types::fr2_r16:
      c.destroy<fr2_r16_s_>();
      break;
    default:
      break;
  }
}
void band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_r16:
      c.init<fr1_r16_s_>();
      break;
    case types::fr2_r16:
      c.init<fr2_r16_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_");
  }
}
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::
    scs_cp_pattern_tx_sidelink_mode_one_r16_c_(
        const band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r16:
      c.init(other.c.get<fr1_r16_s_>());
      break;
    case types::fr2_r16:
      c.init(other.c.get<fr2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_");
  }
}
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_&
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::operator=(
    const band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r16:
      c.set(other.c.get<fr1_r16_s_>());
      break;
    case types::fr2_r16:
      c.set(other.c.get<fr2_r16_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_");
  }

  return *this;
}
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::fr1_r16_s_&
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::set_fr1_r16()
{
  set(types::fr1_r16);
  return c.get<fr1_r16_s_>();
}
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::fr2_r16_s_&
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::set_fr2_r16()
{
  set(types::fr2_r16);
  return c.get<fr2_r16_s_>();
}
void band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r16:
      j.write_fieldname("fr1-r16");
      j.start_obj();
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        j.write_str("scs-15kHz-r16", c.get<fr1_r16_s_>().scs_15k_hz_r16.to_string());
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        j.write_str("scs-30kHz-r16", c.get<fr1_r16_s_>().scs_30k_hz_r16.to_string());
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        j.write_str("scs-60kHz-r16", c.get<fr1_r16_s_>().scs_60k_hz_r16.to_string());
      }
      j.end_obj();
      break;
    case types::fr2_r16:
      j.write_fieldname("fr2-r16");
      j.start_obj();
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        j.write_str("scs-60kHz-r16", c.get<fr2_r16_s_>().scs_60k_hz_r16.to_string());
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        j.write_str("scs-120kHz-r16", c.get<fr2_r16_s_>().scs_120k_hz_r16.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE
band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r16:
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_30k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r16_s_>().scs_60k_hz_r16_present, 1));
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_15k_hz_r16.pack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_30k_hz_r16.pack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_60k_hz_r16.pack(bref));
      }
      break;
    case types::fr2_r16:
      HANDLE_CODE(bref.pack(c.get<fr2_r16_s_>().scs_60k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_r16_s_>().scs_120k_hz_r16_present, 1));
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_60k_hz_r16.pack(bref));
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_120k_hz_r16.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r16:
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_30k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r16_s_>().scs_60k_hz_r16_present, 1));
      if (c.get<fr1_r16_s_>().scs_15k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_15k_hz_r16.unpack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_30k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_30k_hz_r16.unpack(bref));
      }
      if (c.get<fr1_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr1_r16_s_>().scs_60k_hz_r16.unpack(bref));
      }
      break;
    case types::fr2_r16:
      HANDLE_CODE(bref.unpack(c.get<fr2_r16_s_>().scs_60k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_r16_s_>().scs_120k_hz_r16_present, 1));
      if (c.get<fr2_r16_s_>().scs_60k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_60k_hz_r16.unpack(bref));
      }
      if (c.get<fr2_r16_s_>().scs_120k_hz_r16_present) {
        HANDLE_CODE(c.get<fr2_r16_s_>().scs_120k_hz_r16.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(type_,
                            "band_sidelink_r16_s::sl_tx_mode1_r16_s_::scs_cp_pattern_tx_sidelink_mode_one_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_rx_num_opts::to_string() const
{
  static const char* names[] = {"n5", "n15", "n25", "n32", "n35", "n45", "n50", "n64"};
  return convert_enum_idx(names, 8, value, "band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_rx_num_e_");
}
uint8_t band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_rx_num_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 15, 25, 32, 35, 45, 50, 64};
  return map_enum_number(numbers, 8, value, "band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_rx_num_e_");
}

const char* band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_tx_num_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16"};
  return convert_enum_idx(names, 3, value, "band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_tx_num_e_");
}
uint8_t band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_tx_num_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16};
  return map_enum_number(numbers, 3, value, "band_sidelink_r16_s::psfch_format_zero_sidelink_r16_s_::psfch_tx_num_e_");
}

const char* band_sidelink_r16_s::sl_tx_mode2_r16_s_::harq_tx_process_mode_two_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(
      names, 2, value, "band_sidelink_r16_s::sl_tx_mode2_r16_s_::harq_tx_process_mode_two_sidelink_r16_e_");
}
uint8_t band_sidelink_r16_s::sl_tx_mode2_r16_s_::harq_tx_process_mode_two_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(
      numbers, 2, value, "band_sidelink_r16_s::sl_tx_mode2_r16_s_::harq_tx_process_mode_two_sidelink_r16_e_");
}

const char* band_sidelink_r16_s::congestion_ctrl_sidelink_r16_s_::cbr_cr_time_limit_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"time1", "time2"};
  return convert_enum_idx(
      names, 2, value, "band_sidelink_r16_s::congestion_ctrl_sidelink_r16_s_::cbr_cr_time_limit_sidelink_r16_e_");
}
uint8_t band_sidelink_r16_s::congestion_ctrl_sidelink_r16_s_::cbr_cr_time_limit_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(
      numbers, 2, value, "band_sidelink_r16_s::congestion_ctrl_sidelink_r16_s_::cbr_cr_time_limit_sidelink_r16_e_");
}

const char* band_sidelink_r16_s::ue_pwr_class_sidelink_r16_opts::to_string() const
{
  static const char* names[] = {"pc2", "pc3", "spare6", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "band_sidelink_r16_s::ue_pwr_class_sidelink_r16_e_");
}
uint8_t band_sidelink_r16_s::ue_pwr_class_sidelink_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(numbers, 2, value, "band_sidelink_r16_s::ue_pwr_class_sidelink_r16_e_");
}

const char*
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::harq_tx_process_mode_two_sidelink_r17_opts::to_string() const
{
  static const char* names[] = {"n8", "n16"};
  return convert_enum_idx(
      names,
      2,
      value,
      "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::harq_tx_process_mode_two_sidelink_r17_e_");
}
uint8_t
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::harq_tx_process_mode_two_sidelink_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16};
  return map_enum_number(
      numbers,
      2,
      value,
      "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::harq_tx_process_mode_two_sidelink_r17_e_");
}

void band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::destroy_()
{
  switch (type_) {
    case types::fr1_r17:
      c.destroy<fr1_r17_s_>();
      break;
    case types::fr2_r17:
      c.destroy<fr2_r17_s_>();
      break;
    default:
      break;
  }
}
void band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set(
    types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::fr1_r17:
      c.init<fr1_r17_s_>();
      break;
    case types::fr2_r17:
      c.init<fr2_r17_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_");
  }
}
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::
    scs_cp_pattern_tx_sidelink_mode_two_r17_c_(
        const band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r17:
      c.init(other.c.get<fr1_r17_s_>());
      break;
    case types::fr2_r17:
      c.init(other.c.get<fr2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_");
  }
}
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_&
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::operator=(
    const band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r17:
      c.set(other.c.get<fr1_r17_s_>());
      break;
    case types::fr2_r17:
      c.set(other.c.get<fr2_r17_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(
          type_, "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_");
  }

  return *this;
}
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::fr1_r17_s_&
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set_fr1_r17()
{
  set(types::fr1_r17);
  return c.get<fr1_r17_s_>();
}
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::fr2_r17_s_&
band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::set_fr2_r17()
{
  set(types::fr2_r17);
  return c.get<fr2_r17_s_>();
}
void band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::to_json(
    json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r17:
      j.write_fieldname("fr1-r17");
      j.start_obj();
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        j.write_str("scs-15kHz-r17", c.get<fr1_r17_s_>().scs_15k_hz_r17.to_string());
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        j.write_str("scs-30kHz-r17", c.get<fr1_r17_s_>().scs_30k_hz_r17.to_string());
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        j.write_str("scs-60kHz-r17", c.get<fr1_r17_s_>().scs_60k_hz_r17.to_string());
      }
      j.end_obj();
      break;
    case types::fr2_r17:
      j.write_fieldname("fr2-r17");
      j.start_obj();
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        j.write_str("scs-60kHz-r17", c.get<fr2_r17_s_>().scs_60k_hz_r17.to_string());
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        j.write_str("scs-120kHz-r17", c.get<fr2_r17_s_>().scs_120k_hz_r17.to_string());
      }
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(
          type_, "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_");
  }
  j.end_obj();
}
SRSASN_CODE band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::pack(
    bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_15k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_30k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr1_r17_s_>().scs_60k_hz_r17_present, 1));
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_15k_hz_r17.pack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_30k_hz_r17.pack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_60k_hz_r17.pack(bref));
      }
      break;
    case types::fr2_r17:
      HANDLE_CODE(bref.pack(c.get<fr2_r17_s_>().scs_60k_hz_r17_present, 1));
      HANDLE_CODE(bref.pack(c.get<fr2_r17_s_>().scs_120k_hz_r17_present, 1));
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_60k_hz_r17.pack(bref));
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_120k_hz_r17.pack(bref));
      }
      break;
    default:
      log_invalid_choice_id(
          type_, "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_::unpack(
    cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_15k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_30k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr1_r17_s_>().scs_60k_hz_r17_present, 1));
      if (c.get<fr1_r17_s_>().scs_15k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_15k_hz_r17.unpack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_30k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_30k_hz_r17.unpack(bref));
      }
      if (c.get<fr1_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr1_r17_s_>().scs_60k_hz_r17.unpack(bref));
      }
      break;
    case types::fr2_r17:
      HANDLE_CODE(bref.unpack(c.get<fr2_r17_s_>().scs_60k_hz_r17_present, 1));
      HANDLE_CODE(bref.unpack(c.get<fr2_r17_s_>().scs_120k_hz_r17_present, 1));
      if (c.get<fr2_r17_s_>().scs_60k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_60k_hz_r17.unpack(bref));
      }
      if (c.get<fr2_r17_s_>().scs_120k_hz_r17_present) {
        HANDLE_CODE(c.get<fr2_r17_s_>().scs_120k_hz_r17.unpack(bref));
      }
      break;
    default:
      log_invalid_choice_id(
          type_, "band_sidelink_r16_s::sl_tx_mode2_random_res_sel_r17_s_::scs_cp_pattern_tx_sidelink_mode_two_r17_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* band_sidelink_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_opts::to_string() const
{
  static const char* names[] = {"n5", "n15", "n25", "n32", "n35", "n45", "n50", "n64"};
  return convert_enum_idx(names, 8, value, "band_sidelink_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_e_");
}
uint8_t band_sidelink_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 15, 25, 32, 35, 45, 50, 64};
  return map_enum_number(numbers, 8, value, "band_sidelink_r16_s::rx_iuc_scheme2_mode2_sidelink_r17_e_");
}

// BandSidelinkEUTRA-r16 ::= SEQUENCE
SRSASN_CODE band_sidelink_eutra_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(gnb_sched_mode3_sidelink_eutra_r16_present, 1));
  HANDLE_CODE(bref.pack(gnb_sched_mode4_sidelink_eutra_r16_present, 1));

  HANDLE_CODE(pack_integer(bref, freq_band_sidelink_eutra_r16, (uint16_t)1u, (uint16_t)256u));
  if (gnb_sched_mode3_sidelink_eutra_r16_present) {
    HANDLE_CODE(gnb_sched_mode3_sidelink_eutra_r16.gnb_sched_mode3_delay_sidelink_eutra_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE band_sidelink_eutra_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(gnb_sched_mode3_sidelink_eutra_r16_present, 1));
  HANDLE_CODE(bref.unpack(gnb_sched_mode4_sidelink_eutra_r16_present, 1));

  HANDLE_CODE(unpack_integer(freq_band_sidelink_eutra_r16, bref, (uint16_t)1u, (uint16_t)256u));
  if (gnb_sched_mode3_sidelink_eutra_r16_present) {
    HANDLE_CODE(gnb_sched_mode3_sidelink_eutra_r16.gnb_sched_mode3_delay_sidelink_eutra_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void band_sidelink_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("freqBandSidelinkEUTRA-r16", freq_band_sidelink_eutra_r16);
  if (gnb_sched_mode3_sidelink_eutra_r16_present) {
    j.write_fieldname("gnb-ScheduledMode3SidelinkEUTRA-r16");
    j.start_obj();
    j.write_str("gnb-ScheduledMode3DelaySidelinkEUTRA-r16",
                gnb_sched_mode3_sidelink_eutra_r16.gnb_sched_mode3_delay_sidelink_eutra_r16.to_string());
    j.end_obj();
  }
  if (gnb_sched_mode4_sidelink_eutra_r16_present) {
    j.write_str("gnb-ScheduledMode4SidelinkEUTRA-r16", "supported");
  }
  j.end_obj();
}

const char* band_sidelink_eutra_r16_s::gnb_sched_mode3_sidelink_eutra_r16_s_::
    gnb_sched_mode3_delay_sidelink_eutra_r16_opts::to_string() const
{
  static const char* names[] = {"ms0",
                                "ms0dot25",
                                "ms0dot5",
                                "ms0dot625",
                                "ms0dot75",
                                "ms1",
                                "ms1dot25",
                                "ms1dot5",
                                "ms1dot75",
                                "ms2",
                                "ms2dot5",
                                "ms3",
                                "ms4",
                                "ms5",
                                "ms6",
                                "ms8",
                                "ms10",
                                "ms20"};
  return convert_enum_idx(
      names,
      18,
      value,
      "band_sidelink_eutra_r16_s::gnb_sched_mode3_sidelink_eutra_r16_s_::gnb_sched_mode3_delay_sidelink_eutra_r16_e_");
}
float band_sidelink_eutra_r16_s::gnb_sched_mode3_sidelink_eutra_r16_s_::gnb_sched_mode3_delay_sidelink_eutra_r16_opts::
    to_number() const
{
  static const float numbers[] = {
      0.0, 0.25, 0.5, 0.625, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0, 8.0, 10.0, 20.0};
  return map_enum_number(
      numbers,
      18,
      value,
      "band_sidelink_eutra_r16_s::gnb_sched_mode3_sidelink_eutra_r16_s_::gnb_sched_mode3_delay_sidelink_eutra_r16_e_");
}
const char* band_sidelink_eutra_r16_s::gnb_sched_mode3_sidelink_eutra_r16_s_::
    gnb_sched_mode3_delay_sidelink_eutra_r16_opts::to_number_string() const
{
  static const char* number_strs[] = {
      "0", "0.25", "0.5", "0.625", "0.75", "1", "1.25", "1.5", "1.75", "2", "2.5", "3", "4", "5", "6", "8", "10", "20"};
  return convert_enum_idx(
      number_strs,
      18,
      value,
      "band_sidelink_eutra_r16_s::gnb_sched_mode3_sidelink_eutra_r16_s_::gnb_sched_mode3_delay_sidelink_eutra_r16_e_");
}

// EUTRA-ParametersCommon ::= SEQUENCE
SRSASN_CODE eutra_params_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(mfbi_eutra_present, 1));
  HANDLE_CODE(bref.pack(modified_mpr_behavior_eutra_present, 1));
  HANDLE_CODE(bref.pack(multi_ns_pmax_eutra_present, 1));
  HANDLE_CODE(bref.pack(rs_sinr_meas_eutra_present, 1));

  if (modified_mpr_behavior_eutra_present) {
    HANDLE_CODE(modified_mpr_behavior_eutra.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ne_dc_present;
    group_flags[1] |= nr_ho_to_en_dc_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ne_dc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(nr_ho_to_en_dc_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_params_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(mfbi_eutra_present, 1));
  HANDLE_CODE(bref.unpack(modified_mpr_behavior_eutra_present, 1));
  HANDLE_CODE(bref.unpack(multi_ns_pmax_eutra_present, 1));
  HANDLE_CODE(bref.unpack(rs_sinr_meas_eutra_present, 1));

  if (modified_mpr_behavior_eutra_present) {
    HANDLE_CODE(modified_mpr_behavior_eutra.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ne_dc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(nr_ho_to_en_dc_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void eutra_params_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mfbi_eutra_present) {
    j.write_str("mfbi-EUTRA", "supported");
  }
  if (modified_mpr_behavior_eutra_present) {
    j.write_str("modifiedMPR-BehaviorEUTRA", modified_mpr_behavior_eutra.to_string());
  }
  if (multi_ns_pmax_eutra_present) {
    j.write_str("multiNS-Pmax-EUTRA", "supported");
  }
  if (rs_sinr_meas_eutra_present) {
    j.write_str("rs-SINR-MeasEUTRA", "supported");
  }
  if (ext) {
    if (ne_dc_present) {
      j.write_str("ne-DC", "supported");
    }
    if (nr_ho_to_en_dc_r16_present) {
      j.write_str("nr-HO-ToEN-DC-r16", "supported");
    }
  }
  j.end_obj();
}

// EUTRA-ParametersXDD-Diff ::= SEQUENCE
SRSASN_CODE eutra_params_xdd_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rsrq_meas_wideband_eutra_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_params_xdd_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rsrq_meas_wideband_eutra_present, 1));

  return SRSASN_SUCCESS;
}
void eutra_params_xdd_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rsrq_meas_wideband_eutra_present) {
    j.write_str("rsrqMeasWidebandEUTRA", "supported");
  }
  j.end_obj();
}

// EUTRA-Parameters ::= SEQUENCE
SRSASN_CODE eutra_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(eutra_params_common_present, 1));
  HANDLE_CODE(bref.pack(eutra_params_xdd_diff_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_eutra, 1, 256, integer_packer<uint16_t>(1, 256)));
  if (eutra_params_common_present) {
    HANDLE_CODE(eutra_params_common.pack(bref));
  }
  if (eutra_params_xdd_diff_present) {
    HANDLE_CODE(eutra_params_xdd_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE eutra_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(eutra_params_common_present, 1));
  HANDLE_CODE(bref.unpack(eutra_params_xdd_diff_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_eutra, bref, 1, 256, integer_packer<uint16_t>(1, 256)));
  if (eutra_params_common_present) {
    HANDLE_CODE(eutra_params_common.unpack(bref));
  }
  if (eutra_params_xdd_diff_present) {
    HANDLE_CODE(eutra_params_xdd_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void eutra_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("supportedBandListEUTRA");
  for (const auto& e1 : supported_band_list_eutra) {
    j.write_int(e1);
  }
  j.end_array();
  if (eutra_params_common_present) {
    j.write_fieldname("eutra-ParametersCommon");
    eutra_params_common.to_json(j);
  }
  if (eutra_params_xdd_diff_present) {
    j.write_fieldname("eutra-ParametersXDD-Diff");
    eutra_params_xdd_diff.to_json(j);
  }
  j.end_obj();
}

// FeatureSet ::= CHOICE
void feature_set_c::destroy_()
{
  switch (type_) {
    case types::eutra:
      c.destroy<eutra_s_>();
      break;
    case types::nr:
      c.destroy<nr_s_>();
      break;
    default:
      break;
  }
}
void feature_set_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::eutra:
      c.init<eutra_s_>();
      break;
    case types::nr:
      c.init<nr_s_>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "feature_set_c");
  }
}
feature_set_c::feature_set_c(const feature_set_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::eutra:
      c.init(other.c.get<eutra_s_>());
      break;
    case types::nr:
      c.init(other.c.get<nr_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "feature_set_c");
  }
}
feature_set_c& feature_set_c::operator=(const feature_set_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::eutra:
      c.set(other.c.get<eutra_s_>());
      break;
    case types::nr:
      c.set(other.c.get<nr_s_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "feature_set_c");
  }

  return *this;
}
feature_set_c::eutra_s_& feature_set_c::set_eutra()
{
  set(types::eutra);
  return c.get<eutra_s_>();
}
feature_set_c::nr_s_& feature_set_c::set_nr()
{
  set(types::nr);
  return c.get<nr_s_>();
}
void feature_set_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::eutra:
      j.write_fieldname("eutra");
      j.start_obj();
      j.write_int("downlinkSetEUTRA", c.get<eutra_s_>().dl_set_eutra);
      j.write_int("uplinkSetEUTRA", c.get<eutra_s_>().ul_set_eutra);
      j.end_obj();
      break;
    case types::nr:
      j.write_fieldname("nr");
      j.start_obj();
      j.write_int("downlinkSetNR", c.get<nr_s_>().dl_set_nr);
      j.write_int("uplinkSetNR", c.get<nr_s_>().ul_set_nr);
      j.end_obj();
      break;
    default:
      log_invalid_choice_id(type_, "feature_set_c");
  }
  j.end_obj();
}
SRSASN_CODE feature_set_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::eutra:
      HANDLE_CODE(pack_integer(bref, c.get<eutra_s_>().dl_set_eutra, (uint16_t)0u, (uint16_t)256u));
      HANDLE_CODE(pack_integer(bref, c.get<eutra_s_>().ul_set_eutra, (uint16_t)0u, (uint16_t)256u));
      break;
    case types::nr:
      HANDLE_CODE(pack_integer(bref, c.get<nr_s_>().dl_set_nr, (uint16_t)0u, (uint16_t)1024u));
      HANDLE_CODE(pack_integer(bref, c.get<nr_s_>().ul_set_nr, (uint16_t)0u, (uint16_t)1024u));
      break;
    default:
      log_invalid_choice_id(type_, "feature_set_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::eutra:
      HANDLE_CODE(unpack_integer(c.get<eutra_s_>().dl_set_eutra, bref, (uint16_t)0u, (uint16_t)256u));
      HANDLE_CODE(unpack_integer(c.get<eutra_s_>().ul_set_eutra, bref, (uint16_t)0u, (uint16_t)256u));
      break;
    case types::nr:
      HANDLE_CODE(unpack_integer(c.get<nr_s_>().dl_set_nr, bref, (uint16_t)0u, (uint16_t)1024u));
      HANDLE_CODE(unpack_integer(c.get<nr_s_>().ul_set_nr, bref, (uint16_t)0u, (uint16_t)1024u));
      break;
    default:
      log_invalid_choice_id(type_, "feature_set_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// DummyA ::= SEQUENCE
SRSASN_CODE dummy_a_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, max_num_nzp_csi_rs_per_cc, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(max_num_ports_across_nzp_csi_rs_per_cc.pack(bref));
  HANDLE_CODE(max_num_cs_im_per_cc.pack(bref));
  HANDLE_CODE(max_num_simul_csi_rs_act_bwp_all_cc.pack(bref));
  HANDLE_CODE(total_num_ports_simul_csi_rs_act_bwp_all_cc.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_a_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(max_num_nzp_csi_rs_per_cc, bref, (uint8_t)1u, (uint8_t)32u));
  HANDLE_CODE(max_num_ports_across_nzp_csi_rs_per_cc.unpack(bref));
  HANDLE_CODE(max_num_cs_im_per_cc.unpack(bref));
  HANDLE_CODE(max_num_simul_csi_rs_act_bwp_all_cc.unpack(bref));
  HANDLE_CODE(total_num_ports_simul_csi_rs_act_bwp_all_cc.unpack(bref));

  return SRSASN_SUCCESS;
}
void dummy_a_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxNumberNZP-CSI-RS-PerCC", max_num_nzp_csi_rs_per_cc);
  j.write_str("maxNumberPortsAcrossNZP-CSI-RS-PerCC", max_num_ports_across_nzp_csi_rs_per_cc.to_string());
  j.write_str("maxNumberCS-IM-PerCC", max_num_cs_im_per_cc.to_string());
  j.write_str("maxNumberSimultaneousCSI-RS-ActBWP-AllCC", max_num_simul_csi_rs_act_bwp_all_cc.to_string());
  j.write_str("totalNumberPortsSimultaneousCSI-RS-ActBWP-AllCC",
              total_num_ports_simul_csi_rs_act_bwp_all_cc.to_string());
  j.end_obj();
}

const char* dummy_a_s::max_num_ports_across_nzp_csi_rs_per_cc_opts::to_string() const
{
  static const char* names[] = {"p2",   "p4",   "p8",   "p12",  "p16",  "p24",  "p32",  "p40",  "p48",
                                "p56",  "p64",  "p72",  "p80",  "p88",  "p96",  "p104", "p112", "p120",
                                "p128", "p136", "p144", "p152", "p160", "p168", "p176", "p184", "p192",
                                "p200", "p208", "p216", "p224", "p232", "p240", "p248", "p256"};
  return convert_enum_idx(names, 35, value, "dummy_a_s::max_num_ports_across_nzp_csi_rs_per_cc_e_");
}
uint16_t dummy_a_s::max_num_ports_across_nzp_csi_rs_per_cc_opts::to_number() const
{
  static const uint16_t numbers[] = {2,   4,   8,   12,  16,  24,  32,  40,  48,  56,  64,  72,
                                     80,  88,  96,  104, 112, 120, 128, 136, 144, 152, 160, 168,
                                     176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 256};
  return map_enum_number(numbers, 35, value, "dummy_a_s::max_num_ports_across_nzp_csi_rs_per_cc_e_");
}

const char* dummy_a_s::max_num_cs_im_per_cc_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32"};
  return convert_enum_idx(names, 6, value, "dummy_a_s::max_num_cs_im_per_cc_e_");
}
uint8_t dummy_a_s::max_num_cs_im_per_cc_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32};
  return map_enum_number(numbers, 6, value, "dummy_a_s::max_num_cs_im_per_cc_e_");
}

const char* dummy_a_s::max_num_simul_csi_rs_act_bwp_all_cc_opts::to_string() const
{
  static const char* names[] = {"n5",  "n6",  "n7",  "n8",  "n9",  "n10", "n12", "n14", "n16", "n18", "n20",
                                "n22", "n24", "n26", "n28", "n30", "n32", "n34", "n36", "n38", "n40", "n42",
                                "n44", "n46", "n48", "n50", "n52", "n54", "n56", "n58", "n60", "n62", "n64"};
  return convert_enum_idx(names, 33, value, "dummy_a_s::max_num_simul_csi_rs_act_bwp_all_cc_e_");
}
uint8_t dummy_a_s::max_num_simul_csi_rs_act_bwp_all_cc_opts::to_number() const
{
  static const uint8_t numbers[] = {5,  6,  7,  8,  9,  10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32,
                                    34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64};
  return map_enum_number(numbers, 33, value, "dummy_a_s::max_num_simul_csi_rs_act_bwp_all_cc_e_");
}

const char* dummy_a_s::total_num_ports_simul_csi_rs_act_bwp_all_cc_opts::to_string() const
{
  static const char* names[] = {"p8",   "p12",  "p16",  "p24",  "p32",  "p40",  "p48",  "p56",  "p64",  "p72",  "p80",
                                "p88",  "p96",  "p104", "p112", "p120", "p128", "p136", "p144", "p152", "p160", "p168",
                                "p176", "p184", "p192", "p200", "p208", "p216", "p224", "p232", "p240", "p248", "p256"};
  return convert_enum_idx(names, 33, value, "dummy_a_s::total_num_ports_simul_csi_rs_act_bwp_all_cc_e_");
}
uint16_t dummy_a_s::total_num_ports_simul_csi_rs_act_bwp_all_cc_opts::to_number() const
{
  static const uint16_t numbers[] = {8,   12,  16,  24,  32,  40,  48,  56,  64,  72,  80,
                                     88,  96,  104, 112, 120, 128, 136, 144, 152, 160, 168,
                                     176, 184, 192, 200, 208, 216, 224, 232, 240, 248, 256};
  return map_enum_number(numbers, 33, value, "dummy_a_s::total_num_ports_simul_csi_rs_act_bwp_all_cc_e_");
}

// DummyB ::= SEQUENCE
SRSASN_CODE dummy_b_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_tx_ports_per_res.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_res, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, total_num_tx_ports, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(supported_codebook_mode.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_csi_rs_per_res_set, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_b_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_tx_ports_per_res.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_res, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(total_num_tx_ports, bref, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(supported_codebook_mode.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_csi_rs_per_res_set, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void dummy_b_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberTxPortsPerResource", max_num_tx_ports_per_res.to_string());
  j.write_int("maxNumberResources", max_num_res);
  j.write_int("totalNumberTxPorts", total_num_tx_ports);
  j.write_str("supportedCodebookMode", supported_codebook_mode.to_string());
  j.write_int("maxNumberCSI-RS-PerResourceSet", max_num_csi_rs_per_res_set);
  j.end_obj();
}

const char* dummy_b_s::max_num_tx_ports_per_res_opts::to_string() const
{
  static const char* names[] = {"p2", "p4", "p8", "p12", "p16", "p24", "p32"};
  return convert_enum_idx(names, 7, value, "dummy_b_s::max_num_tx_ports_per_res_e_");
}
uint8_t dummy_b_s::max_num_tx_ports_per_res_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12, 16, 24, 32};
  return map_enum_number(numbers, 7, value, "dummy_b_s::max_num_tx_ports_per_res_e_");
}

const char* dummy_b_s::supported_codebook_mode_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode1AndMode2"};
  return convert_enum_idx(names, 2, value, "dummy_b_s::supported_codebook_mode_e_");
}

// DummyC ::= SEQUENCE
SRSASN_CODE dummy_c_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_tx_ports_per_res.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_res, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, total_num_tx_ports, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(supported_codebook_mode.pack(bref));
  HANDLE_CODE(supported_num_panels.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_csi_rs_per_res_set, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_c_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_tx_ports_per_res.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_res, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(total_num_tx_ports, bref, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(supported_codebook_mode.unpack(bref));
  HANDLE_CODE(supported_num_panels.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_csi_rs_per_res_set, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void dummy_c_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberTxPortsPerResource", max_num_tx_ports_per_res.to_string());
  j.write_int("maxNumberResources", max_num_res);
  j.write_int("totalNumberTxPorts", total_num_tx_ports);
  j.write_str("supportedCodebookMode", supported_codebook_mode.to_string());
  j.write_str("supportedNumberPanels", supported_num_panels.to_string());
  j.write_int("maxNumberCSI-RS-PerResourceSet", max_num_csi_rs_per_res_set);
  j.end_obj();
}

const char* dummy_c_s::max_num_tx_ports_per_res_opts::to_string() const
{
  static const char* names[] = {"p8", "p16", "p32"};
  return convert_enum_idx(names, 3, value, "dummy_c_s::max_num_tx_ports_per_res_e_");
}
uint8_t dummy_c_s::max_num_tx_ports_per_res_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32};
  return map_enum_number(numbers, 3, value, "dummy_c_s::max_num_tx_ports_per_res_e_");
}

const char* dummy_c_s::supported_codebook_mode_opts::to_string() const
{
  static const char* names[] = {"mode1", "mode2", "both"};
  return convert_enum_idx(names, 3, value, "dummy_c_s::supported_codebook_mode_e_");
}
uint8_t dummy_c_s::supported_codebook_mode_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "dummy_c_s::supported_codebook_mode_e_");
}

const char* dummy_c_s::supported_num_panels_opts::to_string() const
{
  static const char* names[] = {"n2", "n4"};
  return convert_enum_idx(names, 2, value, "dummy_c_s::supported_num_panels_e_");
}
uint8_t dummy_c_s::supported_num_panels_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4};
  return map_enum_number(numbers, 2, value, "dummy_c_s::supported_num_panels_e_");
}

// DummyD ::= SEQUENCE
SRSASN_CODE dummy_d_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(amplitude_subset_restrict_present, 1));

  HANDLE_CODE(max_num_tx_ports_per_res.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_res, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, total_num_tx_ports, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(pack_integer(bref, param_lx, (uint8_t)2u, (uint8_t)4u));
  HANDLE_CODE(amplitude_scaling_type.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_csi_rs_per_res_set, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_d_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(amplitude_subset_restrict_present, 1));

  HANDLE_CODE(max_num_tx_ports_per_res.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_res, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(total_num_tx_ports, bref, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(unpack_integer(param_lx, bref, (uint8_t)2u, (uint8_t)4u));
  HANDLE_CODE(amplitude_scaling_type.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_csi_rs_per_res_set, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void dummy_d_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberTxPortsPerResource", max_num_tx_ports_per_res.to_string());
  j.write_int("maxNumberResources", max_num_res);
  j.write_int("totalNumberTxPorts", total_num_tx_ports);
  j.write_int("parameterLx", param_lx);
  j.write_str("amplitudeScalingType", amplitude_scaling_type.to_string());
  if (amplitude_subset_restrict_present) {
    j.write_str("amplitudeSubsetRestriction", "supported");
  }
  j.write_int("maxNumberCSI-RS-PerResourceSet", max_num_csi_rs_per_res_set);
  j.end_obj();
}

const char* dummy_d_s::max_num_tx_ports_per_res_opts::to_string() const
{
  static const char* names[] = {"p4", "p8", "p12", "p16", "p24", "p32"};
  return convert_enum_idx(names, 6, value, "dummy_d_s::max_num_tx_ports_per_res_e_");
}
uint8_t dummy_d_s::max_num_tx_ports_per_res_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 12, 16, 24, 32};
  return map_enum_number(numbers, 6, value, "dummy_d_s::max_num_tx_ports_per_res_e_");
}

const char* dummy_d_s::amplitude_scaling_type_opts::to_string() const
{
  static const char* names[] = {"wideband", "widebandAndSubband"};
  return convert_enum_idx(names, 2, value, "dummy_d_s::amplitude_scaling_type_e_");
}

// DummyE ::= SEQUENCE
SRSASN_CODE dummy_e_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_tx_ports_per_res.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_res, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(pack_integer(bref, total_num_tx_ports, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(pack_integer(bref, param_lx, (uint8_t)2u, (uint8_t)4u));
  HANDLE_CODE(amplitude_scaling_type.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_csi_rs_per_res_set, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_e_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_tx_ports_per_res.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_res, bref, (uint8_t)1u, (uint8_t)64u));
  HANDLE_CODE(unpack_integer(total_num_tx_ports, bref, (uint16_t)2u, (uint16_t)256u));
  HANDLE_CODE(unpack_integer(param_lx, bref, (uint8_t)2u, (uint8_t)4u));
  HANDLE_CODE(amplitude_scaling_type.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_csi_rs_per_res_set, bref, (uint8_t)1u, (uint8_t)8u));

  return SRSASN_SUCCESS;
}
void dummy_e_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberTxPortsPerResource", max_num_tx_ports_per_res.to_string());
  j.write_int("maxNumberResources", max_num_res);
  j.write_int("totalNumberTxPorts", total_num_tx_ports);
  j.write_int("parameterLx", param_lx);
  j.write_str("amplitudeScalingType", amplitude_scaling_type.to_string());
  j.write_int("maxNumberCSI-RS-PerResourceSet", max_num_csi_rs_per_res_set);
  j.end_obj();
}

const char* dummy_e_s::max_num_tx_ports_per_res_opts::to_string() const
{
  static const char* names[] = {"p4", "p8", "p12", "p16", "p24", "p32"};
  return convert_enum_idx(names, 6, value, "dummy_e_s::max_num_tx_ports_per_res_e_");
}
uint8_t dummy_e_s::max_num_tx_ports_per_res_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 12, 16, 24, 32};
  return map_enum_number(numbers, 6, value, "dummy_e_s::max_num_tx_ports_per_res_e_");
}

const char* dummy_e_s::amplitude_scaling_type_opts::to_string() const
{
  static const char* names[] = {"wideband", "widebandAndSubband"};
  return convert_enum_idx(names, 2, value, "dummy_e_s::amplitude_scaling_type_e_");
}

// FreqSeparationClass ::= ENUMERATED
const char* freq_separation_class_opts::to_string() const
{
  static const char* names[] = {"mhz800", "mhz1200", "mhz1400", "mhz400-v1650", "mhz600-v1650"};
  return convert_enum_idx(names, 5, value, "freq_separation_class_e");
}
uint16_t freq_separation_class_opts::to_number() const
{
  static const uint16_t numbers[] = {800, 1200, 1400, 400, 600};
  return map_enum_number(numbers, 5, value, "freq_separation_class_e");
}

// FeatureSetDownlink ::= SEQUENCE
SRSASN_CODE feature_set_dl_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(intra_band_freq_separation_dl_present, 1));
  HANDLE_CODE(bref.pack(scaling_factor_present, 1));
  HANDLE_CODE(bref.pack(dummy8_present, 1));
  HANDLE_CODE(bref.pack(scell_without_ssb_present, 1));
  HANDLE_CODE(bref.pack(csi_rs_meas_scell_without_ssb_present, 1));
  HANDLE_CODE(bref.pack(dummy1_present, 1));
  HANDLE_CODE(bref.pack(type1_3_css_present, 1));
  HANDLE_CODE(bref.pack(pdcch_monitoring_any_occasions_present, 1));
  HANDLE_CODE(bref.pack(dummy2_present, 1));
  HANDLE_CODE(bref.pack(ue_specific_ul_dl_assign_present, 1));
  HANDLE_CODE(bref.pack(search_space_sharing_ca_dl_present, 1));
  HANDLE_CODE(bref.pack(time_dur_for_qcl_present, 1));
  HANDLE_CODE(bref.pack(pdsch_processing_type1_different_tb_per_slot_present, 1));
  HANDLE_CODE(bref.pack(dummy3_present, 1));
  HANDLE_CODE(bref.pack(dummy4.size() > 0, 1));
  HANDLE_CODE(bref.pack(dummy5.size() > 0, 1));
  HANDLE_CODE(bref.pack(dummy6.size() > 0, 1));
  HANDLE_CODE(bref.pack(dummy7.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, feature_set_list_per_dl_cc, 1, 32, integer_packer<uint16_t>(1, 1024)));
  if (intra_band_freq_separation_dl_present) {
    HANDLE_CODE(intra_band_freq_separation_dl.pack(bref));
  }
  if (scaling_factor_present) {
    HANDLE_CODE(scaling_factor.pack(bref));
  }
  if (pdcch_monitoring_any_occasions_present) {
    HANDLE_CODE(pdcch_monitoring_any_occasions.pack(bref));
  }
  if (time_dur_for_qcl_present) {
    HANDLE_CODE(bref.pack(time_dur_for_qcl.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(time_dur_for_qcl.scs_120k_hz_present, 1));
    if (time_dur_for_qcl.scs_60k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl.scs_60k_hz.pack(bref));
    }
    if (time_dur_for_qcl.scs_120k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl.scs_120k_hz.pack(bref));
    }
  }
  if (pdsch_processing_type1_different_tb_per_slot_present) {
    HANDLE_CODE(bref.pack(pdsch_processing_type1_different_tb_per_slot.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdsch_processing_type1_different_tb_per_slot.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdsch_processing_type1_different_tb_per_slot.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdsch_processing_type1_different_tb_per_slot.scs_120k_hz_present, 1));
    if (pdsch_processing_type1_different_tb_per_slot.scs_15k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_15k_hz.pack(bref));
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_30k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_30k_hz.pack(bref));
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_60k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_60k_hz.pack(bref));
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_120k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_120k_hz.pack(bref));
    }
  }
  if (dummy3_present) {
    HANDLE_CODE(dummy3.pack(bref));
  }
  if (dummy4.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, dummy4, 1, 16));
  }
  if (dummy5.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, dummy5, 1, 16));
  }
  if (dummy6.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, dummy6, 1, 16));
  }
  if (dummy7.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, dummy7, 1, 16));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(intra_band_freq_separation_dl_present, 1));
  HANDLE_CODE(bref.unpack(scaling_factor_present, 1));
  HANDLE_CODE(bref.unpack(dummy8_present, 1));
  HANDLE_CODE(bref.unpack(scell_without_ssb_present, 1));
  HANDLE_CODE(bref.unpack(csi_rs_meas_scell_without_ssb_present, 1));
  HANDLE_CODE(bref.unpack(dummy1_present, 1));
  HANDLE_CODE(bref.unpack(type1_3_css_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_monitoring_any_occasions_present, 1));
  HANDLE_CODE(bref.unpack(dummy2_present, 1));
  HANDLE_CODE(bref.unpack(ue_specific_ul_dl_assign_present, 1));
  HANDLE_CODE(bref.unpack(search_space_sharing_ca_dl_present, 1));
  HANDLE_CODE(bref.unpack(time_dur_for_qcl_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_processing_type1_different_tb_per_slot_present, 1));
  HANDLE_CODE(bref.unpack(dummy3_present, 1));
  bool dummy4_present;
  HANDLE_CODE(bref.unpack(dummy4_present, 1));
  bool dummy5_present;
  HANDLE_CODE(bref.unpack(dummy5_present, 1));
  bool dummy6_present;
  HANDLE_CODE(bref.unpack(dummy6_present, 1));
  bool dummy7_present;
  HANDLE_CODE(bref.unpack(dummy7_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(feature_set_list_per_dl_cc, bref, 1, 32, integer_packer<uint16_t>(1, 1024)));
  if (intra_band_freq_separation_dl_present) {
    HANDLE_CODE(intra_band_freq_separation_dl.unpack(bref));
  }
  if (scaling_factor_present) {
    HANDLE_CODE(scaling_factor.unpack(bref));
  }
  if (pdcch_monitoring_any_occasions_present) {
    HANDLE_CODE(pdcch_monitoring_any_occasions.unpack(bref));
  }
  if (time_dur_for_qcl_present) {
    HANDLE_CODE(bref.unpack(time_dur_for_qcl.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(time_dur_for_qcl.scs_120k_hz_present, 1));
    if (time_dur_for_qcl.scs_60k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl.scs_60k_hz.unpack(bref));
    }
    if (time_dur_for_qcl.scs_120k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl.scs_120k_hz.unpack(bref));
    }
  }
  if (pdsch_processing_type1_different_tb_per_slot_present) {
    HANDLE_CODE(bref.unpack(pdsch_processing_type1_different_tb_per_slot.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdsch_processing_type1_different_tb_per_slot.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdsch_processing_type1_different_tb_per_slot.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdsch_processing_type1_different_tb_per_slot.scs_120k_hz_present, 1));
    if (pdsch_processing_type1_different_tb_per_slot.scs_15k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_15k_hz.unpack(bref));
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_30k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_30k_hz.unpack(bref));
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_60k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_60k_hz.unpack(bref));
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_120k_hz_present) {
      HANDLE_CODE(pdsch_processing_type1_different_tb_per_slot.scs_120k_hz.unpack(bref));
    }
  }
  if (dummy3_present) {
    HANDLE_CODE(dummy3.unpack(bref));
  }
  if (dummy4_present) {
    HANDLE_CODE(unpack_dyn_seq_of(dummy4, bref, 1, 16));
  }
  if (dummy5_present) {
    HANDLE_CODE(unpack_dyn_seq_of(dummy5, bref, 1, 16));
  }
  if (dummy6_present) {
    HANDLE_CODE(unpack_dyn_seq_of(dummy6, bref, 1, 16));
  }
  if (dummy7_present) {
    HANDLE_CODE(unpack_dyn_seq_of(dummy7, bref, 1, 16));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("featureSetListPerDownlinkCC");
  for (const auto& e1 : feature_set_list_per_dl_cc) {
    j.write_int(e1);
  }
  j.end_array();
  if (intra_band_freq_separation_dl_present) {
    j.write_str("intraBandFreqSeparationDL", intra_band_freq_separation_dl.to_string());
  }
  if (scaling_factor_present) {
    j.write_str("scalingFactor", scaling_factor.to_string());
  }
  if (dummy8_present) {
    j.write_str("dummy8", "supported");
  }
  if (scell_without_ssb_present) {
    j.write_str("scellWithoutSSB", "supported");
  }
  if (csi_rs_meas_scell_without_ssb_present) {
    j.write_str("csi-RS-MeasSCellWithoutSSB", "supported");
  }
  if (dummy1_present) {
    j.write_str("dummy1", "supported");
  }
  if (type1_3_css_present) {
    j.write_str("type1-3-CSS", "supported");
  }
  if (pdcch_monitoring_any_occasions_present) {
    j.write_str("pdcch-MonitoringAnyOccasions", pdcch_monitoring_any_occasions.to_string());
  }
  if (dummy2_present) {
    j.write_str("dummy2", "supported");
  }
  if (ue_specific_ul_dl_assign_present) {
    j.write_str("ue-SpecificUL-DL-Assignment", "supported");
  }
  if (search_space_sharing_ca_dl_present) {
    j.write_str("searchSpaceSharingCA-DL", "supported");
  }
  if (time_dur_for_qcl_present) {
    j.write_fieldname("timeDurationForQCL");
    j.start_obj();
    if (time_dur_for_qcl.scs_60k_hz_present) {
      j.write_str("scs-60kHz", time_dur_for_qcl.scs_60k_hz.to_string());
    }
    if (time_dur_for_qcl.scs_120k_hz_present) {
      j.write_str("scs-120kHz", time_dur_for_qcl.scs_120k_hz.to_string());
    }
    j.end_obj();
  }
  if (pdsch_processing_type1_different_tb_per_slot_present) {
    j.write_fieldname("pdsch-ProcessingType1-DifferentTB-PerSlot");
    j.start_obj();
    if (pdsch_processing_type1_different_tb_per_slot.scs_15k_hz_present) {
      j.write_str("scs-15kHz", pdsch_processing_type1_different_tb_per_slot.scs_15k_hz.to_string());
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_30k_hz_present) {
      j.write_str("scs-30kHz", pdsch_processing_type1_different_tb_per_slot.scs_30k_hz.to_string());
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_60k_hz_present) {
      j.write_str("scs-60kHz", pdsch_processing_type1_different_tb_per_slot.scs_60k_hz.to_string());
    }
    if (pdsch_processing_type1_different_tb_per_slot.scs_120k_hz_present) {
      j.write_str("scs-120kHz", pdsch_processing_type1_different_tb_per_slot.scs_120k_hz.to_string());
    }
    j.end_obj();
  }
  if (dummy3_present) {
    j.write_fieldname("dummy3");
    dummy3.to_json(j);
  }
  if (dummy4.size() > 0) {
    j.start_array("dummy4");
    for (const auto& e1 : dummy4) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (dummy5.size() > 0) {
    j.start_array("dummy5");
    for (const auto& e1 : dummy5) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (dummy6.size() > 0) {
    j.start_array("dummy6");
    for (const auto& e1 : dummy6) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (dummy7.size() > 0) {
    j.start_array("dummy7");
    for (const auto& e1 : dummy7) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

const char* feature_set_dl_s::scaling_factor_opts::to_string() const
{
  static const char* names[] = {"f0p4", "f0p75", "f0p8"};
  return convert_enum_idx(names, 3, value, "feature_set_dl_s::scaling_factor_e_");
}

const char* feature_set_dl_s::pdcch_monitoring_any_occasions_opts::to_string() const
{
  static const char* names[] = {"withoutDCI-Gap", "withDCI-Gap"};
  return convert_enum_idx(names, 2, value, "feature_set_dl_s::pdcch_monitoring_any_occasions_e_");
}

const char* feature_set_dl_s::time_dur_for_qcl_s_::scs_60k_hz_opts::to_string() const
{
  static const char* names[] = {"s7", "s14", "s28"};
  return convert_enum_idx(names, 3, value, "feature_set_dl_s::time_dur_for_qcl_s_::scs_60k_hz_e_");
}
uint8_t feature_set_dl_s::time_dur_for_qcl_s_::scs_60k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {7, 14, 28};
  return map_enum_number(numbers, 3, value, "feature_set_dl_s::time_dur_for_qcl_s_::scs_60k_hz_e_");
}

const char* feature_set_dl_s::time_dur_for_qcl_s_::scs_120k_hz_opts::to_string() const
{
  static const char* names[] = {"s14", "s28"};
  return convert_enum_idx(names, 2, value, "feature_set_dl_s::time_dur_for_qcl_s_::scs_120k_hz_e_");
}
uint8_t feature_set_dl_s::time_dur_for_qcl_s_::scs_120k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {14, 28};
  return map_enum_number(numbers, 2, value, "feature_set_dl_s::time_dur_for_qcl_s_::scs_120k_hz_e_");
}

const char* feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_e_");
}
uint8_t feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_e_");
}

const char* feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_e_");
}
uint8_t feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_e_");
}

const char* feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_e_");
}
uint8_t feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_e_");
}

const char* feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_e_");
}
uint8_t feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_s::pdsch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_e_");
}

// ProcessingParameters ::= SEQUENCE
SRSASN_CODE processing_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(different_tb_per_slot_present, 1));

  HANDLE_CODE(fallback.pack(bref));
  if (different_tb_per_slot_present) {
    HANDLE_CODE(bref.pack(different_tb_per_slot.upto1_present, 1));
    HANDLE_CODE(bref.pack(different_tb_per_slot.upto2_present, 1));
    HANDLE_CODE(bref.pack(different_tb_per_slot.upto4_present, 1));
    HANDLE_CODE(bref.pack(different_tb_per_slot.upto7_present, 1));
    if (different_tb_per_slot.upto1_present) {
      HANDLE_CODE(pack_integer(bref, different_tb_per_slot.upto1, (uint8_t)1u, (uint8_t)16u));
    }
    if (different_tb_per_slot.upto2_present) {
      HANDLE_CODE(pack_integer(bref, different_tb_per_slot.upto2, (uint8_t)1u, (uint8_t)16u));
    }
    if (different_tb_per_slot.upto4_present) {
      HANDLE_CODE(pack_integer(bref, different_tb_per_slot.upto4, (uint8_t)1u, (uint8_t)16u));
    }
    if (different_tb_per_slot.upto7_present) {
      HANDLE_CODE(pack_integer(bref, different_tb_per_slot.upto7, (uint8_t)1u, (uint8_t)16u));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE processing_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(different_tb_per_slot_present, 1));

  HANDLE_CODE(fallback.unpack(bref));
  if (different_tb_per_slot_present) {
    HANDLE_CODE(bref.unpack(different_tb_per_slot.upto1_present, 1));
    HANDLE_CODE(bref.unpack(different_tb_per_slot.upto2_present, 1));
    HANDLE_CODE(bref.unpack(different_tb_per_slot.upto4_present, 1));
    HANDLE_CODE(bref.unpack(different_tb_per_slot.upto7_present, 1));
    if (different_tb_per_slot.upto1_present) {
      HANDLE_CODE(unpack_integer(different_tb_per_slot.upto1, bref, (uint8_t)1u, (uint8_t)16u));
    }
    if (different_tb_per_slot.upto2_present) {
      HANDLE_CODE(unpack_integer(different_tb_per_slot.upto2, bref, (uint8_t)1u, (uint8_t)16u));
    }
    if (different_tb_per_slot.upto4_present) {
      HANDLE_CODE(unpack_integer(different_tb_per_slot.upto4, bref, (uint8_t)1u, (uint8_t)16u));
    }
    if (different_tb_per_slot.upto7_present) {
      HANDLE_CODE(unpack_integer(different_tb_per_slot.upto7, bref, (uint8_t)1u, (uint8_t)16u));
    }
  }

  return SRSASN_SUCCESS;
}
void processing_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("fallback", fallback.to_string());
  if (different_tb_per_slot_present) {
    j.write_fieldname("differentTB-PerSlot");
    j.start_obj();
    if (different_tb_per_slot.upto1_present) {
      j.write_int("upto1", different_tb_per_slot.upto1);
    }
    if (different_tb_per_slot.upto2_present) {
      j.write_int("upto2", different_tb_per_slot.upto2);
    }
    if (different_tb_per_slot.upto4_present) {
      j.write_int("upto4", different_tb_per_slot.upto4);
    }
    if (different_tb_per_slot.upto7_present) {
      j.write_int("upto7", different_tb_per_slot.upto7);
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* processing_params_s::fallback_opts::to_string() const
{
  static const char* names[] = {"sc", "cap1-only"};
  return convert_enum_idx(names, 2, value, "processing_params_s::fallback_e_");
}
uint8_t processing_params_s::fallback_opts::to_number() const
{
  if (value == cap1_only) {
    return 1;
  }
  invalid_enum_number(value, "processing_params_s::fallback_e_");
  return 0;
}

// FeatureSetDownlink-v1540 ::= SEQUENCE
SRSASN_CODE feature_set_dl_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(one_fl_dmrs_two_add_dmrs_dl_present, 1));
  HANDLE_CODE(bref.pack(add_dmrs_dl_alt_present, 1));
  HANDLE_CODE(bref.pack(two_fl_dmrs_two_add_dmrs_dl_present, 1));
  HANDLE_CODE(bref.pack(one_fl_dmrs_three_add_dmrs_dl_present, 1));
  HANDLE_CODE(bref.pack(pdcch_monitoring_any_occasions_with_span_gap_present, 1));
  HANDLE_CODE(bref.pack(pdsch_separation_with_gap_present, 1));
  HANDLE_CODE(bref.pack(pdsch_processing_type2_present, 1));
  HANDLE_CODE(bref.pack(pdsch_processing_type2_limited_present, 1));
  HANDLE_CODE(bref.pack(dl_mcs_table_alt_dyn_ind_present, 1));

  if (pdcch_monitoring_any_occasions_with_span_gap_present) {
    HANDLE_CODE(bref.pack(pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz_present, 1));
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz.pack(bref));
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz.pack(bref));
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz.pack(bref));
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz.pack(bref));
    }
  }
  if (pdsch_processing_type2_present) {
    HANDLE_CODE(bref.pack(pdsch_processing_type2.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdsch_processing_type2.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(pdsch_processing_type2.scs_60k_hz_present, 1));
    if (pdsch_processing_type2.scs_15k_hz_present) {
      HANDLE_CODE(pdsch_processing_type2.scs_15k_hz.pack(bref));
    }
    if (pdsch_processing_type2.scs_30k_hz_present) {
      HANDLE_CODE(pdsch_processing_type2.scs_30k_hz.pack(bref));
    }
    if (pdsch_processing_type2.scs_60k_hz_present) {
      HANDLE_CODE(pdsch_processing_type2.scs_60k_hz.pack(bref));
    }
  }
  if (pdsch_processing_type2_limited_present) {
    HANDLE_CODE(pdsch_processing_type2_limited.different_tb_per_slot_scs_30k_hz.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(one_fl_dmrs_two_add_dmrs_dl_present, 1));
  HANDLE_CODE(bref.unpack(add_dmrs_dl_alt_present, 1));
  HANDLE_CODE(bref.unpack(two_fl_dmrs_two_add_dmrs_dl_present, 1));
  HANDLE_CODE(bref.unpack(one_fl_dmrs_three_add_dmrs_dl_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_monitoring_any_occasions_with_span_gap_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_separation_with_gap_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_processing_type2_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_processing_type2_limited_present, 1));
  HANDLE_CODE(bref.unpack(dl_mcs_table_alt_dyn_ind_present, 1));

  if (pdcch_monitoring_any_occasions_with_span_gap_present) {
    HANDLE_CODE(bref.unpack(pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz_present, 1));
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz.unpack(bref));
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz.unpack(bref));
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz.unpack(bref));
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz_present) {
      HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz.unpack(bref));
    }
  }
  if (pdsch_processing_type2_present) {
    HANDLE_CODE(bref.unpack(pdsch_processing_type2.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdsch_processing_type2.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pdsch_processing_type2.scs_60k_hz_present, 1));
    if (pdsch_processing_type2.scs_15k_hz_present) {
      HANDLE_CODE(pdsch_processing_type2.scs_15k_hz.unpack(bref));
    }
    if (pdsch_processing_type2.scs_30k_hz_present) {
      HANDLE_CODE(pdsch_processing_type2.scs_30k_hz.unpack(bref));
    }
    if (pdsch_processing_type2.scs_60k_hz_present) {
      HANDLE_CODE(pdsch_processing_type2.scs_60k_hz.unpack(bref));
    }
  }
  if (pdsch_processing_type2_limited_present) {
    HANDLE_CODE(pdsch_processing_type2_limited.different_tb_per_slot_scs_30k_hz.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (one_fl_dmrs_two_add_dmrs_dl_present) {
    j.write_str("oneFL-DMRS-TwoAdditionalDMRS-DL", "supported");
  }
  if (add_dmrs_dl_alt_present) {
    j.write_str("additionalDMRS-DL-Alt", "supported");
  }
  if (two_fl_dmrs_two_add_dmrs_dl_present) {
    j.write_str("twoFL-DMRS-TwoAdditionalDMRS-DL", "supported");
  }
  if (one_fl_dmrs_three_add_dmrs_dl_present) {
    j.write_str("oneFL-DMRS-ThreeAdditionalDMRS-DL", "supported");
  }
  if (pdcch_monitoring_any_occasions_with_span_gap_present) {
    j.write_fieldname("pdcch-MonitoringAnyOccasionsWithSpanGap");
    j.start_obj();
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz_present) {
      j.write_str("scs-15kHz", pdcch_monitoring_any_occasions_with_span_gap.scs_15k_hz.to_string());
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz_present) {
      j.write_str("scs-30kHz", pdcch_monitoring_any_occasions_with_span_gap.scs_30k_hz.to_string());
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz_present) {
      j.write_str("scs-60kHz", pdcch_monitoring_any_occasions_with_span_gap.scs_60k_hz.to_string());
    }
    if (pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz_present) {
      j.write_str("scs-120kHz", pdcch_monitoring_any_occasions_with_span_gap.scs_120k_hz.to_string());
    }
    j.end_obj();
  }
  if (pdsch_separation_with_gap_present) {
    j.write_str("pdsch-SeparationWithGap", "supported");
  }
  if (pdsch_processing_type2_present) {
    j.write_fieldname("pdsch-ProcessingType2");
    j.start_obj();
    if (pdsch_processing_type2.scs_15k_hz_present) {
      j.write_fieldname("scs-15kHz");
      pdsch_processing_type2.scs_15k_hz.to_json(j);
    }
    if (pdsch_processing_type2.scs_30k_hz_present) {
      j.write_fieldname("scs-30kHz");
      pdsch_processing_type2.scs_30k_hz.to_json(j);
    }
    if (pdsch_processing_type2.scs_60k_hz_present) {
      j.write_fieldname("scs-60kHz");
      pdsch_processing_type2.scs_60k_hz.to_json(j);
    }
    j.end_obj();
  }
  if (pdsch_processing_type2_limited_present) {
    j.write_fieldname("pdsch-ProcessingType2-Limited");
    j.start_obj();
    j.write_str("differentTB-PerSlot-SCS-30kHz",
                pdsch_processing_type2_limited.different_tb_per_slot_scs_30k_hz.to_string());
    j.end_obj();
  }
  if (dl_mcs_table_alt_dyn_ind_present) {
    j.write_str("dl-MCS-TableAlt-DynamicIndication", "supported");
  }
  j.end_obj();
}

const char* feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_15k_hz_opts::to_string() const
{
  static const char* names[] = {"set1", "set2", "set3"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_15k_hz_e_");
}
uint8_t feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_15k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_15k_hz_e_");
}

const char* feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_30k_hz_opts::to_string() const
{
  static const char* names[] = {"set1", "set2", "set3"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_30k_hz_e_");
}
uint8_t feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_30k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_30k_hz_e_");
}

const char* feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_60k_hz_opts::to_string() const
{
  static const char* names[] = {"set1", "set2", "set3"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_60k_hz_e_");
}
uint8_t feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_60k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_60k_hz_e_");
}

const char* feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_120k_hz_opts::to_string() const
{
  static const char* names[] = {"set1", "set2", "set3"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_120k_hz_e_");
}
uint8_t feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_120k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_v1540_s::pdcch_monitoring_any_occasions_with_span_gap_s_::scs_120k_hz_e_");
}

const char*
feature_set_dl_v1540_s::pdsch_processing_type2_limited_s_::different_tb_per_slot_scs_30k_hz_opts::to_string() const
{
  static const char* names[] = {"upto1", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1540_s::pdsch_processing_type2_limited_s_::different_tb_per_slot_scs_30k_hz_e_");
}
uint8_t
feature_set_dl_v1540_s::pdsch_processing_type2_limited_s_::different_tb_per_slot_scs_30k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1540_s::pdsch_processing_type2_limited_s_::different_tb_per_slot_scs_30k_hz_e_");
}

// FeatureSetDownlink-v15a0 ::= SEQUENCE
SRSASN_CODE feature_set_dl_v15a0_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_srs_res_features_present, 1));

  if (supported_srs_res_features_present) {
    HANDLE_CODE(supported_srs_res_features.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_v15a0_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_srs_res_features_present, 1));

  if (supported_srs_res_features_present) {
    HANDLE_CODE(supported_srs_res_features.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_v15a0_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_srs_res_features_present) {
    j.write_fieldname("supportedSRS-Resources");
    supported_srs_res_features.to_json(j);
  }
  j.end_obj();
}

// FreqSeparationClassDL-Only-r16 ::= ENUMERATED
const char* freq_separation_class_dl_only_r16_opts::to_string() const
{
  static const char* names[] = {"mhz200", "mhz400", "mhz600", "mhz800", "mhz1000", "mhz1200"};
  return convert_enum_idx(names, 6, value, "freq_separation_class_dl_only_r16_e");
}
uint16_t freq_separation_class_dl_only_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {200, 400, 600, 800, 1000, 1200};
  return map_enum_number(numbers, 6, value, "freq_separation_class_dl_only_r16_e");
}

// FreqSeparationClassDL-v1620 ::= ENUMERATED
const char* freq_separation_class_dl_v1620_opts::to_string() const
{
  static const char* names[] = {"mhz1000", "mhz1600", "mhz1800", "mhz2000", "mhz2200", "mhz2400"};
  return convert_enum_idx(names, 6, value, "freq_separation_class_dl_v1620_e");
}
uint16_t freq_separation_class_dl_v1620_opts::to_number() const
{
  static const uint16_t numbers[] = {1000, 1600, 1800, 2000, 2200, 2400};
  return map_enum_number(numbers, 6, value, "freq_separation_class_dl_v1620_e");
}

// PDCCH-MonitoringOccasions-r16 ::= SEQUENCE
SRSASN_CODE pdcch_monitoring_occasions_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(period7span3_r16_present, 1));
  HANDLE_CODE(bref.pack(period4span3_r16_present, 1));
  HANDLE_CODE(bref.pack(period2span2_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_monitoring_occasions_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(period7span3_r16_present, 1));
  HANDLE_CODE(bref.unpack(period4span3_r16_present, 1));
  HANDLE_CODE(bref.unpack(period2span2_r16_present, 1));

  return SRSASN_SUCCESS;
}
void pdcch_monitoring_occasions_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (period7span3_r16_present) {
    j.write_str("period7span3-r16", "supported");
  }
  if (period4span3_r16_present) {
    j.write_str("period4span3-r16", "supported");
  }
  if (period2span2_r16_present) {
    j.write_str("period2span2-r16", "supported");
  }
  j.end_obj();
}

// FeatureSetDownlink-v1610 ::= SEQUENCE
SRSASN_CODE feature_set_dl_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cbg_pdsch_processing_type1_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.pack(cbg_pdsch_processing_type2_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.pack(intra_freq_daps_r16_present, 1));
  HANDLE_CODE(bref.pack(intra_band_freq_separation_dl_v1620_present, 1));
  HANDLE_CODE(bref.pack(intra_band_freq_separation_dl_only_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_monitoring_r16_present, 1));
  HANDLE_CODE(bref.pack(pdcch_monitoring_mixed_r16_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.pack(single_dci_sdm_scheme_r16_present, 1));

  if (cbg_pdsch_processing_type1_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16.pack(bref));
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16.pack(bref));
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16.pack(bref));
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16.pack(bref));
    }
  }
  if (cbg_pdsch_processing_type2_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16.pack(bref));
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16.pack(bref));
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16.pack(bref));
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16.pack(bref));
    }
  }
  if (intra_freq_daps_r16_present) {
    HANDLE_CODE(bref.pack(intra_freq_daps_r16.intra_freq_diff_scs_daps_r16_present, 1));
    HANDLE_CODE(bref.pack(intra_freq_daps_r16.intra_freq_async_daps_r16_present, 1));
  }
  if (intra_band_freq_separation_dl_v1620_present) {
    HANDLE_CODE(intra_band_freq_separation_dl_v1620.pack(bref));
  }
  if (intra_band_freq_separation_dl_only_r16_present) {
    HANDLE_CODE(intra_band_freq_separation_dl_only_r16.pack(bref));
  }
  if (pdcch_monitoring_r16_present) {
    HANDLE_CODE(bref.pack(pdcch_monitoring_r16.pdsch_processing_type1_r16_present, 1));
    HANDLE_CODE(bref.pack(pdcch_monitoring_r16.pdsch_processing_type2_r16_present, 1));
    if (pdcch_monitoring_r16.pdsch_processing_type1_r16_present) {
      HANDLE_CODE(bref.pack(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16_present, 1));
      if (pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16.pack(bref));
      }
      if (pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16.pack(bref));
      }
    }
    if (pdcch_monitoring_r16.pdsch_processing_type2_r16_present) {
      HANDLE_CODE(bref.pack(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.pack(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16_present, 1));
      if (pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16.pack(bref));
      }
      if (pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16.pack(bref));
      }
    }
  }
  if (cross_carrier_sched_processing_diff_scs_r16_present) {
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_60k_hz_120k_hz_r16_present, 1));
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16.pack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16.pack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type1_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type2_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.unpack(intra_freq_daps_r16_present, 1));
  HANDLE_CODE(bref.unpack(intra_band_freq_separation_dl_v1620_present, 1));
  HANDLE_CODE(bref.unpack(intra_band_freq_separation_dl_only_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_monitoring_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_monitoring_mixed_r16_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.unpack(single_dci_sdm_scheme_r16_present, 1));

  if (cbg_pdsch_processing_type1_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16.unpack(bref));
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16.unpack(bref));
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16.unpack(bref));
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16.unpack(bref));
    }
  }
  if (cbg_pdsch_processing_type2_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16.unpack(bref));
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16.unpack(bref));
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16.unpack(bref));
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16.unpack(bref));
    }
  }
  if (intra_freq_daps_r16_present) {
    HANDLE_CODE(bref.unpack(intra_freq_daps_r16.intra_freq_diff_scs_daps_r16_present, 1));
    HANDLE_CODE(bref.unpack(intra_freq_daps_r16.intra_freq_async_daps_r16_present, 1));
  }
  if (intra_band_freq_separation_dl_v1620_present) {
    HANDLE_CODE(intra_band_freq_separation_dl_v1620.unpack(bref));
  }
  if (intra_band_freq_separation_dl_only_r16_present) {
    HANDLE_CODE(intra_band_freq_separation_dl_only_r16.unpack(bref));
  }
  if (pdcch_monitoring_r16_present) {
    HANDLE_CODE(bref.unpack(pdcch_monitoring_r16.pdsch_processing_type1_r16_present, 1));
    HANDLE_CODE(bref.unpack(pdcch_monitoring_r16.pdsch_processing_type2_r16_present, 1));
    if (pdcch_monitoring_r16.pdsch_processing_type1_r16_present) {
      HANDLE_CODE(bref.unpack(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16_present, 1));
      if (pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16.unpack(bref));
      }
      if (pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16.unpack(bref));
      }
    }
    if (pdcch_monitoring_r16.pdsch_processing_type2_r16_present) {
      HANDLE_CODE(bref.unpack(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16_present, 1));
      if (pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16.unpack(bref));
      }
      if (pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16_present) {
        HANDLE_CODE(pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16.unpack(bref));
      }
    }
  }
  if (cross_carrier_sched_processing_diff_scs_r16_present) {
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_60k_hz_120k_hz_r16_present, 1));
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16.unpack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16.unpack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cbg_pdsch_processing_type1_different_tb_per_slot_r16_present) {
    j.write_fieldname("cbgPDSCH-ProcessingType1-DifferentTB-PerSlot-r16");
    j.start_obj();
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      j.write_str("scs-15kHz-r16", cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16.to_string());
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      j.write_str("scs-30kHz-r16", cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16.to_string());
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      j.write_str("scs-60kHz-r16", cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16.to_string());
    }
    if (cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      j.write_str("scs-120kHz-r16", cbg_pdsch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16.to_string());
    }
    j.end_obj();
  }
  if (cbg_pdsch_processing_type2_different_tb_per_slot_r16_present) {
    j.write_fieldname("cbgPDSCH-ProcessingType2-DifferentTB-PerSlot-r16");
    j.start_obj();
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      j.write_str("scs-15kHz-r16", cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16.to_string());
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      j.write_str("scs-30kHz-r16", cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16.to_string());
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      j.write_str("scs-60kHz-r16", cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16.to_string());
    }
    if (cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      j.write_str("scs-120kHz-r16", cbg_pdsch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16.to_string());
    }
    j.end_obj();
  }
  if (intra_freq_daps_r16_present) {
    j.write_fieldname("intraFreqDAPS-r16");
    j.start_obj();
    if (intra_freq_daps_r16.intra_freq_diff_scs_daps_r16_present) {
      j.write_str("intraFreqDiffSCS-DAPS-r16", "supported");
    }
    if (intra_freq_daps_r16.intra_freq_async_daps_r16_present) {
      j.write_str("intraFreqAsyncDAPS-r16", "supported");
    }
    j.end_obj();
  }
  if (intra_band_freq_separation_dl_v1620_present) {
    j.write_str("intraBandFreqSeparationDL-v1620", intra_band_freq_separation_dl_v1620.to_string());
  }
  if (intra_band_freq_separation_dl_only_r16_present) {
    j.write_str("intraBandFreqSeparationDL-Only-r16", intra_band_freq_separation_dl_only_r16.to_string());
  }
  if (pdcch_monitoring_r16_present) {
    j.write_fieldname("pdcch-Monitoring-r16");
    j.start_obj();
    if (pdcch_monitoring_r16.pdsch_processing_type1_r16_present) {
      j.write_fieldname("pdsch-ProcessingType1-r16");
      j.start_obj();
      if (pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16_present) {
        j.write_fieldname("scs-15kHz-r16");
        pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_15k_hz_r16.to_json(j);
      }
      if (pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16_present) {
        j.write_fieldname("scs-30kHz-r16");
        pdcch_monitoring_r16.pdsch_processing_type1_r16.scs_30k_hz_r16.to_json(j);
      }
      j.end_obj();
    }
    if (pdcch_monitoring_r16.pdsch_processing_type2_r16_present) {
      j.write_fieldname("pdsch-ProcessingType2-r16");
      j.start_obj();
      if (pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16_present) {
        j.write_fieldname("scs-15kHz-r16");
        pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_15k_hz_r16.to_json(j);
      }
      if (pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16_present) {
        j.write_fieldname("scs-30kHz-r16");
        pdcch_monitoring_r16.pdsch_processing_type2_r16.scs_30k_hz_r16.to_json(j);
      }
      j.end_obj();
    }
    j.end_obj();
  }
  if (pdcch_monitoring_mixed_r16_present) {
    j.write_str("pdcch-MonitoringMixed-r16", "supported");
  }
  if (cross_carrier_sched_processing_diff_scs_r16_present) {
    j.write_fieldname("crossCarrierSchedulingProcessing-DiffSCS-r16");
    j.start_obj();
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present) {
      j.write_str("scs-15kHz-120kHz-r16",
                  cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16.to_string());
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present) {
      j.write_str("scs-15kHz-60kHz-r16", cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16.to_string());
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present) {
      j.write_str("scs-30kHz-120kHz-r16",
                  cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16.to_string());
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_30k_hz_r16_present) {
      j.write_str("scs-15kHz-30kHz-r16", "n2");
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_60k_hz_r16_present) {
      j.write_str("scs-30kHz-60kHz-r16", "n2");
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_60k_hz_120k_hz_r16_present) {
      j.write_str("scs-60kHz-120kHz-r16", "n2");
    }
    j.end_obj();
  }
  if (single_dci_sdm_scheme_r16_present) {
    j.write_str("singleDCI-SDM-scheme-r16", "supported");
  }
  j.end_obj();
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_dl_v1610_s::cbg_pdsch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_e_");
}

const char*
feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_e_");
}
uint8_t
feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_dl_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_e_");
}

// PDCCH-RepetitionParameters-r17 ::= SEQUENCE
SRSASN_CODE pdcch_repeat_params_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(limit_x_per_cc_r17_present, 1));
  HANDLE_CODE(bref.pack(limit_x_across_cc_r17_present, 1));

  HANDLE_CODE(supported_mode_r17.pack(bref));
  if (limit_x_per_cc_r17_present) {
    HANDLE_CODE(limit_x_per_cc_r17.pack(bref));
  }
  if (limit_x_across_cc_r17_present) {
    HANDLE_CODE(limit_x_across_cc_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcch_repeat_params_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(limit_x_per_cc_r17_present, 1));
  HANDLE_CODE(bref.unpack(limit_x_across_cc_r17_present, 1));

  HANDLE_CODE(supported_mode_r17.unpack(bref));
  if (limit_x_per_cc_r17_present) {
    HANDLE_CODE(limit_x_per_cc_r17.unpack(bref));
  }
  if (limit_x_across_cc_r17_present) {
    HANDLE_CODE(limit_x_across_cc_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pdcch_repeat_params_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("supportedMode-r17", supported_mode_r17.to_string());
  if (limit_x_per_cc_r17_present) {
    j.write_str("limitX-PerCC-r17", limit_x_per_cc_r17.to_string());
  }
  if (limit_x_across_cc_r17_present) {
    j.write_str("limitX-AcrossCC-r17", limit_x_across_cc_r17.to_string());
  }
  j.end_obj();
}

const char* pdcch_repeat_params_r17_s::supported_mode_r17_opts::to_string() const
{
  static const char* names[] = {"intra-span", "inter-span", "both"};
  return convert_enum_idx(names, 3, value, "pdcch_repeat_params_r17_s::supported_mode_r17_e_");
}

const char* pdcch_repeat_params_r17_s::limit_x_per_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32", "n44", "n64", "nolimit"};
  return convert_enum_idx(names, 7, value, "pdcch_repeat_params_r17_s::limit_x_per_cc_r17_e_");
}
uint8_t pdcch_repeat_params_r17_s::limit_x_per_cc_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32, 44, 64};
  return map_enum_number(numbers, 6, value, "pdcch_repeat_params_r17_s::limit_x_per_cc_r17_e_");
}

const char* pdcch_repeat_params_r17_s::limit_x_across_cc_r17_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32", "n44", "n64", "n128", "n256", "n512", "nolimit"};
  return convert_enum_idx(names, 10, value, "pdcch_repeat_params_r17_s::limit_x_across_cc_r17_e_");
}
uint16_t pdcch_repeat_params_r17_s::limit_x_across_cc_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {4, 8, 16, 32, 44, 64, 128, 256, 512};
  return map_enum_number(numbers, 9, value, "pdcch_repeat_params_r17_s::limit_x_across_cc_r17_e_");
}

// FeatureSetDownlink-v1700 ::= SEQUENCE
SRSASN_CODE feature_set_dl_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scaling_factor_1024_qam_fr1_r17_present, 1));
  HANDLE_CODE(bref.pack(time_dur_for_qcl_v1710_present, 1));
  HANDLE_CODE(bref.pack(sfn_scheme_a_r17_present, 1));
  HANDLE_CODE(bref.pack(sfn_scheme_a_pdcch_only_r17_present, 1));
  HANDLE_CODE(bref.pack(sfn_scheme_a_dyn_switching_r17_present, 1));
  HANDLE_CODE(bref.pack(sfn_scheme_a_pdsch_only_r17_present, 1));
  HANDLE_CODE(bref.pack(sfn_scheme_b_r17_present, 1));
  HANDLE_CODE(bref.pack(sfn_scheme_b_dyn_switching_r17_present, 1));
  HANDLE_CODE(bref.pack(sfn_scheme_b_pdsch_only_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pdcch_case2_1_span_gap_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pdcch_legacy_monitoring_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pdcch_multi_dci_multi_trp_r17_present, 1));
  HANDLE_CODE(bref.pack(dyn_multicast_pcell_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pdcch_repeat_r17_present, 1));

  if (scaling_factor_1024_qam_fr1_r17_present) {
    HANDLE_CODE(scaling_factor_1024_qam_fr1_r17.pack(bref));
  }
  if (time_dur_for_qcl_v1710_present) {
    HANDLE_CODE(bref.pack(time_dur_for_qcl_v1710.scs_480k_hz_present, 1));
    HANDLE_CODE(bref.pack(time_dur_for_qcl_v1710.scs_960k_hz_present, 1));
    if (time_dur_for_qcl_v1710.scs_480k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl_v1710.scs_480k_hz.pack(bref));
    }
    if (time_dur_for_qcl_v1710.scs_960k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl_v1710.scs_960k_hz.pack(bref));
    }
  }
  if (mtrp_pdcch_case2_1_span_gap_r17_present) {
    HANDLE_CODE(bref.pack(mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17_present, 1));
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17.pack(bref));
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17.pack(bref));
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17.pack(bref));
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17.pack(bref));
    }
  }
  if (mtrp_pdcch_legacy_monitoring_r17_present) {
    HANDLE_CODE(bref.pack(mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17_present, 1));
    if (mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17.pack(bref));
    }
    if (mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17.pack(bref));
    }
  }
  if (mtrp_pdcch_repeat_r17_present) {
    HANDLE_CODE(pack_integer(bref, mtrp_pdcch_repeat_r17.num_bd_two_pdcch_r17, (uint8_t)2u, (uint8_t)3u));
    HANDLE_CODE(mtrp_pdcch_repeat_r17.max_num_overlaps_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(scaling_factor_1024_qam_fr1_r17_present, 1));
  HANDLE_CODE(bref.unpack(time_dur_for_qcl_v1710_present, 1));
  HANDLE_CODE(bref.unpack(sfn_scheme_a_r17_present, 1));
  HANDLE_CODE(bref.unpack(sfn_scheme_a_pdcch_only_r17_present, 1));
  HANDLE_CODE(bref.unpack(sfn_scheme_a_dyn_switching_r17_present, 1));
  HANDLE_CODE(bref.unpack(sfn_scheme_a_pdsch_only_r17_present, 1));
  HANDLE_CODE(bref.unpack(sfn_scheme_b_r17_present, 1));
  HANDLE_CODE(bref.unpack(sfn_scheme_b_dyn_switching_r17_present, 1));
  HANDLE_CODE(bref.unpack(sfn_scheme_b_pdsch_only_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pdcch_case2_1_span_gap_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pdcch_legacy_monitoring_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pdcch_multi_dci_multi_trp_r17_present, 1));
  HANDLE_CODE(bref.unpack(dyn_multicast_pcell_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pdcch_repeat_r17_present, 1));

  if (scaling_factor_1024_qam_fr1_r17_present) {
    HANDLE_CODE(scaling_factor_1024_qam_fr1_r17.unpack(bref));
  }
  if (time_dur_for_qcl_v1710_present) {
    HANDLE_CODE(bref.unpack(time_dur_for_qcl_v1710.scs_480k_hz_present, 1));
    HANDLE_CODE(bref.unpack(time_dur_for_qcl_v1710.scs_960k_hz_present, 1));
    if (time_dur_for_qcl_v1710.scs_480k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl_v1710.scs_480k_hz.unpack(bref));
    }
    if (time_dur_for_qcl_v1710.scs_960k_hz_present) {
      HANDLE_CODE(time_dur_for_qcl_v1710.scs_960k_hz.unpack(bref));
    }
  }
  if (mtrp_pdcch_case2_1_span_gap_r17_present) {
    HANDLE_CODE(bref.unpack(mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17_present, 1));
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17.unpack(bref));
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17.unpack(bref));
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17.unpack(bref));
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17.unpack(bref));
    }
  }
  if (mtrp_pdcch_legacy_monitoring_r17_present) {
    HANDLE_CODE(bref.unpack(mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17_present, 1));
    if (mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17.unpack(bref));
    }
    if (mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17.unpack(bref));
    }
  }
  if (mtrp_pdcch_repeat_r17_present) {
    HANDLE_CODE(unpack_integer(mtrp_pdcch_repeat_r17.num_bd_two_pdcch_r17, bref, (uint8_t)2u, (uint8_t)3u));
    HANDLE_CODE(mtrp_pdcch_repeat_r17.max_num_overlaps_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (scaling_factor_1024_qam_fr1_r17_present) {
    j.write_str("scalingFactor-1024QAM-FR1-r17", scaling_factor_1024_qam_fr1_r17.to_string());
  }
  if (time_dur_for_qcl_v1710_present) {
    j.write_fieldname("timeDurationForQCL-v1710");
    j.start_obj();
    if (time_dur_for_qcl_v1710.scs_480k_hz_present) {
      j.write_str("scs-480kHz", time_dur_for_qcl_v1710.scs_480k_hz.to_string());
    }
    if (time_dur_for_qcl_v1710.scs_960k_hz_present) {
      j.write_str("scs-960kHz", time_dur_for_qcl_v1710.scs_960k_hz.to_string());
    }
    j.end_obj();
  }
  if (sfn_scheme_a_r17_present) {
    j.write_str("sfn-SchemeA-r17", "supported");
  }
  if (sfn_scheme_a_pdcch_only_r17_present) {
    j.write_str("sfn-SchemeA-PDCCH-only-r17", "supported");
  }
  if (sfn_scheme_a_dyn_switching_r17_present) {
    j.write_str("sfn-SchemeA-DynamicSwitching-r17", "supported");
  }
  if (sfn_scheme_a_pdsch_only_r17_present) {
    j.write_str("sfn-SchemeA-PDSCH-only-r17", "supported");
  }
  if (sfn_scheme_b_r17_present) {
    j.write_str("sfn-SchemeB-r17", "supported");
  }
  if (sfn_scheme_b_dyn_switching_r17_present) {
    j.write_str("sfn-SchemeB-DynamicSwitching-r17", "supported");
  }
  if (sfn_scheme_b_pdsch_only_r17_present) {
    j.write_str("sfn-SchemeB-PDSCH-only-r17", "supported");
  }
  if (mtrp_pdcch_case2_1_span_gap_r17_present) {
    j.write_fieldname("mTRP-PDCCH-Case2-1SpanGap-r17");
    j.start_obj();
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17_present) {
      j.write_fieldname("scs-15kHz-r17");
      mtrp_pdcch_case2_1_span_gap_r17.scs_15k_hz_r17.to_json(j);
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17_present) {
      j.write_fieldname("scs-30kHz-r17");
      mtrp_pdcch_case2_1_span_gap_r17.scs_30k_hz_r17.to_json(j);
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17_present) {
      j.write_fieldname("scs-60kHz-r17");
      mtrp_pdcch_case2_1_span_gap_r17.scs_60k_hz_r17.to_json(j);
    }
    if (mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17_present) {
      j.write_fieldname("scs-120kHz-r17");
      mtrp_pdcch_case2_1_span_gap_r17.scs_120k_hz_r17.to_json(j);
    }
    j.end_obj();
  }
  if (mtrp_pdcch_legacy_monitoring_r17_present) {
    j.write_fieldname("mTRP-PDCCH-legacyMonitoring-r17");
    j.start_obj();
    if (mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17_present) {
      j.write_fieldname("scs-15kHz-r17");
      mtrp_pdcch_legacy_monitoring_r17.scs_15k_hz_r17.to_json(j);
    }
    if (mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17_present) {
      j.write_fieldname("scs-30kHz-r17");
      mtrp_pdcch_legacy_monitoring_r17.scs_30k_hz_r17.to_json(j);
    }
    j.end_obj();
  }
  if (mtrp_pdcch_multi_dci_multi_trp_r17_present) {
    j.write_str("mTRP-PDCCH-multiDCI-multiTRP-r17", "supported");
  }
  if (dyn_multicast_pcell_r17_present) {
    j.write_str("dynamicMulticastPCell-r17", "supported");
  }
  if (mtrp_pdcch_repeat_r17_present) {
    j.write_fieldname("mTRP-PDCCH-Repetition-r17");
    j.start_obj();
    j.write_int("numBD-twoPDCCH-r17", mtrp_pdcch_repeat_r17.num_bd_two_pdcch_r17);
    j.write_str("maxNumOverlaps-r17", mtrp_pdcch_repeat_r17.max_num_overlaps_r17.to_string());
    j.end_obj();
  }
  j.end_obj();
}

const char* feature_set_dl_v1700_s::scaling_factor_1024_qam_fr1_r17_opts::to_string() const
{
  static const char* names[] = {"f0p4", "f0p75", "f0p8"};
  return convert_enum_idx(names, 3, value, "feature_set_dl_v1700_s::scaling_factor_1024_qam_fr1_r17_e_");
}

const char* feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_480k_hz_opts::to_string() const
{
  static const char* names[] = {"s56", "s112"};
  return convert_enum_idx(names, 2, value, "feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_480k_hz_e_");
}
uint8_t feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_480k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {56, 112};
  return map_enum_number(numbers, 2, value, "feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_480k_hz_e_");
}

const char* feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_960k_hz_opts::to_string() const
{
  static const char* names[] = {"s112", "s224"};
  return convert_enum_idx(names, 2, value, "feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_960k_hz_e_");
}
uint8_t feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_960k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {112, 224};
  return map_enum_number(numbers, 2, value, "feature_set_dl_v1700_s::time_dur_for_qcl_v1710_s_::scs_960k_hz_e_");
}

const char* feature_set_dl_v1700_s::mtrp_pdcch_repeat_r17_s_::max_num_overlaps_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n5", "n10", "n20", "n40"};
  return convert_enum_idx(names, 7, value, "feature_set_dl_v1700_s::mtrp_pdcch_repeat_r17_s_::max_num_overlaps_r17_e_");
}
uint8_t feature_set_dl_v1700_s::mtrp_pdcch_repeat_r17_s_::max_num_overlaps_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 5, 10, 20, 40};
  return map_enum_number(
      numbers, 7, value, "feature_set_dl_v1700_s::mtrp_pdcch_repeat_r17_s_::max_num_overlaps_r17_e_");
}

// ModulationOrder ::= ENUMERATED
const char* mod_order_opts::to_string() const
{
  static const char* names[] = {"bpsk-halfpi", "bpsk", "qpsk", "qam16", "qam64", "qam256"};
  return convert_enum_idx(names, 6, value, "mod_order_e");
}
float mod_order_opts::to_number() const
{
  switch (value) {
    case bpsk_halfpi:
      return 0.5;
    case qam16:
      return 16.0;
    case qam64:
      return 64.0;
    case qam256:
      return 256.0;
    default:
      invalid_enum_number(value, "mod_order_e");
  }
  return 0;
}
const char* mod_order_opts::to_number_string() const
{
  static const char* number_strs[] = {"0.5", "16", "64", "256"};
  return convert_enum_idx(number_strs, 6, value, "mod_order_e");
}

// SupportedBandwidth ::= CHOICE
void supported_bw_c::destroy_() {}
void supported_bw_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
supported_bw_c::supported_bw_c(const supported_bw_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1:
      c.init(other.c.get<fr1_e_>());
      break;
    case types::fr2:
      c.init(other.c.get<fr2_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_c");
  }
}
supported_bw_c& supported_bw_c::operator=(const supported_bw_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1:
      c.set(other.c.get<fr1_e_>());
      break;
    case types::fr2:
      c.set(other.c.get<fr2_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_c");
  }

  return *this;
}
supported_bw_c::fr1_e_& supported_bw_c::set_fr1()
{
  set(types::fr1);
  return c.get<fr1_e_>();
}
supported_bw_c::fr2_e_& supported_bw_c::set_fr2()
{
  set(types::fr2);
  return c.get<fr2_e_>();
}
void supported_bw_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1:
      j.write_str("fr1", c.get<fr1_e_>().to_string());
      break;
    case types::fr2:
      j.write_str("fr2", c.get<fr2_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_c");
  }
  j.end_obj();
}
SRSASN_CODE supported_bw_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(c.get<fr1_e_>().pack(bref));
      break;
    case types::fr2:
      HANDLE_CODE(c.get<fr2_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE supported_bw_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1:
      HANDLE_CODE(c.get<fr1_e_>().unpack(bref));
      break;
    case types::fr2:
      HANDLE_CODE(c.get<fr2_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* supported_bw_c::fr1_opts::to_string() const
{
  static const char* names[] = {
      "mhz5", "mhz10", "mhz15", "mhz20", "mhz25", "mhz30", "mhz40", "mhz50", "mhz60", "mhz80", "mhz100"};
  return convert_enum_idx(names, 11, value, "supported_bw_c::fr1_e_");
}
uint8_t supported_bw_c::fr1_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 15, 20, 25, 30, 40, 50, 60, 80, 100};
  return map_enum_number(numbers, 11, value, "supported_bw_c::fr1_e_");
}

const char* supported_bw_c::fr2_opts::to_string() const
{
  static const char* names[] = {"mhz50", "mhz100", "mhz200", "mhz400"};
  return convert_enum_idx(names, 4, value, "supported_bw_c::fr2_e_");
}
uint16_t supported_bw_c::fr2_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 200, 400};
  return map_enum_number(numbers, 4, value, "supported_bw_c::fr2_e_");
}

// FeatureSetDownlinkPerCC ::= SEQUENCE
SRSASN_CODE feature_set_dl_per_cc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ch_bw_90mhz_present, 1));
  HANDLE_CODE(bref.pack(max_num_mimo_layers_pdsch_present, 1));
  HANDLE_CODE(bref.pack(supported_mod_order_dl_present, 1));

  HANDLE_CODE(supported_subcarrier_spacing_dl.pack(bref));
  HANDLE_CODE(supported_bw_dl.pack(bref));
  if (max_num_mimo_layers_pdsch_present) {
    HANDLE_CODE(max_num_mimo_layers_pdsch.pack(bref));
  }
  if (supported_mod_order_dl_present) {
    HANDLE_CODE(supported_mod_order_dl.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_per_cc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ch_bw_90mhz_present, 1));
  HANDLE_CODE(bref.unpack(max_num_mimo_layers_pdsch_present, 1));
  HANDLE_CODE(bref.unpack(supported_mod_order_dl_present, 1));

  HANDLE_CODE(supported_subcarrier_spacing_dl.unpack(bref));
  HANDLE_CODE(supported_bw_dl.unpack(bref));
  if (max_num_mimo_layers_pdsch_present) {
    HANDLE_CODE(max_num_mimo_layers_pdsch.unpack(bref));
  }
  if (supported_mod_order_dl_present) {
    HANDLE_CODE(supported_mod_order_dl.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_per_cc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("supportedSubcarrierSpacingDL", supported_subcarrier_spacing_dl.to_string());
  j.write_fieldname("supportedBandwidthDL");
  supported_bw_dl.to_json(j);
  if (ch_bw_90mhz_present) {
    j.write_str("channelBW-90mhz", "supported");
  }
  if (max_num_mimo_layers_pdsch_present) {
    j.write_str("maxNumberMIMO-LayersPDSCH", max_num_mimo_layers_pdsch.to_string());
  }
  if (supported_mod_order_dl_present) {
    j.write_str("supportedModulationOrderDL", supported_mod_order_dl.to_string());
  }
  j.end_obj();
}

// MultiDCI-MultiTRP-r16 ::= SEQUENCE
SRSASN_CODE multi_dci_multi_trp_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(max_num_coreset_r16.pack(bref));
  HANDLE_CODE(pack_integer(bref, max_num_coreset_per_pool_idx_r16, (uint8_t)1u, (uint8_t)3u));
  HANDLE_CODE(max_num_unicast_pdsch_per_pool_r16.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE multi_dci_multi_trp_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(max_num_coreset_r16.unpack(bref));
  HANDLE_CODE(unpack_integer(max_num_coreset_per_pool_idx_r16, bref, (uint8_t)1u, (uint8_t)3u));
  HANDLE_CODE(max_num_unicast_pdsch_per_pool_r16.unpack(bref));

  return SRSASN_SUCCESS;
}
void multi_dci_multi_trp_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("maxNumberCORESET-r16", max_num_coreset_r16.to_string());
  j.write_int("maxNumberCORESETPerPoolIndex-r16", max_num_coreset_per_pool_idx_r16);
  j.write_str("maxNumberUnicastPDSCH-PerPool-r16", max_num_unicast_pdsch_per_pool_r16.to_string());
  j.end_obj();
}

const char* multi_dci_multi_trp_r16_s::max_num_coreset_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4", "n5"};
  return convert_enum_idx(names, 4, value, "multi_dci_multi_trp_r16_s::max_num_coreset_r16_e_");
}
uint8_t multi_dci_multi_trp_r16_s::max_num_coreset_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 5};
  return map_enum_number(numbers, 4, value, "multi_dci_multi_trp_r16_s::max_num_coreset_r16_e_");
}

const char* multi_dci_multi_trp_r16_s::max_num_unicast_pdsch_per_pool_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4", "n7"};
  return convert_enum_idx(names, 5, value, "multi_dci_multi_trp_r16_s::max_num_unicast_pdsch_per_pool_r16_e_");
}
uint8_t multi_dci_multi_trp_r16_s::max_num_unicast_pdsch_per_pool_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4, 7};
  return map_enum_number(numbers, 5, value, "multi_dci_multi_trp_r16_s::max_num_unicast_pdsch_per_pool_r16_e_");
}

// FeatureSetDownlinkPerCC-v1620 ::= SEQUENCE
SRSASN_CODE feature_set_dl_per_cc_v1620_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(multi_dci_multi_trp_r16_present, 1));
  HANDLE_CODE(bref.pack(support_fdm_scheme_b_r16_present, 1));

  if (multi_dci_multi_trp_r16_present) {
    HANDLE_CODE(multi_dci_multi_trp_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_per_cc_v1620_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(multi_dci_multi_trp_r16_present, 1));
  HANDLE_CODE(bref.unpack(support_fdm_scheme_b_r16_present, 1));

  if (multi_dci_multi_trp_r16_present) {
    HANDLE_CODE(multi_dci_multi_trp_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_per_cc_v1620_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (multi_dci_multi_trp_r16_present) {
    j.write_fieldname("multiDCI-MultiTRP-r16");
    multi_dci_multi_trp_r16.to_json(j);
  }
  if (support_fdm_scheme_b_r16_present) {
    j.write_str("supportFDM-SchemeB-r16", "supported");
  }
  j.end_obj();
}

// CRS-InterfMitigation-r17 ::= SEQUENCE
SRSASN_CODE crs_interf_mitigation_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(crs_im_dss_15k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.pack(crs_im_non_dss_15k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.pack(crs_im_non_dss_nwa_15k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.pack(crs_im_non_dss_30k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.pack(crs_im_non_dss_nwa_30k_hz_scs_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE crs_interf_mitigation_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(crs_im_dss_15k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.unpack(crs_im_non_dss_15k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.unpack(crs_im_non_dss_nwa_15k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.unpack(crs_im_non_dss_30k_hz_scs_r17_present, 1));
  HANDLE_CODE(bref.unpack(crs_im_non_dss_nwa_30k_hz_scs_r17_present, 1));

  return SRSASN_SUCCESS;
}
void crs_interf_mitigation_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (crs_im_dss_15k_hz_scs_r17_present) {
    j.write_str("crs-IM-DSS-15kHzSCS-r17", "supported");
  }
  if (crs_im_non_dss_15k_hz_scs_r17_present) {
    j.write_str("crs-IM-nonDSS-15kHzSCS-r17", "supported");
  }
  if (crs_im_non_dss_nwa_15k_hz_scs_r17_present) {
    j.write_str("crs-IM-nonDSS-NWA-15kHzSCS-r17", "supported");
  }
  if (crs_im_non_dss_30k_hz_scs_r17_present) {
    j.write_str("crs-IM-nonDSS-30kHzSCS-r17", "supported");
  }
  if (crs_im_non_dss_nwa_30k_hz_scs_r17_present) {
    j.write_str("crs-IM-nonDSS-NWA-30kHzSCS-r17", "supported");
  }
  j.end_obj();
}

// SupportedBandwidth-v1700 ::= CHOICE
void supported_bw_v1700_c::destroy_() {}
void supported_bw_v1700_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
supported_bw_v1700_c::supported_bw_v1700_c(const supported_bw_v1700_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::fr1_r17:
      c.init(other.c.get<fr1_r17_e_>());
      break;
    case types::fr2_r17:
      c.init(other.c.get<fr2_r17_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_v1700_c");
  }
}
supported_bw_v1700_c& supported_bw_v1700_c::operator=(const supported_bw_v1700_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::fr1_r17:
      c.set(other.c.get<fr1_r17_e_>());
      break;
    case types::fr2_r17:
      c.set(other.c.get<fr2_r17_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_v1700_c");
  }

  return *this;
}
supported_bw_v1700_c::fr1_r17_e_& supported_bw_v1700_c::set_fr1_r17()
{
  set(types::fr1_r17);
  return c.get<fr1_r17_e_>();
}
supported_bw_v1700_c::fr2_r17_e_& supported_bw_v1700_c::set_fr2_r17()
{
  set(types::fr2_r17);
  return c.get<fr2_r17_e_>();
}
void supported_bw_v1700_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::fr1_r17:
      j.write_str("fr1-r17", c.get<fr1_r17_e_>().to_string());
      break;
    case types::fr2_r17:
      j.write_str("fr2-r17", c.get<fr2_r17_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_v1700_c");
  }
  j.end_obj();
}
SRSASN_CODE supported_bw_v1700_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(c.get<fr1_r17_e_>().pack(bref));
      break;
    case types::fr2_r17:
      HANDLE_CODE(c.get<fr2_r17_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_v1700_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE supported_bw_v1700_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::fr1_r17:
      HANDLE_CODE(c.get<fr1_r17_e_>().unpack(bref));
      break;
    case types::fr2_r17:
      HANDLE_CODE(c.get<fr2_r17_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "supported_bw_v1700_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* supported_bw_v1700_c::fr1_r17_opts::to_string() const
{
  static const char* names[] = {"mhz5",
                                "mhz10",
                                "mhz15",
                                "mhz20",
                                "mhz25",
                                "mhz30",
                                "mhz35",
                                "mhz40",
                                "mhz45",
                                "mhz50",
                                "mhz60",
                                "mhz70",
                                "mhz80",
                                "mhz90",
                                "mhz100"};
  return convert_enum_idx(names, 15, value, "supported_bw_v1700_c::fr1_r17_e_");
}
uint8_t supported_bw_v1700_c::fr1_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100};
  return map_enum_number(numbers, 15, value, "supported_bw_v1700_c::fr1_r17_e_");
}

const char* supported_bw_v1700_c::fr2_r17_opts::to_string() const
{
  static const char* names[] = {"mhz50", "mhz100", "mhz200", "mhz400", "mhz800", "mhz1600", "mhz2000"};
  return convert_enum_idx(names, 7, value, "supported_bw_v1700_c::fr2_r17_e_");
}
uint16_t supported_bw_v1700_c::fr2_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 200, 400, 800, 1600, 2000};
  return map_enum_number(numbers, 7, value, "supported_bw_v1700_c::fr2_r17_e_");
}

// FeatureSetDownlinkPerCC-v1700 ::= SEQUENCE
SRSASN_CODE feature_set_dl_per_cc_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_min_bw_dl_r17_present, 1));
  HANDLE_CODE(bref.pack(broadcast_scell_r17_present, 1));
  HANDLE_CODE(bref.pack(max_num_mimo_layers_multicast_pdsch_r17_present, 1));
  HANDLE_CODE(bref.pack(dyn_multicast_scell_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_bw_dl_v1710_present, 1));
  HANDLE_CODE(bref.pack(supported_crs_interf_mitigation_r17_present, 1));

  if (supported_min_bw_dl_r17_present) {
    HANDLE_CODE(supported_min_bw_dl_r17.pack(bref));
  }
  if (max_num_mimo_layers_multicast_pdsch_r17_present) {
    HANDLE_CODE(max_num_mimo_layers_multicast_pdsch_r17.pack(bref));
  }
  if (supported_bw_dl_v1710_present) {
    HANDLE_CODE(supported_bw_dl_v1710.pack(bref));
  }
  if (supported_crs_interf_mitigation_r17_present) {
    HANDLE_CODE(supported_crs_interf_mitigation_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_per_cc_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_min_bw_dl_r17_present, 1));
  HANDLE_CODE(bref.unpack(broadcast_scell_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_num_mimo_layers_multicast_pdsch_r17_present, 1));
  HANDLE_CODE(bref.unpack(dyn_multicast_scell_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_bw_dl_v1710_present, 1));
  HANDLE_CODE(bref.unpack(supported_crs_interf_mitigation_r17_present, 1));

  if (supported_min_bw_dl_r17_present) {
    HANDLE_CODE(supported_min_bw_dl_r17.unpack(bref));
  }
  if (max_num_mimo_layers_multicast_pdsch_r17_present) {
    HANDLE_CODE(max_num_mimo_layers_multicast_pdsch_r17.unpack(bref));
  }
  if (supported_bw_dl_v1710_present) {
    HANDLE_CODE(supported_bw_dl_v1710.unpack(bref));
  }
  if (supported_crs_interf_mitigation_r17_present) {
    HANDLE_CODE(supported_crs_interf_mitigation_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_per_cc_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_min_bw_dl_r17_present) {
    j.write_fieldname("supportedMinBandwidthDL-r17");
    supported_min_bw_dl_r17.to_json(j);
  }
  if (broadcast_scell_r17_present) {
    j.write_str("broadcastSCell-r17", "supported");
  }
  if (max_num_mimo_layers_multicast_pdsch_r17_present) {
    j.write_str("maxNumberMIMO-LayersMulticastPDSCH-r17", max_num_mimo_layers_multicast_pdsch_r17.to_string());
  }
  if (dyn_multicast_scell_r17_present) {
    j.write_str("dynamicMulticastSCell-r17", "supported");
  }
  if (supported_bw_dl_v1710_present) {
    j.write_fieldname("supportedBandwidthDL-v1710");
    supported_bw_dl_v1710.to_json(j);
  }
  if (supported_crs_interf_mitigation_r17_present) {
    j.write_fieldname("supportedCRS-InterfMitigation-r17");
    supported_crs_interf_mitigation_r17.to_json(j);
  }
  j.end_obj();
}

const char* feature_set_dl_per_cc_v1700_s::max_num_mimo_layers_multicast_pdsch_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8"};
  return convert_enum_idx(names, 3, value, "feature_set_dl_per_cc_v1700_s::max_num_mimo_layers_multicast_pdsch_r17_e_");
}
uint8_t feature_set_dl_per_cc_v1700_s::max_num_mimo_layers_multicast_pdsch_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_per_cc_v1700_s::max_num_mimo_layers_multicast_pdsch_r17_e_");
}

// DummyF ::= SEQUENCE
SRSASN_CODE dummy_f_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(pack_integer(bref, max_num_periodic_csi_report_per_bwp, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_aperiodic_csi_report_per_bwp, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, max_num_semi_persistent_csi_report_per_bwp, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(pack_integer(bref, simul_csi_reports_all_cc, (uint8_t)5u, (uint8_t)32u));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_f_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(unpack_integer(max_num_periodic_csi_report_per_bwp, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_aperiodic_csi_report_per_bwp, bref, (uint8_t)1u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(max_num_semi_persistent_csi_report_per_bwp, bref, (uint8_t)0u, (uint8_t)4u));
  HANDLE_CODE(unpack_integer(simul_csi_reports_all_cc, bref, (uint8_t)5u, (uint8_t)32u));

  return SRSASN_SUCCESS;
}
void dummy_f_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("maxNumberPeriodicCSI-ReportPerBWP", max_num_periodic_csi_report_per_bwp);
  j.write_int("maxNumberAperiodicCSI-ReportPerBWP", max_num_aperiodic_csi_report_per_bwp);
  j.write_int("maxNumberSemiPersistentCSI-ReportPerBWP", max_num_semi_persistent_csi_report_per_bwp);
  j.write_int("simultaneousCSI-ReportsAllCC", simul_csi_reports_all_cc);
  j.end_obj();
}

// DummyI ::= SEQUENCE
SRSASN_CODE dummy_i_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(tx_switch_impact_to_rx_present, 1));

  HANDLE_CODE(supported_srs_tx_port_switch.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE dummy_i_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(tx_switch_impact_to_rx_present, 1));

  HANDLE_CODE(supported_srs_tx_port_switch.unpack(bref));

  return SRSASN_SUCCESS;
}
void dummy_i_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("supportedSRS-TxPortSwitch", supported_srs_tx_port_switch.to_string());
  if (tx_switch_impact_to_rx_present) {
    j.write_str("txSwitchImpactToRx", "true");
  }
  j.end_obj();
}

const char* dummy_i_s::supported_srs_tx_port_switch_opts::to_string() const
{
  static const char* names[] = {"t1r2", "t1r4", "t2r4", "t1r4-t2r4", "tr-equal"};
  return convert_enum_idx(names, 5, value, "dummy_i_s::supported_srs_tx_port_switch_e_");
}

// FeatureSetUplink ::= SEQUENCE
SRSASN_CODE feature_set_ul_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scaling_factor_present, 1));
  HANDLE_CODE(bref.pack(dummy3_present, 1));
  HANDLE_CODE(bref.pack(intra_band_freq_separation_ul_present, 1));
  HANDLE_CODE(bref.pack(search_space_sharing_ca_ul_present, 1));
  HANDLE_CODE(bref.pack(dummy1_present, 1));
  HANDLE_CODE(bref.pack(supported_srs_res_features_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_group_present, 1));
  HANDLE_CODE(bref.pack(dyn_switch_sul_present, 1));
  HANDLE_CODE(bref.pack(simul_tx_sul_non_sul_present, 1));
  HANDLE_CODE(bref.pack(pusch_processing_type1_different_tb_per_slot_present, 1));
  HANDLE_CODE(bref.pack(dummy2_present, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, feature_set_list_per_ul_cc, 1, 32, integer_packer<uint16_t>(1, 1024)));
  if (scaling_factor_present) {
    HANDLE_CODE(scaling_factor.pack(bref));
  }
  if (intra_band_freq_separation_ul_present) {
    HANDLE_CODE(intra_band_freq_separation_ul.pack(bref));
  }
  if (dummy1_present) {
    HANDLE_CODE(dummy1.pack(bref));
  }
  if (supported_srs_res_features_present) {
    HANDLE_CODE(supported_srs_res_features.pack(bref));
  }
  if (pusch_processing_type1_different_tb_per_slot_present) {
    HANDLE_CODE(bref.pack(pusch_processing_type1_different_tb_per_slot.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(pusch_processing_type1_different_tb_per_slot.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(pusch_processing_type1_different_tb_per_slot.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.pack(pusch_processing_type1_different_tb_per_slot.scs_120k_hz_present, 1));
    if (pusch_processing_type1_different_tb_per_slot.scs_15k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_15k_hz.pack(bref));
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_30k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_30k_hz.pack(bref));
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_60k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_60k_hz.pack(bref));
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_120k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_120k_hz.pack(bref));
    }
  }
  if (dummy2_present) {
    HANDLE_CODE(dummy2.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(scaling_factor_present, 1));
  HANDLE_CODE(bref.unpack(dummy3_present, 1));
  HANDLE_CODE(bref.unpack(intra_band_freq_separation_ul_present, 1));
  HANDLE_CODE(bref.unpack(search_space_sharing_ca_ul_present, 1));
  HANDLE_CODE(bref.unpack(dummy1_present, 1));
  HANDLE_CODE(bref.unpack(supported_srs_res_features_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_group_present, 1));
  HANDLE_CODE(bref.unpack(dyn_switch_sul_present, 1));
  HANDLE_CODE(bref.unpack(simul_tx_sul_non_sul_present, 1));
  HANDLE_CODE(bref.unpack(pusch_processing_type1_different_tb_per_slot_present, 1));
  HANDLE_CODE(bref.unpack(dummy2_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(feature_set_list_per_ul_cc, bref, 1, 32, integer_packer<uint16_t>(1, 1024)));
  if (scaling_factor_present) {
    HANDLE_CODE(scaling_factor.unpack(bref));
  }
  if (intra_band_freq_separation_ul_present) {
    HANDLE_CODE(intra_band_freq_separation_ul.unpack(bref));
  }
  if (dummy1_present) {
    HANDLE_CODE(dummy1.unpack(bref));
  }
  if (supported_srs_res_features_present) {
    HANDLE_CODE(supported_srs_res_features.unpack(bref));
  }
  if (pusch_processing_type1_different_tb_per_slot_present) {
    HANDLE_CODE(bref.unpack(pusch_processing_type1_different_tb_per_slot.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pusch_processing_type1_different_tb_per_slot.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pusch_processing_type1_different_tb_per_slot.scs_60k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pusch_processing_type1_different_tb_per_slot.scs_120k_hz_present, 1));
    if (pusch_processing_type1_different_tb_per_slot.scs_15k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_15k_hz.unpack(bref));
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_30k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_30k_hz.unpack(bref));
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_60k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_60k_hz.unpack(bref));
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_120k_hz_present) {
      HANDLE_CODE(pusch_processing_type1_different_tb_per_slot.scs_120k_hz.unpack(bref));
    }
  }
  if (dummy2_present) {
    HANDLE_CODE(dummy2.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("featureSetListPerUplinkCC");
  for (const auto& e1 : feature_set_list_per_ul_cc) {
    j.write_int(e1);
  }
  j.end_array();
  if (scaling_factor_present) {
    j.write_str("scalingFactor", scaling_factor.to_string());
  }
  if (dummy3_present) {
    j.write_str("dummy3", "supported");
  }
  if (intra_band_freq_separation_ul_present) {
    j.write_str("intraBandFreqSeparationUL", intra_band_freq_separation_ul.to_string());
  }
  if (search_space_sharing_ca_ul_present) {
    j.write_str("searchSpaceSharingCA-UL", "supported");
  }
  if (dummy1_present) {
    j.write_fieldname("dummy1");
    dummy1.to_json(j);
  }
  if (supported_srs_res_features_present) {
    j.write_fieldname("supportedSRS-Resources");
    supported_srs_res_features.to_json(j);
  }
  if (two_pucch_group_present) {
    j.write_str("twoPUCCH-Group", "supported");
  }
  if (dyn_switch_sul_present) {
    j.write_str("dynamicSwitchSUL", "supported");
  }
  if (simul_tx_sul_non_sul_present) {
    j.write_str("simultaneousTxSUL-NonSUL", "supported");
  }
  if (pusch_processing_type1_different_tb_per_slot_present) {
    j.write_fieldname("pusch-ProcessingType1-DifferentTB-PerSlot");
    j.start_obj();
    if (pusch_processing_type1_different_tb_per_slot.scs_15k_hz_present) {
      j.write_str("scs-15kHz", pusch_processing_type1_different_tb_per_slot.scs_15k_hz.to_string());
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_30k_hz_present) {
      j.write_str("scs-30kHz", pusch_processing_type1_different_tb_per_slot.scs_30k_hz.to_string());
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_60k_hz_present) {
      j.write_str("scs-60kHz", pusch_processing_type1_different_tb_per_slot.scs_60k_hz.to_string());
    }
    if (pusch_processing_type1_different_tb_per_slot.scs_120k_hz_present) {
      j.write_str("scs-120kHz", pusch_processing_type1_different_tb_per_slot.scs_120k_hz.to_string());
    }
    j.end_obj();
  }
  if (dummy2_present) {
    j.write_fieldname("dummy2");
    dummy2.to_json(j);
  }
  j.end_obj();
}

const char* feature_set_ul_s::scaling_factor_opts::to_string() const
{
  static const char* names[] = {"f0p4", "f0p75", "f0p8"};
  return convert_enum_idx(names, 3, value, "feature_set_ul_s::scaling_factor_e_");
}

const char* feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_e_");
}
uint8_t feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_15k_hz_e_");
}

const char* feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_e_");
}
uint8_t feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_30k_hz_e_");
}

const char* feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_e_");
}
uint8_t feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_60k_hz_e_");
}

const char* feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_opts::to_string() const
{
  static const char* names[] = {"upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_e_");
}
uint8_t feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 7};
  return map_enum_number(
      numbers, 3, value, "feature_set_ul_s::pusch_processing_type1_different_tb_per_slot_s_::scs_120k_hz_e_");
}

// FeatureSetUplink-v1540 ::= SEQUENCE
SRSASN_CODE feature_set_ul_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(zero_slot_offset_aperiodic_srs_present, 1));
  HANDLE_CODE(bref.pack(pa_phase_discontinuity_impacts_present, 1));
  HANDLE_CODE(bref.pack(pusch_separation_with_gap_present, 1));
  HANDLE_CODE(bref.pack(pusch_processing_type2_present, 1));
  HANDLE_CODE(bref.pack(ul_mcs_table_alt_dyn_ind_present, 1));

  if (pusch_processing_type2_present) {
    HANDLE_CODE(bref.pack(pusch_processing_type2.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.pack(pusch_processing_type2.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.pack(pusch_processing_type2.scs_60k_hz_present, 1));
    if (pusch_processing_type2.scs_15k_hz_present) {
      HANDLE_CODE(pusch_processing_type2.scs_15k_hz.pack(bref));
    }
    if (pusch_processing_type2.scs_30k_hz_present) {
      HANDLE_CODE(pusch_processing_type2.scs_30k_hz.pack(bref));
    }
    if (pusch_processing_type2.scs_60k_hz_present) {
      HANDLE_CODE(pusch_processing_type2.scs_60k_hz.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(zero_slot_offset_aperiodic_srs_present, 1));
  HANDLE_CODE(bref.unpack(pa_phase_discontinuity_impacts_present, 1));
  HANDLE_CODE(bref.unpack(pusch_separation_with_gap_present, 1));
  HANDLE_CODE(bref.unpack(pusch_processing_type2_present, 1));
  HANDLE_CODE(bref.unpack(ul_mcs_table_alt_dyn_ind_present, 1));

  if (pusch_processing_type2_present) {
    HANDLE_CODE(bref.unpack(pusch_processing_type2.scs_15k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pusch_processing_type2.scs_30k_hz_present, 1));
    HANDLE_CODE(bref.unpack(pusch_processing_type2.scs_60k_hz_present, 1));
    if (pusch_processing_type2.scs_15k_hz_present) {
      HANDLE_CODE(pusch_processing_type2.scs_15k_hz.unpack(bref));
    }
    if (pusch_processing_type2.scs_30k_hz_present) {
      HANDLE_CODE(pusch_processing_type2.scs_30k_hz.unpack(bref));
    }
    if (pusch_processing_type2.scs_60k_hz_present) {
      HANDLE_CODE(pusch_processing_type2.scs_60k_hz.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (zero_slot_offset_aperiodic_srs_present) {
    j.write_str("zeroSlotOffsetAperiodicSRS", "supported");
  }
  if (pa_phase_discontinuity_impacts_present) {
    j.write_str("pa-PhaseDiscontinuityImpacts", "supported");
  }
  if (pusch_separation_with_gap_present) {
    j.write_str("pusch-SeparationWithGap", "supported");
  }
  if (pusch_processing_type2_present) {
    j.write_fieldname("pusch-ProcessingType2");
    j.start_obj();
    if (pusch_processing_type2.scs_15k_hz_present) {
      j.write_fieldname("scs-15kHz");
      pusch_processing_type2.scs_15k_hz.to_json(j);
    }
    if (pusch_processing_type2.scs_30k_hz_present) {
      j.write_fieldname("scs-30kHz");
      pusch_processing_type2.scs_30k_hz.to_json(j);
    }
    if (pusch_processing_type2.scs_60k_hz_present) {
      j.write_fieldname("scs-60kHz");
      pusch_processing_type2.scs_60k_hz.to_json(j);
    }
    j.end_obj();
  }
  if (ul_mcs_table_alt_dyn_ind_present) {
    j.write_str("ul-MCS-TableAlt-DynamicIndication", "supported");
  }
  j.end_obj();
}

// FeatureSetUplink-v1610 ::= SEQUENCE
SRSASN_CODE feature_set_ul_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pusch_repeat_type_b_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_cancellation_self_carrier_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_cancellation_cross_carrier_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_full_pwr_mode2_max_srs_res_in_set_r16_present, 1));
  HANDLE_CODE(bref.pack(cbg_pusch_processing_type1_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.pack(cbg_pusch_processing_type2_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.pack(supported_srs_pos_res_r16_present, 1));
  HANDLE_CODE(bref.pack(intra_freq_daps_ul_r16_present, 1));
  HANDLE_CODE(bref.pack(intra_band_freq_separation_ul_v1620_present, 1));
  HANDLE_CODE(bref.pack(multi_pucch_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type1_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type2_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type3_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type4_r16_present, 1));
  HANDLE_CODE(bref.pack(mux_sr_harq_ack_r16_present, 1));
  HANDLE_CODE(bref.pack(dummy1_present, 1));
  HANDLE_CODE(bref.pack(dummy2_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type5_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type6_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type7_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type8_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type9_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type10_r16_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_type11_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_intra_ue_mux_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_full_pwr_mode_r16_present, 1));
  HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_full_pwr_mode1_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_full_pwr_mode2_tpmi_group_r16_present, 1));

  if (pusch_repeat_type_b_r16_present) {
    HANDLE_CODE(pusch_repeat_type_b_r16.max_num_pusch_tx_r16.pack(bref));
    HANDLE_CODE(pusch_repeat_type_b_r16.hop_scheme_r16.pack(bref));
  }
  if (ul_full_pwr_mode2_max_srs_res_in_set_r16_present) {
    HANDLE_CODE(ul_full_pwr_mode2_max_srs_res_in_set_r16.pack(bref));
  }
  if (cbg_pusch_processing_type1_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16.pack(bref));
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16.pack(bref));
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16.pack(bref));
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16.pack(bref));
    }
  }
  if (cbg_pusch_processing_type2_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16.pack(bref));
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16.pack(bref));
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16.pack(bref));
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16.pack(bref));
    }
  }
  if (supported_srs_pos_res_r16_present) {
    HANDLE_CODE(supported_srs_pos_res_r16.pack(bref));
  }
  if (intra_freq_daps_ul_r16_present) {
    HANDLE_CODE(bref.pack(intra_freq_daps_ul_r16.dummy_present, 1));
    HANDLE_CODE(bref.pack(intra_freq_daps_ul_r16.intra_freq_two_tags_daps_r16_present, 1));
    HANDLE_CODE(bref.pack(intra_freq_daps_ul_r16.dummy1_present, 1));
    HANDLE_CODE(bref.pack(intra_freq_daps_ul_r16.dummy2_present, 1));
    HANDLE_CODE(bref.pack(intra_freq_daps_ul_r16.dummy3_present, 1));
    if (intra_freq_daps_ul_r16.dummy3_present) {
      HANDLE_CODE(intra_freq_daps_ul_r16.dummy3.pack(bref));
    }
  }
  if (multi_pucch_r16_present) {
    HANDLE_CODE(bref.pack(multi_pucch_r16.sub_slot_cfg_n_cp_r16_present, 1));
    HANDLE_CODE(bref.pack(multi_pucch_r16.sub_slot_cfg_e_cp_r16_present, 1));
    if (multi_pucch_r16.sub_slot_cfg_n_cp_r16_present) {
      HANDLE_CODE(multi_pucch_r16.sub_slot_cfg_n_cp_r16.pack(bref));
    }
    if (multi_pucch_r16.sub_slot_cfg_e_cp_r16_present) {
      HANDLE_CODE(multi_pucch_r16.sub_slot_cfg_e_cp_r16.pack(bref));
    }
  }
  if (ul_intra_ue_mux_r16_present) {
    HANDLE_CODE(ul_intra_ue_mux_r16.pusch_prep_low_prio_r16.pack(bref));
    HANDLE_CODE(ul_intra_ue_mux_r16.pusch_prep_high_prio_r16.pack(bref));
  }
  if (cross_carrier_sched_processing_diff_scs_r16_present) {
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(cross_carrier_sched_processing_diff_scs_r16.scs_60k_hz_120k_hz_r16_present, 1));
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16.pack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16.pack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16.pack(bref));
    }
  }
  if (ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16_present) {
    HANDLE_CODE(ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16.pack(bref));
  }
  if (ul_full_pwr_mode2_tpmi_group_r16_present) {
    HANDLE_CODE(bref.pack(ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16_present, 1));
    HANDLE_CODE(bref.pack(ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16_present, 1));
    HANDLE_CODE(bref.pack(ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16_present, 1));
    if (ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16_present) {
      HANDLE_CODE(ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16.pack(bref));
    }
    if (ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16_present) {
      HANDLE_CODE(ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16.pack(bref));
    }
    if (ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16_present) {
      HANDLE_CODE(ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pusch_repeat_type_b_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_cancellation_self_carrier_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_cancellation_cross_carrier_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_full_pwr_mode2_max_srs_res_in_set_r16_present, 1));
  HANDLE_CODE(bref.unpack(cbg_pusch_processing_type1_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.unpack(cbg_pusch_processing_type2_different_tb_per_slot_r16_present, 1));
  HANDLE_CODE(bref.unpack(supported_srs_pos_res_r16_present, 1));
  HANDLE_CODE(bref.unpack(intra_freq_daps_ul_r16_present, 1));
  HANDLE_CODE(bref.unpack(intra_band_freq_separation_ul_v1620_present, 1));
  HANDLE_CODE(bref.unpack(multi_pucch_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type1_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type2_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type3_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type4_r16_present, 1));
  HANDLE_CODE(bref.unpack(mux_sr_harq_ack_r16_present, 1));
  HANDLE_CODE(bref.unpack(dummy1_present, 1));
  HANDLE_CODE(bref.unpack(dummy2_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type5_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type6_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type7_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type8_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type9_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type10_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_type11_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_intra_ue_mux_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_full_pwr_mode_r16_present, 1));
  HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_full_pwr_mode1_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_full_pwr_mode2_tpmi_group_r16_present, 1));

  if (pusch_repeat_type_b_r16_present) {
    HANDLE_CODE(pusch_repeat_type_b_r16.max_num_pusch_tx_r16.unpack(bref));
    HANDLE_CODE(pusch_repeat_type_b_r16.hop_scheme_r16.unpack(bref));
  }
  if (ul_full_pwr_mode2_max_srs_res_in_set_r16_present) {
    HANDLE_CODE(ul_full_pwr_mode2_max_srs_res_in_set_r16.unpack(bref));
  }
  if (cbg_pusch_processing_type1_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16.unpack(bref));
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16.unpack(bref));
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16.unpack(bref));
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16.unpack(bref));
    }
  }
  if (cbg_pusch_processing_type2_different_tb_per_slot_r16_present) {
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present, 1));
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16.unpack(bref));
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16.unpack(bref));
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16.unpack(bref));
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      HANDLE_CODE(cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16.unpack(bref));
    }
  }
  if (supported_srs_pos_res_r16_present) {
    HANDLE_CODE(supported_srs_pos_res_r16.unpack(bref));
  }
  if (intra_freq_daps_ul_r16_present) {
    HANDLE_CODE(bref.unpack(intra_freq_daps_ul_r16.dummy_present, 1));
    HANDLE_CODE(bref.unpack(intra_freq_daps_ul_r16.intra_freq_two_tags_daps_r16_present, 1));
    HANDLE_CODE(bref.unpack(intra_freq_daps_ul_r16.dummy1_present, 1));
    HANDLE_CODE(bref.unpack(intra_freq_daps_ul_r16.dummy2_present, 1));
    HANDLE_CODE(bref.unpack(intra_freq_daps_ul_r16.dummy3_present, 1));
    if (intra_freq_daps_ul_r16.dummy3_present) {
      HANDLE_CODE(intra_freq_daps_ul_r16.dummy3.unpack(bref));
    }
  }
  if (multi_pucch_r16_present) {
    HANDLE_CODE(bref.unpack(multi_pucch_r16.sub_slot_cfg_n_cp_r16_present, 1));
    HANDLE_CODE(bref.unpack(multi_pucch_r16.sub_slot_cfg_e_cp_r16_present, 1));
    if (multi_pucch_r16.sub_slot_cfg_n_cp_r16_present) {
      HANDLE_CODE(multi_pucch_r16.sub_slot_cfg_n_cp_r16.unpack(bref));
    }
    if (multi_pucch_r16.sub_slot_cfg_e_cp_r16_present) {
      HANDLE_CODE(multi_pucch_r16.sub_slot_cfg_e_cp_r16.unpack(bref));
    }
  }
  if (ul_intra_ue_mux_r16_present) {
    HANDLE_CODE(ul_intra_ue_mux_r16.pusch_prep_low_prio_r16.unpack(bref));
    HANDLE_CODE(ul_intra_ue_mux_r16.pusch_prep_high_prio_r16.unpack(bref));
  }
  if (cross_carrier_sched_processing_diff_scs_r16_present) {
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_60k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(cross_carrier_sched_processing_diff_scs_r16.scs_60k_hz_120k_hz_r16_present, 1));
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16.unpack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16.unpack(bref));
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present) {
      HANDLE_CODE(cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16.unpack(bref));
    }
  }
  if (ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16_present) {
    HANDLE_CODE(ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16.unpack(bref));
  }
  if (ul_full_pwr_mode2_tpmi_group_r16_present) {
    HANDLE_CODE(bref.unpack(ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16_present, 1));
    HANDLE_CODE(bref.unpack(ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16_present, 1));
    HANDLE_CODE(bref.unpack(ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16_present, 1));
    if (ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16_present) {
      HANDLE_CODE(ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16.unpack(bref));
    }
    if (ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16_present) {
      HANDLE_CODE(ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16.unpack(bref));
    }
    if (ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16_present) {
      HANDLE_CODE(ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pusch_repeat_type_b_r16_present) {
    j.write_fieldname("pusch-RepetitionTypeB-r16");
    j.start_obj();
    j.write_str("maxNumberPUSCH-Tx-r16", pusch_repeat_type_b_r16.max_num_pusch_tx_r16.to_string());
    j.write_str("hoppingScheme-r16", pusch_repeat_type_b_r16.hop_scheme_r16.to_string());
    j.end_obj();
  }
  if (ul_cancellation_self_carrier_r16_present) {
    j.write_str("ul-CancellationSelfCarrier-r16", "supported");
  }
  if (ul_cancellation_cross_carrier_r16_present) {
    j.write_str("ul-CancellationCrossCarrier-r16", "supported");
  }
  if (ul_full_pwr_mode2_max_srs_res_in_set_r16_present) {
    j.write_str("ul-FullPwrMode2-MaxSRS-ResInSet-r16", ul_full_pwr_mode2_max_srs_res_in_set_r16.to_string());
  }
  if (cbg_pusch_processing_type1_different_tb_per_slot_r16_present) {
    j.write_fieldname("cbgPUSCH-ProcessingType1-DifferentTB-PerSlot-r16");
    j.start_obj();
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      j.write_str("scs-15kHz-r16", cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_15k_hz_r16.to_string());
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      j.write_str("scs-30kHz-r16", cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_30k_hz_r16.to_string());
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      j.write_str("scs-60kHz-r16", cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_60k_hz_r16.to_string());
    }
    if (cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      j.write_str("scs-120kHz-r16", cbg_pusch_processing_type1_different_tb_per_slot_r16.scs_120k_hz_r16.to_string());
    }
    j.end_obj();
  }
  if (cbg_pusch_processing_type2_different_tb_per_slot_r16_present) {
    j.write_fieldname("cbgPUSCH-ProcessingType2-DifferentTB-PerSlot-r16");
    j.start_obj();
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16_present) {
      j.write_str("scs-15kHz-r16", cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_15k_hz_r16.to_string());
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16_present) {
      j.write_str("scs-30kHz-r16", cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_30k_hz_r16.to_string());
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16_present) {
      j.write_str("scs-60kHz-r16", cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_60k_hz_r16.to_string());
    }
    if (cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16_present) {
      j.write_str("scs-120kHz-r16", cbg_pusch_processing_type2_different_tb_per_slot_r16.scs_120k_hz_r16.to_string());
    }
    j.end_obj();
  }
  if (supported_srs_pos_res_r16_present) {
    j.write_fieldname("supportedSRS-PosResources-r16");
    supported_srs_pos_res_r16.to_json(j);
  }
  if (intra_freq_daps_ul_r16_present) {
    j.write_fieldname("intraFreqDAPS-UL-r16");
    j.start_obj();
    if (intra_freq_daps_ul_r16.dummy_present) {
      j.write_str("dummy", "supported");
    }
    if (intra_freq_daps_ul_r16.intra_freq_two_tags_daps_r16_present) {
      j.write_str("intraFreqTwoTAGs-DAPS-r16", "supported");
    }
    if (intra_freq_daps_ul_r16.dummy1_present) {
      j.write_str("dummy1", "supported");
    }
    if (intra_freq_daps_ul_r16.dummy2_present) {
      j.write_str("dummy2", "supported");
    }
    if (intra_freq_daps_ul_r16.dummy3_present) {
      j.write_str("dummy3", intra_freq_daps_ul_r16.dummy3.to_string());
    }
    j.end_obj();
  }
  if (intra_band_freq_separation_ul_v1620_present) {
    j.write_str("intraBandFreqSeparationUL-v1620", "mhz1000");
  }
  if (multi_pucch_r16_present) {
    j.write_fieldname("multiPUCCH-r16");
    j.start_obj();
    if (multi_pucch_r16.sub_slot_cfg_n_cp_r16_present) {
      j.write_str("sub-SlotConfig-NCP-r16", multi_pucch_r16.sub_slot_cfg_n_cp_r16.to_string());
    }
    if (multi_pucch_r16.sub_slot_cfg_e_cp_r16_present) {
      j.write_str("sub-SlotConfig-ECP-r16", multi_pucch_r16.sub_slot_cfg_e_cp_r16.to_string());
    }
    j.end_obj();
  }
  if (two_pucch_type1_r16_present) {
    j.write_str("twoPUCCH-Type1-r16", "supported");
  }
  if (two_pucch_type2_r16_present) {
    j.write_str("twoPUCCH-Type2-r16", "supported");
  }
  if (two_pucch_type3_r16_present) {
    j.write_str("twoPUCCH-Type3-r16", "supported");
  }
  if (two_pucch_type4_r16_present) {
    j.write_str("twoPUCCH-Type4-r16", "supported");
  }
  if (mux_sr_harq_ack_r16_present) {
    j.write_str("mux-SR-HARQ-ACK-r16", "supported");
  }
  if (dummy1_present) {
    j.write_str("dummy1", "supported");
  }
  if (dummy2_present) {
    j.write_str("dummy2", "supported");
  }
  if (two_pucch_type5_r16_present) {
    j.write_str("twoPUCCH-Type5-r16", "supported");
  }
  if (two_pucch_type6_r16_present) {
    j.write_str("twoPUCCH-Type6-r16", "supported");
  }
  if (two_pucch_type7_r16_present) {
    j.write_str("twoPUCCH-Type7-r16", "supported");
  }
  if (two_pucch_type8_r16_present) {
    j.write_str("twoPUCCH-Type8-r16", "supported");
  }
  if (two_pucch_type9_r16_present) {
    j.write_str("twoPUCCH-Type9-r16", "supported");
  }
  if (two_pucch_type10_r16_present) {
    j.write_str("twoPUCCH-Type10-r16", "supported");
  }
  if (two_pucch_type11_r16_present) {
    j.write_str("twoPUCCH-Type11-r16", "supported");
  }
  if (ul_intra_ue_mux_r16_present) {
    j.write_fieldname("ul-IntraUE-Mux-r16");
    j.start_obj();
    j.write_str("pusch-PreparationLowPriority-r16", ul_intra_ue_mux_r16.pusch_prep_low_prio_r16.to_string());
    j.write_str("pusch-PreparationHighPriority-r16", ul_intra_ue_mux_r16.pusch_prep_high_prio_r16.to_string());
    j.end_obj();
  }
  if (ul_full_pwr_mode_r16_present) {
    j.write_str("ul-FullPwrMode-r16", "supported");
  }
  if (cross_carrier_sched_processing_diff_scs_r16_present) {
    j.write_fieldname("crossCarrierSchedulingProcessing-DiffSCS-r16");
    j.start_obj();
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16_present) {
      j.write_str("scs-15kHz-120kHz-r16",
                  cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_120k_hz_r16.to_string());
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16_present) {
      j.write_str("scs-15kHz-60kHz-r16", cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_60k_hz_r16.to_string());
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16_present) {
      j.write_str("scs-30kHz-120kHz-r16",
                  cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_120k_hz_r16.to_string());
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_15k_hz_30k_hz_r16_present) {
      j.write_str("scs-15kHz-30kHz-r16", "n2");
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_30k_hz_60k_hz_r16_present) {
      j.write_str("scs-30kHz-60kHz-r16", "n2");
    }
    if (cross_carrier_sched_processing_diff_scs_r16.scs_60k_hz_120k_hz_r16_present) {
      j.write_str("scs-60kHz-120kHz-r16", "n2");
    }
    j.end_obj();
  }
  if (ul_full_pwr_mode1_r16_present) {
    j.write_str("ul-FullPwrMode1-r16", "supported");
  }
  if (ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16_present) {
    j.write_str("ul-FullPwrMode2-SRSConfig-diffNumSRSPorts-r16",
                ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16.to_string());
  }
  if (ul_full_pwr_mode2_tpmi_group_r16_present) {
    j.write_fieldname("ul-FullPwrMode2-TPMIGroup-r16");
    j.start_obj();
    if (ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16_present) {
      j.write_str("twoPorts-r16", ul_full_pwr_mode2_tpmi_group_r16.two_ports_r16.to_string());
    }
    if (ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16_present) {
      j.write_str("fourPortsNonCoherent-r16", ul_full_pwr_mode2_tpmi_group_r16.four_ports_non_coherent_r16.to_string());
    }
    if (ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16_present) {
      j.write_str("fourPortsPartialCoherent-r16",
                  ul_full_pwr_mode2_tpmi_group_r16.four_ports_partial_coherent_r16.to_string());
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* feature_set_ul_v1610_s::pusch_repeat_type_b_r16_s_::max_num_pusch_tx_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4", "n7", "n8", "n12"};
  return convert_enum_idx(
      names, 6, value, "feature_set_ul_v1610_s::pusch_repeat_type_b_r16_s_::max_num_pusch_tx_r16_e_");
}
uint8_t feature_set_ul_v1610_s::pusch_repeat_type_b_r16_s_::max_num_pusch_tx_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4, 7, 8, 12};
  return map_enum_number(
      numbers, 6, value, "feature_set_ul_v1610_s::pusch_repeat_type_b_r16_s_::max_num_pusch_tx_r16_e_");
}

const char* feature_set_ul_v1610_s::pusch_repeat_type_b_r16_s_::hop_scheme_r16_opts::to_string() const
{
  static const char* names[] = {"interSlotHopping", "interRepetitionHopping", "both"};
  return convert_enum_idx(names, 3, value, "feature_set_ul_v1610_s::pusch_repeat_type_b_r16_s_::hop_scheme_r16_e_");
}

const char* feature_set_ul_v1610_s::ul_full_pwr_mode2_max_srs_res_in_set_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "feature_set_ul_v1610_s::ul_full_pwr_mode2_max_srs_res_in_set_r16_e_");
}
uint8_t feature_set_ul_v1610_s::ul_full_pwr_mode2_max_srs_res_in_set_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "feature_set_ul_v1610_s::ul_full_pwr_mode2_max_srs_res_in_set_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type1_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_15k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_30k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_60k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"one-pusch", "upto2", "upto4", "upto7"};
  return convert_enum_idx(
      names,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 7};
  return map_enum_number(
      numbers,
      4,
      value,
      "feature_set_ul_v1610_s::cbg_pusch_processing_type2_different_tb_per_slot_r16_s_::scs_120k_hz_r16_e_");
}

const char* feature_set_ul_v1610_s::intra_freq_daps_ul_r16_s_::dummy3_opts::to_string() const
{
  static const char* names[] = {"short", "long"};
  return convert_enum_idx(names, 2, value, "feature_set_ul_v1610_s::intra_freq_daps_ul_r16_s_::dummy3_e_");
}

const char* feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_n_cp_r16_opts::to_string() const
{
  static const char* names[] = {"set1", "set2"};
  return convert_enum_idx(names, 2, value, "feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_n_cp_r16_e_");
}
uint8_t feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_n_cp_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_n_cp_r16_e_");
}

const char* feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_e_cp_r16_opts::to_string() const
{
  static const char* names[] = {"set1", "set2"};
  return convert_enum_idx(names, 2, value, "feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_e_cp_r16_e_");
}
uint8_t feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_e_cp_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "feature_set_ul_v1610_s::multi_pucch_r16_s_::sub_slot_cfg_e_cp_r16_e_");
}

const char* feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_low_prio_r16_opts::to_string() const
{
  static const char* names[] = {"sym0", "sym1", "sym2"};
  return convert_enum_idx(
      names, 3, value, "feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_low_prio_r16_e_");
}
uint8_t feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_low_prio_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2};
  return map_enum_number(
      numbers, 3, value, "feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_low_prio_r16_e_");
}

const char* feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_high_prio_r16_opts::to_string() const
{
  static const char* names[] = {"sym0", "sym1", "sym2"};
  return convert_enum_idx(
      names, 3, value, "feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_high_prio_r16_e_");
}
uint8_t feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_high_prio_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2};
  return map_enum_number(
      numbers, 3, value, "feature_set_ul_v1610_s::ul_intra_ue_mux_r16_s_::pusch_prep_high_prio_r16_e_");
}

const char*
feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_120k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_15k_hz_60k_hz_r16_e_");
}

const char*
feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_ul_v1610_s::cross_carrier_sched_processing_diff_scs_r16_s_::scs_30k_hz_120k_hz_r16_e_");
}

const char* feature_set_ul_v1610_s::ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16_opts::to_string() const
{
  static const char* names[] = {"p1-2", "p1-4", "p1-2-4"};
  return convert_enum_idx(
      names, 3, value, "feature_set_ul_v1610_s::ul_full_pwr_mode2_srs_cfg_diff_num_srs_ports_r16_e_");
}

const char*
feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_non_coherent_r16_opts::to_string() const
{
  static const char* names[] = {"g0", "g1", "g2", "g3"};
  return convert_enum_idx(
      names, 4, value, "feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_non_coherent_r16_e_");
}
uint8_t feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_non_coherent_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3};
  return map_enum_number(
      numbers, 4, value, "feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_non_coherent_r16_e_");
}

const char*
feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_partial_coherent_r16_opts::to_string() const
{
  static const char* names[] = {"g0", "g1", "g2", "g3", "g4", "g5", "g6"};
  return convert_enum_idx(
      names,
      7,
      value,
      "feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_partial_coherent_r16_e_");
}
uint8_t
feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_partial_coherent_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6};
  return map_enum_number(
      numbers,
      7,
      value,
      "feature_set_ul_v1610_s::ul_full_pwr_mode2_tpmi_group_r16_s_::four_ports_partial_coherent_r16_e_");
}

// SubSlot-Config-r16 ::= SEQUENCE
SRSASN_CODE sub_slot_cfg_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sub_slot_cfg_n_cp_r16_present, 1));
  HANDLE_CODE(bref.pack(sub_slot_cfg_e_cp_r16_present, 1));

  if (sub_slot_cfg_n_cp_r16_present) {
    HANDLE_CODE(sub_slot_cfg_n_cp_r16.pack(bref));
  }
  if (sub_slot_cfg_e_cp_r16_present) {
    HANDLE_CODE(sub_slot_cfg_e_cp_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sub_slot_cfg_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sub_slot_cfg_n_cp_r16_present, 1));
  HANDLE_CODE(bref.unpack(sub_slot_cfg_e_cp_r16_present, 1));

  if (sub_slot_cfg_n_cp_r16_present) {
    HANDLE_CODE(sub_slot_cfg_n_cp_r16.unpack(bref));
  }
  if (sub_slot_cfg_e_cp_r16_present) {
    HANDLE_CODE(sub_slot_cfg_e_cp_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sub_slot_cfg_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sub_slot_cfg_n_cp_r16_present) {
    j.write_str("sub-SlotConfig-NCP-r16", sub_slot_cfg_n_cp_r16.to_string());
  }
  if (sub_slot_cfg_e_cp_r16_present) {
    j.write_str("sub-SlotConfig-ECP-r16", sub_slot_cfg_e_cp_r16.to_string());
  }
  j.end_obj();
}

const char* sub_slot_cfg_r16_s::sub_slot_cfg_n_cp_r16_opts::to_string() const
{
  static const char* names[] = {"n4", "n5", "n6", "n7"};
  return convert_enum_idx(names, 4, value, "sub_slot_cfg_r16_s::sub_slot_cfg_n_cp_r16_e_");
}
uint8_t sub_slot_cfg_r16_s::sub_slot_cfg_n_cp_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 5, 6, 7};
  return map_enum_number(numbers, 4, value, "sub_slot_cfg_r16_s::sub_slot_cfg_n_cp_r16_e_");
}

const char* sub_slot_cfg_r16_s::sub_slot_cfg_e_cp_r16_opts::to_string() const
{
  static const char* names[] = {"n4", "n5", "n6"};
  return convert_enum_idx(names, 3, value, "sub_slot_cfg_r16_s::sub_slot_cfg_e_cp_r16_e_");
}
uint8_t sub_slot_cfg_r16_s::sub_slot_cfg_e_cp_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 5, 6};
  return map_enum_number(numbers, 3, value, "sub_slot_cfg_r16_s::sub_slot_cfg_e_cp_r16_e_");
}

// FeatureSetUplink-v1640 ::= SEQUENCE
SRSASN_CODE feature_set_ul_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(two_harq_ack_codebook_type1_r16_present, 1));
  HANDLE_CODE(bref.pack(two_harq_ack_codebook_type2_r16_present, 1));
  HANDLE_CODE(bref.pack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_present, 1));

  if (two_harq_ack_codebook_type1_r16_present) {
    HANDLE_CODE(two_harq_ack_codebook_type1_r16.pack(bref));
  }
  if (two_harq_ack_codebook_type2_r16_present) {
    HANDLE_CODE(two_harq_ack_codebook_type2_r16.pack(bref));
  }
  if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_present) {
    HANDLE_CODE(bref.pack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.pack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16_present, 1));
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16.pack(bref));
    }
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16.pack(bref));
    }
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(two_harq_ack_codebook_type1_r16_present, 1));
  HANDLE_CODE(bref.unpack(two_harq_ack_codebook_type2_r16_present, 1));
  HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_present, 1));

  if (two_harq_ack_codebook_type1_r16_present) {
    HANDLE_CODE(two_harq_ack_codebook_type1_r16.unpack(bref));
  }
  if (two_harq_ack_codebook_type2_r16_present) {
    HANDLE_CODE(two_harq_ack_codebook_type2_r16.unpack(bref));
  }
  if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_present) {
    HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16_present, 1));
    HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16_present, 1));
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16_present) {
      HANDLE_CODE(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16.unpack(bref));
    }
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16_present) {
      HANDLE_CODE(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16.unpack(bref));
    }
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16_present) {
      HANDLE_CODE(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (two_harq_ack_codebook_type1_r16_present) {
    j.write_fieldname("twoHARQ-ACK-Codebook-type1-r16");
    two_harq_ack_codebook_type1_r16.to_json(j);
  }
  if (two_harq_ack_codebook_type2_r16_present) {
    j.write_fieldname("twoHARQ-ACK-Codebook-type2-r16");
    two_harq_ack_codebook_type2_r16.to_json(j);
  }
  if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_present) {
    j.write_fieldname("offsetSRS-CB-PUSCH-PDCCH-MonitorAnyOccWithSpanGap-fr1-r16");
    j.start_obj();
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16_present) {
      j.write_str("scs-15kHz-r16",
                  offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_15k_hz_r16.to_string());
    }
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16_present) {
      j.write_str("scs-30kHz-r16",
                  offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_30k_hz_r16.to_string());
    }
    if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16_present) {
      j.write_str("scs-60kHz-r16",
                  offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16.scs_60k_hz_r16.to_string());
    }
    j.end_obj();
  }
  j.end_obj();
}

const char* feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::
    scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"set1", "set2", "set3"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::scs_15k_hz_r16_e_");
}
uint8_t feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::
    scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::scs_15k_hz_r16_e_");
}

const char* feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::
    scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"set1", "set2", "set3"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::scs_30k_hz_r16_e_");
}
uint8_t feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::
    scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::scs_30k_hz_r16_e_");
}

const char* feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::
    scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"set1", "set2", "set3"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::scs_60k_hz_r16_e_");
}
uint8_t feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::
    scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_ul_v1640_s::offset_srs_cb_pusch_pdcch_monitor_any_occ_with_span_gap_fr1_r16_s_::scs_60k_hz_r16_e_");
}

// FeatureSetUplinkPerCC ::= SEQUENCE
SRSASN_CODE feature_set_ul_per_cc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ch_bw_90mhz_present, 1));
  HANDLE_CODE(bref.pack(mimo_cb_pusch_present, 1));
  HANDLE_CODE(bref.pack(max_num_mimo_layers_non_cb_pusch_present, 1));
  HANDLE_CODE(bref.pack(supported_mod_order_ul_present, 1));

  HANDLE_CODE(supported_subcarrier_spacing_ul.pack(bref));
  HANDLE_CODE(supported_bw_ul.pack(bref));
  if (mimo_cb_pusch_present) {
    HANDLE_CODE(bref.pack(mimo_cb_pusch.max_num_mimo_layers_cb_pusch_present, 1));
    if (mimo_cb_pusch.max_num_mimo_layers_cb_pusch_present) {
      HANDLE_CODE(mimo_cb_pusch.max_num_mimo_layers_cb_pusch.pack(bref));
    }
    HANDLE_CODE(pack_integer(bref, mimo_cb_pusch.max_num_srs_res_per_set, (uint8_t)1u, (uint8_t)2u));
  }
  if (max_num_mimo_layers_non_cb_pusch_present) {
    HANDLE_CODE(max_num_mimo_layers_non_cb_pusch.pack(bref));
  }
  if (supported_mod_order_ul_present) {
    HANDLE_CODE(supported_mod_order_ul.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_per_cc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ch_bw_90mhz_present, 1));
  HANDLE_CODE(bref.unpack(mimo_cb_pusch_present, 1));
  HANDLE_CODE(bref.unpack(max_num_mimo_layers_non_cb_pusch_present, 1));
  HANDLE_CODE(bref.unpack(supported_mod_order_ul_present, 1));

  HANDLE_CODE(supported_subcarrier_spacing_ul.unpack(bref));
  HANDLE_CODE(supported_bw_ul.unpack(bref));
  if (mimo_cb_pusch_present) {
    HANDLE_CODE(bref.unpack(mimo_cb_pusch.max_num_mimo_layers_cb_pusch_present, 1));
    if (mimo_cb_pusch.max_num_mimo_layers_cb_pusch_present) {
      HANDLE_CODE(mimo_cb_pusch.max_num_mimo_layers_cb_pusch.unpack(bref));
    }
    HANDLE_CODE(unpack_integer(mimo_cb_pusch.max_num_srs_res_per_set, bref, (uint8_t)1u, (uint8_t)2u));
  }
  if (max_num_mimo_layers_non_cb_pusch_present) {
    HANDLE_CODE(max_num_mimo_layers_non_cb_pusch.unpack(bref));
  }
  if (supported_mod_order_ul_present) {
    HANDLE_CODE(supported_mod_order_ul.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_per_cc_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("supportedSubcarrierSpacingUL", supported_subcarrier_spacing_ul.to_string());
  j.write_fieldname("supportedBandwidthUL");
  supported_bw_ul.to_json(j);
  if (ch_bw_90mhz_present) {
    j.write_str("channelBW-90mhz", "supported");
  }
  if (mimo_cb_pusch_present) {
    j.write_fieldname("mimo-CB-PUSCH");
    j.start_obj();
    if (mimo_cb_pusch.max_num_mimo_layers_cb_pusch_present) {
      j.write_str("maxNumberMIMO-LayersCB-PUSCH", mimo_cb_pusch.max_num_mimo_layers_cb_pusch.to_string());
    }
    j.write_int("maxNumberSRS-ResourcePerSet", mimo_cb_pusch.max_num_srs_res_per_set);
    j.end_obj();
  }
  if (max_num_mimo_layers_non_cb_pusch_present) {
    j.write_str("maxNumberMIMO-LayersNonCB-PUSCH", max_num_mimo_layers_non_cb_pusch.to_string());
  }
  if (supported_mod_order_ul_present) {
    j.write_str("supportedModulationOrderUL", supported_mod_order_ul.to_string());
  }
  j.end_obj();
}

// FeatureSetUplinkPerCC-v1700 ::= SEQUENCE
SRSASN_CODE feature_set_ul_per_cc_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(supported_min_bw_ul_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pusch_repeat_type_b_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pusch_type_b_cb_r17_present, 1));
  HANDLE_CODE(bref.pack(supported_bw_ul_v1710_present, 1));

  if (supported_min_bw_ul_r17_present) {
    HANDLE_CODE(supported_min_bw_ul_r17.pack(bref));
  }
  if (mtrp_pusch_repeat_type_b_r17_present) {
    HANDLE_CODE(mtrp_pusch_repeat_type_b_r17.pack(bref));
  }
  if (mtrp_pusch_type_b_cb_r17_present) {
    HANDLE_CODE(mtrp_pusch_type_b_cb_r17.pack(bref));
  }
  if (supported_bw_ul_v1710_present) {
    HANDLE_CODE(supported_bw_ul_v1710.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_per_cc_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(supported_min_bw_ul_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pusch_repeat_type_b_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pusch_type_b_cb_r17_present, 1));
  HANDLE_CODE(bref.unpack(supported_bw_ul_v1710_present, 1));

  if (supported_min_bw_ul_r17_present) {
    HANDLE_CODE(supported_min_bw_ul_r17.unpack(bref));
  }
  if (mtrp_pusch_repeat_type_b_r17_present) {
    HANDLE_CODE(mtrp_pusch_repeat_type_b_r17.unpack(bref));
  }
  if (mtrp_pusch_type_b_cb_r17_present) {
    HANDLE_CODE(mtrp_pusch_type_b_cb_r17.unpack(bref));
  }
  if (supported_bw_ul_v1710_present) {
    HANDLE_CODE(supported_bw_ul_v1710.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_per_cc_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_min_bw_ul_r17_present) {
    j.write_fieldname("supportedMinBandwidthUL-r17");
    supported_min_bw_ul_r17.to_json(j);
  }
  if (mtrp_pusch_repeat_type_b_r17_present) {
    j.write_str("mTRP-PUSCH-RepetitionTypeB-r17", mtrp_pusch_repeat_type_b_r17.to_string());
  }
  if (mtrp_pusch_type_b_cb_r17_present) {
    j.write_str("mTRP-PUSCH-TypeB-CB-r17", mtrp_pusch_type_b_cb_r17.to_string());
  }
  if (supported_bw_ul_v1710_present) {
    j.write_fieldname("supportedBandwidthUL-v1710");
    supported_bw_ul_v1710.to_json(j);
  }
  j.end_obj();
}

const char* feature_set_ul_per_cc_v1700_s::mtrp_pusch_repeat_type_b_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4"};
  return convert_enum_idx(names, 4, value, "feature_set_ul_per_cc_v1700_s::mtrp_pusch_repeat_type_b_r17_e_");
}
uint8_t feature_set_ul_per_cc_v1700_s::mtrp_pusch_repeat_type_b_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4};
  return map_enum_number(numbers, 4, value, "feature_set_ul_per_cc_v1700_s::mtrp_pusch_repeat_type_b_r17_e_");
}

const char* feature_set_ul_per_cc_v1700_s::mtrp_pusch_type_b_cb_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "feature_set_ul_per_cc_v1700_s::mtrp_pusch_type_b_cb_r17_e_");
}
uint8_t feature_set_ul_per_cc_v1700_s::mtrp_pusch_type_b_cb_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "feature_set_ul_per_cc_v1700_s::mtrp_pusch_type_b_cb_r17_e_");
}

// FeatureSetDownlink-v1720 ::= SEQUENCE
SRSASN_CODE feature_set_dl_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rtt_based_pdc_csi_rs_for_tracking_r17_present, 1));
  HANDLE_CODE(bref.pack(rtt_based_pdc_prs_r17_present, 1));
  HANDLE_CODE(bref.pack(sps_multicast_r17_present, 1));

  if (rtt_based_pdc_prs_r17_present) {
    HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_r17.pack(bref));
    HANDLE_CODE(bref.pack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17_present, 1));
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17.pack(bref));
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17.pack(bref));
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17.pack(bref));
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_v1720_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rtt_based_pdc_csi_rs_for_tracking_r17_present, 1));
  HANDLE_CODE(bref.unpack(rtt_based_pdc_prs_r17_present, 1));
  HANDLE_CODE(bref.unpack(sps_multicast_r17_present, 1));

  if (rtt_based_pdc_prs_r17_present) {
    HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_r17.unpack(bref));
    HANDLE_CODE(bref.unpack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17_present, 1));
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17.unpack(bref));
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17.unpack(bref));
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17.unpack(bref));
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17_present) {
      HANDLE_CODE(rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rtt_based_pdc_csi_rs_for_tracking_r17_present) {
    j.write_str("rtt-BasedPDC-CSI-RS-ForTracking-r17", "supported");
  }
  if (rtt_based_pdc_prs_r17_present) {
    j.write_fieldname("rtt-BasedPDC-PRS-r17");
    j.start_obj();
    j.write_str("maxNumberPRS-Resource-r17", rtt_based_pdc_prs_r17.max_num_prs_res_r17.to_string());
    j.write_fieldname("maxNumberPRS-ResourceProcessedPerSlot-r17");
    j.start_obj();
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17_present) {
      j.write_str("scs-15kHz-r17",
                  rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_15k_hz_r17.to_string());
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17_present) {
      j.write_str("scs-30kHz-r17",
                  rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_30k_hz_r17.to_string());
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17_present) {
      j.write_str("scs-60kHz-r17",
                  rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_60k_hz_r17.to_string());
    }
    if (rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17_present) {
      j.write_str("scs-120kHz-r17",
                  rtt_based_pdc_prs_r17.max_num_prs_res_processed_per_slot_r17.scs_120k_hz_r17.to_string());
    }
    j.end_obj();
    j.end_obj();
  }
  if (sps_multicast_r17_present) {
    j.write_str("sps-Multicast-r17", "supported");
  }
  j.end_obj();
}

const char* feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 7, value, "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_r17_e_");
}
uint8_t feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 8, 16, 32, 64};
  return map_enum_number(numbers, 7, value, "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_r17_e_");
}

const char* feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_15k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(
      names,
      11,
      value,
      "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::scs_15k_hz_r17_e_");
}
uint8_t feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_15k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(
      numbers,
      11,
      value,
      "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::scs_15k_hz_r17_e_");
}

const char* feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_30k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(
      names,
      11,
      value,
      "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::scs_30k_hz_r17_e_");
}
uint8_t feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_30k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(
      numbers,
      11,
      value,
      "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::scs_30k_hz_r17_e_");
}

const char* feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_60k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(
      names,
      11,
      value,
      "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::scs_60k_hz_r17_e_");
}
uint8_t feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_60k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(
      numbers,
      11,
      value,
      "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::scs_60k_hz_r17_e_");
}

const char* feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_120k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4", "n6", "n8", "n12", "n16", "n24", "n32", "n48", "n64"};
  return convert_enum_idx(names,
                          11,
                          value,
                          "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_:"
                          ":scs_120k_hz_r17_e_");
}
uint8_t feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::
    scs_120k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4, 6, 8, 12, 16, 24, 32, 48, 64};
  return map_enum_number(numbers,
                         11,
                         value,
                         "feature_set_dl_v1720_s::rtt_based_pdc_prs_r17_s_::max_num_prs_res_processed_per_slot_r17_s_::"
                         "scs_120k_hz_r17_e_");
}

// FeatureSetDownlink-v1730 ::= SEQUENCE
SRSASN_CODE feature_set_dl_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(prs_as_spatial_relation_rs_for_srs_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(prs_as_spatial_relation_rs_for_srs_r17_present, 1));

  return SRSASN_SUCCESS;
}
void feature_set_dl_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (prs_as_spatial_relation_rs_for_srs_r17_present) {
    j.write_str("prs-AsSpatialRelationRS-For-SRS-r17", "supported");
  }
  j.end_obj();
}

// FeatureSetDownlinkPerCC-v1720 ::= SEQUENCE
SRSASN_CODE feature_set_dl_per_cc_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(max_mod_order_for_multicast_data_rate_calculation_r17_present, 1));
  HANDLE_CODE(bref.pack(fdm_broadcast_unicast_r17_present, 1));
  HANDLE_CODE(bref.pack(fdm_multicast_unicast_r17_present, 1));

  if (max_mod_order_for_multicast_data_rate_calculation_r17_present) {
    HANDLE_CODE(max_mod_order_for_multicast_data_rate_calculation_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_per_cc_v1720_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(max_mod_order_for_multicast_data_rate_calculation_r17_present, 1));
  HANDLE_CODE(bref.unpack(fdm_broadcast_unicast_r17_present, 1));
  HANDLE_CODE(bref.unpack(fdm_multicast_unicast_r17_present, 1));

  if (max_mod_order_for_multicast_data_rate_calculation_r17_present) {
    HANDLE_CODE(max_mod_order_for_multicast_data_rate_calculation_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_per_cc_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (max_mod_order_for_multicast_data_rate_calculation_r17_present) {
    j.write_str("maxModulationOrderForMulticastDataRateCalculation-r17",
                max_mod_order_for_multicast_data_rate_calculation_r17.to_string());
  }
  if (fdm_broadcast_unicast_r17_present) {
    j.write_str("fdm-BroadcastUnicast-r17", "supported");
  }
  if (fdm_multicast_unicast_r17_present) {
    j.write_str("fdm-MulticastUnicast-r17", "supported");
  }
  j.end_obj();
}

const char* feature_set_dl_per_cc_v1720_s::max_mod_order_for_multicast_data_rate_calculation_r17_opts::to_string() const
{
  static const char* names[] = {"qam64", "qam256", "qam1024"};
  return convert_enum_idx(
      names, 3, value, "feature_set_dl_per_cc_v1720_s::max_mod_order_for_multicast_data_rate_calculation_r17_e_");
}
uint16_t feature_set_dl_per_cc_v1720_s::max_mod_order_for_multicast_data_rate_calculation_r17_opts::to_number() const
{
  static const uint16_t numbers[] = {64, 256, 1024};
  return map_enum_number(
      numbers, 3, value, "feature_set_dl_per_cc_v1720_s::max_mod_order_for_multicast_data_rate_calculation_r17_e_");
}

// FeatureSetDownlinkPerCC-v1730 ::= SEQUENCE
SRSASN_CODE feature_set_dl_per_cc_v1730_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(intra_slot_tdm_unicast_group_common_pdsch_r17_present, 1));
  HANDLE_CODE(bref.pack(sps_multicast_scell_r17_present, 1));
  HANDLE_CODE(bref.pack(sps_multicast_scell_multi_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(dci_broadcast_with16_repeats_r17_present, 1));

  if (intra_slot_tdm_unicast_group_common_pdsch_r17_present) {
    HANDLE_CODE(intra_slot_tdm_unicast_group_common_pdsch_r17.pack(bref));
  }
  if (sps_multicast_scell_multi_cfg_r17_present) {
    HANDLE_CODE(pack_integer(bref, sps_multicast_scell_multi_cfg_r17, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_dl_per_cc_v1730_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(intra_slot_tdm_unicast_group_common_pdsch_r17_present, 1));
  HANDLE_CODE(bref.unpack(sps_multicast_scell_r17_present, 1));
  HANDLE_CODE(bref.unpack(sps_multicast_scell_multi_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(dci_broadcast_with16_repeats_r17_present, 1));

  if (intra_slot_tdm_unicast_group_common_pdsch_r17_present) {
    HANDLE_CODE(intra_slot_tdm_unicast_group_common_pdsch_r17.unpack(bref));
  }
  if (sps_multicast_scell_multi_cfg_r17_present) {
    HANDLE_CODE(unpack_integer(sps_multicast_scell_multi_cfg_r17, bref, (uint8_t)1u, (uint8_t)8u));
  }

  return SRSASN_SUCCESS;
}
void feature_set_dl_per_cc_v1730_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (intra_slot_tdm_unicast_group_common_pdsch_r17_present) {
    j.write_str("intraSlotTDM-UnicastGroupCommonPDSCH-r17", intra_slot_tdm_unicast_group_common_pdsch_r17.to_string());
  }
  if (sps_multicast_scell_r17_present) {
    j.write_str("sps-MulticastSCell-r17", "supported");
  }
  if (sps_multicast_scell_multi_cfg_r17_present) {
    j.write_int("sps-MulticastSCellMultiConfig-r17", sps_multicast_scell_multi_cfg_r17);
  }
  if (dci_broadcast_with16_repeats_r17_present) {
    j.write_str("dci-BroadcastWith16Repetitions-r17", "supported");
  }
  j.end_obj();
}

const char* feature_set_dl_per_cc_v1730_s::intra_slot_tdm_unicast_group_common_pdsch_r17_opts::to_string() const
{
  static const char* names[] = {"yes", "no"};
  return convert_enum_idx(
      names, 2, value, "feature_set_dl_per_cc_v1730_s::intra_slot_tdm_unicast_group_common_pdsch_r17_e_");
}

// FeatureSetUplink-v1630 ::= SEQUENCE
SRSASN_CODE feature_set_ul_v1630_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(offset_srs_cb_pusch_ant_switch_fr1_r16_present, 1));
  HANDLE_CODE(bref.pack(offset_srs_cb_pusch_pdcch_monitor_single_occ_fr1_r16_present, 1));
  HANDLE_CODE(bref.pack(offset_srs_cb_pusch_pdcch_monitor_any_occ_without_gap_fr1_r16_present, 1));
  HANDLE_CODE(bref.pack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_gap_fr1_r16_present, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));
  HANDLE_CODE(bref.pack(partial_cancellation_pucch_pusch_prach_tx_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_v1630_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_ant_switch_fr1_r16_present, 1));
  HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_pdcch_monitor_single_occ_fr1_r16_present, 1));
  HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_pdcch_monitor_any_occ_without_gap_fr1_r16_present, 1));
  HANDLE_CODE(bref.unpack(offset_srs_cb_pusch_pdcch_monitor_any_occ_with_gap_fr1_r16_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));
  HANDLE_CODE(bref.unpack(partial_cancellation_pucch_pusch_prach_tx_r16_present, 1));

  return SRSASN_SUCCESS;
}
void feature_set_ul_v1630_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (offset_srs_cb_pusch_ant_switch_fr1_r16_present) {
    j.write_str("offsetSRS-CB-PUSCH-Ant-Switch-fr1-r16", "supported");
  }
  if (offset_srs_cb_pusch_pdcch_monitor_single_occ_fr1_r16_present) {
    j.write_str("offsetSRS-CB-PUSCH-PDCCH-MonitorSingleOcc-fr1-r16", "supported");
  }
  if (offset_srs_cb_pusch_pdcch_monitor_any_occ_without_gap_fr1_r16_present) {
    j.write_str("offsetSRS-CB-PUSCH-PDCCH-MonitorAnyOccWithoutGap-fr1-r16", "supported");
  }
  if (offset_srs_cb_pusch_pdcch_monitor_any_occ_with_gap_fr1_r16_present) {
    j.write_str("offsetSRS-CB-PUSCH-PDCCH-MonitorAnyOccWithGap-fr1-r16", "supported");
  }
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  if (partial_cancellation_pucch_pusch_prach_tx_r16_present) {
    j.write_str("partialCancellationPUCCH-PUSCH-PRACH-TX-r16", "supported");
  }
  j.end_obj();
}

// FeatureSetUplink-v1710 ::= SEQUENCE
SRSASN_CODE feature_set_ul_v1710_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mtrp_pusch_type_a_cb_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pusch_repeat_type_a_r17_present, 1));
  HANDLE_CODE(bref.pack(mtrp_pucch_intra_slot_r17_present, 1));
  HANDLE_CODE(bref.pack(srs_ant_switching2_sp_1_periodic_r17_present, 1));
  HANDLE_CODE(bref.pack(srs_ext_aperiodic_srs_r17_present, 1));
  HANDLE_CODE(bref.pack(srs_one_ap_srs_r17_present, 1));
  HANDLE_CODE(bref.pack(ue_pwr_class_per_band_per_bc_r17_present, 1));
  HANDLE_CODE(bref.pack(tx_support_ul_gap_fr2_r17_present, 1));

  if (mtrp_pusch_type_a_cb_r17_present) {
    HANDLE_CODE(mtrp_pusch_type_a_cb_r17.pack(bref));
  }
  if (mtrp_pusch_repeat_type_a_r17_present) {
    HANDLE_CODE(mtrp_pusch_repeat_type_a_r17.pack(bref));
  }
  if (mtrp_pucch_intra_slot_r17_present) {
    HANDLE_CODE(mtrp_pucch_intra_slot_r17.pack(bref));
  }
  if (ue_pwr_class_per_band_per_bc_r17_present) {
    HANDLE_CODE(ue_pwr_class_per_band_per_bc_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_v1710_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mtrp_pusch_type_a_cb_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pusch_repeat_type_a_r17_present, 1));
  HANDLE_CODE(bref.unpack(mtrp_pucch_intra_slot_r17_present, 1));
  HANDLE_CODE(bref.unpack(srs_ant_switching2_sp_1_periodic_r17_present, 1));
  HANDLE_CODE(bref.unpack(srs_ext_aperiodic_srs_r17_present, 1));
  HANDLE_CODE(bref.unpack(srs_one_ap_srs_r17_present, 1));
  HANDLE_CODE(bref.unpack(ue_pwr_class_per_band_per_bc_r17_present, 1));
  HANDLE_CODE(bref.unpack(tx_support_ul_gap_fr2_r17_present, 1));

  if (mtrp_pusch_type_a_cb_r17_present) {
    HANDLE_CODE(mtrp_pusch_type_a_cb_r17.unpack(bref));
  }
  if (mtrp_pusch_repeat_type_a_r17_present) {
    HANDLE_CODE(mtrp_pusch_repeat_type_a_r17.unpack(bref));
  }
  if (mtrp_pucch_intra_slot_r17_present) {
    HANDLE_CODE(mtrp_pucch_intra_slot_r17.unpack(bref));
  }
  if (ue_pwr_class_per_band_per_bc_r17_present) {
    HANDLE_CODE(ue_pwr_class_per_band_per_bc_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_v1710_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mtrp_pusch_type_a_cb_r17_present) {
    j.write_str("mTRP-PUSCH-TypeA-CB-r17", mtrp_pusch_type_a_cb_r17.to_string());
  }
  if (mtrp_pusch_repeat_type_a_r17_present) {
    j.write_str("mTRP-PUSCH-RepetitionTypeA-r17", mtrp_pusch_repeat_type_a_r17.to_string());
  }
  if (mtrp_pucch_intra_slot_r17_present) {
    j.write_str("mTRP-PUCCH-IntraSlot-r17", mtrp_pucch_intra_slot_r17.to_string());
  }
  if (srs_ant_switching2_sp_1_periodic_r17_present) {
    j.write_str("srs-AntennaSwitching2SP-1Periodic-r17", "supported");
  }
  if (srs_ext_aperiodic_srs_r17_present) {
    j.write_str("srs-ExtensionAperiodicSRS-r17", "supported");
  }
  if (srs_one_ap_srs_r17_present) {
    j.write_str("srs-OneAP-SRS-r17", "supported");
  }
  if (ue_pwr_class_per_band_per_bc_r17_present) {
    j.write_str("ue-PowerClassPerBandPerBC-r17", ue_pwr_class_per_band_per_bc_r17.to_string());
  }
  if (tx_support_ul_gap_fr2_r17_present) {
    j.write_str("tx-Support-UL-GapFR2-r17", "supported");
  }
  j.end_obj();
}

const char* feature_set_ul_v1710_s::mtrp_pusch_type_a_cb_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n4"};
  return convert_enum_idx(names, 3, value, "feature_set_ul_v1710_s::mtrp_pusch_type_a_cb_r17_e_");
}
uint8_t feature_set_ul_v1710_s::mtrp_pusch_type_a_cb_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 4};
  return map_enum_number(numbers, 3, value, "feature_set_ul_v1710_s::mtrp_pusch_type_a_cb_r17_e_");
}

const char* feature_set_ul_v1710_s::mtrp_pusch_repeat_type_a_r17_opts::to_string() const
{
  static const char* names[] = {"n1", "n2", "n3", "n4"};
  return convert_enum_idx(names, 4, value, "feature_set_ul_v1710_s::mtrp_pusch_repeat_type_a_r17_e_");
}
uint8_t feature_set_ul_v1710_s::mtrp_pusch_repeat_type_a_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2, 3, 4};
  return map_enum_number(numbers, 4, value, "feature_set_ul_v1710_s::mtrp_pusch_repeat_type_a_r17_e_");
}

const char* feature_set_ul_v1710_s::mtrp_pucch_intra_slot_r17_opts::to_string() const
{
  static const char* names[] = {"pf0-2", "pf1-3-4", "pf0-4"};
  return convert_enum_idx(names, 3, value, "feature_set_ul_v1710_s::mtrp_pucch_intra_slot_r17_e_");
}

const char* feature_set_ul_v1710_s::ue_pwr_class_per_band_per_bc_r17_opts::to_string() const
{
  static const char* names[] = {"pc1dot5", "pc2", "pc3"};
  return convert_enum_idx(names, 3, value, "feature_set_ul_v1710_s::ue_pwr_class_per_band_per_bc_r17_e_");
}
float feature_set_ul_v1710_s::ue_pwr_class_per_band_per_bc_r17_opts::to_number() const
{
  static const float numbers[] = {1.5, 2.0, 3.0};
  return map_enum_number(numbers, 3, value, "feature_set_ul_v1710_s::ue_pwr_class_per_band_per_bc_r17_e_");
}
const char* feature_set_ul_v1710_s::ue_pwr_class_per_band_per_bc_r17_opts::to_number_string() const
{
  static const char* number_strs[] = {"1.5", "2", "3"};
  return convert_enum_idx(number_strs, 3, value, "feature_set_ul_v1710_s::ue_pwr_class_per_band_per_bc_r17_e_");
}

// FeatureSetUplink-v1720 ::= SEQUENCE
SRSASN_CODE feature_set_ul_v1720_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pucch_repeat_f0_1_2_3_4_rrc_cfg_r17_present, 1));
  HANDLE_CODE(bref.pack(pucch_repeat_f0_1_2_3_4_dyn_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(inter_subslot_freq_hop_pucch_r17_present, 1));
  HANDLE_CODE(bref.pack(semi_static_harq_ack_codebook_sub_slot_pucch_r17_present, 1));
  HANDLE_CODE(bref.pack(phy_prioritization_low_prio_dg_high_prio_cg_r17_present, 1));
  HANDLE_CODE(bref.pack(phy_prioritization_high_prio_dg_low_prio_cg_r17_present, 1));
  HANDLE_CODE(bref.pack(extended_dc_location_report_r17_present, 1));

  if (phy_prioritization_low_prio_dg_high_prio_cg_r17_present) {
    HANDLE_CODE(pack_integer(bref, phy_prioritization_low_prio_dg_high_prio_cg_r17, (uint8_t)1u, (uint8_t)16u));
  }
  if (phy_prioritization_high_prio_dg_low_prio_cg_r17_present) {
    HANDLE_CODE(phy_prioritization_high_prio_dg_low_prio_cg_r17.pusch_prep_low_prio_r17.pack(bref));
    HANDLE_CODE(
        bref.pack(phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(
        bref.pack(phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17_present, 1));
    HANDLE_CODE(
        bref.pack(phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.pack(
        phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17_present, 1));
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17.pack(bref));
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17.pack(bref));
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17_present) {
      HANDLE_CODE(phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17.pack(bref));
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17_present) {
      HANDLE_CODE(phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17.pack(bref));
    }
    HANDLE_CODE(pack_integer(
        bref, phy_prioritization_high_prio_dg_low_prio_cg_r17.max_num_carriers_r17, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_v1720_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pucch_repeat_f0_1_2_3_4_rrc_cfg_r17_present, 1));
  HANDLE_CODE(bref.unpack(pucch_repeat_f0_1_2_3_4_dyn_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(inter_subslot_freq_hop_pucch_r17_present, 1));
  HANDLE_CODE(bref.unpack(semi_static_harq_ack_codebook_sub_slot_pucch_r17_present, 1));
  HANDLE_CODE(bref.unpack(phy_prioritization_low_prio_dg_high_prio_cg_r17_present, 1));
  HANDLE_CODE(bref.unpack(phy_prioritization_high_prio_dg_low_prio_cg_r17_present, 1));
  HANDLE_CODE(bref.unpack(extended_dc_location_report_r17_present, 1));

  if (phy_prioritization_low_prio_dg_high_prio_cg_r17_present) {
    HANDLE_CODE(unpack_integer(phy_prioritization_low_prio_dg_high_prio_cg_r17, bref, (uint8_t)1u, (uint8_t)16u));
  }
  if (phy_prioritization_high_prio_dg_low_prio_cg_r17_present) {
    HANDLE_CODE(phy_prioritization_high_prio_dg_low_prio_cg_r17.pusch_prep_low_prio_r17.unpack(bref));
    HANDLE_CODE(bref.unpack(
        phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(
        phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(
        phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17_present, 1));
    HANDLE_CODE(bref.unpack(
        phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17_present, 1));
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17_present) {
      HANDLE_CODE(
          phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17.unpack(bref));
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17_present) {
      HANDLE_CODE(
          phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17.unpack(bref));
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17_present) {
      HANDLE_CODE(
          phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17.unpack(bref));
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17_present) {
      HANDLE_CODE(
          phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17.unpack(bref));
    }
    HANDLE_CODE(unpack_integer(
        phy_prioritization_high_prio_dg_low_prio_cg_r17.max_num_carriers_r17, bref, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_v1720_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pucch_repeat_f0_1_2_3_4_rrc_cfg_r17_present) {
    j.write_str("pucch-Repetition-F0-1-2-3-4-RRC-Config-r17", "supported");
  }
  if (pucch_repeat_f0_1_2_3_4_dyn_ind_r17_present) {
    j.write_str("pucch-Repetition-F0-1-2-3-4-DynamicIndication-r17", "supported");
  }
  if (inter_subslot_freq_hop_pucch_r17_present) {
    j.write_str("interSubslotFreqHopping-PUCCH-r17", "supported");
  }
  if (semi_static_harq_ack_codebook_sub_slot_pucch_r17_present) {
    j.write_str("semiStaticHARQ-ACK-CodebookSub-SlotPUCCH-r17", "supported");
  }
  if (phy_prioritization_low_prio_dg_high_prio_cg_r17_present) {
    j.write_int("phy-PrioritizationLowPriorityDG-HighPriorityCG-r17", phy_prioritization_low_prio_dg_high_prio_cg_r17);
  }
  if (phy_prioritization_high_prio_dg_low_prio_cg_r17_present) {
    j.write_fieldname("phy-PrioritizationHighPriorityDG-LowPriorityCG-r17");
    j.start_obj();
    j.write_str("pusch-PreparationLowPriority-r17",
                phy_prioritization_high_prio_dg_low_prio_cg_r17.pusch_prep_low_prio_r17.to_string());
    j.write_fieldname("additionalCancellationTime-r17");
    j.start_obj();
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17_present) {
      j.write_str("scs-15kHz-r17",
                  phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_15k_hz_r17.to_string());
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17_present) {
      j.write_str("scs-30kHz-r17",
                  phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_30k_hz_r17.to_string());
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17_present) {
      j.write_str("scs-60kHz-r17",
                  phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_60k_hz_r17.to_string());
    }
    if (phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17_present) {
      j.write_str(
          "scs-120kHz-r17",
          phy_prioritization_high_prio_dg_low_prio_cg_r17.add_cancellation_time_r17.scs_120k_hz_r17.to_string());
    }
    j.end_obj();
    j.write_int("maxNumberCarriers-r17", phy_prioritization_high_prio_dg_low_prio_cg_r17.max_num_carriers_r17);
    j.end_obj();
  }
  if (extended_dc_location_report_r17_present) {
    j.write_str("extendedDC-LocationReport-r17", "supported");
  }
  j.end_obj();
}

const char*
feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::pusch_prep_low_prio_r17_opts::to_string()
    const
{
  static const char* names[] = {"sym0", "sym1", "sym2"};
  return convert_enum_idx(
      names,
      3,
      value,
      "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::pusch_prep_low_prio_r17_e_");
}
uint8_t
feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::pusch_prep_low_prio_r17_opts::to_number()
    const
{
  static const uint8_t numbers[] = {0, 1, 2};
  return map_enum_number(
      numbers,
      3,
      value,
      "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::pusch_prep_low_prio_r17_e_");
}

const char* feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_15k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym0", "sym1", "sym2"};
  return convert_enum_idx(names,
                          3,
                          value,
                          "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_"
                          "cancellation_time_r17_s_::scs_15k_hz_r17_e_");
}
uint8_t feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_15k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2};
  return map_enum_number(numbers,
                         3,
                         value,
                         "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_"
                         "time_r17_s_::scs_15k_hz_r17_e_");
}

const char* feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_30k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym0", "sym1", "sym2", "sym3", "sym4"};
  return convert_enum_idx(names,
                          5,
                          value,
                          "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_"
                          "cancellation_time_r17_s_::scs_30k_hz_r17_e_");
}
uint8_t feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_30k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4};
  return map_enum_number(numbers,
                         5,
                         value,
                         "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_"
                         "time_r17_s_::scs_30k_hz_r17_e_");
}

const char* feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_60k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym0", "sym1", "sym2", "sym3", "sym4", "sym5", "sym6", "sym7", "sym8"};
  return convert_enum_idx(names,
                          9,
                          value,
                          "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_"
                          "cancellation_time_r17_s_::scs_60k_hz_r17_e_");
}
uint8_t feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_60k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
  return map_enum_number(numbers,
                         9,
                         value,
                         "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_"
                         "time_r17_s_::scs_60k_hz_r17_e_");
}

const char* feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_120k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sym0",
                                "sym1",
                                "sym2",
                                "sym3",
                                "sym4",
                                "sym5",
                                "sym6",
                                "sym7",
                                "sym8",
                                "sym9",
                                "sym10",
                                "sym11",
                                "sym12",
                                "sym13",
                                "sym14",
                                "sym15",
                                "sym16"};
  return convert_enum_idx(names,
                          17,
                          value,
                          "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_"
                          "cancellation_time_r17_s_::scs_120k_hz_r17_e_");
}
uint8_t feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_time_r17_s_::
    scs_120k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
  return map_enum_number(numbers,
                         17,
                         value,
                         "feature_set_ul_v1720_s::phy_prioritization_high_prio_dg_low_prio_cg_r17_s_::add_cancellation_"
                         "time_r17_s_::scs_120k_hz_r17_e_");
}

// FeatureSetUplinkPerCC-v1540 ::= SEQUENCE
SRSASN_CODE feature_set_ul_per_cc_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mimo_non_cb_pusch_present, 1));

  if (mimo_non_cb_pusch_present) {
    HANDLE_CODE(pack_integer(bref, mimo_non_cb_pusch.max_num_srs_res_per_set, (uint8_t)1u, (uint8_t)4u));
    HANDLE_CODE(pack_integer(bref, mimo_non_cb_pusch.max_num_simul_srs_res_tx, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_set_ul_per_cc_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mimo_non_cb_pusch_present, 1));

  if (mimo_non_cb_pusch_present) {
    HANDLE_CODE(unpack_integer(mimo_non_cb_pusch.max_num_srs_res_per_set, bref, (uint8_t)1u, (uint8_t)4u));
    HANDLE_CODE(unpack_integer(mimo_non_cb_pusch.max_num_simul_srs_res_tx, bref, (uint8_t)1u, (uint8_t)4u));
  }

  return SRSASN_SUCCESS;
}
void feature_set_ul_per_cc_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mimo_non_cb_pusch_present) {
    j.write_fieldname("mimo-NonCB-PUSCH");
    j.start_obj();
    j.write_int("maxNumberSRS-ResourcePerSet", mimo_non_cb_pusch.max_num_srs_res_per_set);
    j.write_int("maxNumberSimultaneousSRS-ResourceTx", mimo_non_cb_pusch.max_num_simul_srs_res_tx);
    j.end_obj();
  }
  j.end_obj();
}

// FeatureSets ::= SEQUENCE
SRSASN_CODE feature_sets_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(feature_sets_dl.size() > 0, 1));
  HANDLE_CODE(bref.pack(feature_sets_dl_per_cc.size() > 0, 1));
  HANDLE_CODE(bref.pack(feature_sets_ul.size() > 0, 1));
  HANDLE_CODE(bref.pack(feature_sets_ul_per_cc.size() > 0, 1));

  if (feature_sets_dl.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, feature_sets_dl, 1, 1024));
  }
  if (feature_sets_dl_per_cc.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, feature_sets_dl_per_cc, 1, 1024));
  }
  if (feature_sets_ul.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, feature_sets_ul, 1, 1024));
  }
  if (feature_sets_ul_per_cc.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, feature_sets_ul_per_cc, 1, 1024));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= feature_sets_dl_v1540.is_present();
    group_flags[0] |= feature_sets_ul_v1540.is_present();
    group_flags[0] |= feature_sets_ul_per_cc_v1540.is_present();
    group_flags[1] |= feature_sets_dl_v15a0.is_present();
    group_flags[2] |= feature_sets_dl_v1610.is_present();
    group_flags[2] |= feature_sets_ul_v1610.is_present();
    group_flags[2] |= feature_set_dl_per_cc_v1620.is_present();
    group_flags[3] |= feature_sets_ul_v1630.is_present();
    group_flags[4] |= feature_sets_ul_v1640.is_present();
    group_flags[5] |= feature_sets_dl_v1700.is_present();
    group_flags[5] |= feature_sets_dl_per_cc_v1700.is_present();
    group_flags[5] |= feature_sets_ul_v1710.is_present();
    group_flags[5] |= feature_sets_ul_per_cc_v1700.is_present();
    group_flags[6] |= feature_sets_dl_v1720.is_present();
    group_flags[6] |= feature_sets_dl_per_cc_v1720.is_present();
    group_flags[6] |= feature_sets_ul_v1720.is_present();
    group_flags[7] |= feature_sets_dl_v1730.is_present();
    group_flags[7] |= feature_sets_dl_per_cc_v1730.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_dl_v1540.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_ul_v1540.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_ul_per_cc_v1540.is_present(), 1));
      if (feature_sets_dl_v1540.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_v1540, 1, 1024));
      }
      if (feature_sets_ul_v1540.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_v1540, 1, 1024));
      }
      if (feature_sets_ul_per_cc_v1540.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_per_cc_v1540, 1, 1024));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_dl_v15a0.is_present(), 1));
      if (feature_sets_dl_v15a0.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_v15a0, 1, 1024));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_dl_v1610.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_ul_v1610.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_set_dl_per_cc_v1620.is_present(), 1));
      if (feature_sets_dl_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_v1610, 1, 1024));
      }
      if (feature_sets_ul_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_v1610, 1, 1024));
      }
      if (feature_set_dl_per_cc_v1620.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_set_dl_per_cc_v1620, 1, 1024));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_ul_v1630.is_present(), 1));
      if (feature_sets_ul_v1630.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_v1630, 1, 1024));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_ul_v1640.is_present(), 1));
      if (feature_sets_ul_v1640.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_v1640, 1, 1024));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_dl_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_dl_per_cc_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_ul_v1710.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_ul_per_cc_v1700.is_present(), 1));
      if (feature_sets_dl_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_v1700, 1, 1024));
      }
      if (feature_sets_dl_per_cc_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_per_cc_v1700, 1, 1024));
      }
      if (feature_sets_ul_v1710.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_v1710, 1, 1024));
      }
      if (feature_sets_ul_per_cc_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_per_cc_v1700, 1, 1024));
      }
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_dl_v1720.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_dl_per_cc_v1720.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_ul_v1720.is_present(), 1));
      if (feature_sets_dl_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_v1720, 1, 1024));
      }
      if (feature_sets_dl_per_cc_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_per_cc_v1720, 1, 1024));
      }
      if (feature_sets_ul_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_ul_v1720, 1, 1024));
      }
    }
    if (group_flags[7]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(feature_sets_dl_v1730.is_present(), 1));
      HANDLE_CODE(bref.pack(feature_sets_dl_per_cc_v1730.is_present(), 1));
      if (feature_sets_dl_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_v1730, 1, 1024));
      }
      if (feature_sets_dl_per_cc_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *feature_sets_dl_per_cc_v1730, 1, 1024));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE feature_sets_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool feature_sets_dl_present;
  HANDLE_CODE(bref.unpack(feature_sets_dl_present, 1));
  bool feature_sets_dl_per_cc_present;
  HANDLE_CODE(bref.unpack(feature_sets_dl_per_cc_present, 1));
  bool feature_sets_ul_present;
  HANDLE_CODE(bref.unpack(feature_sets_ul_present, 1));
  bool feature_sets_ul_per_cc_present;
  HANDLE_CODE(bref.unpack(feature_sets_ul_per_cc_present, 1));

  if (feature_sets_dl_present) {
    HANDLE_CODE(unpack_dyn_seq_of(feature_sets_dl, bref, 1, 1024));
  }
  if (feature_sets_dl_per_cc_present) {
    HANDLE_CODE(unpack_dyn_seq_of(feature_sets_dl_per_cc, bref, 1, 1024));
  }
  if (feature_sets_ul_present) {
    HANDLE_CODE(unpack_dyn_seq_of(feature_sets_ul, bref, 1, 1024));
  }
  if (feature_sets_ul_per_cc_present) {
    HANDLE_CODE(unpack_dyn_seq_of(feature_sets_ul_per_cc, bref, 1, 1024));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(8);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_dl_v1540, bref);
      unpack_presence_flag(feature_sets_ul_v1540, bref);
      unpack_presence_flag(feature_sets_ul_per_cc_v1540, bref);
      if (feature_sets_dl_v1540.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_v1540, bref, 1, 1024));
      }
      if (feature_sets_ul_v1540.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_v1540, bref, 1, 1024));
      }
      if (feature_sets_ul_per_cc_v1540.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_per_cc_v1540, bref, 1, 1024));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_dl_v15a0, bref);
      if (feature_sets_dl_v15a0.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_v15a0, bref, 1, 1024));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_dl_v1610, bref);
      unpack_presence_flag(feature_sets_ul_v1610, bref);
      unpack_presence_flag(feature_set_dl_per_cc_v1620, bref);
      if (feature_sets_dl_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_v1610, bref, 1, 1024));
      }
      if (feature_sets_ul_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_v1610, bref, 1, 1024));
      }
      if (feature_set_dl_per_cc_v1620.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_set_dl_per_cc_v1620, bref, 1, 1024));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_ul_v1630, bref);
      if (feature_sets_ul_v1630.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_v1630, bref, 1, 1024));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_ul_v1640, bref);
      if (feature_sets_ul_v1640.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_v1640, bref, 1, 1024));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_dl_v1700, bref);
      unpack_presence_flag(feature_sets_dl_per_cc_v1700, bref);
      unpack_presence_flag(feature_sets_ul_v1710, bref);
      unpack_presence_flag(feature_sets_ul_per_cc_v1700, bref);
      if (feature_sets_dl_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_v1700, bref, 1, 1024));
      }
      if (feature_sets_dl_per_cc_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_per_cc_v1700, bref, 1, 1024));
      }
      if (feature_sets_ul_v1710.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_v1710, bref, 1, 1024));
      }
      if (feature_sets_ul_per_cc_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_per_cc_v1700, bref, 1, 1024));
      }
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_dl_v1720, bref);
      unpack_presence_flag(feature_sets_dl_per_cc_v1720, bref);
      unpack_presence_flag(feature_sets_ul_v1720, bref);
      if (feature_sets_dl_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_v1720, bref, 1, 1024));
      }
      if (feature_sets_dl_per_cc_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_per_cc_v1720, bref, 1, 1024));
      }
      if (feature_sets_ul_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_ul_v1720, bref, 1, 1024));
      }
    }
    if (group_flags[7]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(feature_sets_dl_v1730, bref);
      unpack_presence_flag(feature_sets_dl_per_cc_v1730, bref);
      if (feature_sets_dl_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_v1730, bref, 1, 1024));
      }
      if (feature_sets_dl_per_cc_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*feature_sets_dl_per_cc_v1730, bref, 1, 1024));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void feature_sets_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (feature_sets_dl.size() > 0) {
    j.start_array("featureSetsDownlink");
    for (const auto& e1 : feature_sets_dl) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (feature_sets_dl_per_cc.size() > 0) {
    j.start_array("featureSetsDownlinkPerCC");
    for (const auto& e1 : feature_sets_dl_per_cc) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (feature_sets_ul.size() > 0) {
    j.start_array("featureSetsUplink");
    for (const auto& e1 : feature_sets_ul) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (feature_sets_ul_per_cc.size() > 0) {
    j.start_array("featureSetsUplinkPerCC");
    for (const auto& e1 : feature_sets_ul_per_cc) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (feature_sets_dl_v1540.is_present()) {
      j.start_array("featureSetsDownlink-v1540");
      for (const auto& e1 : *feature_sets_dl_v1540) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_v1540.is_present()) {
      j.start_array("featureSetsUplink-v1540");
      for (const auto& e1 : *feature_sets_ul_v1540) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_per_cc_v1540.is_present()) {
      j.start_array("featureSetsUplinkPerCC-v1540");
      for (const auto& e1 : *feature_sets_ul_per_cc_v1540) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_v15a0.is_present()) {
      j.start_array("featureSetsDownlink-v15a0");
      for (const auto& e1 : *feature_sets_dl_v15a0) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_v1610.is_present()) {
      j.start_array("featureSetsDownlink-v1610");
      for (const auto& e1 : *feature_sets_dl_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_v1610.is_present()) {
      j.start_array("featureSetsUplink-v1610");
      for (const auto& e1 : *feature_sets_ul_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_set_dl_per_cc_v1620.is_present()) {
      j.start_array("featureSetDownlinkPerCC-v1620");
      for (const auto& e1 : *feature_set_dl_per_cc_v1620) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_v1630.is_present()) {
      j.start_array("featureSetsUplink-v1630");
      for (const auto& e1 : *feature_sets_ul_v1630) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_v1640.is_present()) {
      j.start_array("featureSetsUplink-v1640");
      for (const auto& e1 : *feature_sets_ul_v1640) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_v1700.is_present()) {
      j.start_array("featureSetsDownlink-v1700");
      for (const auto& e1 : *feature_sets_dl_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_per_cc_v1700.is_present()) {
      j.start_array("featureSetsDownlinkPerCC-v1700");
      for (const auto& e1 : *feature_sets_dl_per_cc_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_v1710.is_present()) {
      j.start_array("featureSetsUplink-v1710");
      for (const auto& e1 : *feature_sets_ul_v1710) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_per_cc_v1700.is_present()) {
      j.start_array("featureSetsUplinkPerCC-v1700");
      for (const auto& e1 : *feature_sets_ul_per_cc_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_v1720.is_present()) {
      j.start_array("featureSetsDownlink-v1720");
      for (const auto& e1 : *feature_sets_dl_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_per_cc_v1720.is_present()) {
      j.start_array("featureSetsDownlinkPerCC-v1720");
      for (const auto& e1 : *feature_sets_dl_per_cc_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_ul_v1720.is_present()) {
      j.start_array("featureSetsUplink-v1720");
      for (const auto& e1 : *feature_sets_ul_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_v1730.is_present()) {
      j.start_array("featureSetsDownlink-v1730");
      for (const auto& e1 : *feature_sets_dl_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (feature_sets_dl_per_cc_v1730.is_present()) {
      j.start_array("featureSetsDownlinkPerCC-v1730");
      for (const auto& e1 : *feature_sets_dl_per_cc_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// AggregatedBandwidth ::= ENUMERATED
const char* aggr_bw_opts::to_string() const
{
  static const char* names[] = {"mhz50",
                                "mhz100",
                                "mhz150",
                                "mhz200",
                                "mhz250",
                                "mhz300",
                                "mhz350",
                                "mhz400",
                                "mhz450",
                                "mhz500",
                                "mhz550",
                                "mhz600",
                                "mhz650",
                                "mhz700",
                                "mhz750",
                                "mhz800"};
  return convert_enum_idx(names, 16, value, "aggr_bw_e");
}
uint16_t aggr_bw_opts::to_number() const
{
  static const uint16_t numbers[] = {50, 100, 150, 200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800};
  return map_enum_number(numbers, 16, value, "aggr_bw_e");
}

// FreqBandInformationEUTRA ::= SEQUENCE
SRSASN_CODE freq_band_info_eutra_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ca_bw_class_dl_eutra_present, 1));
  HANDLE_CODE(bref.pack(ca_bw_class_ul_eutra_present, 1));

  HANDLE_CODE(pack_integer(bref, band_eutra, (uint16_t)1u, (uint16_t)256u));
  if (ca_bw_class_dl_eutra_present) {
    HANDLE_CODE(ca_bw_class_dl_eutra.pack(bref));
  }
  if (ca_bw_class_ul_eutra_present) {
    HANDLE_CODE(ca_bw_class_ul_eutra.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_band_info_eutra_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ca_bw_class_dl_eutra_present, 1));
  HANDLE_CODE(bref.unpack(ca_bw_class_ul_eutra_present, 1));

  HANDLE_CODE(unpack_integer(band_eutra, bref, (uint16_t)1u, (uint16_t)256u));
  if (ca_bw_class_dl_eutra_present) {
    HANDLE_CODE(ca_bw_class_dl_eutra.unpack(bref));
  }
  if (ca_bw_class_ul_eutra_present) {
    HANDLE_CODE(ca_bw_class_ul_eutra.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void freq_band_info_eutra_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandEUTRA", band_eutra);
  if (ca_bw_class_dl_eutra_present) {
    j.write_str("ca-BandwidthClassDL-EUTRA", ca_bw_class_dl_eutra.to_string());
  }
  if (ca_bw_class_ul_eutra_present) {
    j.write_str("ca-BandwidthClassUL-EUTRA", ca_bw_class_ul_eutra.to_string());
  }
  j.end_obj();
}

// FreqBandInformationNR ::= SEQUENCE
SRSASN_CODE freq_band_info_nr_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(max_bw_requested_dl_present, 1));
  HANDLE_CODE(bref.pack(max_bw_requested_ul_present, 1));
  HANDLE_CODE(bref.pack(max_carriers_requested_dl_present, 1));
  HANDLE_CODE(bref.pack(max_carriers_requested_ul_present, 1));

  HANDLE_CODE(pack_integer(bref, band_nr, (uint16_t)1u, (uint16_t)1024u));
  if (max_bw_requested_dl_present) {
    HANDLE_CODE(max_bw_requested_dl.pack(bref));
  }
  if (max_bw_requested_ul_present) {
    HANDLE_CODE(max_bw_requested_ul.pack(bref));
  }
  if (max_carriers_requested_dl_present) {
    HANDLE_CODE(pack_integer(bref, max_carriers_requested_dl, (uint8_t)1u, (uint8_t)32u));
  }
  if (max_carriers_requested_ul_present) {
    HANDLE_CODE(pack_integer(bref, max_carriers_requested_ul, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_band_info_nr_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(max_bw_requested_dl_present, 1));
  HANDLE_CODE(bref.unpack(max_bw_requested_ul_present, 1));
  HANDLE_CODE(bref.unpack(max_carriers_requested_dl_present, 1));
  HANDLE_CODE(bref.unpack(max_carriers_requested_ul_present, 1));

  HANDLE_CODE(unpack_integer(band_nr, bref, (uint16_t)1u, (uint16_t)1024u));
  if (max_bw_requested_dl_present) {
    HANDLE_CODE(max_bw_requested_dl.unpack(bref));
  }
  if (max_bw_requested_ul_present) {
    HANDLE_CODE(max_bw_requested_ul.unpack(bref));
  }
  if (max_carriers_requested_dl_present) {
    HANDLE_CODE(unpack_integer(max_carriers_requested_dl, bref, (uint8_t)1u, (uint8_t)32u));
  }
  if (max_carriers_requested_ul_present) {
    HANDLE_CODE(unpack_integer(max_carriers_requested_ul, bref, (uint8_t)1u, (uint8_t)32u));
  }

  return SRSASN_SUCCESS;
}
void freq_band_info_nr_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("bandNR", band_nr);
  if (max_bw_requested_dl_present) {
    j.write_str("maxBandwidthRequestedDL", max_bw_requested_dl.to_string());
  }
  if (max_bw_requested_ul_present) {
    j.write_str("maxBandwidthRequestedUL", max_bw_requested_ul.to_string());
  }
  if (max_carriers_requested_dl_present) {
    j.write_int("maxCarriersRequestedDL", max_carriers_requested_dl);
  }
  if (max_carriers_requested_ul_present) {
    j.write_int("maxCarriersRequestedUL", max_carriers_requested_ul);
  }
  j.end_obj();
}

// FreqBandInformation ::= CHOICE
void freq_band_info_c::destroy_()
{
  switch (type_) {
    case types::band_info_eutra:
      c.destroy<freq_band_info_eutra_s>();
      break;
    case types::band_info_nr:
      c.destroy<freq_band_info_nr_s>();
      break;
    default:
      break;
  }
}
void freq_band_info_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::band_info_eutra:
      c.init<freq_band_info_eutra_s>();
      break;
    case types::band_info_nr:
      c.init<freq_band_info_nr_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "freq_band_info_c");
  }
}
freq_band_info_c::freq_band_info_c(const freq_band_info_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::band_info_eutra:
      c.init(other.c.get<freq_band_info_eutra_s>());
      break;
    case types::band_info_nr:
      c.init(other.c.get<freq_band_info_nr_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "freq_band_info_c");
  }
}
freq_band_info_c& freq_band_info_c::operator=(const freq_band_info_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::band_info_eutra:
      c.set(other.c.get<freq_band_info_eutra_s>());
      break;
    case types::band_info_nr:
      c.set(other.c.get<freq_band_info_nr_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "freq_band_info_c");
  }

  return *this;
}
freq_band_info_eutra_s& freq_band_info_c::set_band_info_eutra()
{
  set(types::band_info_eutra);
  return c.get<freq_band_info_eutra_s>();
}
freq_band_info_nr_s& freq_band_info_c::set_band_info_nr()
{
  set(types::band_info_nr);
  return c.get<freq_band_info_nr_s>();
}
void freq_band_info_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::band_info_eutra:
      j.write_fieldname("bandInformationEUTRA");
      c.get<freq_band_info_eutra_s>().to_json(j);
      break;
    case types::band_info_nr:
      j.write_fieldname("bandInformationNR");
      c.get<freq_band_info_nr_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "freq_band_info_c");
  }
  j.end_obj();
}
SRSASN_CODE freq_band_info_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::band_info_eutra:
      HANDLE_CODE(c.get<freq_band_info_eutra_s>().pack(bref));
      break;
    case types::band_info_nr:
      HANDLE_CODE(c.get<freq_band_info_nr_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "freq_band_info_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE freq_band_info_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::band_info_eutra:
      HANDLE_CODE(c.get<freq_band_info_eutra_s>().unpack(bref));
      break;
    case types::band_info_nr:
      HANDLE_CODE(c.get<freq_band_info_nr_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "freq_band_info_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IMS-ParametersCommon ::= SEQUENCE
SRSASN_CODE ims_params_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(voice_over_eutra_5_gc_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= voice_over_scg_bearer_eutra_5_gc_present;
    group_flags[1] |= voice_fallback_ind_eps_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(voice_over_scg_bearer_eutra_5_gc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(voice_fallback_ind_eps_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ims_params_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(voice_over_eutra_5_gc_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(voice_over_scg_bearer_eutra_5_gc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(voice_fallback_ind_eps_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void ims_params_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (voice_over_eutra_5_gc_present) {
    j.write_str("voiceOverEUTRA-5GC", "supported");
  }
  if (ext) {
    if (voice_over_scg_bearer_eutra_5_gc_present) {
      j.write_str("voiceOverSCG-BearerEUTRA-5GC", "supported");
    }
    if (voice_fallback_ind_eps_r16_present) {
      j.write_str("voiceFallbackIndicationEPS-r16", "supported");
    }
  }
  j.end_obj();
}

// IMS-ParametersFRX-Diff ::= SEQUENCE
SRSASN_CODE ims_params_frx_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(voice_over_nr_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ims_params_frx_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(voice_over_nr_present, 1));

  return SRSASN_SUCCESS;
}
void ims_params_frx_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (voice_over_nr_present) {
    j.write_str("voiceOverNR", "supported");
  }
  j.end_obj();
}

// IMS-Parameters ::= SEQUENCE
SRSASN_CODE ims_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ims_params_common_present, 1));
  HANDLE_CODE(bref.pack(ims_params_frx_diff_present, 1));

  if (ims_params_common_present) {
    HANDLE_CODE(ims_params_common.pack(bref));
  }
  if (ims_params_frx_diff_present) {
    HANDLE_CODE(ims_params_frx_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ims_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ims_params_common_present, 1));
  HANDLE_CODE(bref.unpack(ims_params_frx_diff_present, 1));

  if (ims_params_common_present) {
    HANDLE_CODE(ims_params_common.unpack(bref));
  }
  if (ims_params_frx_diff_present) {
    HANDLE_CODE(ims_params_frx_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ims_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ims_params_common_present) {
    j.write_fieldname("ims-ParametersCommon");
    ims_params_common.to_json(j);
  }
  if (ims_params_frx_diff_present) {
    j.write_fieldname("ims-ParametersFRX-Diff");
    ims_params_frx_diff.to_json(j);
  }
  j.end_obj();
}

// IMS-ParametersFR2-2-r17 ::= SEQUENCE
SRSASN_CODE ims_params_fr2_2_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(voice_over_nr_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ims_params_fr2_2_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(voice_over_nr_r17_present, 1));

  return SRSASN_SUCCESS;
}
void ims_params_fr2_2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (voice_over_nr_r17_present) {
    j.write_str("voiceOverNR-r17", "supported");
  }
  j.end_obj();
}

// IMS-Parameters-v1700 ::= SEQUENCE
SRSASN_CODE ims_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ims_params_fr2_2_r17_present, 1));

  if (ims_params_fr2_2_r17_present) {
    HANDLE_CODE(ims_params_fr2_2_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ims_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ims_params_fr2_2_r17_present, 1));

  if (ims_params_fr2_2_r17_present) {
    HANDLE_CODE(ims_params_fr2_2_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ims_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ims_params_fr2_2_r17_present) {
    j.write_fieldname("ims-ParametersFR2-2-r17");
    ims_params_fr2_2_r17.to_json(j);
  }
  j.end_obj();
}

// SupportedBandUTRA-FDD-r16 ::= ENUMERATED
const char* supported_band_utra_fdd_r16_opts::to_string() const
{
  static const char* names[] = {"bandI",    "bandII",    "bandIII",  "bandIV",    "bandV",    "bandVI",    "bandVII",
                                "bandVIII", "bandIX",    "bandX",    "bandXI",    "bandXII",  "bandXIII",  "bandXIV",
                                "bandXV",   "bandXVI",   "bandXVII", "bandXVIII", "bandXIX",  "bandXX",    "bandXXI",
                                "bandXXII", "bandXXIII", "bandXXIV", "bandXXV",   "bandXXVI", "bandXXVII", "bandXXVIII",
                                "bandXXIX", "bandXXX",   "bandXXXI", "bandXXXII"};
  return convert_enum_idx(names, 32, value, "supported_band_utra_fdd_r16_e");
}

// UTRA-FDD-Parameters-r16 ::= SEQUENCE
SRSASN_CODE utra_fdd_params_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_utra_fdd_r16, 1, 64));

  return SRSASN_SUCCESS;
}
SRSASN_CODE utra_fdd_params_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_utra_fdd_r16, bref, 1, 64));

  return SRSASN_SUCCESS;
}
void utra_fdd_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("supportedBandListUTRA-FDD-r16");
  for (const auto& e1 : supported_band_list_utra_fdd_r16) {
    j.write_str(e1.to_string());
  }
  j.end_array();
  j.end_obj();
}

// InterRAT-Parameters ::= SEQUENCE
SRSASN_CODE inter_rat_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(eutra_present, 1));

  if (eutra_present) {
    HANDLE_CODE(eutra.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= utra_fdd_r16.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(utra_fdd_r16.is_present(), 1));
      if (utra_fdd_r16.is_present()) {
        HANDLE_CODE(utra_fdd_r16->pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE inter_rat_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(eutra_present, 1));

  if (eutra_present) {
    HANDLE_CODE(eutra.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(utra_fdd_r16, bref);
      if (utra_fdd_r16.is_present()) {
        HANDLE_CODE(utra_fdd_r16->unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void inter_rat_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (eutra_present) {
    j.write_fieldname("eutra");
    eutra.to_json(j);
  }
  if (ext) {
    if (utra_fdd_r16.is_present()) {
      j.write_fieldname("utra-FDD-r16");
      utra_fdd_r16->to_json(j);
    }
  }
  j.end_obj();
}

// MAC-ParametersCommon ::= SEQUENCE
SRSASN_CODE mac_params_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(lcp_restrict_present, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));
  HANDLE_CODE(bref.pack(lch_to_scell_restrict_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= recommended_bit_rate_present;
    group_flags[0] |= recommended_bit_rate_query_present;
    group_flags[1] |= recommended_bit_rate_multiplier_r16_present;
    group_flags[1] |= pre_emptive_bsr_r16_present;
    group_flags[1] |= autonomous_tx_r16_present;
    group_flags[1] |= lch_prio_based_prioritization_r16_present;
    group_flags[1] |= lch_to_cfg_grant_map_r16_present;
    group_flags[1] |= lch_to_grant_prio_restrict_r16_present;
    group_flags[1] |= single_phr_p_r16_present;
    group_flags[1] |= ul_lbt_fail_detection_recovery_r16_present;
    group_flags[1] |= tdd_mpe_p_mpr_report_r16_present;
    group_flags[1] |= lcid_ext_iab_r16_present;
    group_flags[2] |= sp_cell_bfr_cbra_r16_present;
    group_flags[3] |= srs_res_id_ext_r16_present;
    group_flags[4] |= enhanced_uu_drx_for_sidelink_r17_present;
    group_flags[4] |= mg_activation_request_prs_meas_r17_present;
    group_flags[4] |= mg_activation_comm_prs_meas_r17_present;
    group_flags[4] |= intra_cg_prioritization_r17_present;
    group_flags[4] |= joint_prioritization_cg_retx_timer_r17_present;
    group_flags[4] |= survival_time_r17_present;
    group_flags[4] |= lcg_ext_iab_r17_present;
    group_flags[4] |= harq_feedback_disabled_r17_present;
    group_flags[4] |= ul_harq_mode_b_r17_present;
    group_flags[4] |= sr_triggered_by_ta_report_r17_present;
    group_flags[4] |= extended_drx_cycle_inactive_r17_present;
    group_flags[4] |= simul_sr_pusch_diff_pucch_groups_r17_present;
    group_flags[4] |= last_tx_ul_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(recommended_bit_rate_present, 1));
      HANDLE_CODE(bref.pack(recommended_bit_rate_query_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(recommended_bit_rate_multiplier_r16_present, 1));
      HANDLE_CODE(bref.pack(pre_emptive_bsr_r16_present, 1));
      HANDLE_CODE(bref.pack(autonomous_tx_r16_present, 1));
      HANDLE_CODE(bref.pack(lch_prio_based_prioritization_r16_present, 1));
      HANDLE_CODE(bref.pack(lch_to_cfg_grant_map_r16_present, 1));
      HANDLE_CODE(bref.pack(lch_to_grant_prio_restrict_r16_present, 1));
      HANDLE_CODE(bref.pack(single_phr_p_r16_present, 1));
      HANDLE_CODE(bref.pack(ul_lbt_fail_detection_recovery_r16_present, 1));
      HANDLE_CODE(bref.pack(tdd_mpe_p_mpr_report_r16_present, 1));
      HANDLE_CODE(bref.pack(lcid_ext_iab_r16_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sp_cell_bfr_cbra_r16_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(srs_res_id_ext_r16_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(enhanced_uu_drx_for_sidelink_r17_present, 1));
      HANDLE_CODE(bref.pack(mg_activation_request_prs_meas_r17_present, 1));
      HANDLE_CODE(bref.pack(mg_activation_comm_prs_meas_r17_present, 1));
      HANDLE_CODE(bref.pack(intra_cg_prioritization_r17_present, 1));
      HANDLE_CODE(bref.pack(joint_prioritization_cg_retx_timer_r17_present, 1));
      HANDLE_CODE(bref.pack(survival_time_r17_present, 1));
      HANDLE_CODE(bref.pack(lcg_ext_iab_r17_present, 1));
      HANDLE_CODE(bref.pack(harq_feedback_disabled_r17_present, 1));
      HANDLE_CODE(bref.pack(ul_harq_mode_b_r17_present, 1));
      HANDLE_CODE(bref.pack(sr_triggered_by_ta_report_r17_present, 1));
      HANDLE_CODE(bref.pack(extended_drx_cycle_inactive_r17_present, 1));
      HANDLE_CODE(bref.pack(simul_sr_pusch_diff_pucch_groups_r17_present, 1));
      HANDLE_CODE(bref.pack(last_tx_ul_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(lcp_restrict_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));
  HANDLE_CODE(bref.unpack(lch_to_scell_restrict_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(5);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(recommended_bit_rate_present, 1));
      HANDLE_CODE(bref.unpack(recommended_bit_rate_query_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(recommended_bit_rate_multiplier_r16_present, 1));
      HANDLE_CODE(bref.unpack(pre_emptive_bsr_r16_present, 1));
      HANDLE_CODE(bref.unpack(autonomous_tx_r16_present, 1));
      HANDLE_CODE(bref.unpack(lch_prio_based_prioritization_r16_present, 1));
      HANDLE_CODE(bref.unpack(lch_to_cfg_grant_map_r16_present, 1));
      HANDLE_CODE(bref.unpack(lch_to_grant_prio_restrict_r16_present, 1));
      HANDLE_CODE(bref.unpack(single_phr_p_r16_present, 1));
      HANDLE_CODE(bref.unpack(ul_lbt_fail_detection_recovery_r16_present, 1));
      HANDLE_CODE(bref.unpack(tdd_mpe_p_mpr_report_r16_present, 1));
      HANDLE_CODE(bref.unpack(lcid_ext_iab_r16_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sp_cell_bfr_cbra_r16_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(srs_res_id_ext_r16_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(enhanced_uu_drx_for_sidelink_r17_present, 1));
      HANDLE_CODE(bref.unpack(mg_activation_request_prs_meas_r17_present, 1));
      HANDLE_CODE(bref.unpack(mg_activation_comm_prs_meas_r17_present, 1));
      HANDLE_CODE(bref.unpack(intra_cg_prioritization_r17_present, 1));
      HANDLE_CODE(bref.unpack(joint_prioritization_cg_retx_timer_r17_present, 1));
      HANDLE_CODE(bref.unpack(survival_time_r17_present, 1));
      HANDLE_CODE(bref.unpack(lcg_ext_iab_r17_present, 1));
      HANDLE_CODE(bref.unpack(harq_feedback_disabled_r17_present, 1));
      HANDLE_CODE(bref.unpack(ul_harq_mode_b_r17_present, 1));
      HANDLE_CODE(bref.unpack(sr_triggered_by_ta_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(extended_drx_cycle_inactive_r17_present, 1));
      HANDLE_CODE(bref.unpack(simul_sr_pusch_diff_pucch_groups_r17_present, 1));
      HANDLE_CODE(bref.unpack(last_tx_ul_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void mac_params_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (lcp_restrict_present) {
    j.write_str("lcp-Restriction", "supported");
  }
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  if (lch_to_scell_restrict_present) {
    j.write_str("lch-ToSCellRestriction", "supported");
  }
  if (ext) {
    if (recommended_bit_rate_present) {
      j.write_str("recommendedBitRate", "supported");
    }
    if (recommended_bit_rate_query_present) {
      j.write_str("recommendedBitRateQuery", "supported");
    }
    if (recommended_bit_rate_multiplier_r16_present) {
      j.write_str("recommendedBitRateMultiplier-r16", "supported");
    }
    if (pre_emptive_bsr_r16_present) {
      j.write_str("preEmptiveBSR-r16", "supported");
    }
    if (autonomous_tx_r16_present) {
      j.write_str("autonomousTransmission-r16", "supported");
    }
    if (lch_prio_based_prioritization_r16_present) {
      j.write_str("lch-PriorityBasedPrioritization-r16", "supported");
    }
    if (lch_to_cfg_grant_map_r16_present) {
      j.write_str("lch-ToConfiguredGrantMapping-r16", "supported");
    }
    if (lch_to_grant_prio_restrict_r16_present) {
      j.write_str("lch-ToGrantPriorityRestriction-r16", "supported");
    }
    if (single_phr_p_r16_present) {
      j.write_str("singlePHR-P-r16", "supported");
    }
    if (ul_lbt_fail_detection_recovery_r16_present) {
      j.write_str("ul-LBT-FailureDetectionRecovery-r16", "supported");
    }
    if (tdd_mpe_p_mpr_report_r16_present) {
      j.write_str("tdd-MPE-P-MPR-Reporting-r16", "supported");
    }
    if (lcid_ext_iab_r16_present) {
      j.write_str("lcid-ExtensionIAB-r16", "supported");
    }
    if (sp_cell_bfr_cbra_r16_present) {
      j.write_str("spCell-BFR-CBRA-r16", "supported");
    }
    if (srs_res_id_ext_r16_present) {
      j.write_str("srs-ResourceId-Ext-r16", "supported");
    }
    if (enhanced_uu_drx_for_sidelink_r17_present) {
      j.write_str("enhancedUuDRX-forSidelink-r17", "supported");
    }
    if (mg_activation_request_prs_meas_r17_present) {
      j.write_str("mg-ActivationRequestPRS-Meas-r17", "supported");
    }
    if (mg_activation_comm_prs_meas_r17_present) {
      j.write_str("mg-ActivationCommPRS-Meas-r17", "supported");
    }
    if (intra_cg_prioritization_r17_present) {
      j.write_str("intraCG-Prioritization-r17", "supported");
    }
    if (joint_prioritization_cg_retx_timer_r17_present) {
      j.write_str("jointPrioritizationCG-Retx-Timer-r17", "supported");
    }
    if (survival_time_r17_present) {
      j.write_str("survivalTime-r17", "supported");
    }
    if (lcg_ext_iab_r17_present) {
      j.write_str("lcg-ExtensionIAB-r17", "supported");
    }
    if (harq_feedback_disabled_r17_present) {
      j.write_str("harq-FeedbackDisabled-r17", "supported");
    }
    if (ul_harq_mode_b_r17_present) {
      j.write_str("uplink-Harq-ModeB-r17", "supported");
    }
    if (sr_triggered_by_ta_report_r17_present) {
      j.write_str("sr-TriggeredBy-TA-Report-r17", "supported");
    }
    if (extended_drx_cycle_inactive_r17_present) {
      j.write_str("extendedDRX-CycleInactive-r17", "supported");
    }
    if (simul_sr_pusch_diff_pucch_groups_r17_present) {
      j.write_str("simultaneousSR-PUSCH-DiffPUCCH-groups-r17", "supported");
    }
    if (last_tx_ul_r17_present) {
      j.write_str("lastTransmissionUL-r17", "supported");
    }
  }
  j.end_obj();
}

// MAC-ParametersXDD-Diff ::= SEQUENCE
SRSASN_CODE mac_params_xdd_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(skip_ul_tx_dyn_present, 1));
  HANDLE_CODE(bref.pack(lc_ch_sr_delay_timer_present, 1));
  HANDLE_CODE(bref.pack(long_drx_cycle_present, 1));
  HANDLE_CODE(bref.pack(short_drx_cycle_present, 1));
  HANDLE_CODE(bref.pack(multiple_sr_cfgs_present, 1));
  HANDLE_CODE(bref.pack(multiple_cfg_grants_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= secondary_drx_group_r16_present;
    group_flags[1] |= enhanced_skip_ul_tx_dyn_r16_present;
    group_flags[1] |= enhanced_skip_ul_tx_cfg_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(secondary_drx_group_r16_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(enhanced_skip_ul_tx_dyn_r16_present, 1));
      HANDLE_CODE(bref.pack(enhanced_skip_ul_tx_cfg_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_xdd_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(skip_ul_tx_dyn_present, 1));
  HANDLE_CODE(bref.unpack(lc_ch_sr_delay_timer_present, 1));
  HANDLE_CODE(bref.unpack(long_drx_cycle_present, 1));
  HANDLE_CODE(bref.unpack(short_drx_cycle_present, 1));
  HANDLE_CODE(bref.unpack(multiple_sr_cfgs_present, 1));
  HANDLE_CODE(bref.unpack(multiple_cfg_grants_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(secondary_drx_group_r16_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(enhanced_skip_ul_tx_dyn_r16_present, 1));
      HANDLE_CODE(bref.unpack(enhanced_skip_ul_tx_cfg_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void mac_params_xdd_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (skip_ul_tx_dyn_present) {
    j.write_str("skipUplinkTxDynamic", "supported");
  }
  if (lc_ch_sr_delay_timer_present) {
    j.write_str("logicalChannelSR-DelayTimer", "supported");
  }
  if (long_drx_cycle_present) {
    j.write_str("longDRX-Cycle", "supported");
  }
  if (short_drx_cycle_present) {
    j.write_str("shortDRX-Cycle", "supported");
  }
  if (multiple_sr_cfgs_present) {
    j.write_str("multipleSR-Configurations", "supported");
  }
  if (multiple_cfg_grants_present) {
    j.write_str("multipleConfiguredGrants", "supported");
  }
  if (ext) {
    if (secondary_drx_group_r16_present) {
      j.write_str("secondaryDRX-Group-r16", "supported");
    }
    if (enhanced_skip_ul_tx_dyn_r16_present) {
      j.write_str("enhancedSkipUplinkTxDynamic-r16", "supported");
    }
    if (enhanced_skip_ul_tx_cfg_r16_present) {
      j.write_str("enhancedSkipUplinkTxConfigured-r16", "supported");
    }
  }
  j.end_obj();
}

// MAC-Parameters ::= SEQUENCE
SRSASN_CODE mac_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mac_params_common_present, 1));
  HANDLE_CODE(bref.pack(mac_params_xdd_diff_present, 1));

  if (mac_params_common_present) {
    HANDLE_CODE(mac_params_common.pack(bref));
  }
  if (mac_params_xdd_diff_present) {
    HANDLE_CODE(mac_params_xdd_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mac_params_common_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_xdd_diff_present, 1));

  if (mac_params_common_present) {
    HANDLE_CODE(mac_params_common.unpack(bref));
  }
  if (mac_params_xdd_diff_present) {
    HANDLE_CODE(mac_params_xdd_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mac_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mac_params_common_present) {
    j.write_fieldname("mac-ParametersCommon");
    mac_params_common.to_json(j);
  }
  if (mac_params_xdd_diff_present) {
    j.write_fieldname("mac-ParametersXDD-Diff");
    mac_params_xdd_diff.to_json(j);
  }
  j.end_obj();
}

// MinTimeGap-r16 ::= SEQUENCE
SRSASN_CODE min_time_gap_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scs_15k_hz_r16_present, 1));
  HANDLE_CODE(bref.pack(scs_30k_hz_r16_present, 1));
  HANDLE_CODE(bref.pack(scs_60k_hz_r16_present, 1));
  HANDLE_CODE(bref.pack(scs_120k_hz_r16_present, 1));

  if (scs_15k_hz_r16_present) {
    HANDLE_CODE(scs_15k_hz_r16.pack(bref));
  }
  if (scs_30k_hz_r16_present) {
    HANDLE_CODE(scs_30k_hz_r16.pack(bref));
  }
  if (scs_60k_hz_r16_present) {
    HANDLE_CODE(scs_60k_hz_r16.pack(bref));
  }
  if (scs_120k_hz_r16_present) {
    HANDLE_CODE(scs_120k_hz_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE min_time_gap_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(scs_15k_hz_r16_present, 1));
  HANDLE_CODE(bref.unpack(scs_30k_hz_r16_present, 1));
  HANDLE_CODE(bref.unpack(scs_60k_hz_r16_present, 1));
  HANDLE_CODE(bref.unpack(scs_120k_hz_r16_present, 1));

  if (scs_15k_hz_r16_present) {
    HANDLE_CODE(scs_15k_hz_r16.unpack(bref));
  }
  if (scs_30k_hz_r16_present) {
    HANDLE_CODE(scs_30k_hz_r16.unpack(bref));
  }
  if (scs_60k_hz_r16_present) {
    HANDLE_CODE(scs_60k_hz_r16.unpack(bref));
  }
  if (scs_120k_hz_r16_present) {
    HANDLE_CODE(scs_120k_hz_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void min_time_gap_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (scs_15k_hz_r16_present) {
    j.write_str("scs-15kHz-r16", scs_15k_hz_r16.to_string());
  }
  if (scs_30k_hz_r16_present) {
    j.write_str("scs-30kHz-r16", scs_30k_hz_r16.to_string());
  }
  if (scs_60k_hz_r16_present) {
    j.write_str("scs-60kHz-r16", scs_60k_hz_r16.to_string());
  }
  if (scs_120k_hz_r16_present) {
    j.write_str("scs-120kHz-r16", scs_120k_hz_r16.to_string());
  }
  j.end_obj();
}

const char* min_time_gap_r16_s::scs_15k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl1", "sl3"};
  return convert_enum_idx(names, 2, value, "min_time_gap_r16_s::scs_15k_hz_r16_e_");
}
uint8_t min_time_gap_r16_s::scs_15k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 3};
  return map_enum_number(numbers, 2, value, "min_time_gap_r16_s::scs_15k_hz_r16_e_");
}

const char* min_time_gap_r16_s::scs_30k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl1", "sl6"};
  return convert_enum_idx(names, 2, value, "min_time_gap_r16_s::scs_30k_hz_r16_e_");
}
uint8_t min_time_gap_r16_s::scs_30k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 6};
  return map_enum_number(numbers, 2, value, "min_time_gap_r16_s::scs_30k_hz_r16_e_");
}

const char* min_time_gap_r16_s::scs_60k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl1", "sl12"};
  return convert_enum_idx(names, 2, value, "min_time_gap_r16_s::scs_60k_hz_r16_e_");
}
uint8_t min_time_gap_r16_s::scs_60k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 12};
  return map_enum_number(numbers, 2, value, "min_time_gap_r16_s::scs_60k_hz_r16_e_");
}

const char* min_time_gap_r16_s::scs_120k_hz_r16_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl24"};
  return convert_enum_idx(names, 2, value, "min_time_gap_r16_s::scs_120k_hz_r16_e_");
}
uint8_t min_time_gap_r16_s::scs_120k_hz_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 24};
  return map_enum_number(numbers, 2, value, "min_time_gap_r16_s::scs_120k_hz_r16_e_");
}

// MAC-ParametersFRX-Diff-r16 ::= SEQUENCE
SRSASN_CODE mac_params_frx_diff_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(direct_mcg_scell_activation_r16_present, 1));
  HANDLE_CODE(bref.pack(direct_mcg_scell_activation_resume_r16_present, 1));
  HANDLE_CODE(bref.pack(direct_scg_scell_activation_r16_present, 1));
  HANDLE_CODE(bref.pack(direct_scg_scell_activation_resume_r16_present, 1));
  HANDLE_CODE(bref.pack(drx_adaptation_r16_present, 1));

  if (drx_adaptation_r16_present) {
    HANDLE_CODE(bref.pack(drx_adaptation_r16.non_shared_spec_ch_access_r16_present, 1));
    HANDLE_CODE(bref.pack(drx_adaptation_r16.shared_spec_ch_access_r16_present, 1));
    if (drx_adaptation_r16.non_shared_spec_ch_access_r16_present) {
      HANDLE_CODE(drx_adaptation_r16.non_shared_spec_ch_access_r16.pack(bref));
    }
    if (drx_adaptation_r16.shared_spec_ch_access_r16_present) {
      HANDLE_CODE(drx_adaptation_r16.shared_spec_ch_access_r16.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_frx_diff_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(direct_mcg_scell_activation_r16_present, 1));
  HANDLE_CODE(bref.unpack(direct_mcg_scell_activation_resume_r16_present, 1));
  HANDLE_CODE(bref.unpack(direct_scg_scell_activation_r16_present, 1));
  HANDLE_CODE(bref.unpack(direct_scg_scell_activation_resume_r16_present, 1));
  HANDLE_CODE(bref.unpack(drx_adaptation_r16_present, 1));

  if (drx_adaptation_r16_present) {
    HANDLE_CODE(bref.unpack(drx_adaptation_r16.non_shared_spec_ch_access_r16_present, 1));
    HANDLE_CODE(bref.unpack(drx_adaptation_r16.shared_spec_ch_access_r16_present, 1));
    if (drx_adaptation_r16.non_shared_spec_ch_access_r16_present) {
      HANDLE_CODE(drx_adaptation_r16.non_shared_spec_ch_access_r16.unpack(bref));
    }
    if (drx_adaptation_r16.shared_spec_ch_access_r16_present) {
      HANDLE_CODE(drx_adaptation_r16.shared_spec_ch_access_r16.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void mac_params_frx_diff_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (direct_mcg_scell_activation_r16_present) {
    j.write_str("directMCG-SCellActivation-r16", "supported");
  }
  if (direct_mcg_scell_activation_resume_r16_present) {
    j.write_str("directMCG-SCellActivationResume-r16", "supported");
  }
  if (direct_scg_scell_activation_r16_present) {
    j.write_str("directSCG-SCellActivation-r16", "supported");
  }
  if (direct_scg_scell_activation_resume_r16_present) {
    j.write_str("directSCG-SCellActivationResume-r16", "supported");
  }
  if (drx_adaptation_r16_present) {
    j.write_fieldname("drx-Adaptation-r16");
    j.start_obj();
    if (drx_adaptation_r16.non_shared_spec_ch_access_r16_present) {
      j.write_fieldname("non-SharedSpectrumChAccess-r16");
      drx_adaptation_r16.non_shared_spec_ch_access_r16.to_json(j);
    }
    if (drx_adaptation_r16.shared_spec_ch_access_r16_present) {
      j.write_fieldname("sharedSpectrumChAccess-r16");
      drx_adaptation_r16.shared_spec_ch_access_r16.to_json(j);
    }
    j.end_obj();
  }
  j.end_obj();
}

// MAC-Parameters-v1610 ::= SEQUENCE
SRSASN_CODE mac_params_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mac_params_frx_diff_r16_present, 1));

  if (mac_params_frx_diff_r16_present) {
    HANDLE_CODE(mac_params_frx_diff_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mac_params_frx_diff_r16_present, 1));

  if (mac_params_frx_diff_r16_present) {
    HANDLE_CODE(mac_params_frx_diff_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mac_params_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mac_params_frx_diff_r16_present) {
    j.write_fieldname("mac-ParametersFRX-Diff-r16");
    mac_params_frx_diff_r16.to_json(j);
  }
  j.end_obj();
}

// MinTimeGapFR2-2-r17 ::= SEQUENCE
SRSASN_CODE min_time_gap_fr2_2_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.pack(scs_960k_hz_r17_present, 1));

  if (scs_120k_hz_r17_present) {
    HANDLE_CODE(scs_120k_hz_r17.pack(bref));
  }
  if (scs_480k_hz_r17_present) {
    HANDLE_CODE(scs_480k_hz_r17.pack(bref));
  }
  if (scs_960k_hz_r17_present) {
    HANDLE_CODE(scs_960k_hz_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE min_time_gap_fr2_2_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(scs_120k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(scs_480k_hz_r17_present, 1));
  HANDLE_CODE(bref.unpack(scs_960k_hz_r17_present, 1));

  if (scs_120k_hz_r17_present) {
    HANDLE_CODE(scs_120k_hz_r17.unpack(bref));
  }
  if (scs_480k_hz_r17_present) {
    HANDLE_CODE(scs_480k_hz_r17.unpack(bref));
  }
  if (scs_960k_hz_r17_present) {
    HANDLE_CODE(scs_960k_hz_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void min_time_gap_fr2_2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (scs_120k_hz_r17_present) {
    j.write_str("scs-120kHz-r17", scs_120k_hz_r17.to_string());
  }
  if (scs_480k_hz_r17_present) {
    j.write_str("scs-480kHz-r17", scs_480k_hz_r17.to_string());
  }
  if (scs_960k_hz_r17_present) {
    j.write_str("scs-960kHz-r17", scs_960k_hz_r17.to_string());
  }
  j.end_obj();
}

const char* min_time_gap_fr2_2_r17_s::scs_120k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sl2", "sl24"};
  return convert_enum_idx(names, 2, value, "min_time_gap_fr2_2_r17_s::scs_120k_hz_r17_e_");
}
uint8_t min_time_gap_fr2_2_r17_s::scs_120k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 24};
  return map_enum_number(numbers, 2, value, "min_time_gap_fr2_2_r17_s::scs_120k_hz_r17_e_");
}

const char* min_time_gap_fr2_2_r17_s::scs_480k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sl8", "sl96"};
  return convert_enum_idx(names, 2, value, "min_time_gap_fr2_2_r17_s::scs_480k_hz_r17_e_");
}
uint8_t min_time_gap_fr2_2_r17_s::scs_480k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 96};
  return map_enum_number(numbers, 2, value, "min_time_gap_fr2_2_r17_s::scs_480k_hz_r17_e_");
}

const char* min_time_gap_fr2_2_r17_s::scs_960k_hz_r17_opts::to_string() const
{
  static const char* names[] = {"sl16", "sl192"};
  return convert_enum_idx(names, 2, value, "min_time_gap_fr2_2_r17_s::scs_960k_hz_r17_e_");
}
uint8_t min_time_gap_fr2_2_r17_s::scs_960k_hz_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {16, 192};
  return map_enum_number(numbers, 2, value, "min_time_gap_fr2_2_r17_s::scs_960k_hz_r17_e_");
}

// MAC-ParametersFR2-2-r17 ::= SEQUENCE
SRSASN_CODE mac_params_fr2_2_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(direct_mcg_scell_activation_r17_present, 1));
  HANDLE_CODE(bref.pack(direct_mcg_scell_activation_resume_r17_present, 1));
  HANDLE_CODE(bref.pack(direct_scg_scell_activation_r17_present, 1));
  HANDLE_CODE(bref.pack(direct_scg_scell_activation_resume_r17_present, 1));
  HANDLE_CODE(bref.pack(drx_adaptation_r17_present, 1));

  if (drx_adaptation_r17_present) {
    HANDLE_CODE(bref.pack(drx_adaptation_r17.non_shared_spec_ch_access_r17_present, 1));
    HANDLE_CODE(bref.pack(drx_adaptation_r17.shared_spec_ch_access_r17_present, 1));
    if (drx_adaptation_r17.non_shared_spec_ch_access_r17_present) {
      HANDLE_CODE(drx_adaptation_r17.non_shared_spec_ch_access_r17.pack(bref));
    }
    if (drx_adaptation_r17.shared_spec_ch_access_r17_present) {
      HANDLE_CODE(drx_adaptation_r17.shared_spec_ch_access_r17.pack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_fr2_2_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(direct_mcg_scell_activation_r17_present, 1));
  HANDLE_CODE(bref.unpack(direct_mcg_scell_activation_resume_r17_present, 1));
  HANDLE_CODE(bref.unpack(direct_scg_scell_activation_r17_present, 1));
  HANDLE_CODE(bref.unpack(direct_scg_scell_activation_resume_r17_present, 1));
  HANDLE_CODE(bref.unpack(drx_adaptation_r17_present, 1));

  if (drx_adaptation_r17_present) {
    HANDLE_CODE(bref.unpack(drx_adaptation_r17.non_shared_spec_ch_access_r17_present, 1));
    HANDLE_CODE(bref.unpack(drx_adaptation_r17.shared_spec_ch_access_r17_present, 1));
    if (drx_adaptation_r17.non_shared_spec_ch_access_r17_present) {
      HANDLE_CODE(drx_adaptation_r17.non_shared_spec_ch_access_r17.unpack(bref));
    }
    if (drx_adaptation_r17.shared_spec_ch_access_r17_present) {
      HANDLE_CODE(drx_adaptation_r17.shared_spec_ch_access_r17.unpack(bref));
    }
  }

  return SRSASN_SUCCESS;
}
void mac_params_fr2_2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (direct_mcg_scell_activation_r17_present) {
    j.write_str("directMCG-SCellActivation-r17", "supported");
  }
  if (direct_mcg_scell_activation_resume_r17_present) {
    j.write_str("directMCG-SCellActivationResume-r17", "supported");
  }
  if (direct_scg_scell_activation_r17_present) {
    j.write_str("directSCG-SCellActivation-r17", "supported");
  }
  if (direct_scg_scell_activation_resume_r17_present) {
    j.write_str("directSCG-SCellActivationResume-r17", "supported");
  }
  if (drx_adaptation_r17_present) {
    j.write_fieldname("drx-Adaptation-r17");
    j.start_obj();
    if (drx_adaptation_r17.non_shared_spec_ch_access_r17_present) {
      j.write_fieldname("non-SharedSpectrumChAccess-r17");
      drx_adaptation_r17.non_shared_spec_ch_access_r17.to_json(j);
    }
    if (drx_adaptation_r17.shared_spec_ch_access_r17_present) {
      j.write_fieldname("sharedSpectrumChAccess-r17");
      drx_adaptation_r17.shared_spec_ch_access_r17.to_json(j);
    }
    j.end_obj();
  }
  j.end_obj();
}

// MAC-Parameters-v1700 ::= SEQUENCE
SRSASN_CODE mac_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mac_params_fr2_2_r17_present, 1));

  if (mac_params_fr2_2_r17_present) {
    HANDLE_CODE(mac_params_fr2_2_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mac_params_fr2_2_r17_present, 1));

  if (mac_params_fr2_2_r17_present) {
    HANDLE_CODE(mac_params_fr2_2_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mac_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mac_params_fr2_2_r17_present) {
    j.write_fieldname("mac-ParametersFR2-2-r17");
    mac_params_fr2_2_r17.to_json(j);
  }
  j.end_obj();
}

// MAC-ParametersSidelinkCommon-r16 ::= SEQUENCE
SRSASN_CODE mac_params_sidelink_common_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(lcp_restrict_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(multiple_cfg_grants_sidelink_r16_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= drx_on_sidelink_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(drx_on_sidelink_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_sidelink_common_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(lcp_restrict_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(multiple_cfg_grants_sidelink_r16_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(drx_on_sidelink_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void mac_params_sidelink_common_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (lcp_restrict_sidelink_r16_present) {
    j.write_str("lcp-RestrictionSidelink-r16", "supported");
  }
  if (multiple_cfg_grants_sidelink_r16_present) {
    j.write_str("multipleConfiguredGrantsSidelink-r16", "supported");
  }
  if (ext) {
    if (drx_on_sidelink_r17_present) {
      j.write_str("drx-OnSidelink-r17", "supported");
    }
  }
  j.end_obj();
}

// MAC-ParametersSidelinkXDD-Diff-r16 ::= SEQUENCE
SRSASN_CODE mac_params_sidelink_xdd_diff_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(multiple_sr_cfgs_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(lc_ch_sr_delay_timer_sidelink_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_sidelink_xdd_diff_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(multiple_sr_cfgs_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(lc_ch_sr_delay_timer_sidelink_r16_present, 1));

  return SRSASN_SUCCESS;
}
void mac_params_sidelink_xdd_diff_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (multiple_sr_cfgs_sidelink_r16_present) {
    j.write_str("multipleSR-ConfigurationsSidelink-r16", "supported");
  }
  if (lc_ch_sr_delay_timer_sidelink_r16_present) {
    j.write_str("logicalChannelSR-DelayTimerSidelink-r16", "supported");
  }
  j.end_obj();
}

// MAC-ParametersSidelink-r16 ::= SEQUENCE
SRSASN_CODE mac_params_sidelink_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(mac_params_sidelink_common_r16_present, 1));
  HANDLE_CODE(bref.pack(mac_params_sidelink_xdd_diff_r16_present, 1));

  if (mac_params_sidelink_common_r16_present) {
    HANDLE_CODE(mac_params_sidelink_common_r16.pack(bref));
  }
  if (mac_params_sidelink_xdd_diff_r16_present) {
    HANDLE_CODE(mac_params_sidelink_xdd_diff_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mac_params_sidelink_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(mac_params_sidelink_common_r16_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_sidelink_xdd_diff_r16_present, 1));

  if (mac_params_sidelink_common_r16_present) {
    HANDLE_CODE(mac_params_sidelink_common_r16.unpack(bref));
  }
  if (mac_params_sidelink_xdd_diff_r16_present) {
    HANDLE_CODE(mac_params_sidelink_xdd_diff_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void mac_params_sidelink_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mac_params_sidelink_common_r16_present) {
    j.write_fieldname("mac-ParametersSidelinkCommon-r16");
    mac_params_sidelink_common_r16.to_json(j);
  }
  if (mac_params_sidelink_xdd_diff_r16_present) {
    j.write_fieldname("mac-ParametersSidelinkXDD-Diff-r16");
    mac_params_sidelink_xdd_diff_r16.to_json(j);
  }
  j.end_obj();
}

// MeasAndMobParametersCommon ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(supported_gap_pattern_present, 1));
  HANDLE_CODE(bref.pack(ssb_rlm_present, 1));
  HANDLE_CODE(bref.pack(ssb_and_csi_rs_rlm_present, 1));

  if (supported_gap_pattern_present) {
    HANDLE_CODE(supported_gap_pattern.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= event_b_meas_and_report_present;
    group_flags[0] |= ho_fdd_tdd_present;
    group_flags[0] |= eutra_cgi_report_present;
    group_flags[0] |= nr_cgi_report_present;
    group_flags[1] |= independent_gap_cfg_present;
    group_flags[1] |= periodic_eutra_meas_and_report_present;
    group_flags[1] |= ho_fr1_fr2_present;
    group_flags[1] |= max_num_csi_rs_rrm_rs_sinr_present;
    group_flags[2] |= nr_cgi_report_endc_present;
    group_flags[3] |= eutra_cgi_report_nedc_present;
    group_flags[3] |= eutra_cgi_report_nrdc_present;
    group_flags[3] |= nr_cgi_report_nedc_present;
    group_flags[3] |= nr_cgi_report_nrdc_present;
    group_flags[4] |= report_add_neigh_meas_for_periodic_r16_present;
    group_flags[4] |= cond_ho_params_common_r16.is_present();
    group_flags[4] |= nr_need_for_gap_report_r16_present;
    group_flags[4] |= supported_gap_pattern_nr_only_r16_present;
    group_flags[4] |= supported_gap_pattern_nr_only_nedc_r16_present;
    group_flags[4] |= max_num_cli_rssi_r16_present;
    group_flags[4] |= max_num_cli_srs_rsrp_r16_present;
    group_flags[4] |= max_num_per_slot_cli_srs_rsrp_r16_present;
    group_flags[4] |= mfbi_iab_r16_present;
    group_flags[4] |= dummy_present;
    group_flags[4] |= nr_cgi_report_npn_r16_present;
    group_flags[4] |= idle_inactive_eutra_meas_report_r16_present;
    group_flags[4] |= idle_inactive_validity_area_r16_present;
    group_flags[4] |= eutra_autonomous_gaps_r16_present;
    group_flags[4] |= eutra_autonomous_gaps_nedc_r16_present;
    group_flags[4] |= eutra_autonomous_gaps_nrdc_r16_present;
    group_flags[4] |= pcell_t312_r16_present;
    group_flags[4] |= supported_gap_pattern_r16_present;
    group_flags[5] |= concurrent_meas_gap_r17.is_present();
    group_flags[5] |= nr_need_for_gap_ncsg_report_r17_present;
    group_flags[5] |= eutra_need_for_gap_ncsg_report_r17_present;
    group_flags[5] |= ncsg_meas_gap_per_fr_r17_present;
    group_flags[5] |= ncsg_meas_gap_patterns_r17_present;
    group_flags[5] |= ncsg_meas_gap_nr_patterns_r17_present;
    group_flags[5] |= precfg_ue_autonomous_meas_gap_r17_present;
    group_flags[5] |= precfg_nw_ctrl_meas_gap_r17_present;
    group_flags[5] |= ho_fr1_fr2_2_r17_present;
    group_flags[5] |= ho_fr2_1_fr2_2_r17_present;
    group_flags[5] |= independent_gap_cfg_prs_r17_present;
    group_flags[5] |= rrm_relaxation_rrc_connected_red_cap_r17_present;
    group_flags[5] |= parallel_meas_gap_r17_present;
    group_flags[5] |= cond_ho_with_scg_nrdc_r17_present;
    group_flags[5] |= gnb_id_len_report_r17_present;
    group_flags[5] |= gnb_id_len_report_endc_r17_present;
    group_flags[5] |= gnb_id_len_report_nedc_r17_present;
    group_flags[5] |= gnb_id_len_report_nrdc_r17_present;
    group_flags[5] |= gnb_id_len_report_npn_r17_present;
    group_flags[6] |= parallel_smtc_r17_present;
    group_flags[6] |= concurrent_meas_gap_eutra_r17_present;
    group_flags[6] |= service_link_prop_delay_diff_report_r17_present;
    group_flags[6] |= ncsg_symbol_level_schedule_restrict_inter_r17_present;
    group_flags[7] |= event_d1_meas_report_trigger_r17_present;
    group_flags[7] |= independent_gap_cfg_max_cc_r17.is_present();
    group_flags[8] |= inter_sat_meas_r17_present;
    group_flags[8] |= derive_ssb_idx_from_cell_inter_non_ncsg_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(event_b_meas_and_report_present, 1));
      HANDLE_CODE(bref.pack(ho_fdd_tdd_present, 1));
      HANDLE_CODE(bref.pack(eutra_cgi_report_present, 1));
      HANDLE_CODE(bref.pack(nr_cgi_report_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(independent_gap_cfg_present, 1));
      HANDLE_CODE(bref.pack(periodic_eutra_meas_and_report_present, 1));
      HANDLE_CODE(bref.pack(ho_fr1_fr2_present, 1));
      HANDLE_CODE(bref.pack(max_num_csi_rs_rrm_rs_sinr_present, 1));
      if (max_num_csi_rs_rrm_rs_sinr_present) {
        HANDLE_CODE(max_num_csi_rs_rrm_rs_sinr.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(nr_cgi_report_endc_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(eutra_cgi_report_nedc_present, 1));
      HANDLE_CODE(bref.pack(eutra_cgi_report_nrdc_present, 1));
      HANDLE_CODE(bref.pack(nr_cgi_report_nedc_present, 1));
      HANDLE_CODE(bref.pack(nr_cgi_report_nrdc_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(report_add_neigh_meas_for_periodic_r16_present, 1));
      HANDLE_CODE(bref.pack(cond_ho_params_common_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(nr_need_for_gap_report_r16_present, 1));
      HANDLE_CODE(bref.pack(supported_gap_pattern_nr_only_r16_present, 1));
      HANDLE_CODE(bref.pack(supported_gap_pattern_nr_only_nedc_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_cli_rssi_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_cli_srs_rsrp_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_per_slot_cli_srs_rsrp_r16_present, 1));
      HANDLE_CODE(bref.pack(mfbi_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(dummy_present, 1));
      HANDLE_CODE(bref.pack(nr_cgi_report_npn_r16_present, 1));
      HANDLE_CODE(bref.pack(idle_inactive_eutra_meas_report_r16_present, 1));
      HANDLE_CODE(bref.pack(idle_inactive_validity_area_r16_present, 1));
      HANDLE_CODE(bref.pack(eutra_autonomous_gaps_r16_present, 1));
      HANDLE_CODE(bref.pack(eutra_autonomous_gaps_nedc_r16_present, 1));
      HANDLE_CODE(bref.pack(eutra_autonomous_gaps_nrdc_r16_present, 1));
      HANDLE_CODE(bref.pack(pcell_t312_r16_present, 1));
      HANDLE_CODE(bref.pack(supported_gap_pattern_r16_present, 1));
      if (cond_ho_params_common_r16.is_present()) {
        HANDLE_CODE(bref.pack(cond_ho_params_common_r16->cond_ho_fdd_tdd_r16_present, 1));
        HANDLE_CODE(bref.pack(cond_ho_params_common_r16->cond_ho_fr1_fr2_r16_present, 1));
      }
      if (supported_gap_pattern_nr_only_r16_present) {
        HANDLE_CODE(supported_gap_pattern_nr_only_r16.pack(bref));
      }
      if (max_num_cli_rssi_r16_present) {
        HANDLE_CODE(max_num_cli_rssi_r16.pack(bref));
      }
      if (max_num_cli_srs_rsrp_r16_present) {
        HANDLE_CODE(max_num_cli_srs_rsrp_r16.pack(bref));
      }
      if (max_num_per_slot_cli_srs_rsrp_r16_present) {
        HANDLE_CODE(max_num_per_slot_cli_srs_rsrp_r16.pack(bref));
      }
      if (supported_gap_pattern_r16_present) {
        HANDLE_CODE(supported_gap_pattern_r16.pack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(concurrent_meas_gap_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(nr_need_for_gap_ncsg_report_r17_present, 1));
      HANDLE_CODE(bref.pack(eutra_need_for_gap_ncsg_report_r17_present, 1));
      HANDLE_CODE(bref.pack(ncsg_meas_gap_per_fr_r17_present, 1));
      HANDLE_CODE(bref.pack(ncsg_meas_gap_patterns_r17_present, 1));
      HANDLE_CODE(bref.pack(ncsg_meas_gap_nr_patterns_r17_present, 1));
      HANDLE_CODE(bref.pack(precfg_ue_autonomous_meas_gap_r17_present, 1));
      HANDLE_CODE(bref.pack(precfg_nw_ctrl_meas_gap_r17_present, 1));
      HANDLE_CODE(bref.pack(ho_fr1_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.pack(ho_fr2_1_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.pack(independent_gap_cfg_prs_r17_present, 1));
      HANDLE_CODE(bref.pack(rrm_relaxation_rrc_connected_red_cap_r17_present, 1));
      HANDLE_CODE(bref.pack(parallel_meas_gap_r17_present, 1));
      HANDLE_CODE(bref.pack(cond_ho_with_scg_nrdc_r17_present, 1));
      HANDLE_CODE(bref.pack(gnb_id_len_report_r17_present, 1));
      HANDLE_CODE(bref.pack(gnb_id_len_report_endc_r17_present, 1));
      HANDLE_CODE(bref.pack(gnb_id_len_report_nedc_r17_present, 1));
      HANDLE_CODE(bref.pack(gnb_id_len_report_nrdc_r17_present, 1));
      HANDLE_CODE(bref.pack(gnb_id_len_report_npn_r17_present, 1));
      if (concurrent_meas_gap_r17.is_present()) {
        HANDLE_CODE(concurrent_meas_gap_r17->pack(bref));
      }
      if (ncsg_meas_gap_patterns_r17_present) {
        HANDLE_CODE(ncsg_meas_gap_patterns_r17.pack(bref));
      }
      if (ncsg_meas_gap_nr_patterns_r17_present) {
        HANDLE_CODE(ncsg_meas_gap_nr_patterns_r17.pack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(parallel_smtc_r17_present, 1));
      HANDLE_CODE(bref.pack(concurrent_meas_gap_eutra_r17_present, 1));
      HANDLE_CODE(bref.pack(service_link_prop_delay_diff_report_r17_present, 1));
      HANDLE_CODE(bref.pack(ncsg_symbol_level_schedule_restrict_inter_r17_present, 1));
    }
    if (group_flags[7]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(event_d1_meas_report_trigger_r17_present, 1));
      HANDLE_CODE(bref.pack(independent_gap_cfg_max_cc_r17.is_present(), 1));
      if (independent_gap_cfg_max_cc_r17.is_present()) {
        HANDLE_CODE(bref.pack(independent_gap_cfg_max_cc_r17->fr1_only_r17_present, 1));
        HANDLE_CODE(bref.pack(independent_gap_cfg_max_cc_r17->fr2_only_r17_present, 1));
        HANDLE_CODE(bref.pack(independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17_present, 1));
        if (independent_gap_cfg_max_cc_r17->fr1_only_r17_present) {
          HANDLE_CODE(pack_integer(bref, independent_gap_cfg_max_cc_r17->fr1_only_r17, (uint8_t)1u, (uint8_t)32u));
        }
        if (independent_gap_cfg_max_cc_r17->fr2_only_r17_present) {
          HANDLE_CODE(pack_integer(bref, independent_gap_cfg_max_cc_r17->fr2_only_r17, (uint8_t)1u, (uint8_t)32u));
        }
        if (independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17_present) {
          HANDLE_CODE(pack_integer(bref, independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17, (uint8_t)1u, (uint8_t)32u));
        }
      }
    }
    if (group_flags[8]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(inter_sat_meas_r17_present, 1));
      HANDLE_CODE(bref.pack(derive_ssb_idx_from_cell_inter_non_ncsg_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(supported_gap_pattern_present, 1));
  HANDLE_CODE(bref.unpack(ssb_rlm_present, 1));
  HANDLE_CODE(bref.unpack(ssb_and_csi_rs_rlm_present, 1));

  if (supported_gap_pattern_present) {
    HANDLE_CODE(supported_gap_pattern.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(9);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(event_b_meas_and_report_present, 1));
      HANDLE_CODE(bref.unpack(ho_fdd_tdd_present, 1));
      HANDLE_CODE(bref.unpack(eutra_cgi_report_present, 1));
      HANDLE_CODE(bref.unpack(nr_cgi_report_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(independent_gap_cfg_present, 1));
      HANDLE_CODE(bref.unpack(periodic_eutra_meas_and_report_present, 1));
      HANDLE_CODE(bref.unpack(ho_fr1_fr2_present, 1));
      HANDLE_CODE(bref.unpack(max_num_csi_rs_rrm_rs_sinr_present, 1));
      if (max_num_csi_rs_rrm_rs_sinr_present) {
        HANDLE_CODE(max_num_csi_rs_rrm_rs_sinr.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(nr_cgi_report_endc_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(eutra_cgi_report_nedc_present, 1));
      HANDLE_CODE(bref.unpack(eutra_cgi_report_nrdc_present, 1));
      HANDLE_CODE(bref.unpack(nr_cgi_report_nedc_present, 1));
      HANDLE_CODE(bref.unpack(nr_cgi_report_nrdc_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(report_add_neigh_meas_for_periodic_r16_present, 1));
      unpack_presence_flag(cond_ho_params_common_r16, bref);
      HANDLE_CODE(bref.unpack(nr_need_for_gap_report_r16_present, 1));
      HANDLE_CODE(bref.unpack(supported_gap_pattern_nr_only_r16_present, 1));
      HANDLE_CODE(bref.unpack(supported_gap_pattern_nr_only_nedc_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_cli_rssi_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_cli_srs_rsrp_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_per_slot_cli_srs_rsrp_r16_present, 1));
      HANDLE_CODE(bref.unpack(mfbi_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(dummy_present, 1));
      HANDLE_CODE(bref.unpack(nr_cgi_report_npn_r16_present, 1));
      HANDLE_CODE(bref.unpack(idle_inactive_eutra_meas_report_r16_present, 1));
      HANDLE_CODE(bref.unpack(idle_inactive_validity_area_r16_present, 1));
      HANDLE_CODE(bref.unpack(eutra_autonomous_gaps_r16_present, 1));
      HANDLE_CODE(bref.unpack(eutra_autonomous_gaps_nedc_r16_present, 1));
      HANDLE_CODE(bref.unpack(eutra_autonomous_gaps_nrdc_r16_present, 1));
      HANDLE_CODE(bref.unpack(pcell_t312_r16_present, 1));
      HANDLE_CODE(bref.unpack(supported_gap_pattern_r16_present, 1));
      if (cond_ho_params_common_r16.is_present()) {
        HANDLE_CODE(bref.unpack(cond_ho_params_common_r16->cond_ho_fdd_tdd_r16_present, 1));
        HANDLE_CODE(bref.unpack(cond_ho_params_common_r16->cond_ho_fr1_fr2_r16_present, 1));
      }
      if (supported_gap_pattern_nr_only_r16_present) {
        HANDLE_CODE(supported_gap_pattern_nr_only_r16.unpack(bref));
      }
      if (max_num_cli_rssi_r16_present) {
        HANDLE_CODE(max_num_cli_rssi_r16.unpack(bref));
      }
      if (max_num_cli_srs_rsrp_r16_present) {
        HANDLE_CODE(max_num_cli_srs_rsrp_r16.unpack(bref));
      }
      if (max_num_per_slot_cli_srs_rsrp_r16_present) {
        HANDLE_CODE(max_num_per_slot_cli_srs_rsrp_r16.unpack(bref));
      }
      if (supported_gap_pattern_r16_present) {
        HANDLE_CODE(supported_gap_pattern_r16.unpack(bref));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(concurrent_meas_gap_r17, bref);
      HANDLE_CODE(bref.unpack(nr_need_for_gap_ncsg_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(eutra_need_for_gap_ncsg_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(ncsg_meas_gap_per_fr_r17_present, 1));
      HANDLE_CODE(bref.unpack(ncsg_meas_gap_patterns_r17_present, 1));
      HANDLE_CODE(bref.unpack(ncsg_meas_gap_nr_patterns_r17_present, 1));
      HANDLE_CODE(bref.unpack(precfg_ue_autonomous_meas_gap_r17_present, 1));
      HANDLE_CODE(bref.unpack(precfg_nw_ctrl_meas_gap_r17_present, 1));
      HANDLE_CODE(bref.unpack(ho_fr1_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(ho_fr2_1_fr2_2_r17_present, 1));
      HANDLE_CODE(bref.unpack(independent_gap_cfg_prs_r17_present, 1));
      HANDLE_CODE(bref.unpack(rrm_relaxation_rrc_connected_red_cap_r17_present, 1));
      HANDLE_CODE(bref.unpack(parallel_meas_gap_r17_present, 1));
      HANDLE_CODE(bref.unpack(cond_ho_with_scg_nrdc_r17_present, 1));
      HANDLE_CODE(bref.unpack(gnb_id_len_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(gnb_id_len_report_endc_r17_present, 1));
      HANDLE_CODE(bref.unpack(gnb_id_len_report_nedc_r17_present, 1));
      HANDLE_CODE(bref.unpack(gnb_id_len_report_nrdc_r17_present, 1));
      HANDLE_CODE(bref.unpack(gnb_id_len_report_npn_r17_present, 1));
      if (concurrent_meas_gap_r17.is_present()) {
        HANDLE_CODE(concurrent_meas_gap_r17->unpack(bref));
      }
      if (ncsg_meas_gap_patterns_r17_present) {
        HANDLE_CODE(ncsg_meas_gap_patterns_r17.unpack(bref));
      }
      if (ncsg_meas_gap_nr_patterns_r17_present) {
        HANDLE_CODE(ncsg_meas_gap_nr_patterns_r17.unpack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(parallel_smtc_r17_present, 1));
      HANDLE_CODE(bref.unpack(concurrent_meas_gap_eutra_r17_present, 1));
      HANDLE_CODE(bref.unpack(service_link_prop_delay_diff_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(ncsg_symbol_level_schedule_restrict_inter_r17_present, 1));
    }
    if (group_flags[7]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(event_d1_meas_report_trigger_r17_present, 1));
      unpack_presence_flag(independent_gap_cfg_max_cc_r17, bref);
      if (independent_gap_cfg_max_cc_r17.is_present()) {
        HANDLE_CODE(bref.unpack(independent_gap_cfg_max_cc_r17->fr1_only_r17_present, 1));
        HANDLE_CODE(bref.unpack(independent_gap_cfg_max_cc_r17->fr2_only_r17_present, 1));
        HANDLE_CODE(bref.unpack(independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17_present, 1));
        if (independent_gap_cfg_max_cc_r17->fr1_only_r17_present) {
          HANDLE_CODE(unpack_integer(independent_gap_cfg_max_cc_r17->fr1_only_r17, bref, (uint8_t)1u, (uint8_t)32u));
        }
        if (independent_gap_cfg_max_cc_r17->fr2_only_r17_present) {
          HANDLE_CODE(unpack_integer(independent_gap_cfg_max_cc_r17->fr2_only_r17, bref, (uint8_t)1u, (uint8_t)32u));
        }
        if (independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17_present) {
          HANDLE_CODE(unpack_integer(independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17, bref, (uint8_t)1u, (uint8_t)32u));
        }
      }
    }
    if (group_flags[8]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(inter_sat_meas_r17_present, 1));
      HANDLE_CODE(bref.unpack(derive_ssb_idx_from_cell_inter_non_ncsg_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void meas_and_mob_params_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (supported_gap_pattern_present) {
    j.write_str("supportedGapPattern", supported_gap_pattern.to_string());
  }
  if (ssb_rlm_present) {
    j.write_str("ssb-RLM", "supported");
  }
  if (ssb_and_csi_rs_rlm_present) {
    j.write_str("ssb-AndCSI-RS-RLM", "supported");
  }
  if (ext) {
    if (event_b_meas_and_report_present) {
      j.write_str("eventB-MeasAndReport", "supported");
    }
    if (ho_fdd_tdd_present) {
      j.write_str("handoverFDD-TDD", "supported");
    }
    if (eutra_cgi_report_present) {
      j.write_str("eutra-CGI-Reporting", "supported");
    }
    if (nr_cgi_report_present) {
      j.write_str("nr-CGI-Reporting", "supported");
    }
    if (independent_gap_cfg_present) {
      j.write_str("independentGapConfig", "supported");
    }
    if (periodic_eutra_meas_and_report_present) {
      j.write_str("periodicEUTRA-MeasAndReport", "supported");
    }
    if (ho_fr1_fr2_present) {
      j.write_str("handoverFR1-FR2", "supported");
    }
    if (max_num_csi_rs_rrm_rs_sinr_present) {
      j.write_str("maxNumberCSI-RS-RRM-RS-SINR", max_num_csi_rs_rrm_rs_sinr.to_string());
    }
    if (nr_cgi_report_endc_present) {
      j.write_str("nr-CGI-Reporting-ENDC", "supported");
    }
    if (eutra_cgi_report_nedc_present) {
      j.write_str("eutra-CGI-Reporting-NEDC", "supported");
    }
    if (eutra_cgi_report_nrdc_present) {
      j.write_str("eutra-CGI-Reporting-NRDC", "supported");
    }
    if (nr_cgi_report_nedc_present) {
      j.write_str("nr-CGI-Reporting-NEDC", "supported");
    }
    if (nr_cgi_report_nrdc_present) {
      j.write_str("nr-CGI-Reporting-NRDC", "supported");
    }
    if (report_add_neigh_meas_for_periodic_r16_present) {
      j.write_str("reportAddNeighMeasForPeriodic-r16", "supported");
    }
    if (cond_ho_params_common_r16.is_present()) {
      j.write_fieldname("condHandoverParametersCommon-r16");
      j.start_obj();
      if (cond_ho_params_common_r16->cond_ho_fdd_tdd_r16_present) {
        j.write_str("condHandoverFDD-TDD-r16", "supported");
      }
      if (cond_ho_params_common_r16->cond_ho_fr1_fr2_r16_present) {
        j.write_str("condHandoverFR1-FR2-r16", "supported");
      }
      j.end_obj();
    }
    if (nr_need_for_gap_report_r16_present) {
      j.write_str("nr-NeedForGap-Reporting-r16", "supported");
    }
    if (supported_gap_pattern_nr_only_r16_present) {
      j.write_str("supportedGapPattern-NRonly-r16", supported_gap_pattern_nr_only_r16.to_string());
    }
    if (supported_gap_pattern_nr_only_nedc_r16_present) {
      j.write_str("supportedGapPattern-NRonly-NEDC-r16", "supported");
    }
    if (max_num_cli_rssi_r16_present) {
      j.write_str("maxNumberCLI-RSSI-r16", max_num_cli_rssi_r16.to_string());
    }
    if (max_num_cli_srs_rsrp_r16_present) {
      j.write_str("maxNumberCLI-SRS-RSRP-r16", max_num_cli_srs_rsrp_r16.to_string());
    }
    if (max_num_per_slot_cli_srs_rsrp_r16_present) {
      j.write_str("maxNumberPerSlotCLI-SRS-RSRP-r16", max_num_per_slot_cli_srs_rsrp_r16.to_string());
    }
    if (mfbi_iab_r16_present) {
      j.write_str("mfbi-IAB-r16", "supported");
    }
    if (dummy_present) {
      j.write_str("dummy", "supported");
    }
    if (nr_cgi_report_npn_r16_present) {
      j.write_str("nr-CGI-Reporting-NPN-r16", "supported");
    }
    if (idle_inactive_eutra_meas_report_r16_present) {
      j.write_str("idleInactiveEUTRA-MeasReport-r16", "supported");
    }
    if (idle_inactive_validity_area_r16_present) {
      j.write_str("idleInactive-ValidityArea-r16", "supported");
    }
    if (eutra_autonomous_gaps_r16_present) {
      j.write_str("eutra-AutonomousGaps-r16", "supported");
    }
    if (eutra_autonomous_gaps_nedc_r16_present) {
      j.write_str("eutra-AutonomousGaps-NEDC-r16", "supported");
    }
    if (eutra_autonomous_gaps_nrdc_r16_present) {
      j.write_str("eutra-AutonomousGaps-NRDC-r16", "supported");
    }
    if (pcell_t312_r16_present) {
      j.write_str("pcellT312-r16", "supported");
    }
    if (supported_gap_pattern_r16_present) {
      j.write_str("supportedGapPattern-r16", supported_gap_pattern_r16.to_string());
    }
    if (concurrent_meas_gap_r17.is_present()) {
      j.write_fieldname("concurrentMeasGap-r17");
      concurrent_meas_gap_r17->to_json(j);
    }
    if (nr_need_for_gap_ncsg_report_r17_present) {
      j.write_str("nr-NeedForGapNCSG-Reporting-r17", "supported");
    }
    if (eutra_need_for_gap_ncsg_report_r17_present) {
      j.write_str("eutra-NeedForGapNCSG-Reporting-r17", "supported");
    }
    if (ncsg_meas_gap_per_fr_r17_present) {
      j.write_str("ncsg-MeasGapPerFR-r17", "supported");
    }
    if (ncsg_meas_gap_patterns_r17_present) {
      j.write_str("ncsg-MeasGapPatterns-r17", ncsg_meas_gap_patterns_r17.to_string());
    }
    if (ncsg_meas_gap_nr_patterns_r17_present) {
      j.write_str("ncsg-MeasGapNR-Patterns-r17", ncsg_meas_gap_nr_patterns_r17.to_string());
    }
    if (precfg_ue_autonomous_meas_gap_r17_present) {
      j.write_str("preconfiguredUE-AutonomousMeasGap-r17", "supported");
    }
    if (precfg_nw_ctrl_meas_gap_r17_present) {
      j.write_str("preconfiguredNW-ControlledMeasGap-r17", "supported");
    }
    if (ho_fr1_fr2_2_r17_present) {
      j.write_str("handoverFR1-FR2-2-r17", "supported");
    }
    if (ho_fr2_1_fr2_2_r17_present) {
      j.write_str("handoverFR2-1-FR2-2-r17", "supported");
    }
    if (independent_gap_cfg_prs_r17_present) {
      j.write_str("independentGapConfigPRS-r17", "supported");
    }
    if (rrm_relaxation_rrc_connected_red_cap_r17_present) {
      j.write_str("rrm-RelaxationRRC-ConnectedRedCap-r17", "supported");
    }
    if (parallel_meas_gap_r17_present) {
      j.write_str("parallelMeasurementGap-r17", "n2");
    }
    if (cond_ho_with_scg_nrdc_r17_present) {
      j.write_str("condHandoverWithSCG-NRDC-r17", "supported");
    }
    if (gnb_id_len_report_r17_present) {
      j.write_str("gNB-ID-LengthReporting-r17", "supported");
    }
    if (gnb_id_len_report_endc_r17_present) {
      j.write_str("gNB-ID-LengthReporting-ENDC-r17", "supported");
    }
    if (gnb_id_len_report_nedc_r17_present) {
      j.write_str("gNB-ID-LengthReporting-NEDC-r17", "supported");
    }
    if (gnb_id_len_report_nrdc_r17_present) {
      j.write_str("gNB-ID-LengthReporting-NRDC-r17", "supported");
    }
    if (gnb_id_len_report_npn_r17_present) {
      j.write_str("gNB-ID-LengthReporting-NPN-r17", "supported");
    }
    if (parallel_smtc_r17_present) {
      j.write_str("parallelSMTC-r17", "n4");
    }
    if (concurrent_meas_gap_eutra_r17_present) {
      j.write_str("concurrentMeasGapEUTRA-r17", "supported");
    }
    if (service_link_prop_delay_diff_report_r17_present) {
      j.write_str("serviceLinkPropDelayDiffReporting-r17", "supported");
    }
    if (ncsg_symbol_level_schedule_restrict_inter_r17_present) {
      j.write_str("ncsg-SymbolLevelScheduleRestrictionInter-r17", "supported");
    }
    if (event_d1_meas_report_trigger_r17_present) {
      j.write_str("eventD1-MeasReportTrigger-r17", "supported");
    }
    if (independent_gap_cfg_max_cc_r17.is_present()) {
      j.write_fieldname("independentGapConfig-maxCC-r17");
      j.start_obj();
      if (independent_gap_cfg_max_cc_r17->fr1_only_r17_present) {
        j.write_int("fr1-Only-r17", independent_gap_cfg_max_cc_r17->fr1_only_r17);
      }
      if (independent_gap_cfg_max_cc_r17->fr2_only_r17_present) {
        j.write_int("fr2-Only-r17", independent_gap_cfg_max_cc_r17->fr2_only_r17);
      }
      if (independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17_present) {
        j.write_int("fr1-AndFR2-r17", independent_gap_cfg_max_cc_r17->fr1_and_fr2_r17);
      }
      j.end_obj();
    }
    if (inter_sat_meas_r17_present) {
      j.write_str("interSatMeas-r17", "supported");
    }
    if (derive_ssb_idx_from_cell_inter_non_ncsg_r17_present) {
      j.write_str("deriveSSB-IndexFromCellInterNon-NCSG-r17", "supported");
    }
  }
  j.end_obj();
}

const char* meas_and_mob_params_common_s::max_num_csi_rs_rrm_rs_sinr_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32", "n64", "n96"};
  return convert_enum_idx(names, 6, value, "meas_and_mob_params_common_s::max_num_csi_rs_rrm_rs_sinr_e_");
}
uint8_t meas_and_mob_params_common_s::max_num_csi_rs_rrm_rs_sinr_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32, 64, 96};
  return map_enum_number(numbers, 6, value, "meas_and_mob_params_common_s::max_num_csi_rs_rrm_rs_sinr_e_");
}

const char* meas_and_mob_params_common_s::max_num_cli_rssi_r16_opts::to_string() const
{
  static const char* names[] = {"n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 4, value, "meas_and_mob_params_common_s::max_num_cli_rssi_r16_e_");
}
uint8_t meas_and_mob_params_common_s::max_num_cli_rssi_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {8, 16, 32, 64};
  return map_enum_number(numbers, 4, value, "meas_and_mob_params_common_s::max_num_cli_rssi_r16_e_");
}

const char* meas_and_mob_params_common_s::max_num_cli_srs_rsrp_r16_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32"};
  return convert_enum_idx(names, 4, value, "meas_and_mob_params_common_s::max_num_cli_srs_rsrp_r16_e_");
}
uint8_t meas_and_mob_params_common_s::max_num_cli_srs_rsrp_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32};
  return map_enum_number(numbers, 4, value, "meas_and_mob_params_common_s::max_num_cli_srs_rsrp_r16_e_");
}

const char* meas_and_mob_params_common_s::max_num_per_slot_cli_srs_rsrp_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8"};
  return convert_enum_idx(names, 3, value, "meas_and_mob_params_common_s::max_num_per_slot_cli_srs_rsrp_r16_e_");
}
uint8_t meas_and_mob_params_common_s::max_num_per_slot_cli_srs_rsrp_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8};
  return map_enum_number(numbers, 3, value, "meas_and_mob_params_common_s::max_num_per_slot_cli_srs_rsrp_r16_e_");
}

void meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::set(types::options e)
{
  type_ = e;
}
void meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::set_concurrent_per_ue_only_meas_gap_r17()
{
  set(types::concurrent_per_ue_only_meas_gap_r17);
}
void meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::set_concurrent_per_ue_per_fr_comb_meas_gap_r17()
{
  set(types::concurrent_per_ue_per_fr_comb_meas_gap_r17);
}
void meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}
SRSASN_CODE meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_common_s::concurrent_meas_gap_r17_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  return SRSASN_SUCCESS;
}

// MeasAndMobParametersFRX-Diff ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_frx_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ss_sinr_meas_present, 1));
  HANDLE_CODE(bref.pack(csi_rsrp_and_rsrq_meas_with_ssb_present, 1));
  HANDLE_CODE(bref.pack(csi_rsrp_and_rsrq_meas_without_ssb_present, 1));
  HANDLE_CODE(bref.pack(csi_sinr_meas_present, 1));
  HANDLE_CODE(bref.pack(csi_rs_rlm_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ho_inter_f_present;
    group_flags[0] |= ho_lte_epc_present;
    group_flags[0] |= ho_lte_5_gc_present;
    group_flags[1] |= max_num_res_csi_rs_rlm_present;
    group_flags[2] |= simul_rx_data_ssb_diff_numerology_present;
    group_flags[3] |= nr_autonomous_gaps_r16_present;
    group_flags[3] |= nr_autonomous_gaps_endc_r16_present;
    group_flags[3] |= nr_autonomous_gaps_nedc_r16_present;
    group_flags[3] |= nr_autonomous_gaps_nrdc_r16_present;
    group_flags[3] |= dummy_present;
    group_flags[3] |= cli_rssi_meas_r16_present;
    group_flags[3] |= cli_srs_rsrp_meas_r16_present;
    group_flags[3] |= interfreq_meas_no_gap_r16_present;
    group_flags[3] |= simul_rx_data_ssb_diff_numerology_inter_r16_present;
    group_flags[3] |= idle_inactive_nr_meas_report_r16_present;
    group_flags[3] |= idle_inactive_nr_meas_beam_report_r16_present;
    group_flags[4] |= increased_numof_csi_rs_per_mo_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ho_inter_f_present, 1));
      HANDLE_CODE(bref.pack(ho_lte_epc_present, 1));
      HANDLE_CODE(bref.pack(ho_lte_5_gc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_num_res_csi_rs_rlm_present, 1));
      if (max_num_res_csi_rs_rlm_present) {
        HANDLE_CODE(max_num_res_csi_rs_rlm.pack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(simul_rx_data_ssb_diff_numerology_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(nr_autonomous_gaps_r16_present, 1));
      HANDLE_CODE(bref.pack(nr_autonomous_gaps_endc_r16_present, 1));
      HANDLE_CODE(bref.pack(nr_autonomous_gaps_nedc_r16_present, 1));
      HANDLE_CODE(bref.pack(nr_autonomous_gaps_nrdc_r16_present, 1));
      HANDLE_CODE(bref.pack(dummy_present, 1));
      HANDLE_CODE(bref.pack(cli_rssi_meas_r16_present, 1));
      HANDLE_CODE(bref.pack(cli_srs_rsrp_meas_r16_present, 1));
      HANDLE_CODE(bref.pack(interfreq_meas_no_gap_r16_present, 1));
      HANDLE_CODE(bref.pack(simul_rx_data_ssb_diff_numerology_inter_r16_present, 1));
      HANDLE_CODE(bref.pack(idle_inactive_nr_meas_report_r16_present, 1));
      HANDLE_CODE(bref.pack(idle_inactive_nr_meas_beam_report_r16_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(increased_numof_csi_rs_per_mo_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_frx_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ss_sinr_meas_present, 1));
  HANDLE_CODE(bref.unpack(csi_rsrp_and_rsrq_meas_with_ssb_present, 1));
  HANDLE_CODE(bref.unpack(csi_rsrp_and_rsrq_meas_without_ssb_present, 1));
  HANDLE_CODE(bref.unpack(csi_sinr_meas_present, 1));
  HANDLE_CODE(bref.unpack(csi_rs_rlm_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(5);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ho_inter_f_present, 1));
      HANDLE_CODE(bref.unpack(ho_lte_epc_present, 1));
      HANDLE_CODE(bref.unpack(ho_lte_5_gc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_num_res_csi_rs_rlm_present, 1));
      if (max_num_res_csi_rs_rlm_present) {
        HANDLE_CODE(max_num_res_csi_rs_rlm.unpack(bref));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(simul_rx_data_ssb_diff_numerology_present, 1));
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(nr_autonomous_gaps_r16_present, 1));
      HANDLE_CODE(bref.unpack(nr_autonomous_gaps_endc_r16_present, 1));
      HANDLE_CODE(bref.unpack(nr_autonomous_gaps_nedc_r16_present, 1));
      HANDLE_CODE(bref.unpack(nr_autonomous_gaps_nrdc_r16_present, 1));
      HANDLE_CODE(bref.unpack(dummy_present, 1));
      HANDLE_CODE(bref.unpack(cli_rssi_meas_r16_present, 1));
      HANDLE_CODE(bref.unpack(cli_srs_rsrp_meas_r16_present, 1));
      HANDLE_CODE(bref.unpack(interfreq_meas_no_gap_r16_present, 1));
      HANDLE_CODE(bref.unpack(simul_rx_data_ssb_diff_numerology_inter_r16_present, 1));
      HANDLE_CODE(bref.unpack(idle_inactive_nr_meas_report_r16_present, 1));
      HANDLE_CODE(bref.unpack(idle_inactive_nr_meas_beam_report_r16_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(increased_numof_csi_rs_per_mo_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void meas_and_mob_params_frx_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ss_sinr_meas_present) {
    j.write_str("ss-SINR-Meas", "supported");
  }
  if (csi_rsrp_and_rsrq_meas_with_ssb_present) {
    j.write_str("csi-RSRP-AndRSRQ-MeasWithSSB", "supported");
  }
  if (csi_rsrp_and_rsrq_meas_without_ssb_present) {
    j.write_str("csi-RSRP-AndRSRQ-MeasWithoutSSB", "supported");
  }
  if (csi_sinr_meas_present) {
    j.write_str("csi-SINR-Meas", "supported");
  }
  if (csi_rs_rlm_present) {
    j.write_str("csi-RS-RLM", "supported");
  }
  if (ext) {
    if (ho_inter_f_present) {
      j.write_str("handoverInterF", "supported");
    }
    if (ho_lte_epc_present) {
      j.write_str("handoverLTE-EPC", "supported");
    }
    if (ho_lte_5_gc_present) {
      j.write_str("handoverLTE-5GC", "supported");
    }
    if (max_num_res_csi_rs_rlm_present) {
      j.write_str("maxNumberResource-CSI-RS-RLM", max_num_res_csi_rs_rlm.to_string());
    }
    if (simul_rx_data_ssb_diff_numerology_present) {
      j.write_str("simultaneousRxDataSSB-DiffNumerology", "supported");
    }
    if (nr_autonomous_gaps_r16_present) {
      j.write_str("nr-AutonomousGaps-r16", "supported");
    }
    if (nr_autonomous_gaps_endc_r16_present) {
      j.write_str("nr-AutonomousGaps-ENDC-r16", "supported");
    }
    if (nr_autonomous_gaps_nedc_r16_present) {
      j.write_str("nr-AutonomousGaps-NEDC-r16", "supported");
    }
    if (nr_autonomous_gaps_nrdc_r16_present) {
      j.write_str("nr-AutonomousGaps-NRDC-r16", "supported");
    }
    if (dummy_present) {
      j.write_str("dummy", "supported");
    }
    if (cli_rssi_meas_r16_present) {
      j.write_str("cli-RSSI-Meas-r16", "supported");
    }
    if (cli_srs_rsrp_meas_r16_present) {
      j.write_str("cli-SRS-RSRP-Meas-r16", "supported");
    }
    if (interfreq_meas_no_gap_r16_present) {
      j.write_str("interFrequencyMeas-NoGap-r16", "supported");
    }
    if (simul_rx_data_ssb_diff_numerology_inter_r16_present) {
      j.write_str("simultaneousRxDataSSB-DiffNumerology-Inter-r16", "supported");
    }
    if (idle_inactive_nr_meas_report_r16_present) {
      j.write_str("idleInactiveNR-MeasReport-r16", "supported");
    }
    if (idle_inactive_nr_meas_beam_report_r16_present) {
      j.write_str("idleInactiveNR-MeasBeamReport-r16", "supported");
    }
    if (increased_numof_csi_rs_per_mo_r16_present) {
      j.write_str("increasedNumberofCSIRSPerMO-r16", "supported");
    }
  }
  j.end_obj();
}

const char* meas_and_mob_params_frx_diff_s::max_num_res_csi_rs_rlm_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n6", "n8"};
  return convert_enum_idx(names, 4, value, "meas_and_mob_params_frx_diff_s::max_num_res_csi_rs_rlm_e_");
}
uint8_t meas_and_mob_params_frx_diff_s::max_num_res_csi_rs_rlm_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 6, 8};
  return map_enum_number(numbers, 4, value, "meas_and_mob_params_frx_diff_s::max_num_res_csi_rs_rlm_e_");
}

// MeasAndMobParametersXDD-Diff ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_xdd_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(intra_and_inter_f_meas_and_report_present, 1));
  HANDLE_CODE(bref.pack(event_a_meas_and_report_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= ho_inter_f_present;
    group_flags[0] |= ho_lte_epc_present;
    group_flags[0] |= ho_lte_5_gc_present;
    group_flags[1] |= sftd_meas_nr_neigh_present;
    group_flags[1] |= sftd_meas_nr_neigh_drx_present;
    group_flags[2] |= dummy_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ho_inter_f_present, 1));
      HANDLE_CODE(bref.pack(ho_lte_epc_present, 1));
      HANDLE_CODE(bref.pack(ho_lte_5_gc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sftd_meas_nr_neigh_present, 1));
      HANDLE_CODE(bref.pack(sftd_meas_nr_neigh_drx_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dummy_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_xdd_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(intra_and_inter_f_meas_and_report_present, 1));
  HANDLE_CODE(bref.unpack(event_a_meas_and_report_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(3);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ho_inter_f_present, 1));
      HANDLE_CODE(bref.unpack(ho_lte_epc_present, 1));
      HANDLE_CODE(bref.unpack(ho_lte_5_gc_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sftd_meas_nr_neigh_present, 1));
      HANDLE_CODE(bref.unpack(sftd_meas_nr_neigh_drx_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dummy_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void meas_and_mob_params_xdd_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (intra_and_inter_f_meas_and_report_present) {
    j.write_str("intraAndInterF-MeasAndReport", "supported");
  }
  if (event_a_meas_and_report_present) {
    j.write_str("eventA-MeasAndReport", "supported");
  }
  if (ext) {
    if (ho_inter_f_present) {
      j.write_str("handoverInterF", "supported");
    }
    if (ho_lte_epc_present) {
      j.write_str("handoverLTE-EPC", "supported");
    }
    if (ho_lte_5_gc_present) {
      j.write_str("handoverLTE-5GC", "supported");
    }
    if (sftd_meas_nr_neigh_present) {
      j.write_str("sftd-MeasNR-Neigh", "supported");
    }
    if (sftd_meas_nr_neigh_drx_present) {
      j.write_str("sftd-MeasNR-Neigh-DRX", "supported");
    }
    if (dummy_present) {
      j.write_str("dummy", "supported");
    }
  }
  j.end_obj();
}

// MeasAndMobParameters ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_common_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_frx_diff_present, 1));

  if (meas_and_mob_params_common_present) {
    HANDLE_CODE(meas_and_mob_params_common.pack(bref));
  }
  if (meas_and_mob_params_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_xdd_diff.pack(bref));
  }
  if (meas_and_mob_params_frx_diff_present) {
    HANDLE_CODE(meas_and_mob_params_frx_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_common_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_frx_diff_present, 1));

  if (meas_and_mob_params_common_present) {
    HANDLE_CODE(meas_and_mob_params_common.unpack(bref));
  }
  if (meas_and_mob_params_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_xdd_diff.unpack(bref));
  }
  if (meas_and_mob_params_frx_diff_present) {
    HANDLE_CODE(meas_and_mob_params_frx_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_common_present) {
    j.write_fieldname("measAndMobParametersCommon");
    meas_and_mob_params_common.to_json(j);
  }
  if (meas_and_mob_params_xdd_diff_present) {
    j.write_fieldname("measAndMobParametersXDD-Diff");
    meas_and_mob_params_xdd_diff.to_json(j);
  }
  if (meas_and_mob_params_frx_diff_present) {
    j.write_fieldname("measAndMobParametersFRX-Diff");
    meas_and_mob_params_frx_diff.to_json(j);
  }
  j.end_obj();
}

// MeasAndMobParametersFR2-2-r17 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_fr2_2_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ho_inter_f_r17_present, 1));
  HANDLE_CODE(bref.pack(ho_lte_epc_r17_present, 1));
  HANDLE_CODE(bref.pack(ho_lte_5_gc_r17_present, 1));
  HANDLE_CODE(bref.pack(idle_inactive_nr_meas_report_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_fr2_2_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ho_inter_f_r17_present, 1));
  HANDLE_CODE(bref.unpack(ho_lte_epc_r17_present, 1));
  HANDLE_CODE(bref.unpack(ho_lte_5_gc_r17_present, 1));
  HANDLE_CODE(bref.unpack(idle_inactive_nr_meas_report_r17_present, 1));

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_fr2_2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ho_inter_f_r17_present) {
    j.write_str("handoverInterF-r17", "supported");
  }
  if (ho_lte_epc_r17_present) {
    j.write_str("handoverLTE-EPC-r17", "supported");
  }
  if (ho_lte_5_gc_r17_present) {
    j.write_str("handoverLTE-5GC-r17", "supported");
  }
  if (idle_inactive_nr_meas_report_r17_present) {
    j.write_str("idleInactiveNR-MeasReport-r17", "supported");
  }
  j.end_obj();
}

// MeasAndMobParameters-v1700 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_fr2_2_r17_present, 1));

  if (meas_and_mob_params_fr2_2_r17_present) {
    HANDLE_CODE(meas_and_mob_params_fr2_2_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_fr2_2_r17_present, 1));

  if (meas_and_mob_params_fr2_2_r17_present) {
    HANDLE_CODE(meas_and_mob_params_fr2_2_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_fr2_2_r17_present) {
    j.write_fieldname("measAndMobParametersFR2-2-r17");
    meas_and_mob_params_fr2_2_r17.to_json(j);
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-Common ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_common_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(independent_gap_cfg_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_common_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(independent_gap_cfg_present, 1));

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (independent_gap_cfg_present) {
    j.write_str("independentGapConfig", "supported");
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-FRX-Diff ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_frx_diff_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(simul_rx_data_ssb_diff_numerology_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_frx_diff_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(simul_rx_data_ssb_diff_numerology_present, 1));

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_frx_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (simul_rx_data_ssb_diff_numerology_present) {
    j.write_str("simultaneousRxDataSSB-DiffNumerology", "supported");
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-XDD-Diff ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_xdd_diff_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sftd_meas_pscell_present, 1));
  HANDLE_CODE(bref.pack(sftd_meas_nr_cell_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_xdd_diff_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sftd_meas_pscell_present, 1));
  HANDLE_CODE(bref.unpack(sftd_meas_nr_cell_present, 1));

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_xdd_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sftd_meas_pscell_present) {
    j.write_str("sftd-MeasPSCell", "supported");
  }
  if (sftd_meas_nr_cell_present) {
    j.write_str("sftd-MeasNR-Cell", "supported");
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_common_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_xdd_diff_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_frx_diff_present, 1));

  if (meas_and_mob_params_mrdc_common_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common.pack(bref));
  }
  if (meas_and_mob_params_mrdc_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff.pack(bref));
  }
  if (meas_and_mob_params_mrdc_frx_diff_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_frx_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_common_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_xdd_diff_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_frx_diff_present, 1));

  if (meas_and_mob_params_mrdc_common_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common.unpack(bref));
  }
  if (meas_and_mob_params_mrdc_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff.unpack(bref));
  }
  if (meas_and_mob_params_mrdc_frx_diff_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_frx_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_common_present) {
    j.write_fieldname("measAndMobParametersMRDC-Common");
    meas_and_mob_params_mrdc_common.to_json(j);
  }
  if (meas_and_mob_params_mrdc_xdd_diff_present) {
    j.write_fieldname("measAndMobParametersMRDC-XDD-Diff");
    meas_and_mob_params_mrdc_xdd_diff.to_json(j);
  }
  if (meas_and_mob_params_mrdc_frx_diff_present) {
    j.write_fieldname("measAndMobParametersMRDC-FRX-Diff");
    meas_and_mob_params_mrdc_frx_diff.to_json(j);
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-Common-v1610 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_common_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cond_pscell_change_params_common_r16_present, 1));
  HANDLE_CODE(bref.pack(pscell_t312_r16_present, 1));

  if (cond_pscell_change_params_common_r16_present) {
    HANDLE_CODE(bref.pack(cond_pscell_change_params_common_r16.cond_pscell_change_fdd_tdd_r16_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_common_r16.cond_pscell_change_fr1_fr2_r16_present, 1));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_common_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cond_pscell_change_params_common_r16_present, 1));
  HANDLE_CODE(bref.unpack(pscell_t312_r16_present, 1));

  if (cond_pscell_change_params_common_r16_present) {
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_common_r16.cond_pscell_change_fdd_tdd_r16_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_common_r16.cond_pscell_change_fr1_fr2_r16_present, 1));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_common_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cond_pscell_change_params_common_r16_present) {
    j.write_fieldname("condPSCellChangeParametersCommon-r16");
    j.start_obj();
    if (cond_pscell_change_params_common_r16.cond_pscell_change_fdd_tdd_r16_present) {
      j.write_str("condPSCellChangeFDD-TDD-r16", "supported");
    }
    if (cond_pscell_change_params_common_r16.cond_pscell_change_fr1_fr2_r16_present) {
      j.write_str("condPSCellChangeFR1-FR2-r16", "supported");
    }
    j.end_obj();
  }
  if (pscell_t312_r16_present) {
    j.write_str("pscellT312-r16", "supported");
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-v1610 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_common_v1610_present, 1));
  HANDLE_CODE(bref.pack(inter_nr_meas_eutra_iab_r16_present, 1));

  if (meas_and_mob_params_mrdc_common_v1610_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common_v1610.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_common_v1610_present, 1));
  HANDLE_CODE(bref.unpack(inter_nr_meas_eutra_iab_r16_present, 1));

  if (meas_and_mob_params_mrdc_common_v1610_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common_v1610.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_common_v1610_present) {
    j.write_fieldname("measAndMobParametersMRDC-Common-v1610");
    meas_and_mob_params_mrdc_common_v1610.to_json(j);
  }
  if (inter_nr_meas_eutra_iab_r16_present) {
    j.write_str("interNR-MeasEUTRA-IAB-r16", "supported");
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-Common-v1700 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_common_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(cond_pscell_change_params_r17_present, 1));
  HANDLE_CODE(bref.pack(cond_ho_with_scg_endc_r17_present, 1));
  HANDLE_CODE(bref.pack(cond_ho_with_scg_nedc_r17_present, 1));

  if (cond_pscell_change_params_r17_present) {
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fdd_tdd_nrdc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fr1_fr2_nrdc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fdd_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fr1_fr2_endc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr1_fdd_endc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr1_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr2_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr1_fdd_endc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr1_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.pack(cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr2_tdd_endc_r17_present, 1));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_common_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17_present, 1));
  HANDLE_CODE(bref.unpack(cond_ho_with_scg_endc_r17_present, 1));
  HANDLE_CODE(bref.unpack(cond_ho_with_scg_nedc_r17_present, 1));

  if (cond_pscell_change_params_r17_present) {
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fdd_tdd_nrdc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fr1_fr2_nrdc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fdd_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fr1_fr2_endc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr1_fdd_endc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr1_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr2_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr1_fdd_endc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr1_tdd_endc_r17_present, 1));
    HANDLE_CODE(bref.unpack(cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr2_tdd_endc_r17_present, 1));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_common_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (cond_pscell_change_params_r17_present) {
    j.write_fieldname("condPSCellChangeParameters-r17");
    j.start_obj();
    if (cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fdd_tdd_nrdc_r17_present) {
      j.write_str("inter-SN-condPSCellChangeFDD-TDD-NRDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fr1_fr2_nrdc_r17_present) {
      j.write_str("inter-SN-condPSCellChangeFR1-FR2-NRDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fdd_tdd_endc_r17_present) {
      j.write_str("inter-SN-condPSCellChangeFDD-TDD-ENDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.inter_sn_cond_pscell_change_fr1_fr2_endc_r17_present) {
      j.write_str("inter-SN-condPSCellChangeFR1-FR2-ENDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr1_fdd_endc_r17_present) {
      j.write_str("mn-InitiatedCondPSCellChange-FR1FDD-ENDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr1_tdd_endc_r17_present) {
      j.write_str("mn-InitiatedCondPSCellChange-FR1TDD-ENDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.mn_initiated_cond_pscell_change_fr2_tdd_endc_r17_present) {
      j.write_str("mn-InitiatedCondPSCellChange-FR2TDD-ENDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr1_fdd_endc_r17_present) {
      j.write_str("sn-InitiatedCondPSCellChange-FR1FDD-ENDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr1_tdd_endc_r17_present) {
      j.write_str("sn-InitiatedCondPSCellChange-FR1TDD-ENDC-r17", "supported");
    }
    if (cond_pscell_change_params_r17.sn_initiated_cond_pscell_change_fr2_tdd_endc_r17_present) {
      j.write_str("sn-InitiatedCondPSCellChange-FR2TDD-ENDC-r17", "supported");
    }
    j.end_obj();
  }
  if (cond_ho_with_scg_endc_r17_present) {
    j.write_str("condHandoverWithSCG-ENDC-r17", "supported");
  }
  if (cond_ho_with_scg_nedc_r17_present) {
    j.write_str("condHandoverWithSCG-NEDC-r17", "supported");
  }
  j.end_obj();
}

// MeasAndMobParametersMRDC-v1700 ::= SEQUENCE
SRSASN_CODE meas_and_mob_params_mrdc_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_common_v1700_present, 1));

  if (meas_and_mob_params_mrdc_common_v1700_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common_v1700.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_and_mob_params_mrdc_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_common_v1700_present, 1));

  if (meas_and_mob_params_mrdc_common_v1700_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_common_v1700.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void meas_and_mob_params_mrdc_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_common_v1700_present) {
    j.write_fieldname("measAndMobParametersMRDC-Common-v1700");
    meas_and_mob_params_mrdc_common_v1700.to_json(j);
  }
  j.end_obj();
}

// GeneralParametersMRDC-XDD-Diff ::= SEQUENCE
SRSASN_CODE general_params_mrdc_xdd_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(split_srb_with_one_ul_path_present, 1));
  HANDLE_CODE(bref.pack(split_drb_with_ul_both_mcg_scg_present, 1));
  HANDLE_CODE(bref.pack(srb3_present, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE general_params_mrdc_xdd_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(split_srb_with_one_ul_path_present, 1));
  HANDLE_CODE(bref.unpack(split_drb_with_ul_both_mcg_scg_present, 1));
  HANDLE_CODE(bref.unpack(srb3_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));

  return SRSASN_SUCCESS;
}
void general_params_mrdc_xdd_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (split_srb_with_one_ul_path_present) {
    j.write_str("splitSRB-WithOneUL-Path", "supported");
  }
  if (split_drb_with_ul_both_mcg_scg_present) {
    j.write_str("splitDRB-withUL-Both-MCG-SCG", "supported");
  }
  if (srb3_present) {
    j.write_str("srb3", "supported");
  }
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  j.end_obj();
}

// UE-MRDC-CapabilityAddFRX-Mode ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_add_frx_mode_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(meas_and_mob_params_mrdc_frx_diff.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_add_frx_mode_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(meas_and_mob_params_mrdc_frx_diff.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_add_frx_mode_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("measAndMobParametersMRDC-FRX-Diff");
  meas_and_mob_params_mrdc_frx_diff.to_json(j);
  j.end_obj();
}

// UE-MRDC-CapabilityAddXDD-Mode ::= SEQUENCE
SRSASN_CODE ue_mrdc_cap_add_xdd_mode_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_mrdc_xdd_diff_present, 1));
  HANDLE_CODE(bref.pack(general_params_mrdc_xdd_diff_present, 1));

  if (meas_and_mob_params_mrdc_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff.pack(bref));
  }
  if (general_params_mrdc_xdd_diff_present) {
    HANDLE_CODE(general_params_mrdc_xdd_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_mrdc_cap_add_xdd_mode_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_mrdc_xdd_diff_present, 1));
  HANDLE_CODE(bref.unpack(general_params_mrdc_xdd_diff_present, 1));

  if (meas_and_mob_params_mrdc_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_mrdc_xdd_diff.unpack(bref));
  }
  if (general_params_mrdc_xdd_diff_present) {
    HANDLE_CODE(general_params_mrdc_xdd_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_mrdc_cap_add_xdd_mode_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_mrdc_xdd_diff_present) {
    j.write_fieldname("measAndMobParametersMRDC-XDD-Diff");
    meas_and_mob_params_mrdc_xdd_diff.to_json(j);
  }
  if (general_params_mrdc_xdd_diff_present) {
    j.write_fieldname("generalParametersMRDC-XDD-Diff");
    general_params_mrdc_xdd_diff.to_json(j);
  }
  j.end_obj();
}

// NRDC-Parameters ::= SEQUENCE
SRSASN_CODE nrdc_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_nrdc_present, 1));
  HANDLE_CODE(bref.pack(general_params_nrdc_present, 1));
  HANDLE_CODE(bref.pack(fdd_add_ue_nrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(tdd_add_ue_nrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(fr1_add_ue_nrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(fr2_add_ue_nrdc_cap_present, 1));
  HANDLE_CODE(bref.pack(dummy2.size() > 0, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));

  if (meas_and_mob_params_nrdc_present) {
    HANDLE_CODE(meas_and_mob_params_nrdc.pack(bref));
  }
  if (general_params_nrdc_present) {
    HANDLE_CODE(general_params_nrdc.pack(bref));
  }
  if (fdd_add_ue_nrdc_cap_present) {
    HANDLE_CODE(fdd_add_ue_nrdc_cap.pack(bref));
  }
  if (tdd_add_ue_nrdc_cap_present) {
    HANDLE_CODE(tdd_add_ue_nrdc_cap.pack(bref));
  }
  if (fr1_add_ue_nrdc_cap_present) {
    HANDLE_CODE(fr1_add_ue_nrdc_cap.pack(bref));
  }
  if (fr2_add_ue_nrdc_cap_present) {
    HANDLE_CODE(fr2_add_ue_nrdc_cap.pack(bref));
  }
  if (dummy2.size() > 0) {
    HANDLE_CODE(dummy2.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE nrdc_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_nrdc_present, 1));
  HANDLE_CODE(bref.unpack(general_params_nrdc_present, 1));
  HANDLE_CODE(bref.unpack(fdd_add_ue_nrdc_cap_present, 1));
  HANDLE_CODE(bref.unpack(tdd_add_ue_nrdc_cap_present, 1));
  HANDLE_CODE(bref.unpack(fr1_add_ue_nrdc_cap_present, 1));
  HANDLE_CODE(bref.unpack(fr2_add_ue_nrdc_cap_present, 1));
  bool dummy2_present;
  HANDLE_CODE(bref.unpack(dummy2_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));

  if (meas_and_mob_params_nrdc_present) {
    HANDLE_CODE(meas_and_mob_params_nrdc.unpack(bref));
  }
  if (general_params_nrdc_present) {
    HANDLE_CODE(general_params_nrdc.unpack(bref));
  }
  if (fdd_add_ue_nrdc_cap_present) {
    HANDLE_CODE(fdd_add_ue_nrdc_cap.unpack(bref));
  }
  if (tdd_add_ue_nrdc_cap_present) {
    HANDLE_CODE(tdd_add_ue_nrdc_cap.unpack(bref));
  }
  if (fr1_add_ue_nrdc_cap_present) {
    HANDLE_CODE(fr1_add_ue_nrdc_cap.unpack(bref));
  }
  if (fr2_add_ue_nrdc_cap_present) {
    HANDLE_CODE(fr2_add_ue_nrdc_cap.unpack(bref));
  }
  if (dummy2_present) {
    HANDLE_CODE(dummy2.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void nrdc_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_nrdc_present) {
    j.write_fieldname("measAndMobParametersNRDC");
    meas_and_mob_params_nrdc.to_json(j);
  }
  if (general_params_nrdc_present) {
    j.write_fieldname("generalParametersNRDC");
    general_params_nrdc.to_json(j);
  }
  if (fdd_add_ue_nrdc_cap_present) {
    j.write_fieldname("fdd-Add-UE-NRDC-Capabilities");
    fdd_add_ue_nrdc_cap.to_json(j);
  }
  if (tdd_add_ue_nrdc_cap_present) {
    j.write_fieldname("tdd-Add-UE-NRDC-Capabilities");
    tdd_add_ue_nrdc_cap.to_json(j);
  }
  if (fr1_add_ue_nrdc_cap_present) {
    j.write_fieldname("fr1-Add-UE-NRDC-Capabilities");
    fr1_add_ue_nrdc_cap.to_json(j);
  }
  if (fr2_add_ue_nrdc_cap_present) {
    j.write_fieldname("fr2-Add-UE-NRDC-Capabilities");
    fr2_add_ue_nrdc_cap.to_json(j);
  }
  if (dummy2.size() > 0) {
    j.write_str("dummy2", dummy2.to_string());
  }
  if (dummy_present) {
    j.write_fieldname("dummy");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// NRDC-Parameters-v1610 ::= SEQUENCE
SRSASN_CODE nrdc_params_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_and_mob_params_nrdc_v1610_present, 1));

  if (meas_and_mob_params_nrdc_v1610_present) {
    HANDLE_CODE(meas_and_mob_params_nrdc_v1610.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE nrdc_params_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_and_mob_params_nrdc_v1610_present, 1));

  if (meas_and_mob_params_nrdc_v1610_present) {
    HANDLE_CODE(meas_and_mob_params_nrdc_v1610.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void nrdc_params_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_and_mob_params_nrdc_v1610_present) {
    j.write_fieldname("measAndMobParametersNRDC-v1610");
    meas_and_mob_params_nrdc_v1610.to_json(j);
  }
  j.end_obj();
}

// NRDC-Parameters-v1700 ::= SEQUENCE
SRSASN_CODE nrdc_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(f1c_over_nr_rrc_r17_present, 1));

  HANDLE_CODE(meas_and_mob_params_nrdc_v1700.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE nrdc_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(f1c_over_nr_rrc_r17_present, 1));

  HANDLE_CODE(meas_and_mob_params_nrdc_v1700.unpack(bref));

  return SRSASN_SUCCESS;
}
void nrdc_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (f1c_over_nr_rrc_r17_present) {
    j.write_str("f1c-OverNR-RRC-r17", "supported");
  }
  j.write_fieldname("measAndMobParametersNRDC-v1700");
  meas_and_mob_params_nrdc_v1700.to_json(j);
  j.end_obj();
}

// CarrierAggregationVariant ::= SEQUENCE
SRSASN_CODE carrier_aggregation_variant_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fr1fdd_fr1_tdd_ca_sp_cell_on_fr1_fdd_present, 1));
  HANDLE_CODE(bref.pack(fr1fdd_fr1_tdd_ca_sp_cell_on_fr1_tdd_present, 1));
  HANDLE_CODE(bref.pack(fr1fdd_fr2_tdd_ca_sp_cell_on_fr1_fdd_present, 1));
  HANDLE_CODE(bref.pack(fr1fdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present, 1));
  HANDLE_CODE(bref.pack(fr1tdd_fr2_tdd_ca_sp_cell_on_fr1_tdd_present, 1));
  HANDLE_CODE(bref.pack(fr1tdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present, 1));
  HANDLE_CODE(bref.pack(fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr1_fdd_present, 1));
  HANDLE_CODE(bref.pack(fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr1_tdd_present, 1));
  HANDLE_CODE(bref.pack(fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE carrier_aggregation_variant_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fr1fdd_fr1_tdd_ca_sp_cell_on_fr1_fdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1fdd_fr1_tdd_ca_sp_cell_on_fr1_tdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1fdd_fr2_tdd_ca_sp_cell_on_fr1_fdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1fdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1tdd_fr2_tdd_ca_sp_cell_on_fr1_tdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1tdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr1_fdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr1_tdd_present, 1));
  HANDLE_CODE(bref.unpack(fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present, 1));

  return SRSASN_SUCCESS;
}
void carrier_aggregation_variant_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fr1fdd_fr1_tdd_ca_sp_cell_on_fr1_fdd_present) {
    j.write_str("fr1fdd-FR1TDD-CA-SpCellOnFR1FDD", "supported");
  }
  if (fr1fdd_fr1_tdd_ca_sp_cell_on_fr1_tdd_present) {
    j.write_str("fr1fdd-FR1TDD-CA-SpCellOnFR1TDD", "supported");
  }
  if (fr1fdd_fr2_tdd_ca_sp_cell_on_fr1_fdd_present) {
    j.write_str("fr1fdd-FR2TDD-CA-SpCellOnFR1FDD", "supported");
  }
  if (fr1fdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present) {
    j.write_str("fr1fdd-FR2TDD-CA-SpCellOnFR2TDD", "supported");
  }
  if (fr1tdd_fr2_tdd_ca_sp_cell_on_fr1_tdd_present) {
    j.write_str("fr1tdd-FR2TDD-CA-SpCellOnFR1TDD", "supported");
  }
  if (fr1tdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present) {
    j.write_str("fr1tdd-FR2TDD-CA-SpCellOnFR2TDD", "supported");
  }
  if (fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr1_fdd_present) {
    j.write_str("fr1fdd-FR1TDD-FR2TDD-CA-SpCellOnFR1FDD", "supported");
  }
  if (fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr1_tdd_present) {
    j.write_str("fr1fdd-FR1TDD-FR2TDD-CA-SpCellOnFR1TDD", "supported");
  }
  if (fr1fdd_fr1_tdd_fr2_tdd_ca_sp_cell_on_fr2_tdd_present) {
    j.write_str("fr1fdd-FR1TDD-FR2TDD-CA-SpCellOnFR2TDD", "supported");
  }
  j.end_obj();
}

// Phy-ParametersCommon ::= SEQUENCE
SRSASN_CODE phy_params_common_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(csi_rs_cfra_for_ho_present, 1));
  HANDLE_CODE(bref.pack(dyn_prb_bundling_dl_present, 1));
  HANDLE_CODE(bref.pack(sp_csi_report_pucch_present, 1));
  HANDLE_CODE(bref.pack(sp_csi_report_pusch_present, 1));
  HANDLE_CODE(bref.pack(nzp_csi_rs_intef_mgmt_present, 1));
  HANDLE_CODE(bref.pack(type2_sp_csi_feedback_long_pucch_present, 1));
  HANDLE_CODE(bref.pack(precoder_granularity_coreset_present, 1));
  HANDLE_CODE(bref.pack(dyn_harq_ack_codebook_present, 1));
  HANDLE_CODE(bref.pack(semi_static_harq_ack_codebook_present, 1));
  HANDLE_CODE(bref.pack(spatial_bundling_harq_ack_present, 1));
  HANDLE_CODE(bref.pack(dyn_beta_offset_ind_harq_ack_csi_present, 1));
  HANDLE_CODE(bref.pack(pucch_repeat_f1_3_4_present, 1));
  HANDLE_CODE(bref.pack(ra_type0_pusch_present, 1));
  HANDLE_CODE(bref.pack(dyn_switch_ra_type0_1_pdsch_present, 1));
  HANDLE_CODE(bref.pack(dyn_switch_ra_type0_1_pusch_present, 1));
  HANDLE_CODE(bref.pack(pdsch_map_type_a_present, 1));
  HANDLE_CODE(bref.pack(pdsch_map_type_b_present, 1));
  HANDLE_CODE(bref.pack(interleaving_vrb_to_prb_pdsch_present, 1));
  HANDLE_CODE(bref.pack(inter_slot_freq_hop_pusch_present, 1));
  HANDLE_CODE(bref.pack(type1_pusch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.pack(type2_pusch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.pack(pusch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.pack(pdsch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.pack(dl_sps_present, 1));
  HANDLE_CODE(bref.pack(cfg_ul_grant_type1_present, 1));
  HANDLE_CODE(bref.pack(cfg_ul_grant_type2_present, 1));
  HANDLE_CODE(bref.pack(pre_empt_ind_dl_present, 1));
  HANDLE_CODE(bref.pack(cbg_trans_ind_dl_present, 1));
  HANDLE_CODE(bref.pack(cbg_trans_ind_ul_present, 1));
  HANDLE_CODE(bref.pack(cbg_flush_ind_dl_present, 1));
  HANDLE_CODE(bref.pack(dyn_harq_ack_code_b_cbg_retx_dl_present, 1));
  HANDLE_CODE(bref.pack(rate_matching_resrc_set_semi_static_present, 1));
  HANDLE_CODE(bref.pack(rate_matching_resrc_set_dyn_present, 1));
  HANDLE_CODE(bref.pack(bwp_switching_delay_present, 1));

  if (bwp_switching_delay_present) {
    HANDLE_CODE(bwp_switching_delay.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= dummy_present;
    group_flags[1] |= max_num_search_spaces_present;
    group_flags[1] |= rate_matching_ctrl_resrc_set_dyn_present;
    group_flags[1] |= max_layers_mimo_ind_present;
    group_flags[2] |= sp_cell_placement.is_present();
    group_flags[3] |= two_step_rach_r16_present;
    group_flags[3] |= dci_format1_2_and0_2_r16_present;
    group_flags[3] |= monitoring_dci_same_search_space_r16_present;
    group_flags[3] |= type2_cg_release_dci_0_1_r16_present;
    group_flags[3] |= type2_cg_release_dci_0_2_r16_present;
    group_flags[3] |= sps_release_dci_1_1_r16_present;
    group_flags[3] |= sps_release_dci_1_2_r16_present;
    group_flags[3] |= csi_trigger_state_non_active_bwp_r16_present;
    group_flags[3] |= separate_smtc_inter_iab_support_r16_present;
    group_flags[3] |= separate_rach_iab_support_r16_present;
    group_flags[3] |= ul_flex_dl_slot_format_semi_static_iab_r16_present;
    group_flags[3] |= ul_flex_dl_slot_format_dyns_iab_r16_present;
    group_flags[3] |= dft_s_ofdm_waveform_ul_iab_r16_present;
    group_flags[3] |= dci_25_ai_rnti_support_iab_r16_present;
    group_flags[3] |= t_delta_reception_support_iab_r16_present;
    group_flags[3] |= guard_symbol_report_reception_iab_r16_present;
    group_flags[3] |= harq_ack_cb_spatial_bundling_pucch_group_r16_present;
    group_flags[3] |= cross_slot_sched_r16.is_present();
    group_flags[3] |= max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_present;
    group_flags[3] |= extended_cg_periodicities_r16_present;
    group_flags[3] |= extended_sps_periodicities_r16_present;
    group_flags[3] |= codebook_variants_list_r16.is_present();
    group_flags[3] |= pusch_repeat_type_a_r16.is_present();
    group_flags[3] |= dci_dl_prio_ind_r16_present;
    group_flags[3] |= dci_ul_prio_ind_r16_present;
    group_flags[3] |= max_num_pathloss_rs_upd_r16_present;
    group_flags[3] |= type2_harq_ack_codebook_r16_present;
    group_flags[3] |= max_total_res_for_across_freq_ranges_r16.is_present();
    group_flags[3] |= harq_ack_separate_multi_dci_multi_trp_r16.is_present();
    group_flags[3] |= harq_ack_joint_multi_dci_multi_trp_r16_present;
    group_flags[3] |= bwp_switching_multi_ccs_r16.is_present();
    group_flags[4] |= target_smtc_scg_r16_present;
    group_flags[4] |= support_repeat_zero_offset_rv_r16_present;
    group_flags[4] |= cbg_trans_in_order_pusch_ul_r16_present;
    group_flags[5] |= bwp_switching_multi_dormancy_ccs_r16.is_present();
    group_flags[5] |= support_retx_diff_coreset_pool_multi_dci_trp_r16_present;
    group_flags[5] |= pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_present;
    group_flags[6] |= new_beam_identifs2_port_csi_rs_r16_present;
    group_flags[6] |= pathloss_estimation2_port_csi_rs_r16_present;
    group_flags[7] |= mux_harq_ack_without_pucch_on_pusch_r16_present;
    group_flags[8] |= guard_symbol_report_reception_iab_r17_present;
    group_flags[8] |= restricted_iab_du_beam_reception_r17_present;
    group_flags[8] |= recommended_iab_mt_beam_tx_r17_present;
    group_flags[8] |= case6_timing_align_reception_iab_r17_present;
    group_flags[8] |= case7_timing_align_reception_iab_r17_present;
    group_flags[8] |= dl_tx_pwr_adjustment_iab_r17_present;
    group_flags[8] |= desired_ul_tx_pwr_adjustment_r17_present;
    group_flags[8] |= fdm_soft_res_availability_dyn_ind_r17_present;
    group_flags[8] |= upd_t_delta_range_recption_r17_present;
    group_flags[8] |= slot_based_dyn_pucch_rep_r17_present;
    group_flags[8] |= sps_harq_ack_deferral_r17.is_present();
    group_flags[8] |= unified_joint_tci_common_upd_r17_present;
    group_flags[8] |= mtrp_pdcch_single_span_r17_present;
    group_flags[8] |= supported_activ_prs_processing_win_r17_present;
    group_flags[8] |= cg_time_domain_alloc_ext_r17_present;
    group_flags[9] |= ta_based_pdc_tn_non_shared_spec_ch_access_r17_present;
    group_flags[9] |= directional_collision_dc_iab_r17_present;
    group_flags[10] |= dummy1_present;
    group_flags[10] |= dummy2_present;
    group_flags[10] |= dummy3_present;
    group_flags[10] |= dummy4_present;
    group_flags[10] |= srs_add_repeat_r17_present;
    group_flags[10] |= pusch_repeat_cg_sdt_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dummy_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(max_num_search_spaces_present, 1));
      HANDLE_CODE(bref.pack(rate_matching_ctrl_resrc_set_dyn_present, 1));
      HANDLE_CODE(bref.pack(max_layers_mimo_ind_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sp_cell_placement.is_present(), 1));
      if (sp_cell_placement.is_present()) {
        HANDLE_CODE(sp_cell_placement->pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(two_step_rach_r16_present, 1));
      HANDLE_CODE(bref.pack(dci_format1_2_and0_2_r16_present, 1));
      HANDLE_CODE(bref.pack(monitoring_dci_same_search_space_r16_present, 1));
      HANDLE_CODE(bref.pack(type2_cg_release_dci_0_1_r16_present, 1));
      HANDLE_CODE(bref.pack(type2_cg_release_dci_0_2_r16_present, 1));
      HANDLE_CODE(bref.pack(sps_release_dci_1_1_r16_present, 1));
      HANDLE_CODE(bref.pack(sps_release_dci_1_2_r16_present, 1));
      HANDLE_CODE(bref.pack(csi_trigger_state_non_active_bwp_r16_present, 1));
      HANDLE_CODE(bref.pack(separate_smtc_inter_iab_support_r16_present, 1));
      HANDLE_CODE(bref.pack(separate_rach_iab_support_r16_present, 1));
      HANDLE_CODE(bref.pack(ul_flex_dl_slot_format_semi_static_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(ul_flex_dl_slot_format_dyns_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(dft_s_ofdm_waveform_ul_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(dci_25_ai_rnti_support_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(t_delta_reception_support_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(guard_symbol_report_reception_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(harq_ack_cb_spatial_bundling_pucch_group_r16_present, 1));
      HANDLE_CODE(bref.pack(cross_slot_sched_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_present, 1));
      HANDLE_CODE(bref.pack(extended_cg_periodicities_r16_present, 1));
      HANDLE_CODE(bref.pack(extended_sps_periodicities_r16_present, 1));
      HANDLE_CODE(bref.pack(codebook_variants_list_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(pusch_repeat_type_a_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(dci_dl_prio_ind_r16_present, 1));
      HANDLE_CODE(bref.pack(dci_ul_prio_ind_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_pathloss_rs_upd_r16_present, 1));
      HANDLE_CODE(bref.pack(type2_harq_ack_codebook_r16_present, 1));
      HANDLE_CODE(bref.pack(max_total_res_for_across_freq_ranges_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(harq_ack_separate_multi_dci_multi_trp_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(harq_ack_joint_multi_dci_multi_trp_r16_present, 1));
      HANDLE_CODE(bref.pack(bwp_switching_multi_ccs_r16.is_present(), 1));
      if (cross_slot_sched_r16.is_present()) {
        HANDLE_CODE(bref.pack(cross_slot_sched_r16->non_shared_spec_ch_access_r16_present, 1));
        HANDLE_CODE(bref.pack(cross_slot_sched_r16->shared_spec_ch_access_r16_present, 1));
      }
      if (max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_present) {
        HANDLE_CODE(max_num_srs_pos_path_loss_estimate_all_serving_cells_r16.pack(bref));
      }
      if (codebook_variants_list_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *codebook_variants_list_r16, 1, 512));
      }
      if (pusch_repeat_type_a_r16.is_present()) {
        HANDLE_CODE(bref.pack(pusch_repeat_type_a_r16->shared_spec_ch_access_r16_present, 1));
        HANDLE_CODE(bref.pack(pusch_repeat_type_a_r16->non_shared_spec_ch_access_r16_present, 1));
      }
      if (max_num_pathloss_rs_upd_r16_present) {
        HANDLE_CODE(max_num_pathloss_rs_upd_r16.pack(bref));
      }
      if (max_total_res_for_across_freq_ranges_r16.is_present()) {
        HANDLE_CODE(bref.pack(
            max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16_present, 1));
        HANDLE_CODE(
            bref.pack(max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16_present, 1));
        if (max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16_present) {
          HANDLE_CODE(
              max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16.pack(bref));
        }
        if (max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16_present) {
          HANDLE_CODE(max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16.pack(bref));
        }
      }
      if (harq_ack_separate_multi_dci_multi_trp_r16.is_present()) {
        HANDLE_CODE(bref.pack(harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16_present, 1));
        if (harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16_present) {
          HANDLE_CODE(harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16.pack(bref));
        }
      }
      if (bwp_switching_multi_ccs_r16.is_present()) {
        HANDLE_CODE(bwp_switching_multi_ccs_r16->pack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(target_smtc_scg_r16_present, 1));
      HANDLE_CODE(bref.pack(support_repeat_zero_offset_rv_r16_present, 1));
      HANDLE_CODE(bref.pack(cbg_trans_in_order_pusch_ul_r16_present, 1));
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(bwp_switching_multi_dormancy_ccs_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(support_retx_diff_coreset_pool_multi_dci_trp_r16_present, 1));
      HANDLE_CODE(bref.pack(pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_present, 1));
      if (bwp_switching_multi_dormancy_ccs_r16.is_present()) {
        HANDLE_CODE(bwp_switching_multi_dormancy_ccs_r16->pack(bref));
      }
      if (pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_present) {
        HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16.pack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(new_beam_identifs2_port_csi_rs_r16_present, 1));
      HANDLE_CODE(bref.pack(pathloss_estimation2_port_csi_rs_r16_present, 1));
    }
    if (group_flags[7]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(mux_harq_ack_without_pucch_on_pusch_r16_present, 1));
    }
    if (group_flags[8]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(guard_symbol_report_reception_iab_r17_present, 1));
      HANDLE_CODE(bref.pack(restricted_iab_du_beam_reception_r17_present, 1));
      HANDLE_CODE(bref.pack(recommended_iab_mt_beam_tx_r17_present, 1));
      HANDLE_CODE(bref.pack(case6_timing_align_reception_iab_r17_present, 1));
      HANDLE_CODE(bref.pack(case7_timing_align_reception_iab_r17_present, 1));
      HANDLE_CODE(bref.pack(dl_tx_pwr_adjustment_iab_r17_present, 1));
      HANDLE_CODE(bref.pack(desired_ul_tx_pwr_adjustment_r17_present, 1));
      HANDLE_CODE(bref.pack(fdm_soft_res_availability_dyn_ind_r17_present, 1));
      HANDLE_CODE(bref.pack(upd_t_delta_range_recption_r17_present, 1));
      HANDLE_CODE(bref.pack(slot_based_dyn_pucch_rep_r17_present, 1));
      HANDLE_CODE(bref.pack(sps_harq_ack_deferral_r17.is_present(), 1));
      HANDLE_CODE(bref.pack(unified_joint_tci_common_upd_r17_present, 1));
      HANDLE_CODE(bref.pack(mtrp_pdcch_single_span_r17_present, 1));
      HANDLE_CODE(bref.pack(supported_activ_prs_processing_win_r17_present, 1));
      HANDLE_CODE(bref.pack(cg_time_domain_alloc_ext_r17_present, 1));
      if (sps_harq_ack_deferral_r17.is_present()) {
        HANDLE_CODE(bref.pack(sps_harq_ack_deferral_r17->non_shared_spec_ch_access_r17_present, 1));
        HANDLE_CODE(bref.pack(sps_harq_ack_deferral_r17->shared_spec_ch_access_r17_present, 1));
      }
      if (unified_joint_tci_common_upd_r17_present) {
        HANDLE_CODE(pack_integer(bref, unified_joint_tci_common_upd_r17, (uint8_t)1u, (uint8_t)4u));
      }
      if (supported_activ_prs_processing_win_r17_present) {
        HANDLE_CODE(supported_activ_prs_processing_win_r17.pack(bref));
      }
    }
    if (group_flags[9]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(ta_based_pdc_tn_non_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.pack(directional_collision_dc_iab_r17_present, 1));
    }
    if (group_flags[10]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dummy1_present, 1));
      HANDLE_CODE(bref.pack(dummy2_present, 1));
      HANDLE_CODE(bref.pack(dummy3_present, 1));
      HANDLE_CODE(bref.pack(dummy4_present, 1));
      HANDLE_CODE(bref.pack(srs_add_repeat_r17_present, 1));
      HANDLE_CODE(bref.pack(pusch_repeat_cg_sdt_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_common_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(csi_rs_cfra_for_ho_present, 1));
  HANDLE_CODE(bref.unpack(dyn_prb_bundling_dl_present, 1));
  HANDLE_CODE(bref.unpack(sp_csi_report_pucch_present, 1));
  HANDLE_CODE(bref.unpack(sp_csi_report_pusch_present, 1));
  HANDLE_CODE(bref.unpack(nzp_csi_rs_intef_mgmt_present, 1));
  HANDLE_CODE(bref.unpack(type2_sp_csi_feedback_long_pucch_present, 1));
  HANDLE_CODE(bref.unpack(precoder_granularity_coreset_present, 1));
  HANDLE_CODE(bref.unpack(dyn_harq_ack_codebook_present, 1));
  HANDLE_CODE(bref.unpack(semi_static_harq_ack_codebook_present, 1));
  HANDLE_CODE(bref.unpack(spatial_bundling_harq_ack_present, 1));
  HANDLE_CODE(bref.unpack(dyn_beta_offset_ind_harq_ack_csi_present, 1));
  HANDLE_CODE(bref.unpack(pucch_repeat_f1_3_4_present, 1));
  HANDLE_CODE(bref.unpack(ra_type0_pusch_present, 1));
  HANDLE_CODE(bref.unpack(dyn_switch_ra_type0_1_pdsch_present, 1));
  HANDLE_CODE(bref.unpack(dyn_switch_ra_type0_1_pusch_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_map_type_a_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_map_type_b_present, 1));
  HANDLE_CODE(bref.unpack(interleaving_vrb_to_prb_pdsch_present, 1));
  HANDLE_CODE(bref.unpack(inter_slot_freq_hop_pusch_present, 1));
  HANDLE_CODE(bref.unpack(type1_pusch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.unpack(type2_pusch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.unpack(pusch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_repeat_multi_slots_present, 1));
  HANDLE_CODE(bref.unpack(dl_sps_present, 1));
  HANDLE_CODE(bref.unpack(cfg_ul_grant_type1_present, 1));
  HANDLE_CODE(bref.unpack(cfg_ul_grant_type2_present, 1));
  HANDLE_CODE(bref.unpack(pre_empt_ind_dl_present, 1));
  HANDLE_CODE(bref.unpack(cbg_trans_ind_dl_present, 1));
  HANDLE_CODE(bref.unpack(cbg_trans_ind_ul_present, 1));
  HANDLE_CODE(bref.unpack(cbg_flush_ind_dl_present, 1));
  HANDLE_CODE(bref.unpack(dyn_harq_ack_code_b_cbg_retx_dl_present, 1));
  HANDLE_CODE(bref.unpack(rate_matching_resrc_set_semi_static_present, 1));
  HANDLE_CODE(bref.unpack(rate_matching_resrc_set_dyn_present, 1));
  HANDLE_CODE(bref.unpack(bwp_switching_delay_present, 1));

  if (bwp_switching_delay_present) {
    HANDLE_CODE(bwp_switching_delay.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(11);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dummy_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(max_num_search_spaces_present, 1));
      HANDLE_CODE(bref.unpack(rate_matching_ctrl_resrc_set_dyn_present, 1));
      HANDLE_CODE(bref.unpack(max_layers_mimo_ind_present, 1));
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(sp_cell_placement, bref);
      if (sp_cell_placement.is_present()) {
        HANDLE_CODE(sp_cell_placement->unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(two_step_rach_r16_present, 1));
      HANDLE_CODE(bref.unpack(dci_format1_2_and0_2_r16_present, 1));
      HANDLE_CODE(bref.unpack(monitoring_dci_same_search_space_r16_present, 1));
      HANDLE_CODE(bref.unpack(type2_cg_release_dci_0_1_r16_present, 1));
      HANDLE_CODE(bref.unpack(type2_cg_release_dci_0_2_r16_present, 1));
      HANDLE_CODE(bref.unpack(sps_release_dci_1_1_r16_present, 1));
      HANDLE_CODE(bref.unpack(sps_release_dci_1_2_r16_present, 1));
      HANDLE_CODE(bref.unpack(csi_trigger_state_non_active_bwp_r16_present, 1));
      HANDLE_CODE(bref.unpack(separate_smtc_inter_iab_support_r16_present, 1));
      HANDLE_CODE(bref.unpack(separate_rach_iab_support_r16_present, 1));
      HANDLE_CODE(bref.unpack(ul_flex_dl_slot_format_semi_static_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(ul_flex_dl_slot_format_dyns_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(dft_s_ofdm_waveform_ul_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(dci_25_ai_rnti_support_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(t_delta_reception_support_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(guard_symbol_report_reception_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(harq_ack_cb_spatial_bundling_pucch_group_r16_present, 1));
      unpack_presence_flag(cross_slot_sched_r16, bref);
      HANDLE_CODE(bref.unpack(max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_present, 1));
      HANDLE_CODE(bref.unpack(extended_cg_periodicities_r16_present, 1));
      HANDLE_CODE(bref.unpack(extended_sps_periodicities_r16_present, 1));
      unpack_presence_flag(codebook_variants_list_r16, bref);
      unpack_presence_flag(pusch_repeat_type_a_r16, bref);
      HANDLE_CODE(bref.unpack(dci_dl_prio_ind_r16_present, 1));
      HANDLE_CODE(bref.unpack(dci_ul_prio_ind_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_pathloss_rs_upd_r16_present, 1));
      HANDLE_CODE(bref.unpack(type2_harq_ack_codebook_r16_present, 1));
      unpack_presence_flag(max_total_res_for_across_freq_ranges_r16, bref);
      unpack_presence_flag(harq_ack_separate_multi_dci_multi_trp_r16, bref);
      HANDLE_CODE(bref.unpack(harq_ack_joint_multi_dci_multi_trp_r16_present, 1));
      unpack_presence_flag(bwp_switching_multi_ccs_r16, bref);
      if (cross_slot_sched_r16.is_present()) {
        HANDLE_CODE(bref.unpack(cross_slot_sched_r16->non_shared_spec_ch_access_r16_present, 1));
        HANDLE_CODE(bref.unpack(cross_slot_sched_r16->shared_spec_ch_access_r16_present, 1));
      }
      if (max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_present) {
        HANDLE_CODE(max_num_srs_pos_path_loss_estimate_all_serving_cells_r16.unpack(bref));
      }
      if (codebook_variants_list_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*codebook_variants_list_r16, bref, 1, 512));
      }
      if (pusch_repeat_type_a_r16.is_present()) {
        HANDLE_CODE(bref.unpack(pusch_repeat_type_a_r16->shared_spec_ch_access_r16_present, 1));
        HANDLE_CODE(bref.unpack(pusch_repeat_type_a_r16->non_shared_spec_ch_access_r16_present, 1));
      }
      if (max_num_pathloss_rs_upd_r16_present) {
        HANDLE_CODE(max_num_pathloss_rs_upd_r16.unpack(bref));
      }
      if (max_total_res_for_across_freq_ranges_r16.is_present()) {
        HANDLE_CODE(bref.unpack(
            max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16_present, 1));
        HANDLE_CODE(
            bref.unpack(max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16_present, 1));
        if (max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16_present) {
          HANDLE_CODE(
              max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16.unpack(bref));
        }
        if (max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16_present) {
          HANDLE_CODE(max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16.unpack(bref));
        }
      }
      if (harq_ack_separate_multi_dci_multi_trp_r16.is_present()) {
        HANDLE_CODE(bref.unpack(harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16_present, 1));
        if (harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16_present) {
          HANDLE_CODE(harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16.unpack(bref));
        }
      }
      if (bwp_switching_multi_ccs_r16.is_present()) {
        HANDLE_CODE(bwp_switching_multi_ccs_r16->unpack(bref));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(target_smtc_scg_r16_present, 1));
      HANDLE_CODE(bref.unpack(support_repeat_zero_offset_rv_r16_present, 1));
      HANDLE_CODE(bref.unpack(cbg_trans_in_order_pusch_ul_r16_present, 1));
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(bwp_switching_multi_dormancy_ccs_r16, bref);
      HANDLE_CODE(bref.unpack(support_retx_diff_coreset_pool_multi_dci_trp_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_present, 1));
      if (bwp_switching_multi_dormancy_ccs_r16.is_present()) {
        HANDLE_CODE(bwp_switching_multi_dormancy_ccs_r16->unpack(bref));
      }
      if (pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_present) {
        HANDLE_CODE(pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16.unpack(bref));
      }
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(new_beam_identifs2_port_csi_rs_r16_present, 1));
      HANDLE_CODE(bref.unpack(pathloss_estimation2_port_csi_rs_r16_present, 1));
    }
    if (group_flags[7]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(mux_harq_ack_without_pucch_on_pusch_r16_present, 1));
    }
    if (group_flags[8]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(guard_symbol_report_reception_iab_r17_present, 1));
      HANDLE_CODE(bref.unpack(restricted_iab_du_beam_reception_r17_present, 1));
      HANDLE_CODE(bref.unpack(recommended_iab_mt_beam_tx_r17_present, 1));
      HANDLE_CODE(bref.unpack(case6_timing_align_reception_iab_r17_present, 1));
      HANDLE_CODE(bref.unpack(case7_timing_align_reception_iab_r17_present, 1));
      HANDLE_CODE(bref.unpack(dl_tx_pwr_adjustment_iab_r17_present, 1));
      HANDLE_CODE(bref.unpack(desired_ul_tx_pwr_adjustment_r17_present, 1));
      HANDLE_CODE(bref.unpack(fdm_soft_res_availability_dyn_ind_r17_present, 1));
      HANDLE_CODE(bref.unpack(upd_t_delta_range_recption_r17_present, 1));
      HANDLE_CODE(bref.unpack(slot_based_dyn_pucch_rep_r17_present, 1));
      unpack_presence_flag(sps_harq_ack_deferral_r17, bref);
      HANDLE_CODE(bref.unpack(unified_joint_tci_common_upd_r17_present, 1));
      HANDLE_CODE(bref.unpack(mtrp_pdcch_single_span_r17_present, 1));
      HANDLE_CODE(bref.unpack(supported_activ_prs_processing_win_r17_present, 1));
      HANDLE_CODE(bref.unpack(cg_time_domain_alloc_ext_r17_present, 1));
      if (sps_harq_ack_deferral_r17.is_present()) {
        HANDLE_CODE(bref.unpack(sps_harq_ack_deferral_r17->non_shared_spec_ch_access_r17_present, 1));
        HANDLE_CODE(bref.unpack(sps_harq_ack_deferral_r17->shared_spec_ch_access_r17_present, 1));
      }
      if (unified_joint_tci_common_upd_r17_present) {
        HANDLE_CODE(unpack_integer(unified_joint_tci_common_upd_r17, bref, (uint8_t)1u, (uint8_t)4u));
      }
      if (supported_activ_prs_processing_win_r17_present) {
        HANDLE_CODE(supported_activ_prs_processing_win_r17.unpack(bref));
      }
    }
    if (group_flags[9]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(ta_based_pdc_tn_non_shared_spec_ch_access_r17_present, 1));
      HANDLE_CODE(bref.unpack(directional_collision_dc_iab_r17_present, 1));
    }
    if (group_flags[10]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dummy1_present, 1));
      HANDLE_CODE(bref.unpack(dummy2_present, 1));
      HANDLE_CODE(bref.unpack(dummy3_present, 1));
      HANDLE_CODE(bref.unpack(dummy4_present, 1));
      HANDLE_CODE(bref.unpack(srs_add_repeat_r17_present, 1));
      HANDLE_CODE(bref.unpack(pusch_repeat_cg_sdt_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void phy_params_common_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (csi_rs_cfra_for_ho_present) {
    j.write_str("csi-RS-CFRA-ForHO", "supported");
  }
  if (dyn_prb_bundling_dl_present) {
    j.write_str("dynamicPRB-BundlingDL", "supported");
  }
  if (sp_csi_report_pucch_present) {
    j.write_str("sp-CSI-ReportPUCCH", "supported");
  }
  if (sp_csi_report_pusch_present) {
    j.write_str("sp-CSI-ReportPUSCH", "supported");
  }
  if (nzp_csi_rs_intef_mgmt_present) {
    j.write_str("nzp-CSI-RS-IntefMgmt", "supported");
  }
  if (type2_sp_csi_feedback_long_pucch_present) {
    j.write_str("type2-SP-CSI-Feedback-LongPUCCH", "supported");
  }
  if (precoder_granularity_coreset_present) {
    j.write_str("precoderGranularityCORESET", "supported");
  }
  if (dyn_harq_ack_codebook_present) {
    j.write_str("dynamicHARQ-ACK-Codebook", "supported");
  }
  if (semi_static_harq_ack_codebook_present) {
    j.write_str("semiStaticHARQ-ACK-Codebook", "supported");
  }
  if (spatial_bundling_harq_ack_present) {
    j.write_str("spatialBundlingHARQ-ACK", "supported");
  }
  if (dyn_beta_offset_ind_harq_ack_csi_present) {
    j.write_str("dynamicBetaOffsetInd-HARQ-ACK-CSI", "supported");
  }
  if (pucch_repeat_f1_3_4_present) {
    j.write_str("pucch-Repetition-F1-3-4", "supported");
  }
  if (ra_type0_pusch_present) {
    j.write_str("ra-Type0-PUSCH", "supported");
  }
  if (dyn_switch_ra_type0_1_pdsch_present) {
    j.write_str("dynamicSwitchRA-Type0-1-PDSCH", "supported");
  }
  if (dyn_switch_ra_type0_1_pusch_present) {
    j.write_str("dynamicSwitchRA-Type0-1-PUSCH", "supported");
  }
  if (pdsch_map_type_a_present) {
    j.write_str("pdsch-MappingTypeA", "supported");
  }
  if (pdsch_map_type_b_present) {
    j.write_str("pdsch-MappingTypeB", "supported");
  }
  if (interleaving_vrb_to_prb_pdsch_present) {
    j.write_str("interleavingVRB-ToPRB-PDSCH", "supported");
  }
  if (inter_slot_freq_hop_pusch_present) {
    j.write_str("interSlotFreqHopping-PUSCH", "supported");
  }
  if (type1_pusch_repeat_multi_slots_present) {
    j.write_str("type1-PUSCH-RepetitionMultiSlots", "supported");
  }
  if (type2_pusch_repeat_multi_slots_present) {
    j.write_str("type2-PUSCH-RepetitionMultiSlots", "supported");
  }
  if (pusch_repeat_multi_slots_present) {
    j.write_str("pusch-RepetitionMultiSlots", "supported");
  }
  if (pdsch_repeat_multi_slots_present) {
    j.write_str("pdsch-RepetitionMultiSlots", "supported");
  }
  if (dl_sps_present) {
    j.write_str("downlinkSPS", "supported");
  }
  if (cfg_ul_grant_type1_present) {
    j.write_str("configuredUL-GrantType1", "supported");
  }
  if (cfg_ul_grant_type2_present) {
    j.write_str("configuredUL-GrantType2", "supported");
  }
  if (pre_empt_ind_dl_present) {
    j.write_str("pre-EmptIndication-DL", "supported");
  }
  if (cbg_trans_ind_dl_present) {
    j.write_str("cbg-TransIndication-DL", "supported");
  }
  if (cbg_trans_ind_ul_present) {
    j.write_str("cbg-TransIndication-UL", "supported");
  }
  if (cbg_flush_ind_dl_present) {
    j.write_str("cbg-FlushIndication-DL", "supported");
  }
  if (dyn_harq_ack_code_b_cbg_retx_dl_present) {
    j.write_str("dynamicHARQ-ACK-CodeB-CBG-Retx-DL", "supported");
  }
  if (rate_matching_resrc_set_semi_static_present) {
    j.write_str("rateMatchingResrcSetSemi-Static", "supported");
  }
  if (rate_matching_resrc_set_dyn_present) {
    j.write_str("rateMatchingResrcSetDynamic", "supported");
  }
  if (bwp_switching_delay_present) {
    j.write_str("bwp-SwitchingDelay", bwp_switching_delay.to_string());
  }
  if (ext) {
    if (dummy_present) {
      j.write_str("dummy", "supported");
    }
    if (max_num_search_spaces_present) {
      j.write_str("maxNumberSearchSpaces", "n10");
    }
    if (rate_matching_ctrl_resrc_set_dyn_present) {
      j.write_str("rateMatchingCtrlResrcSetDynamic", "supported");
    }
    if (max_layers_mimo_ind_present) {
      j.write_str("maxLayersMIMO-Indication", "supported");
    }
    if (sp_cell_placement.is_present()) {
      j.write_fieldname("spCellPlacement");
      sp_cell_placement->to_json(j);
    }
    if (two_step_rach_r16_present) {
      j.write_str("twoStepRACH-r16", "supported");
    }
    if (dci_format1_2_and0_2_r16_present) {
      j.write_str("dci-Format1-2And0-2-r16", "supported");
    }
    if (monitoring_dci_same_search_space_r16_present) {
      j.write_str("monitoringDCI-SameSearchSpace-r16", "supported");
    }
    if (type2_cg_release_dci_0_1_r16_present) {
      j.write_str("type2-CG-ReleaseDCI-0-1-r16", "supported");
    }
    if (type2_cg_release_dci_0_2_r16_present) {
      j.write_str("type2-CG-ReleaseDCI-0-2-r16", "supported");
    }
    if (sps_release_dci_1_1_r16_present) {
      j.write_str("sps-ReleaseDCI-1-1-r16", "supported");
    }
    if (sps_release_dci_1_2_r16_present) {
      j.write_str("sps-ReleaseDCI-1-2-r16", "supported");
    }
    if (csi_trigger_state_non_active_bwp_r16_present) {
      j.write_str("csi-TriggerStateNon-ActiveBWP-r16", "supported");
    }
    if (separate_smtc_inter_iab_support_r16_present) {
      j.write_str("separateSMTC-InterIAB-Support-r16", "supported");
    }
    if (separate_rach_iab_support_r16_present) {
      j.write_str("separateRACH-IAB-Support-r16", "supported");
    }
    if (ul_flex_dl_slot_format_semi_static_iab_r16_present) {
      j.write_str("ul-flexibleDL-SlotFormatSemiStatic-IAB-r16", "supported");
    }
    if (ul_flex_dl_slot_format_dyns_iab_r16_present) {
      j.write_str("ul-flexibleDL-SlotFormatDynamics-IAB-r16", "supported");
    }
    if (dft_s_ofdm_waveform_ul_iab_r16_present) {
      j.write_str("dft-S-OFDM-WaveformUL-IAB-r16", "supported");
    }
    if (dci_25_ai_rnti_support_iab_r16_present) {
      j.write_str("dci-25-AI-RNTI-Support-IAB-r16", "supported");
    }
    if (t_delta_reception_support_iab_r16_present) {
      j.write_str("t-DeltaReceptionSupport-IAB-r16", "supported");
    }
    if (guard_symbol_report_reception_iab_r16_present) {
      j.write_str("guardSymbolReportReception-IAB-r16", "supported");
    }
    if (harq_ack_cb_spatial_bundling_pucch_group_r16_present) {
      j.write_str("harqACK-CB-SpatialBundlingPUCCH-Group-r16", "supported");
    }
    if (cross_slot_sched_r16.is_present()) {
      j.write_fieldname("crossSlotScheduling-r16");
      j.start_obj();
      if (cross_slot_sched_r16->non_shared_spec_ch_access_r16_present) {
        j.write_str("non-SharedSpectrumChAccess-r16", "supported");
      }
      if (cross_slot_sched_r16->shared_spec_ch_access_r16_present) {
        j.write_str("sharedSpectrumChAccess-r16", "supported");
      }
      j.end_obj();
    }
    if (max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_present) {
      j.write_str("maxNumberSRS-PosPathLossEstimateAllServingCells-r16",
                  max_num_srs_pos_path_loss_estimate_all_serving_cells_r16.to_string());
    }
    if (extended_cg_periodicities_r16_present) {
      j.write_str("extendedCG-Periodicities-r16", "supported");
    }
    if (extended_sps_periodicities_r16_present) {
      j.write_str("extendedSPS-Periodicities-r16", "supported");
    }
    if (codebook_variants_list_r16.is_present()) {
      j.start_array("codebookVariantsList-r16");
      for (const auto& e1 : *codebook_variants_list_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (pusch_repeat_type_a_r16.is_present()) {
      j.write_fieldname("pusch-RepetitionTypeA-r16");
      j.start_obj();
      if (pusch_repeat_type_a_r16->shared_spec_ch_access_r16_present) {
        j.write_str("sharedSpectrumChAccess-r16", "supported");
      }
      if (pusch_repeat_type_a_r16->non_shared_spec_ch_access_r16_present) {
        j.write_str("non-SharedSpectrumChAccess-r16", "supported");
      }
      j.end_obj();
    }
    if (dci_dl_prio_ind_r16_present) {
      j.write_str("dci-DL-PriorityIndicator-r16", "supported");
    }
    if (dci_ul_prio_ind_r16_present) {
      j.write_str("dci-UL-PriorityIndicator-r16", "supported");
    }
    if (max_num_pathloss_rs_upd_r16_present) {
      j.write_str("maxNumberPathlossRS-Update-r16", max_num_pathloss_rs_upd_r16.to_string());
    }
    if (type2_harq_ack_codebook_r16_present) {
      j.write_str("type2-HARQ-ACK-Codebook-r16", "supported");
    }
    if (max_total_res_for_across_freq_ranges_r16.is_present()) {
      j.write_fieldname("maxTotalResourcesForAcrossFreqRanges-r16");
      j.start_obj();
      if (max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16_present) {
        j.write_str(
            "maxNumberResWithinSlotAcrossCC-AcrossFR-r16",
            max_total_res_for_across_freq_ranges_r16->max_num_res_within_slot_across_cc_across_fr_r16.to_string());
      }
      if (max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16_present) {
        j.write_str("maxNumberResAcrossCC-AcrossFR-r16",
                    max_total_res_for_across_freq_ranges_r16->max_num_res_across_cc_across_fr_r16.to_string());
      }
      j.end_obj();
    }
    if (harq_ack_separate_multi_dci_multi_trp_r16.is_present()) {
      j.write_fieldname("harqACK-separateMultiDCI-MultiTRP-r16");
      j.start_obj();
      if (harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16_present) {
        j.write_str("maxNumberLongPUCCHs-r16",
                    harq_ack_separate_multi_dci_multi_trp_r16->max_num_long_pucch_s_r16.to_string());
      }
      j.end_obj();
    }
    if (harq_ack_joint_multi_dci_multi_trp_r16_present) {
      j.write_str("harqACK-jointMultiDCI-MultiTRP-r16", "supported");
    }
    if (bwp_switching_multi_ccs_r16.is_present()) {
      j.write_fieldname("bwp-SwitchingMultiCCs-r16");
      bwp_switching_multi_ccs_r16->to_json(j);
    }
    if (target_smtc_scg_r16_present) {
      j.write_str("targetSMTC-SCG-r16", "supported");
    }
    if (support_repeat_zero_offset_rv_r16_present) {
      j.write_str("supportRepetitionZeroOffsetRV-r16", "supported");
    }
    if (cbg_trans_in_order_pusch_ul_r16_present) {
      j.write_str("cbg-TransInOrderPUSCH-UL-r16", "supported");
    }
    if (bwp_switching_multi_dormancy_ccs_r16.is_present()) {
      j.write_fieldname("bwp-SwitchingMultiDormancyCCs-r16");
      bwp_switching_multi_dormancy_ccs_r16->to_json(j);
    }
    if (support_retx_diff_coreset_pool_multi_dci_trp_r16_present) {
      j.write_str("supportRetx-Diff-CoresetPool-Multi-DCI-TRP-r16", "notSupported");
    }
    if (pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_present) {
      j.write_str("pdcch-MonitoringAnyOccasionsWithSpanGapCrossCarrierSch-r16",
                  pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16.to_string());
    }
    if (new_beam_identifs2_port_csi_rs_r16_present) {
      j.write_str("newBeamIdentifications2PortCSI-RS-r16", "supported");
    }
    if (pathloss_estimation2_port_csi_rs_r16_present) {
      j.write_str("pathlossEstimation2PortCSI-RS-r16", "supported");
    }
    if (mux_harq_ack_without_pucch_on_pusch_r16_present) {
      j.write_str("mux-HARQ-ACK-withoutPUCCH-onPUSCH-r16", "supported");
    }
    if (guard_symbol_report_reception_iab_r17_present) {
      j.write_str("guardSymbolReportReception-IAB-r17", "supported");
    }
    if (restricted_iab_du_beam_reception_r17_present) {
      j.write_str("restricted-IAB-DU-BeamReception-r17", "supported");
    }
    if (recommended_iab_mt_beam_tx_r17_present) {
      j.write_str("recommended-IAB-MT-BeamTransmission-r17", "supported");
    }
    if (case6_timing_align_reception_iab_r17_present) {
      j.write_str("case6-TimingAlignmentReception-IAB-r17", "supported");
    }
    if (case7_timing_align_reception_iab_r17_present) {
      j.write_str("case7-TimingAlignmentReception-IAB-r17", "supported");
    }
    if (dl_tx_pwr_adjustment_iab_r17_present) {
      j.write_str("dl-tx-PowerAdjustment-IAB-r17", "supported");
    }
    if (desired_ul_tx_pwr_adjustment_r17_present) {
      j.write_str("desired-ul-tx-PowerAdjustment-r17", "supported");
    }
    if (fdm_soft_res_availability_dyn_ind_r17_present) {
      j.write_str("fdm-SoftResourceAvailability-DynamicIndication-r17", "supported");
    }
    if (upd_t_delta_range_recption_r17_present) {
      j.write_str("updated-T-DeltaRangeRecption-r17", "supported");
    }
    if (slot_based_dyn_pucch_rep_r17_present) {
      j.write_str("slotBasedDynamicPUCCH-Rep-r17", "supported");
    }
    if (sps_harq_ack_deferral_r17.is_present()) {
      j.write_fieldname("sps-HARQ-ACK-Deferral-r17");
      j.start_obj();
      if (sps_harq_ack_deferral_r17->non_shared_spec_ch_access_r17_present) {
        j.write_str("non-SharedSpectrumChAccess-r17", "supported");
      }
      if (sps_harq_ack_deferral_r17->shared_spec_ch_access_r17_present) {
        j.write_str("sharedSpectrumChAccess-r17", "supported");
      }
      j.end_obj();
    }
    if (unified_joint_tci_common_upd_r17_present) {
      j.write_int("unifiedJointTCI-commonUpdate-r17", unified_joint_tci_common_upd_r17);
    }
    if (mtrp_pdcch_single_span_r17_present) {
      j.write_str("mTRP-PDCCH-singleSpan-r17", "supported");
    }
    if (supported_activ_prs_processing_win_r17_present) {
      j.write_str("supportedActivatedPRS-ProcessingWindow-r17", supported_activ_prs_processing_win_r17.to_string());
    }
    if (cg_time_domain_alloc_ext_r17_present) {
      j.write_str("cg-TimeDomainAllocationExtension-r17", "supported");
    }
    if (ta_based_pdc_tn_non_shared_spec_ch_access_r17_present) {
      j.write_str("ta-BasedPDC-TN-NonSharedSpectrumChAccess-r17", "supported");
    }
    if (directional_collision_dc_iab_r17_present) {
      j.write_str("directionalCollisionDC-IAB-r17", "supported");
    }
    if (dummy1_present) {
      j.write_str("dummy1", "supported");
    }
    if (dummy2_present) {
      j.write_str("dummy2", "supported");
    }
    if (dummy3_present) {
      j.write_str("dummy3", "supported");
    }
    if (dummy4_present) {
      j.write_str("dummy4", "supported");
    }
    if (srs_add_repeat_r17_present) {
      j.write_str("srs-AdditionalRepetition-r17", "supported");
    }
    if (pusch_repeat_cg_sdt_r17_present) {
      j.write_str("pusch-Repetition-CG-SDT-r17", "supported");
    }
  }
  j.end_obj();
}

const char* phy_params_common_s::bwp_switching_delay_opts::to_string() const
{
  static const char* names[] = {"type1", "type2"};
  return convert_enum_idx(names, 2, value, "phy_params_common_s::bwp_switching_delay_e_");
}
uint8_t phy_params_common_s::bwp_switching_delay_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 2};
  return map_enum_number(numbers, 2, value, "phy_params_common_s::bwp_switching_delay_e_");
}

const char* phy_params_common_s::max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_opts::to_string() const
{
  static const char* names[] = {"n1", "n4", "n8", "n16"};
  return convert_enum_idx(
      names, 4, value, "phy_params_common_s::max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_e_");
}
uint8_t phy_params_common_s::max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {1, 4, 8, 16};
  return map_enum_number(
      numbers, 4, value, "phy_params_common_s::max_num_srs_pos_path_loss_estimate_all_serving_cells_r16_e_");
}

const char* phy_params_common_s::max_num_pathloss_rs_upd_r16_opts::to_string() const
{
  static const char* names[] = {"n4", "n8", "n16", "n32", "n64"};
  return convert_enum_idx(names, 5, value, "phy_params_common_s::max_num_pathloss_rs_upd_r16_e_");
}
uint8_t phy_params_common_s::max_num_pathloss_rs_upd_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8, 16, 32, 64};
  return map_enum_number(numbers, 5, value, "phy_params_common_s::max_num_pathloss_rs_upd_r16_e_");
}

const char* phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::
    max_num_res_within_slot_across_cc_across_fr_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8", "n12", "n16", "n32", "n64", "n128"};
  return convert_enum_idx(names,
                          8,
                          value,
                          "phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::max_num_res_within_slot_"
                          "across_cc_across_fr_r16_e_");
}
uint8_t phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::
    max_num_res_within_slot_across_cc_across_fr_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12, 16, 32, 64, 128};
  return map_enum_number(numbers,
                         8,
                         value,
                         "phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::max_num_res_within_slot_"
                         "across_cc_across_fr_r16_e_");
}

const char*
phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::max_num_res_across_cc_across_fr_r16_opts::to_string()
    const
{
  static const char* names[] = {
      "n2", "n4", "n8", "n12", "n16", "n32", "n40", "n48", "n64", "n72", "n80", "n96", "n128", "n256"};
  return convert_enum_idx(
      names,
      14,
      value,
      "phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::max_num_res_across_cc_across_fr_r16_e_");
}
uint16_t
phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::max_num_res_across_cc_across_fr_r16_opts::to_number()
    const
{
  static const uint16_t numbers[] = {2, 4, 8, 12, 16, 32, 40, 48, 64, 72, 80, 96, 128, 256};
  return map_enum_number(
      numbers,
      14,
      value,
      "phy_params_common_s::max_total_res_for_across_freq_ranges_r16_s_::max_num_res_across_cc_across_fr_r16_e_");
}

const char*
phy_params_common_s::harq_ack_separate_multi_dci_multi_trp_r16_s_::max_num_long_pucch_s_r16_opts::to_string() const
{
  static const char* names[] = {"longAndLong", "longAndShort", "shortAndShort"};
  return convert_enum_idx(
      names,
      3,
      value,
      "phy_params_common_s::harq_ack_separate_multi_dci_multi_trp_r16_s_::max_num_long_pucch_s_r16_e_");
}

void phy_params_common_s::bwp_switching_multi_ccs_r16_c_::destroy_() {}
void phy_params_common_s::bwp_switching_multi_ccs_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
phy_params_common_s::bwp_switching_multi_ccs_r16_c_::bwp_switching_multi_ccs_r16_c_(
    const phy_params_common_s::bwp_switching_multi_ccs_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::type1_r16:
      c.init(other.c.get<type1_r16_e_>());
      break;
    case types::type2_r16:
      c.init(other.c.get<type2_r16_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_");
  }
}
phy_params_common_s::bwp_switching_multi_ccs_r16_c_& phy_params_common_s::bwp_switching_multi_ccs_r16_c_::operator=(
    const phy_params_common_s::bwp_switching_multi_ccs_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::type1_r16:
      c.set(other.c.get<type1_r16_e_>());
      break;
    case types::type2_r16:
      c.set(other.c.get<type2_r16_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_");
  }

  return *this;
}
phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type1_r16_e_&
phy_params_common_s::bwp_switching_multi_ccs_r16_c_::set_type1_r16()
{
  set(types::type1_r16);
  return c.get<type1_r16_e_>();
}
phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type2_r16_e_&
phy_params_common_s::bwp_switching_multi_ccs_r16_c_::set_type2_r16()
{
  set(types::type2_r16);
  return c.get<type2_r16_e_>();
}
void phy_params_common_s::bwp_switching_multi_ccs_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::type1_r16:
      j.write_str("type1-r16", c.get<type1_r16_e_>().to_string());
      break;
    case types::type2_r16:
      j.write_str("type2-r16", c.get<type2_r16_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE phy_params_common_s::bwp_switching_multi_ccs_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::type1_r16:
      HANDLE_CODE(c.get<type1_r16_e_>().pack(bref));
      break;
    case types::type2_r16:
      HANDLE_CODE(c.get<type2_r16_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_common_s::bwp_switching_multi_ccs_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::type1_r16:
      HANDLE_CODE(c.get<type1_r16_e_>().unpack(bref));
      break;
    case types::type2_r16:
      HANDLE_CODE(c.get<type2_r16_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type1_r16_opts::to_string() const
{
  static const char* names[] = {"us100", "us200"};
  return convert_enum_idx(names, 2, value, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type1_r16_e_");
}
uint8_t phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type1_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {100, 200};
  return map_enum_number(numbers, 2, value, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type1_r16_e_");
}

const char* phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type2_r16_opts::to_string() const
{
  static const char* names[] = {"us200", "us400", "us800", "us1000"};
  return convert_enum_idx(names, 4, value, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type2_r16_e_");
}
uint16_t phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type2_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {200, 400, 800, 1000};
  return map_enum_number(numbers, 4, value, "phy_params_common_s::bwp_switching_multi_ccs_r16_c_::type2_r16_e_");
}

void phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::destroy_() {}
void phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::set(types::options e)
{
  destroy_();
  type_ = e;
}
phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::bwp_switching_multi_dormancy_ccs_r16_c_(
    const phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_& other)
{
  type_ = other.type();
  switch (type_) {
    case types::type1_r16:
      c.init(other.c.get<type1_r16_e_>());
      break;
    case types::type2_r16:
      c.init(other.c.get<type2_r16_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_");
  }
}
phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_&
phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::operator=(
    const phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::type1_r16:
      c.set(other.c.get<type1_r16_e_>());
      break;
    case types::type2_r16:
      c.set(other.c.get<type2_r16_e_>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_");
  }

  return *this;
}
phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type1_r16_e_&
phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::set_type1_r16()
{
  set(types::type1_r16);
  return c.get<type1_r16_e_>();
}
phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type2_r16_e_&
phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::set_type2_r16()
{
  set(types::type2_r16);
  return c.get<type2_r16_e_>();
}
void phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::type1_r16:
      j.write_str("type1-r16", c.get<type1_r16_e_>().to_string());
      break;
    case types::type2_r16:
      j.write_str("type2-r16", c.get<type2_r16_e_>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_");
  }
  j.end_obj();
}
SRSASN_CODE phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::type1_r16:
      HANDLE_CODE(c.get<type1_r16_e_>().pack(bref));
      break;
    case types::type2_r16:
      HANDLE_CODE(c.get<type2_r16_e_>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::type1_r16:
      HANDLE_CODE(c.get<type1_r16_e_>().unpack(bref));
      break;
    case types::type2_r16:
      HANDLE_CODE(c.get<type2_r16_e_>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type1_r16_opts::to_string() const
{
  static const char* names[] = {"us100", "us200"};
  return convert_enum_idx(
      names, 2, value, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type1_r16_e_");
}
uint8_t phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type1_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {100, 200};
  return map_enum_number(
      numbers, 2, value, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type1_r16_e_");
}

const char* phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type2_r16_opts::to_string() const
{
  static const char* names[] = {"us200", "us400", "us800", "us1000"};
  return convert_enum_idx(
      names, 4, value, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type2_r16_e_");
}
uint16_t phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type2_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {200, 400, 800, 1000};
  return map_enum_number(
      numbers, 4, value, "phy_params_common_s::bwp_switching_multi_dormancy_ccs_r16_c_::type2_r16_e_");
}

const char*
phy_params_common_s::pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_opts::to_string() const
{
  static const char* names[] = {"mode2", "mode3"};
  return convert_enum_idx(
      names, 2, value, "phy_params_common_s::pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_e_");
}
uint8_t phy_params_common_s::pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3};
  return map_enum_number(
      numbers, 2, value, "phy_params_common_s::pdcch_monitoring_any_occasions_with_span_gap_cross_carrier_sch_r16_e_");
}

const char* phy_params_common_s::supported_activ_prs_processing_win_r17_opts::to_string() const
{
  static const char* names[] = {"n2", "n3", "n4"};
  return convert_enum_idx(names, 3, value, "phy_params_common_s::supported_activ_prs_processing_win_r17_e_");
}
uint8_t phy_params_common_s::supported_activ_prs_processing_win_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 3, 4};
  return map_enum_number(numbers, 3, value, "phy_params_common_s::supported_activ_prs_processing_win_r17_e_");
}

// Phy-ParametersFR1 ::= SEQUENCE
SRSASN_CODE phy_params_fr1_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pdcch_monitoring_single_occasion_present, 1));
  HANDLE_CODE(bref.pack(scs_60k_hz_present, 1));
  HANDLE_CODE(bref.pack(pdsch_256_qam_fr1_present, 1));
  HANDLE_CODE(bref.pack(pdsch_re_map_fr1_per_symbol_present, 1));

  if (pdsch_re_map_fr1_per_symbol_present) {
    HANDLE_CODE(pdsch_re_map_fr1_per_symbol.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= pdsch_re_map_fr1_per_slot_present;
    group_flags[1] |= pdcch_monitoring_single_span_first4_sym_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pdsch_re_map_fr1_per_slot_present, 1));
      if (pdsch_re_map_fr1_per_slot_present) {
        HANDLE_CODE(pdsch_re_map_fr1_per_slot.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pdcch_monitoring_single_span_first4_sym_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_fr1_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pdcch_monitoring_single_occasion_present, 1));
  HANDLE_CODE(bref.unpack(scs_60k_hz_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_256_qam_fr1_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_re_map_fr1_per_symbol_present, 1));

  if (pdsch_re_map_fr1_per_symbol_present) {
    HANDLE_CODE(pdsch_re_map_fr1_per_symbol.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(pdsch_re_map_fr1_per_slot_present, 1));
      if (pdsch_re_map_fr1_per_slot_present) {
        HANDLE_CODE(pdsch_re_map_fr1_per_slot.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(pdcch_monitoring_single_span_first4_sym_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void phy_params_fr1_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pdcch_monitoring_single_occasion_present) {
    j.write_str("pdcch-MonitoringSingleOccasion", "supported");
  }
  if (scs_60k_hz_present) {
    j.write_str("scs-60kHz", "supported");
  }
  if (pdsch_256_qam_fr1_present) {
    j.write_str("pdsch-256QAM-FR1", "supported");
  }
  if (pdsch_re_map_fr1_per_symbol_present) {
    j.write_str("pdsch-RE-MappingFR1-PerSymbol", pdsch_re_map_fr1_per_symbol.to_string());
  }
  if (ext) {
    if (pdsch_re_map_fr1_per_slot_present) {
      j.write_str("pdsch-RE-MappingFR1-PerSlot", pdsch_re_map_fr1_per_slot.to_string());
    }
    if (pdcch_monitoring_single_span_first4_sym_r16_present) {
      j.write_str("pdcch-MonitoringSingleSpanFirst4Sym-r16", "supported");
    }
  }
  j.end_obj();
}

const char* phy_params_fr1_s::pdsch_re_map_fr1_per_symbol_opts::to_string() const
{
  static const char* names[] = {"n10", "n20"};
  return convert_enum_idx(names, 2, value, "phy_params_fr1_s::pdsch_re_map_fr1_per_symbol_e_");
}
uint8_t phy_params_fr1_s::pdsch_re_map_fr1_per_symbol_opts::to_number() const
{
  static const uint8_t numbers[] = {10, 20};
  return map_enum_number(numbers, 2, value, "phy_params_fr1_s::pdsch_re_map_fr1_per_symbol_e_");
}

const char* phy_params_fr1_s::pdsch_re_map_fr1_per_slot_opts::to_string() const
{
  static const char* names[] = {"n16",
                                "n32",
                                "n48",
                                "n64",
                                "n80",
                                "n96",
                                "n112",
                                "n128",
                                "n144",
                                "n160",
                                "n176",
                                "n192",
                                "n208",
                                "n224",
                                "n240",
                                "n256"};
  return convert_enum_idx(names, 16, value, "phy_params_fr1_s::pdsch_re_map_fr1_per_slot_e_");
}
uint16_t phy_params_fr1_s::pdsch_re_map_fr1_per_slot_opts::to_number() const
{
  static const uint16_t numbers[] = {16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256};
  return map_enum_number(numbers, 16, value, "phy_params_fr1_s::pdsch_re_map_fr1_per_slot_e_");
}

// Phy-ParametersFR2 ::= SEQUENCE
SRSASN_CODE phy_params_fr2_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dummy_present, 1));
  HANDLE_CODE(bref.pack(pdsch_re_map_fr2_per_symbol_present, 1));

  if (pdsch_re_map_fr2_per_symbol_present) {
    HANDLE_CODE(pdsch_re_map_fr2_per_symbol.pack(bref));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= pcell_fr2_present;
    group_flags[0] |= pdsch_re_map_fr2_per_slot_present;
    group_flags[1] |= default_spatial_relation_pathloss_rs_r16_present;
    group_flags[1] |= spatial_relation_upd_ap_srs_r16_present;
    group_flags[1] |= max_num_srs_pos_spatial_relations_all_serving_cells_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pcell_fr2_present, 1));
      HANDLE_CODE(bref.pack(pdsch_re_map_fr2_per_slot_present, 1));
      if (pdsch_re_map_fr2_per_slot_present) {
        HANDLE_CODE(pdsch_re_map_fr2_per_slot.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(default_spatial_relation_pathloss_rs_r16_present, 1));
      HANDLE_CODE(bref.pack(spatial_relation_upd_ap_srs_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_srs_pos_spatial_relations_all_serving_cells_r16_present, 1));
      if (max_num_srs_pos_spatial_relations_all_serving_cells_r16_present) {
        HANDLE_CODE(max_num_srs_pos_spatial_relations_all_serving_cells_r16.pack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_fr2_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dummy_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_re_map_fr2_per_symbol_present, 1));

  if (pdsch_re_map_fr2_per_symbol_present) {
    HANDLE_CODE(pdsch_re_map_fr2_per_symbol.unpack(bref));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(pcell_fr2_present, 1));
      HANDLE_CODE(bref.unpack(pdsch_re_map_fr2_per_slot_present, 1));
      if (pdsch_re_map_fr2_per_slot_present) {
        HANDLE_CODE(pdsch_re_map_fr2_per_slot.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(default_spatial_relation_pathloss_rs_r16_present, 1));
      HANDLE_CODE(bref.unpack(spatial_relation_upd_ap_srs_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_srs_pos_spatial_relations_all_serving_cells_r16_present, 1));
      if (max_num_srs_pos_spatial_relations_all_serving_cells_r16_present) {
        HANDLE_CODE(max_num_srs_pos_spatial_relations_all_serving_cells_r16.unpack(bref));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void phy_params_fr2_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  if (pdsch_re_map_fr2_per_symbol_present) {
    j.write_str("pdsch-RE-MappingFR2-PerSymbol", pdsch_re_map_fr2_per_symbol.to_string());
  }
  if (ext) {
    if (pcell_fr2_present) {
      j.write_str("pCell-FR2", "supported");
    }
    if (pdsch_re_map_fr2_per_slot_present) {
      j.write_str("pdsch-RE-MappingFR2-PerSlot", pdsch_re_map_fr2_per_slot.to_string());
    }
    if (default_spatial_relation_pathloss_rs_r16_present) {
      j.write_str("defaultSpatialRelationPathlossRS-r16", "supported");
    }
    if (spatial_relation_upd_ap_srs_r16_present) {
      j.write_str("spatialRelationUpdateAP-SRS-r16", "supported");
    }
    if (max_num_srs_pos_spatial_relations_all_serving_cells_r16_present) {
      j.write_str("maxNumberSRS-PosSpatialRelationsAllServingCells-r16",
                  max_num_srs_pos_spatial_relations_all_serving_cells_r16.to_string());
    }
  }
  j.end_obj();
}

const char* phy_params_fr2_s::pdsch_re_map_fr2_per_symbol_opts::to_string() const
{
  static const char* names[] = {"n6", "n20"};
  return convert_enum_idx(names, 2, value, "phy_params_fr2_s::pdsch_re_map_fr2_per_symbol_e_");
}
uint8_t phy_params_fr2_s::pdsch_re_map_fr2_per_symbol_opts::to_number() const
{
  static const uint8_t numbers[] = {6, 20};
  return map_enum_number(numbers, 2, value, "phy_params_fr2_s::pdsch_re_map_fr2_per_symbol_e_");
}

const char* phy_params_fr2_s::pdsch_re_map_fr2_per_slot_opts::to_string() const
{
  static const char* names[] = {"n16",
                                "n32",
                                "n48",
                                "n64",
                                "n80",
                                "n96",
                                "n112",
                                "n128",
                                "n144",
                                "n160",
                                "n176",
                                "n192",
                                "n208",
                                "n224",
                                "n240",
                                "n256"};
  return convert_enum_idx(names, 16, value, "phy_params_fr2_s::pdsch_re_map_fr2_per_slot_e_");
}
uint16_t phy_params_fr2_s::pdsch_re_map_fr2_per_slot_opts::to_number() const
{
  static const uint16_t numbers[] = {16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240, 256};
  return map_enum_number(numbers, 16, value, "phy_params_fr2_s::pdsch_re_map_fr2_per_slot_e_");
}

const char* phy_params_fr2_s::max_num_srs_pos_spatial_relations_all_serving_cells_r16_opts::to_string() const
{
  static const char* names[] = {"n0", "n1", "n2", "n4", "n8", "n16"};
  return convert_enum_idx(
      names, 6, value, "phy_params_fr2_s::max_num_srs_pos_spatial_relations_all_serving_cells_r16_e_");
}
uint8_t phy_params_fr2_s::max_num_srs_pos_spatial_relations_all_serving_cells_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {0, 1, 2, 4, 8, 16};
  return map_enum_number(
      numbers, 6, value, "phy_params_fr2_s::max_num_srs_pos_spatial_relations_all_serving_cells_r16_e_");
}

// Phy-ParametersFRX-Diff ::= SEQUENCE
SRSASN_CODE phy_params_frx_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dyn_sfi_present, 1));
  HANDLE_CODE(bref.pack(dummy1_present, 1));
  HANDLE_CODE(bref.pack(two_fl_dmrs_present, 1));
  HANDLE_CODE(bref.pack(dummy2_present, 1));
  HANDLE_CODE(bref.pack(dummy3_present, 1));
  HANDLE_CODE(bref.pack(supported_dmrs_type_dl_present, 1));
  HANDLE_CODE(bref.pack(supported_dmrs_type_ul_present, 1));
  HANDLE_CODE(bref.pack(semi_open_loop_csi_present, 1));
  HANDLE_CODE(bref.pack(csi_report_without_pmi_present, 1));
  HANDLE_CODE(bref.pack(csi_report_without_cqi_present, 1));
  HANDLE_CODE(bref.pack(one_ports_ptrs_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_f0_2_consec_symbols_present, 1));
  HANDLE_CODE(bref.pack(pucch_f2_with_fh_present, 1));
  HANDLE_CODE(bref.pack(pucch_f3_with_fh_present, 1));
  HANDLE_CODE(bref.pack(pucch_f4_with_fh_present, 1));
  HANDLE_CODE(bref.pack(pucch_f0_2_without_fh_present, 1));
  HANDLE_CODE(bref.pack(pucch_f1_3_4_without_fh_present, 1));
  HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_multi_per_slot_present, 1));
  HANDLE_CODE(bref.pack(uci_code_block_segmentation_present, 1));
  HANDLE_CODE(bref.pack(one_pucch_long_and_short_format_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_any_others_in_slot_present, 1));
  HANDLE_CODE(bref.pack(intra_slot_freq_hop_pusch_present, 1));
  HANDLE_CODE(bref.pack(pusch_lbrm_present, 1));
  HANDLE_CODE(bref.pack(pdcch_blind_detection_ca_present, 1));
  HANDLE_CODE(bref.pack(tpc_pusch_rnti_present, 1));
  HANDLE_CODE(bref.pack(tpc_pucch_rnti_present, 1));
  HANDLE_CODE(bref.pack(tpc_srs_rnti_present, 1));
  HANDLE_CODE(bref.pack(absolute_tpc_cmd_present, 1));
  HANDLE_CODE(bref.pack(two_different_tpc_loop_pusch_present, 1));
  HANDLE_CODE(bref.pack(two_different_tpc_loop_pucch_present, 1));
  HANDLE_CODE(bref.pack(pusch_half_pi_bpsk_present, 1));
  HANDLE_CODE(bref.pack(pucch_f3_4_half_pi_bpsk_present, 1));
  HANDLE_CODE(bref.pack(almost_contiguous_cp_ofdm_ul_present, 1));
  HANDLE_CODE(bref.pack(sp_csi_rs_present, 1));
  HANDLE_CODE(bref.pack(sp_csi_im_present, 1));
  HANDLE_CODE(bref.pack(tdd_multi_dl_ul_switch_per_slot_present, 1));
  HANDLE_CODE(bref.pack(multiple_coreset_present, 1));

  if (dummy1_present) {
    HANDLE_CODE(dummy1.pack(bref));
  }
  if (two_fl_dmrs_present) {
    HANDLE_CODE(two_fl_dmrs.pack(bref));
  }
  if (dummy2_present) {
    HANDLE_CODE(dummy2.pack(bref));
  }
  if (dummy3_present) {
    HANDLE_CODE(dummy3.pack(bref));
  }
  if (supported_dmrs_type_dl_present) {
    HANDLE_CODE(supported_dmrs_type_dl.pack(bref));
  }
  if (supported_dmrs_type_ul_present) {
    HANDLE_CODE(supported_dmrs_type_ul.pack(bref));
  }
  if (one_ports_ptrs_present) {
    HANDLE_CODE(one_ports_ptrs.pack(bref));
  }
  if (pdcch_blind_detection_ca_present) {
    HANDLE_CODE(pack_integer(bref, pdcch_blind_detection_ca, (uint8_t)4u, (uint8_t)16u));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= csi_rs_im_reception_for_feedback.is_present();
    group_flags[0] |= csi_rs_proc_framework_for_srs.is_present();
    group_flags[0] |= csi_report_framework.is_present();
    group_flags[0] |= mux_sr_harq_ack_csi_pucch_once_per_slot.is_present();
    group_flags[0] |= mux_sr_harq_ack_pucch_present;
    group_flags[0] |= mux_multiple_group_ctrl_ch_overlap_present;
    group_flags[0] |= dl_sched_offset_pdsch_type_a_present;
    group_flags[0] |= dl_sched_offset_pdsch_type_b_present;
    group_flags[0] |= ul_sched_offset_present;
    group_flags[0] |= dl_64_qam_mcs_table_alt_present;
    group_flags[0] |= ul_64_qam_mcs_table_alt_present;
    group_flags[0] |= cqi_table_alt_present;
    group_flags[0] |= one_fl_dmrs_two_add_dmrs_ul_present;
    group_flags[0] |= two_fl_dmrs_two_add_dmrs_ul_present;
    group_flags[0] |= one_fl_dmrs_three_add_dmrs_ul_present;
    group_flags[1] |= pdcch_blind_detection_nrdc.is_present();
    group_flags[1] |= mux_harq_ack_pusch_diff_symbol_present;
    group_flags[2] |= type1_harq_ack_codebook_r16_present;
    group_flags[2] |= enhanced_pwr_ctrl_r16_present;
    group_flags[2] |= simul_tci_act_multiple_cc_r16_present;
    group_flags[2] |= simul_spatial_relation_multiple_cc_r16_present;
    group_flags[2] |= cli_rssi_fdm_dl_r16_present;
    group_flags[2] |= cli_srs_rsrp_fdm_dl_r16_present;
    group_flags[2] |= max_layers_mimo_adaptation_r16_present;
    group_flags[2] |= aggregation_factor_sps_dl_r16_present;
    group_flags[2] |= max_total_res_for_one_freq_range_r16.is_present();
    group_flags[2] |= csi_report_framework_ext_r16.is_present();
    group_flags[3] |= two_tci_act_serving_cell_in_cc_list_r16_present;
    group_flags[4] |= cri_ri_cqi_without_non_pmi_port_ind_r16_present;
    group_flags[5] |= cqi_4_bits_subband_tn_non_shared_spec_ch_access_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(csi_rs_im_reception_for_feedback.is_present(), 1));
      HANDLE_CODE(bref.pack(csi_rs_proc_framework_for_srs.is_present(), 1));
      HANDLE_CODE(bref.pack(csi_report_framework.is_present(), 1));
      HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_once_per_slot.is_present(), 1));
      HANDLE_CODE(bref.pack(mux_sr_harq_ack_pucch_present, 1));
      HANDLE_CODE(bref.pack(mux_multiple_group_ctrl_ch_overlap_present, 1));
      HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_a_present, 1));
      HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_b_present, 1));
      HANDLE_CODE(bref.pack(ul_sched_offset_present, 1));
      HANDLE_CODE(bref.pack(dl_64_qam_mcs_table_alt_present, 1));
      HANDLE_CODE(bref.pack(ul_64_qam_mcs_table_alt_present, 1));
      HANDLE_CODE(bref.pack(cqi_table_alt_present, 1));
      HANDLE_CODE(bref.pack(one_fl_dmrs_two_add_dmrs_ul_present, 1));
      HANDLE_CODE(bref.pack(two_fl_dmrs_two_add_dmrs_ul_present, 1));
      HANDLE_CODE(bref.pack(one_fl_dmrs_three_add_dmrs_ul_present, 1));
      if (csi_rs_im_reception_for_feedback.is_present()) {
        HANDLE_CODE(csi_rs_im_reception_for_feedback->pack(bref));
      }
      if (csi_rs_proc_framework_for_srs.is_present()) {
        HANDLE_CODE(csi_rs_proc_framework_for_srs->pack(bref));
      }
      if (csi_report_framework.is_present()) {
        HANDLE_CODE(csi_report_framework->pack(bref));
      }
      if (mux_sr_harq_ack_csi_pucch_once_per_slot.is_present()) {
        HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_once_per_slot->same_symbol_present, 1));
        HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_once_per_slot->diff_symbol_present, 1));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(pdcch_blind_detection_nrdc.is_present(), 1));
      HANDLE_CODE(bref.pack(mux_harq_ack_pusch_diff_symbol_present, 1));
      if (pdcch_blind_detection_nrdc.is_present()) {
        HANDLE_CODE(
            pack_integer(bref, pdcch_blind_detection_nrdc->pdcch_blind_detection_mcg_ue, (uint8_t)1u, (uint8_t)15u));
        HANDLE_CODE(
            pack_integer(bref, pdcch_blind_detection_nrdc->pdcch_blind_detection_scg_ue, (uint8_t)1u, (uint8_t)15u));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(type1_harq_ack_codebook_r16_present, 1));
      HANDLE_CODE(bref.pack(enhanced_pwr_ctrl_r16_present, 1));
      HANDLE_CODE(bref.pack(simul_tci_act_multiple_cc_r16_present, 1));
      HANDLE_CODE(bref.pack(simul_spatial_relation_multiple_cc_r16_present, 1));
      HANDLE_CODE(bref.pack(cli_rssi_fdm_dl_r16_present, 1));
      HANDLE_CODE(bref.pack(cli_srs_rsrp_fdm_dl_r16_present, 1));
      HANDLE_CODE(bref.pack(max_layers_mimo_adaptation_r16_present, 1));
      HANDLE_CODE(bref.pack(aggregation_factor_sps_dl_r16_present, 1));
      HANDLE_CODE(bref.pack(max_total_res_for_one_freq_range_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(csi_report_framework_ext_r16.is_present(), 1));
      if (max_total_res_for_one_freq_range_r16.is_present()) {
        HANDLE_CODE(
            bref.pack(max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16_present, 1));
        HANDLE_CODE(bref.pack(max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16_present, 1));
        if (max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16_present) {
          HANDLE_CODE(max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16.pack(bref));
        }
        if (max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16_present) {
          HANDLE_CODE(max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16.pack(bref));
        }
      }
      if (csi_report_framework_ext_r16.is_present()) {
        HANDLE_CODE(csi_report_framework_ext_r16->pack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(two_tci_act_serving_cell_in_cc_list_r16_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cri_ri_cqi_without_non_pmi_port_ind_r16_present, 1));
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(cqi_4_bits_subband_tn_non_shared_spec_ch_access_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_frx_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dyn_sfi_present, 1));
  HANDLE_CODE(bref.unpack(dummy1_present, 1));
  HANDLE_CODE(bref.unpack(two_fl_dmrs_present, 1));
  HANDLE_CODE(bref.unpack(dummy2_present, 1));
  HANDLE_CODE(bref.unpack(dummy3_present, 1));
  HANDLE_CODE(bref.unpack(supported_dmrs_type_dl_present, 1));
  HANDLE_CODE(bref.unpack(supported_dmrs_type_ul_present, 1));
  HANDLE_CODE(bref.unpack(semi_open_loop_csi_present, 1));
  HANDLE_CODE(bref.unpack(csi_report_without_pmi_present, 1));
  HANDLE_CODE(bref.unpack(csi_report_without_cqi_present, 1));
  HANDLE_CODE(bref.unpack(one_ports_ptrs_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_f0_2_consec_symbols_present, 1));
  HANDLE_CODE(bref.unpack(pucch_f2_with_fh_present, 1));
  HANDLE_CODE(bref.unpack(pucch_f3_with_fh_present, 1));
  HANDLE_CODE(bref.unpack(pucch_f4_with_fh_present, 1));
  HANDLE_CODE(bref.unpack(pucch_f0_2_without_fh_present, 1));
  HANDLE_CODE(bref.unpack(pucch_f1_3_4_without_fh_present, 1));
  HANDLE_CODE(bref.unpack(mux_sr_harq_ack_csi_pucch_multi_per_slot_present, 1));
  HANDLE_CODE(bref.unpack(uci_code_block_segmentation_present, 1));
  HANDLE_CODE(bref.unpack(one_pucch_long_and_short_format_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_any_others_in_slot_present, 1));
  HANDLE_CODE(bref.unpack(intra_slot_freq_hop_pusch_present, 1));
  HANDLE_CODE(bref.unpack(pusch_lbrm_present, 1));
  HANDLE_CODE(bref.unpack(pdcch_blind_detection_ca_present, 1));
  HANDLE_CODE(bref.unpack(tpc_pusch_rnti_present, 1));
  HANDLE_CODE(bref.unpack(tpc_pucch_rnti_present, 1));
  HANDLE_CODE(bref.unpack(tpc_srs_rnti_present, 1));
  HANDLE_CODE(bref.unpack(absolute_tpc_cmd_present, 1));
  HANDLE_CODE(bref.unpack(two_different_tpc_loop_pusch_present, 1));
  HANDLE_CODE(bref.unpack(two_different_tpc_loop_pucch_present, 1));
  HANDLE_CODE(bref.unpack(pusch_half_pi_bpsk_present, 1));
  HANDLE_CODE(bref.unpack(pucch_f3_4_half_pi_bpsk_present, 1));
  HANDLE_CODE(bref.unpack(almost_contiguous_cp_ofdm_ul_present, 1));
  HANDLE_CODE(bref.unpack(sp_csi_rs_present, 1));
  HANDLE_CODE(bref.unpack(sp_csi_im_present, 1));
  HANDLE_CODE(bref.unpack(tdd_multi_dl_ul_switch_per_slot_present, 1));
  HANDLE_CODE(bref.unpack(multiple_coreset_present, 1));

  if (dummy1_present) {
    HANDLE_CODE(dummy1.unpack(bref));
  }
  if (two_fl_dmrs_present) {
    HANDLE_CODE(two_fl_dmrs.unpack(bref));
  }
  if (dummy2_present) {
    HANDLE_CODE(dummy2.unpack(bref));
  }
  if (dummy3_present) {
    HANDLE_CODE(dummy3.unpack(bref));
  }
  if (supported_dmrs_type_dl_present) {
    HANDLE_CODE(supported_dmrs_type_dl.unpack(bref));
  }
  if (supported_dmrs_type_ul_present) {
    HANDLE_CODE(supported_dmrs_type_ul.unpack(bref));
  }
  if (one_ports_ptrs_present) {
    HANDLE_CODE(one_ports_ptrs.unpack(bref));
  }
  if (pdcch_blind_detection_ca_present) {
    HANDLE_CODE(unpack_integer(pdcch_blind_detection_ca, bref, (uint8_t)4u, (uint8_t)16u));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(6);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(csi_rs_im_reception_for_feedback, bref);
      unpack_presence_flag(csi_rs_proc_framework_for_srs, bref);
      unpack_presence_flag(csi_report_framework, bref);
      unpack_presence_flag(mux_sr_harq_ack_csi_pucch_once_per_slot, bref);
      HANDLE_CODE(bref.unpack(mux_sr_harq_ack_pucch_present, 1));
      HANDLE_CODE(bref.unpack(mux_multiple_group_ctrl_ch_overlap_present, 1));
      HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_a_present, 1));
      HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_b_present, 1));
      HANDLE_CODE(bref.unpack(ul_sched_offset_present, 1));
      HANDLE_CODE(bref.unpack(dl_64_qam_mcs_table_alt_present, 1));
      HANDLE_CODE(bref.unpack(ul_64_qam_mcs_table_alt_present, 1));
      HANDLE_CODE(bref.unpack(cqi_table_alt_present, 1));
      HANDLE_CODE(bref.unpack(one_fl_dmrs_two_add_dmrs_ul_present, 1));
      HANDLE_CODE(bref.unpack(two_fl_dmrs_two_add_dmrs_ul_present, 1));
      HANDLE_CODE(bref.unpack(one_fl_dmrs_three_add_dmrs_ul_present, 1));
      if (csi_rs_im_reception_for_feedback.is_present()) {
        HANDLE_CODE(csi_rs_im_reception_for_feedback->unpack(bref));
      }
      if (csi_rs_proc_framework_for_srs.is_present()) {
        HANDLE_CODE(csi_rs_proc_framework_for_srs->unpack(bref));
      }
      if (csi_report_framework.is_present()) {
        HANDLE_CODE(csi_report_framework->unpack(bref));
      }
      if (mux_sr_harq_ack_csi_pucch_once_per_slot.is_present()) {
        HANDLE_CODE(bref.unpack(mux_sr_harq_ack_csi_pucch_once_per_slot->same_symbol_present, 1));
        HANDLE_CODE(bref.unpack(mux_sr_harq_ack_csi_pucch_once_per_slot->diff_symbol_present, 1));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(pdcch_blind_detection_nrdc, bref);
      HANDLE_CODE(bref.unpack(mux_harq_ack_pusch_diff_symbol_present, 1));
      if (pdcch_blind_detection_nrdc.is_present()) {
        HANDLE_CODE(
            unpack_integer(pdcch_blind_detection_nrdc->pdcch_blind_detection_mcg_ue, bref, (uint8_t)1u, (uint8_t)15u));
        HANDLE_CODE(
            unpack_integer(pdcch_blind_detection_nrdc->pdcch_blind_detection_scg_ue, bref, (uint8_t)1u, (uint8_t)15u));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(type1_harq_ack_codebook_r16_present, 1));
      HANDLE_CODE(bref.unpack(enhanced_pwr_ctrl_r16_present, 1));
      HANDLE_CODE(bref.unpack(simul_tci_act_multiple_cc_r16_present, 1));
      HANDLE_CODE(bref.unpack(simul_spatial_relation_multiple_cc_r16_present, 1));
      HANDLE_CODE(bref.unpack(cli_rssi_fdm_dl_r16_present, 1));
      HANDLE_CODE(bref.unpack(cli_srs_rsrp_fdm_dl_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_layers_mimo_adaptation_r16_present, 1));
      HANDLE_CODE(bref.unpack(aggregation_factor_sps_dl_r16_present, 1));
      unpack_presence_flag(max_total_res_for_one_freq_range_r16, bref);
      unpack_presence_flag(csi_report_framework_ext_r16, bref);
      if (max_total_res_for_one_freq_range_r16.is_present()) {
        HANDLE_CODE(
            bref.unpack(max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16_present, 1));
        HANDLE_CODE(bref.unpack(max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16_present, 1));
        if (max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16_present) {
          HANDLE_CODE(max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16.unpack(bref));
        }
        if (max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16_present) {
          HANDLE_CODE(max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16.unpack(bref));
        }
      }
      if (csi_report_framework_ext_r16.is_present()) {
        HANDLE_CODE(csi_report_framework_ext_r16->unpack(bref));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(two_tci_act_serving_cell_in_cc_list_r16_present, 1));
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(cri_ri_cqi_without_non_pmi_port_ind_r16_present, 1));
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(cqi_4_bits_subband_tn_non_shared_spec_ch_access_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void phy_params_frx_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dyn_sfi_present) {
    j.write_str("dynamicSFI", "supported");
  }
  if (dummy1_present) {
    j.write_str("dummy1", dummy1.to_string());
  }
  if (two_fl_dmrs_present) {
    j.write_str("twoFL-DMRS", two_fl_dmrs.to_string());
  }
  if (dummy2_present) {
    j.write_str("dummy2", dummy2.to_string());
  }
  if (dummy3_present) {
    j.write_str("dummy3", dummy3.to_string());
  }
  if (supported_dmrs_type_dl_present) {
    j.write_str("supportedDMRS-TypeDL", supported_dmrs_type_dl.to_string());
  }
  if (supported_dmrs_type_ul_present) {
    j.write_str("supportedDMRS-TypeUL", supported_dmrs_type_ul.to_string());
  }
  if (semi_open_loop_csi_present) {
    j.write_str("semiOpenLoopCSI", "supported");
  }
  if (csi_report_without_pmi_present) {
    j.write_str("csi-ReportWithoutPMI", "supported");
  }
  if (csi_report_without_cqi_present) {
    j.write_str("csi-ReportWithoutCQI", "supported");
  }
  if (one_ports_ptrs_present) {
    j.write_str("onePortsPTRS", one_ports_ptrs.to_string());
  }
  if (two_pucch_f0_2_consec_symbols_present) {
    j.write_str("twoPUCCH-F0-2-ConsecSymbols", "supported");
  }
  if (pucch_f2_with_fh_present) {
    j.write_str("pucch-F2-WithFH", "supported");
  }
  if (pucch_f3_with_fh_present) {
    j.write_str("pucch-F3-WithFH", "supported");
  }
  if (pucch_f4_with_fh_present) {
    j.write_str("pucch-F4-WithFH", "supported");
  }
  if (pucch_f0_2_without_fh_present) {
    j.write_str("pucch-F0-2WithoutFH", "notSupported");
  }
  if (pucch_f1_3_4_without_fh_present) {
    j.write_str("pucch-F1-3-4WithoutFH", "notSupported");
  }
  if (mux_sr_harq_ack_csi_pucch_multi_per_slot_present) {
    j.write_str("mux-SR-HARQ-ACK-CSI-PUCCH-MultiPerSlot", "supported");
  }
  if (uci_code_block_segmentation_present) {
    j.write_str("uci-CodeBlockSegmentation", "supported");
  }
  if (one_pucch_long_and_short_format_present) {
    j.write_str("onePUCCH-LongAndShortFormat", "supported");
  }
  if (two_pucch_any_others_in_slot_present) {
    j.write_str("twoPUCCH-AnyOthersInSlot", "supported");
  }
  if (intra_slot_freq_hop_pusch_present) {
    j.write_str("intraSlotFreqHopping-PUSCH", "supported");
  }
  if (pusch_lbrm_present) {
    j.write_str("pusch-LBRM", "supported");
  }
  if (pdcch_blind_detection_ca_present) {
    j.write_int("pdcch-BlindDetectionCA", pdcch_blind_detection_ca);
  }
  if (tpc_pusch_rnti_present) {
    j.write_str("tpc-PUSCH-RNTI", "supported");
  }
  if (tpc_pucch_rnti_present) {
    j.write_str("tpc-PUCCH-RNTI", "supported");
  }
  if (tpc_srs_rnti_present) {
    j.write_str("tpc-SRS-RNTI", "supported");
  }
  if (absolute_tpc_cmd_present) {
    j.write_str("absoluteTPC-Command", "supported");
  }
  if (two_different_tpc_loop_pusch_present) {
    j.write_str("twoDifferentTPC-Loop-PUSCH", "supported");
  }
  if (two_different_tpc_loop_pucch_present) {
    j.write_str("twoDifferentTPC-Loop-PUCCH", "supported");
  }
  if (pusch_half_pi_bpsk_present) {
    j.write_str("pusch-HalfPi-BPSK", "supported");
  }
  if (pucch_f3_4_half_pi_bpsk_present) {
    j.write_str("pucch-F3-4-HalfPi-BPSK", "supported");
  }
  if (almost_contiguous_cp_ofdm_ul_present) {
    j.write_str("almostContiguousCP-OFDM-UL", "supported");
  }
  if (sp_csi_rs_present) {
    j.write_str("sp-CSI-RS", "supported");
  }
  if (sp_csi_im_present) {
    j.write_str("sp-CSI-IM", "supported");
  }
  if (tdd_multi_dl_ul_switch_per_slot_present) {
    j.write_str("tdd-MultiDL-UL-SwitchPerSlot", "supported");
  }
  if (multiple_coreset_present) {
    j.write_str("multipleCORESET", "supported");
  }
  if (ext) {
    if (csi_rs_im_reception_for_feedback.is_present()) {
      j.write_fieldname("csi-RS-IM-ReceptionForFeedback");
      csi_rs_im_reception_for_feedback->to_json(j);
    }
    if (csi_rs_proc_framework_for_srs.is_present()) {
      j.write_fieldname("csi-RS-ProcFrameworkForSRS");
      csi_rs_proc_framework_for_srs->to_json(j);
    }
    if (csi_report_framework.is_present()) {
      j.write_fieldname("csi-ReportFramework");
      csi_report_framework->to_json(j);
    }
    if (mux_sr_harq_ack_csi_pucch_once_per_slot.is_present()) {
      j.write_fieldname("mux-SR-HARQ-ACK-CSI-PUCCH-OncePerSlot");
      j.start_obj();
      if (mux_sr_harq_ack_csi_pucch_once_per_slot->same_symbol_present) {
        j.write_str("sameSymbol", "supported");
      }
      if (mux_sr_harq_ack_csi_pucch_once_per_slot->diff_symbol_present) {
        j.write_str("diffSymbol", "supported");
      }
      j.end_obj();
    }
    if (mux_sr_harq_ack_pucch_present) {
      j.write_str("mux-SR-HARQ-ACK-PUCCH", "supported");
    }
    if (mux_multiple_group_ctrl_ch_overlap_present) {
      j.write_str("mux-MultipleGroupCtrlCH-Overlap", "supported");
    }
    if (dl_sched_offset_pdsch_type_a_present) {
      j.write_str("dl-SchedulingOffset-PDSCH-TypeA", "supported");
    }
    if (dl_sched_offset_pdsch_type_b_present) {
      j.write_str("dl-SchedulingOffset-PDSCH-TypeB", "supported");
    }
    if (ul_sched_offset_present) {
      j.write_str("ul-SchedulingOffset", "supported");
    }
    if (dl_64_qam_mcs_table_alt_present) {
      j.write_str("dl-64QAM-MCS-TableAlt", "supported");
    }
    if (ul_64_qam_mcs_table_alt_present) {
      j.write_str("ul-64QAM-MCS-TableAlt", "supported");
    }
    if (cqi_table_alt_present) {
      j.write_str("cqi-TableAlt", "supported");
    }
    if (one_fl_dmrs_two_add_dmrs_ul_present) {
      j.write_str("oneFL-DMRS-TwoAdditionalDMRS-UL", "supported");
    }
    if (two_fl_dmrs_two_add_dmrs_ul_present) {
      j.write_str("twoFL-DMRS-TwoAdditionalDMRS-UL", "supported");
    }
    if (one_fl_dmrs_three_add_dmrs_ul_present) {
      j.write_str("oneFL-DMRS-ThreeAdditionalDMRS-UL", "supported");
    }
    if (pdcch_blind_detection_nrdc.is_present()) {
      j.write_fieldname("pdcch-BlindDetectionNRDC");
      j.start_obj();
      j.write_int("pdcch-BlindDetectionMCG-UE", pdcch_blind_detection_nrdc->pdcch_blind_detection_mcg_ue);
      j.write_int("pdcch-BlindDetectionSCG-UE", pdcch_blind_detection_nrdc->pdcch_blind_detection_scg_ue);
      j.end_obj();
    }
    if (mux_harq_ack_pusch_diff_symbol_present) {
      j.write_str("mux-HARQ-ACK-PUSCH-DiffSymbol", "supported");
    }
    if (type1_harq_ack_codebook_r16_present) {
      j.write_str("type1-HARQ-ACK-Codebook-r16", "supported");
    }
    if (enhanced_pwr_ctrl_r16_present) {
      j.write_str("enhancedPowerControl-r16", "supported");
    }
    if (simul_tci_act_multiple_cc_r16_present) {
      j.write_str("simultaneousTCI-ActMultipleCC-r16", "supported");
    }
    if (simul_spatial_relation_multiple_cc_r16_present) {
      j.write_str("simultaneousSpatialRelationMultipleCC-r16", "supported");
    }
    if (cli_rssi_fdm_dl_r16_present) {
      j.write_str("cli-RSSI-FDM-DL-r16", "supported");
    }
    if (cli_srs_rsrp_fdm_dl_r16_present) {
      j.write_str("cli-SRS-RSRP-FDM-DL-r16", "supported");
    }
    if (max_layers_mimo_adaptation_r16_present) {
      j.write_str("maxLayersMIMO-Adaptation-r16", "supported");
    }
    if (aggregation_factor_sps_dl_r16_present) {
      j.write_str("aggregationFactorSPS-DL-r16", "supported");
    }
    if (max_total_res_for_one_freq_range_r16.is_present()) {
      j.write_fieldname("maxTotalResourcesForOneFreqRange-r16");
      j.start_obj();
      if (max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16_present) {
        j.write_str("maxNumberResWithinSlotAcrossCC-OneFR-r16",
                    max_total_res_for_one_freq_range_r16->max_num_res_within_slot_across_cc_one_fr_r16.to_string());
      }
      if (max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16_present) {
        j.write_str("maxNumberResAcrossCC-OneFR-r16",
                    max_total_res_for_one_freq_range_r16->max_num_res_across_cc_one_fr_r16.to_string());
      }
      j.end_obj();
    }
    if (csi_report_framework_ext_r16.is_present()) {
      j.write_fieldname("csi-ReportFrameworkExt-r16");
      csi_report_framework_ext_r16->to_json(j);
    }
    if (two_tci_act_serving_cell_in_cc_list_r16_present) {
      j.write_str("twoTCI-Act-servingCellInCC-List-r16", "supported");
    }
    if (cri_ri_cqi_without_non_pmi_port_ind_r16_present) {
      j.write_str("cri-RI-CQI-WithoutNon-PMI-PortInd-r16", "supported");
    }
    if (cqi_4_bits_subband_tn_non_shared_spec_ch_access_r17_present) {
      j.write_str("cqi-4-BitsSubbandTN-NonSharedSpectrumChAccess-r17", "supported");
    }
  }
  j.end_obj();
}

const char* phy_params_frx_diff_s::supported_dmrs_type_dl_opts::to_string() const
{
  static const char* names[] = {"type1", "type1And2"};
  return convert_enum_idx(names, 2, value, "phy_params_frx_diff_s::supported_dmrs_type_dl_e_");
}

const char* phy_params_frx_diff_s::supported_dmrs_type_ul_opts::to_string() const
{
  static const char* names[] = {"type1", "type1And2"};
  return convert_enum_idx(names, 2, value, "phy_params_frx_diff_s::supported_dmrs_type_ul_e_");
}

const char* phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::
    max_num_res_within_slot_across_cc_one_fr_r16_opts::to_string() const
{
  static const char* names[] = {"n2", "n4", "n8", "n12", "n16", "n32", "n64", "n128"};
  return convert_enum_idx(names,
                          8,
                          value,
                          "phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::max_num_res_within_slot_"
                          "across_cc_one_fr_r16_e_");
}
uint8_t phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::
    max_num_res_within_slot_across_cc_one_fr_r16_opts::to_number() const
{
  static const uint8_t numbers[] = {2, 4, 8, 12, 16, 32, 64, 128};
  return map_enum_number(numbers,
                         8,
                         value,
                         "phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::max_num_res_within_slot_"
                         "across_cc_one_fr_r16_e_");
}

const char*
phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::max_num_res_across_cc_one_fr_r16_opts::to_string() const
{
  static const char* names[] = {
      "n2", "n4", "n8", "n12", "n16", "n32", "n40", "n48", "n64", "n72", "n80", "n96", "n128", "n256"};
  return convert_enum_idx(
      names,
      14,
      value,
      "phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::max_num_res_across_cc_one_fr_r16_e_");
}
uint16_t
phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::max_num_res_across_cc_one_fr_r16_opts::to_number() const
{
  static const uint16_t numbers[] = {2, 4, 8, 12, 16, 32, 40, 48, 64, 72, 80, 96, 128, 256};
  return map_enum_number(
      numbers,
      14,
      value,
      "phy_params_frx_diff_s::max_total_res_for_one_freq_range_r16_s_::max_num_res_across_cc_one_fr_r16_e_");
}

// Phy-ParametersXDD-Diff ::= SEQUENCE
SRSASN_CODE phy_params_xdd_diff_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(dyn_sfi_present, 1));
  HANDLE_CODE(bref.pack(two_pucch_f0_2_consec_symbols_present, 1));
  HANDLE_CODE(bref.pack(two_different_tpc_loop_pusch_present, 1));
  HANDLE_CODE(bref.pack(two_different_tpc_loop_pucch_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= dl_sched_offset_pdsch_type_a_present;
    group_flags[0] |= dl_sched_offset_pdsch_type_b_present;
    group_flags[0] |= ul_sched_offset_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_a_present, 1));
      HANDLE_CODE(bref.pack(dl_sched_offset_pdsch_type_b_present, 1));
      HANDLE_CODE(bref.pack(ul_sched_offset_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_xdd_diff_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(dyn_sfi_present, 1));
  HANDLE_CODE(bref.unpack(two_pucch_f0_2_consec_symbols_present, 1));
  HANDLE_CODE(bref.unpack(two_different_tpc_loop_pusch_present, 1));
  HANDLE_CODE(bref.unpack(two_different_tpc_loop_pucch_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_a_present, 1));
      HANDLE_CODE(bref.unpack(dl_sched_offset_pdsch_type_b_present, 1));
      HANDLE_CODE(bref.unpack(ul_sched_offset_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void phy_params_xdd_diff_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (dyn_sfi_present) {
    j.write_str("dynamicSFI", "supported");
  }
  if (two_pucch_f0_2_consec_symbols_present) {
    j.write_str("twoPUCCH-F0-2-ConsecSymbols", "supported");
  }
  if (two_different_tpc_loop_pusch_present) {
    j.write_str("twoDifferentTPC-Loop-PUSCH", "supported");
  }
  if (two_different_tpc_loop_pucch_present) {
    j.write_str("twoDifferentTPC-Loop-PUCCH", "supported");
  }
  if (ext) {
    if (dl_sched_offset_pdsch_type_a_present) {
      j.write_str("dl-SchedulingOffset-PDSCH-TypeA", "supported");
    }
    if (dl_sched_offset_pdsch_type_b_present) {
      j.write_str("dl-SchedulingOffset-PDSCH-TypeB", "supported");
    }
    if (ul_sched_offset_present) {
      j.write_str("ul-SchedulingOffset", "supported");
    }
  }
  j.end_obj();
}

// Phy-Parameters ::= SEQUENCE
SRSASN_CODE phy_params_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(phy_params_common_present, 1));
  HANDLE_CODE(bref.pack(phy_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.pack(phy_params_frx_diff_present, 1));
  HANDLE_CODE(bref.pack(phy_params_fr1_present, 1));
  HANDLE_CODE(bref.pack(phy_params_fr2_present, 1));

  if (phy_params_common_present) {
    HANDLE_CODE(phy_params_common.pack(bref));
  }
  if (phy_params_xdd_diff_present) {
    HANDLE_CODE(phy_params_xdd_diff.pack(bref));
  }
  if (phy_params_frx_diff_present) {
    HANDLE_CODE(phy_params_frx_diff.pack(bref));
  }
  if (phy_params_fr1_present) {
    HANDLE_CODE(phy_params_fr1.pack(bref));
  }
  if (phy_params_fr2_present) {
    HANDLE_CODE(phy_params_fr2.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(phy_params_common_present, 1));
  HANDLE_CODE(bref.unpack(phy_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.unpack(phy_params_frx_diff_present, 1));
  HANDLE_CODE(bref.unpack(phy_params_fr1_present, 1));
  HANDLE_CODE(bref.unpack(phy_params_fr2_present, 1));

  if (phy_params_common_present) {
    HANDLE_CODE(phy_params_common.unpack(bref));
  }
  if (phy_params_xdd_diff_present) {
    HANDLE_CODE(phy_params_xdd_diff.unpack(bref));
  }
  if (phy_params_frx_diff_present) {
    HANDLE_CODE(phy_params_frx_diff.unpack(bref));
  }
  if (phy_params_fr1_present) {
    HANDLE_CODE(phy_params_fr1.unpack(bref));
  }
  if (phy_params_fr2_present) {
    HANDLE_CODE(phy_params_fr2.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void phy_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (phy_params_common_present) {
    j.write_fieldname("phy-ParametersCommon");
    phy_params_common.to_json(j);
  }
  if (phy_params_xdd_diff_present) {
    j.write_fieldname("phy-ParametersXDD-Diff");
    phy_params_xdd_diff.to_json(j);
  }
  if (phy_params_frx_diff_present) {
    j.write_fieldname("phy-ParametersFRX-Diff");
    phy_params_frx_diff.to_json(j);
  }
  if (phy_params_fr1_present) {
    j.write_fieldname("phy-ParametersFR1");
    phy_params_fr1.to_json(j);
  }
  if (phy_params_fr2_present) {
    j.write_fieldname("phy-ParametersFR2");
    phy_params_fr2.to_json(j);
  }
  j.end_obj();
}

// SON-Parameters-r16 ::= SEQUENCE
SRSASN_CODE son_params_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rach_report_r16_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= rlf_report_cho_r17_present;
    group_flags[0] |= rlf_report_daps_r17_present;
    group_flags[0] |= success_ho_report_r17_present;
    group_flags[0] |= two_step_rach_report_r17_present;
    group_flags[0] |= pscell_mhi_report_r17_present;
    group_flags[0] |= on_demand_si_report_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(rlf_report_cho_r17_present, 1));
      HANDLE_CODE(bref.pack(rlf_report_daps_r17_present, 1));
      HANDLE_CODE(bref.pack(success_ho_report_r17_present, 1));
      HANDLE_CODE(bref.pack(two_step_rach_report_r17_present, 1));
      HANDLE_CODE(bref.pack(pscell_mhi_report_r17_present, 1));
      HANDLE_CODE(bref.pack(on_demand_si_report_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE son_params_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rach_report_r16_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(rlf_report_cho_r17_present, 1));
      HANDLE_CODE(bref.unpack(rlf_report_daps_r17_present, 1));
      HANDLE_CODE(bref.unpack(success_ho_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(two_step_rach_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(pscell_mhi_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(on_demand_si_report_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void son_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rach_report_r16_present) {
    j.write_str("rach-Report-r16", "supported");
  }
  if (ext) {
    if (rlf_report_cho_r17_present) {
      j.write_str("rlfReportCHO-r17", "supported");
    }
    if (rlf_report_daps_r17_present) {
      j.write_str("rlfReportDAPS-r17", "supported");
    }
    if (success_ho_report_r17_present) {
      j.write_str("success-HO-Report-r17", "supported");
    }
    if (two_step_rach_report_r17_present) {
      j.write_str("twoStepRACH-Report-r17", "supported");
    }
    if (pscell_mhi_report_r17_present) {
      j.write_str("pscell-MHI-Report-r17", "supported");
    }
    if (on_demand_si_report_r17_present) {
      j.write_str("onDemandSI-Report-r17", "supported");
    }
  }
  j.end_obj();
}

// UE-BasedPerfMeas-Parameters-r16 ::= SEQUENCE
SRSASN_CODE ue_based_perf_meas_params_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(barometer_meas_report_r16_present, 1));
  HANDLE_CODE(bref.pack(imm_meas_bt_r16_present, 1));
  HANDLE_CODE(bref.pack(imm_meas_wlan_r16_present, 1));
  HANDLE_CODE(bref.pack(logged_meas_bt_r16_present, 1));
  HANDLE_CODE(bref.pack(logged_meass_r16_present, 1));
  HANDLE_CODE(bref.pack(logged_meas_wlan_r16_present, 1));
  HANDLE_CODE(bref.pack(orientation_meas_report_r16_present, 1));
  HANDLE_CODE(bref.pack(speed_meas_report_r16_present, 1));
  HANDLE_CODE(bref.pack(gnss_location_r16_present, 1));
  HANDLE_CODE(bref.pack(ul_pdcp_delay_r16_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sig_based_log_mdt_override_protect_r17_present;
    group_flags[0] |= multiple_cef_report_r17_present;
    group_flags[0] |= excess_packet_delay_r17_present;
    group_flags[0] |= early_meas_log_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sig_based_log_mdt_override_protect_r17_present, 1));
      HANDLE_CODE(bref.pack(multiple_cef_report_r17_present, 1));
      HANDLE_CODE(bref.pack(excess_packet_delay_r17_present, 1));
      HANDLE_CODE(bref.pack(early_meas_log_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_based_perf_meas_params_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(barometer_meas_report_r16_present, 1));
  HANDLE_CODE(bref.unpack(imm_meas_bt_r16_present, 1));
  HANDLE_CODE(bref.unpack(imm_meas_wlan_r16_present, 1));
  HANDLE_CODE(bref.unpack(logged_meas_bt_r16_present, 1));
  HANDLE_CODE(bref.unpack(logged_meass_r16_present, 1));
  HANDLE_CODE(bref.unpack(logged_meas_wlan_r16_present, 1));
  HANDLE_CODE(bref.unpack(orientation_meas_report_r16_present, 1));
  HANDLE_CODE(bref.unpack(speed_meas_report_r16_present, 1));
  HANDLE_CODE(bref.unpack(gnss_location_r16_present, 1));
  HANDLE_CODE(bref.unpack(ul_pdcp_delay_r16_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sig_based_log_mdt_override_protect_r17_present, 1));
      HANDLE_CODE(bref.unpack(multiple_cef_report_r17_present, 1));
      HANDLE_CODE(bref.unpack(excess_packet_delay_r17_present, 1));
      HANDLE_CODE(bref.unpack(early_meas_log_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void ue_based_perf_meas_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (barometer_meas_report_r16_present) {
    j.write_str("barometerMeasReport-r16", "supported");
  }
  if (imm_meas_bt_r16_present) {
    j.write_str("immMeasBT-r16", "supported");
  }
  if (imm_meas_wlan_r16_present) {
    j.write_str("immMeasWLAN-r16", "supported");
  }
  if (logged_meas_bt_r16_present) {
    j.write_str("loggedMeasBT-r16", "supported");
  }
  if (logged_meass_r16_present) {
    j.write_str("loggedMeasurements-r16", "supported");
  }
  if (logged_meas_wlan_r16_present) {
    j.write_str("loggedMeasWLAN-r16", "supported");
  }
  if (orientation_meas_report_r16_present) {
    j.write_str("orientationMeasReport-r16", "supported");
  }
  if (speed_meas_report_r16_present) {
    j.write_str("speedMeasReport-r16", "supported");
  }
  if (gnss_location_r16_present) {
    j.write_str("gnss-Location-r16", "supported");
  }
  if (ul_pdcp_delay_r16_present) {
    j.write_str("ulPDCP-Delay-r16", "supported");
  }
  if (ext) {
    if (sig_based_log_mdt_override_protect_r17_present) {
      j.write_str("sigBasedLogMDT-OverrideProtect-r17", "supported");
    }
    if (multiple_cef_report_r17_present) {
      j.write_str("multipleCEF-Report-r17", "supported");
    }
    if (excess_packet_delay_r17_present) {
      j.write_str("excessPacketDelay-r17", "supported");
    }
    if (early_meas_log_r17_present) {
      j.write_str("earlyMeasLog-r17", "supported");
    }
  }
  j.end_obj();
}

// UE-NR-CapabilityAddFRX-Mode ::= SEQUENCE
SRSASN_CODE ue_nr_cap_add_frx_mode_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(phy_params_frx_diff_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_frx_diff_present, 1));

  if (phy_params_frx_diff_present) {
    HANDLE_CODE(phy_params_frx_diff.pack(bref));
  }
  if (meas_and_mob_params_frx_diff_present) {
    HANDLE_CODE(meas_and_mob_params_frx_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_add_frx_mode_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(phy_params_frx_diff_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_frx_diff_present, 1));

  if (phy_params_frx_diff_present) {
    HANDLE_CODE(phy_params_frx_diff.unpack(bref));
  }
  if (meas_and_mob_params_frx_diff_present) {
    HANDLE_CODE(meas_and_mob_params_frx_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_add_frx_mode_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (phy_params_frx_diff_present) {
    j.write_fieldname("phy-ParametersFRX-Diff");
    phy_params_frx_diff.to_json(j);
  }
  if (meas_and_mob_params_frx_diff_present) {
    j.write_fieldname("measAndMobParametersFRX-Diff");
    meas_and_mob_params_frx_diff.to_json(j);
  }
  j.end_obj();
}

// UE-NR-CapabilityAddXDD-Mode ::= SEQUENCE
SRSASN_CODE ue_nr_cap_add_xdd_mode_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(phy_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.pack(mac_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_xdd_diff_present, 1));

  if (phy_params_xdd_diff_present) {
    HANDLE_CODE(phy_params_xdd_diff.pack(bref));
  }
  if (mac_params_xdd_diff_present) {
    HANDLE_CODE(mac_params_xdd_diff.pack(bref));
  }
  if (meas_and_mob_params_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_xdd_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_add_xdd_mode_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(phy_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_xdd_diff_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_xdd_diff_present, 1));

  if (phy_params_xdd_diff_present) {
    HANDLE_CODE(phy_params_xdd_diff.unpack(bref));
  }
  if (mac_params_xdd_diff_present) {
    HANDLE_CODE(mac_params_xdd_diff.unpack(bref));
  }
  if (meas_and_mob_params_xdd_diff_present) {
    HANDLE_CODE(meas_and_mob_params_xdd_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_add_xdd_mode_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (phy_params_xdd_diff_present) {
    j.write_fieldname("phy-ParametersXDD-Diff");
    phy_params_xdd_diff.to_json(j);
  }
  if (mac_params_xdd_diff_present) {
    j.write_fieldname("mac-ParametersXDD-Diff");
    mac_params_xdd_diff.to_json(j);
  }
  if (meas_and_mob_params_xdd_diff_present) {
    j.write_fieldname("measAndMobParametersXDD-Diff");
    meas_and_mob_params_xdd_diff.to_json(j);
  }
  j.end_obj();
}

// NTN-Parameters-r17 ::= SEQUENCE
SRSASN_CODE ntn_params_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(inactive_state_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(ra_sdt_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(srb_sdt_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(mac_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(phy_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(fdd_add_ue_nr_cap_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(fr1_add_ue_nr_cap_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(ue_based_perf_meas_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.pack(son_params_ntn_r17_present, 1));

  if (meas_and_mob_params_ntn_r17_present) {
    HANDLE_CODE(meas_and_mob_params_ntn_r17.pack(bref));
  }
  if (mac_params_ntn_r17_present) {
    HANDLE_CODE(mac_params_ntn_r17.pack(bref));
  }
  if (phy_params_ntn_r17_present) {
    HANDLE_CODE(phy_params_ntn_r17.pack(bref));
  }
  if (fdd_add_ue_nr_cap_ntn_r17_present) {
    HANDLE_CODE(fdd_add_ue_nr_cap_ntn_r17.pack(bref));
  }
  if (fr1_add_ue_nr_cap_ntn_r17_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap_ntn_r17.pack(bref));
  }
  if (ue_based_perf_meas_params_ntn_r17_present) {
    HANDLE_CODE(ue_based_perf_meas_params_ntn_r17.pack(bref));
  }
  if (son_params_ntn_r17_present) {
    HANDLE_CODE(son_params_ntn_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ntn_params_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(inactive_state_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(ra_sdt_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(srb_sdt_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(phy_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(fdd_add_ue_nr_cap_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(fr1_add_ue_nr_cap_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(ue_based_perf_meas_params_ntn_r17_present, 1));
  HANDLE_CODE(bref.unpack(son_params_ntn_r17_present, 1));

  if (meas_and_mob_params_ntn_r17_present) {
    HANDLE_CODE(meas_and_mob_params_ntn_r17.unpack(bref));
  }
  if (mac_params_ntn_r17_present) {
    HANDLE_CODE(mac_params_ntn_r17.unpack(bref));
  }
  if (phy_params_ntn_r17_present) {
    HANDLE_CODE(phy_params_ntn_r17.unpack(bref));
  }
  if (fdd_add_ue_nr_cap_ntn_r17_present) {
    HANDLE_CODE(fdd_add_ue_nr_cap_ntn_r17.unpack(bref));
  }
  if (fr1_add_ue_nr_cap_ntn_r17_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap_ntn_r17.unpack(bref));
  }
  if (ue_based_perf_meas_params_ntn_r17_present) {
    HANDLE_CODE(ue_based_perf_meas_params_ntn_r17.unpack(bref));
  }
  if (son_params_ntn_r17_present) {
    HANDLE_CODE(son_params_ntn_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ntn_params_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (inactive_state_ntn_r17_present) {
    j.write_str("inactiveStateNTN-r17", "supported");
  }
  if (ra_sdt_ntn_r17_present) {
    j.write_str("ra-SDT-NTN-r17", "supported");
  }
  if (srb_sdt_ntn_r17_present) {
    j.write_str("srb-SDT-NTN-r17", "supported");
  }
  if (meas_and_mob_params_ntn_r17_present) {
    j.write_fieldname("measAndMobParametersNTN-r17");
    meas_and_mob_params_ntn_r17.to_json(j);
  }
  if (mac_params_ntn_r17_present) {
    j.write_fieldname("mac-ParametersNTN-r17");
    mac_params_ntn_r17.to_json(j);
  }
  if (phy_params_ntn_r17_present) {
    j.write_fieldname("phy-ParametersNTN-r17");
    phy_params_ntn_r17.to_json(j);
  }
  if (fdd_add_ue_nr_cap_ntn_r17_present) {
    j.write_fieldname("fdd-Add-UE-NR-CapabilitiesNTN-r17");
    fdd_add_ue_nr_cap_ntn_r17.to_json(j);
  }
  if (fr1_add_ue_nr_cap_ntn_r17_present) {
    j.write_fieldname("fr1-Add-UE-NR-CapabilitiesNTN-r17");
    fr1_add_ue_nr_cap_ntn_r17.to_json(j);
  }
  if (ue_based_perf_meas_params_ntn_r17_present) {
    j.write_fieldname("ue-BasedPerfMeas-ParametersNTN-r17");
    ue_based_perf_meas_params_ntn_r17.to_json(j);
  }
  if (son_params_ntn_r17_present) {
    j.write_fieldname("son-ParametersNTN-r17");
    son_params_ntn_r17.to_json(j);
  }
  j.end_obj();
}

// PDCP-Parameters ::= SEQUENCE
SRSASN_CODE pdcp_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ul_only_rohc_profiles_present, 1));
  HANDLE_CODE(bref.pack(continue_rohc_context_present, 1));
  HANDLE_CODE(bref.pack(out_of_order_delivery_present, 1));
  HANDLE_CODE(bref.pack(short_sn_present, 1));
  HANDLE_CODE(bref.pack(pdcp_dupl_srb_present, 1));
  HANDLE_CODE(bref.pack(pdcp_dupl_mcg_or_scg_drb_present, 1));

  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0000, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0001, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0002, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0003, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0004, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0006, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0101, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0102, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0103, 1));
  HANDLE_CODE(bref.pack(supported_rohc_profiles.profile0x0104, 1));
  HANDLE_CODE(max_num_rohc_context_sessions.pack(bref));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= drb_iab_r16_present;
    group_flags[0] |= non_drb_iab_r16_present;
    group_flags[0] |= extended_discard_timer_r16_present;
    group_flags[0] |= continue_ehc_context_r16_present;
    group_flags[0] |= ehc_r16_present;
    group_flags[0] |= max_num_ehc_contexts_r16_present;
    group_flags[0] |= joint_ehc_rohc_cfg_r16_present;
    group_flags[0] |= pdcp_dupl_more_than_two_rlc_r16_present;
    group_flags[1] |= long_sn_red_cap_r17_present;
    group_flags[1] |= udc_r17.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(drb_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(non_drb_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(extended_discard_timer_r16_present, 1));
      HANDLE_CODE(bref.pack(continue_ehc_context_r16_present, 1));
      HANDLE_CODE(bref.pack(ehc_r16_present, 1));
      HANDLE_CODE(bref.pack(max_num_ehc_contexts_r16_present, 1));
      HANDLE_CODE(bref.pack(joint_ehc_rohc_cfg_r16_present, 1));
      HANDLE_CODE(bref.pack(pdcp_dupl_more_than_two_rlc_r16_present, 1));
      if (max_num_ehc_contexts_r16_present) {
        HANDLE_CODE(max_num_ehc_contexts_r16.pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(long_sn_red_cap_r17_present, 1));
      HANDLE_CODE(bref.pack(udc_r17.is_present(), 1));
      if (udc_r17.is_present()) {
        HANDLE_CODE(bref.pack(udc_r17->standard_dictionary_r17_present, 1));
        HANDLE_CODE(bref.pack(udc_r17->operator_dictionary_r17_present, 1));
        HANDLE_CODE(bref.pack(udc_r17->continue_udc_r17_present, 1));
        HANDLE_CODE(bref.pack(udc_r17->support_of_buffer_size_r17_present, 1));
        if (udc_r17->operator_dictionary_r17_present) {
          HANDLE_CODE(pack_integer(
              bref, udc_r17->operator_dictionary_r17.version_of_dictionary_r17, (uint8_t)0u, (uint8_t)15u));
          HANDLE_CODE(udc_r17->operator_dictionary_r17.associated_plmn_id_r17.pack(bref));
        }
        if (udc_r17->support_of_buffer_size_r17_present) {
          HANDLE_CODE(udc_r17->support_of_buffer_size_r17.pack(bref));
        }
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdcp_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ul_only_rohc_profiles_present, 1));
  HANDLE_CODE(bref.unpack(continue_rohc_context_present, 1));
  HANDLE_CODE(bref.unpack(out_of_order_delivery_present, 1));
  HANDLE_CODE(bref.unpack(short_sn_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_dupl_srb_present, 1));
  HANDLE_CODE(bref.unpack(pdcp_dupl_mcg_or_scg_drb_present, 1));

  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0000, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0001, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0002, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0003, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0004, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0006, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0101, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0102, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0103, 1));
  HANDLE_CODE(bref.unpack(supported_rohc_profiles.profile0x0104, 1));
  HANDLE_CODE(max_num_rohc_context_sessions.unpack(bref));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(drb_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(non_drb_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(extended_discard_timer_r16_present, 1));
      HANDLE_CODE(bref.unpack(continue_ehc_context_r16_present, 1));
      HANDLE_CODE(bref.unpack(ehc_r16_present, 1));
      HANDLE_CODE(bref.unpack(max_num_ehc_contexts_r16_present, 1));
      HANDLE_CODE(bref.unpack(joint_ehc_rohc_cfg_r16_present, 1));
      HANDLE_CODE(bref.unpack(pdcp_dupl_more_than_two_rlc_r16_present, 1));
      if (max_num_ehc_contexts_r16_present) {
        HANDLE_CODE(max_num_ehc_contexts_r16.unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(long_sn_red_cap_r17_present, 1));
      unpack_presence_flag(udc_r17, bref);
      if (udc_r17.is_present()) {
        HANDLE_CODE(bref.unpack(udc_r17->standard_dictionary_r17_present, 1));
        HANDLE_CODE(bref.unpack(udc_r17->operator_dictionary_r17_present, 1));
        HANDLE_CODE(bref.unpack(udc_r17->continue_udc_r17_present, 1));
        HANDLE_CODE(bref.unpack(udc_r17->support_of_buffer_size_r17_present, 1));
        if (udc_r17->operator_dictionary_r17_present) {
          HANDLE_CODE(unpack_integer(
              udc_r17->operator_dictionary_r17.version_of_dictionary_r17, bref, (uint8_t)0u, (uint8_t)15u));
          HANDLE_CODE(udc_r17->operator_dictionary_r17.associated_plmn_id_r17.unpack(bref));
        }
        if (udc_r17->support_of_buffer_size_r17_present) {
          HANDLE_CODE(udc_r17->support_of_buffer_size_r17.unpack(bref));
        }
      }
    }
  }
  return SRSASN_SUCCESS;
}
void pdcp_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("supportedROHC-Profiles");
  j.start_obj();
  j.write_bool("profile0x0000", supported_rohc_profiles.profile0x0000);
  j.write_bool("profile0x0001", supported_rohc_profiles.profile0x0001);
  j.write_bool("profile0x0002", supported_rohc_profiles.profile0x0002);
  j.write_bool("profile0x0003", supported_rohc_profiles.profile0x0003);
  j.write_bool("profile0x0004", supported_rohc_profiles.profile0x0004);
  j.write_bool("profile0x0006", supported_rohc_profiles.profile0x0006);
  j.write_bool("profile0x0101", supported_rohc_profiles.profile0x0101);
  j.write_bool("profile0x0102", supported_rohc_profiles.profile0x0102);
  j.write_bool("profile0x0103", supported_rohc_profiles.profile0x0103);
  j.write_bool("profile0x0104", supported_rohc_profiles.profile0x0104);
  j.end_obj();
  j.write_str("maxNumberROHC-ContextSessions", max_num_rohc_context_sessions.to_string());
  if (ul_only_rohc_profiles_present) {
    j.write_str("uplinkOnlyROHC-Profiles", "supported");
  }
  if (continue_rohc_context_present) {
    j.write_str("continueROHC-Context", "supported");
  }
  if (out_of_order_delivery_present) {
    j.write_str("outOfOrderDelivery", "supported");
  }
  if (short_sn_present) {
    j.write_str("shortSN", "supported");
  }
  if (pdcp_dupl_srb_present) {
    j.write_str("pdcp-DuplicationSRB", "supported");
  }
  if (pdcp_dupl_mcg_or_scg_drb_present) {
    j.write_str("pdcp-DuplicationMCG-OrSCG-DRB", "supported");
  }
  if (ext) {
    if (drb_iab_r16_present) {
      j.write_str("drb-IAB-r16", "supported");
    }
    if (non_drb_iab_r16_present) {
      j.write_str("non-DRB-IAB-r16", "supported");
    }
    if (extended_discard_timer_r16_present) {
      j.write_str("extendedDiscardTimer-r16", "supported");
    }
    if (continue_ehc_context_r16_present) {
      j.write_str("continueEHC-Context-r16", "supported");
    }
    if (ehc_r16_present) {
      j.write_str("ehc-r16", "supported");
    }
    if (max_num_ehc_contexts_r16_present) {
      j.write_str("maxNumberEHC-Contexts-r16", max_num_ehc_contexts_r16.to_string());
    }
    if (joint_ehc_rohc_cfg_r16_present) {
      j.write_str("jointEHC-ROHC-Config-r16", "supported");
    }
    if (pdcp_dupl_more_than_two_rlc_r16_present) {
      j.write_str("pdcp-DuplicationMoreThanTwoRLC-r16", "supported");
    }
    if (long_sn_red_cap_r17_present) {
      j.write_str("longSN-RedCap-r17", "supported");
    }
    if (udc_r17.is_present()) {
      j.write_fieldname("udc-r17");
      j.start_obj();
      if (udc_r17->standard_dictionary_r17_present) {
        j.write_str("standardDictionary-r17", "supported");
      }
      if (udc_r17->operator_dictionary_r17_present) {
        j.write_fieldname("operatorDictionary-r17");
        j.start_obj();
        j.write_int("versionOfDictionary-r17", udc_r17->operator_dictionary_r17.version_of_dictionary_r17);
        j.write_fieldname("associatedPLMN-ID-r17");
        udc_r17->operator_dictionary_r17.associated_plmn_id_r17.to_json(j);
        j.end_obj();
      }
      if (udc_r17->continue_udc_r17_present) {
        j.write_str("continueUDC-r17", "supported");
      }
      if (udc_r17->support_of_buffer_size_r17_present) {
        j.write_str("supportOfBufferSize-r17", udc_r17->support_of_buffer_size_r17.to_string());
      }
      j.end_obj();
    }
  }
  j.end_obj();
}

const char* pdcp_params_s::max_num_rohc_context_sessions_opts::to_string() const
{
  static const char* names[] = {"cs2",
                                "cs4",
                                "cs8",
                                "cs12",
                                "cs16",
                                "cs24",
                                "cs32",
                                "cs48",
                                "cs64",
                                "cs128",
                                "cs256",
                                "cs512",
                                "cs1024",
                                "cs16384",
                                "spare2",
                                "spare1"};
  return convert_enum_idx(names, 16, value, "pdcp_params_s::max_num_rohc_context_sessions_e_");
}
uint16_t pdcp_params_s::max_num_rohc_context_sessions_opts::to_number() const
{
  static const uint16_t numbers[] = {2, 4, 8, 12, 16, 24, 32, 48, 64, 128, 256, 512, 1024, 16384};
  return map_enum_number(numbers, 14, value, "pdcp_params_s::max_num_rohc_context_sessions_e_");
}

const char* pdcp_params_s::max_num_ehc_contexts_r16_opts::to_string() const
{
  static const char* names[] = {"cs2",
                                "cs4",
                                "cs8",
                                "cs16",
                                "cs32",
                                "cs64",
                                "cs128",
                                "cs256",
                                "cs512",
                                "cs1024",
                                "cs2048",
                                "cs4096",
                                "cs8192",
                                "cs16384",
                                "cs32768",
                                "cs65536"};
  return convert_enum_idx(names, 16, value, "pdcp_params_s::max_num_ehc_contexts_r16_e_");
}
uint32_t pdcp_params_s::max_num_ehc_contexts_r16_opts::to_number() const
{
  static const uint32_t numbers[] = {2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536};
  return map_enum_number(numbers, 16, value, "pdcp_params_s::max_num_ehc_contexts_r16_e_");
}

const char* pdcp_params_s::udc_r17_s_::support_of_buffer_size_r17_opts::to_string() const
{
  static const char* names[] = {"kbyte4", "kbyte8"};
  return convert_enum_idx(names, 2, value, "pdcp_params_s::udc_r17_s_::support_of_buffer_size_r17_e_");
}
uint8_t pdcp_params_s::udc_r17_s_::support_of_buffer_size_r17_opts::to_number() const
{
  static const uint8_t numbers[] = {4, 8};
  return map_enum_number(numbers, 2, value, "pdcp_params_s::udc_r17_s_::support_of_buffer_size_r17_e_");
}

// PowSav-ParametersCommon-r16 ::= SEQUENCE
SRSASN_CODE pow_sav_params_common_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(drx_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(max_cc_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(release_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(min_sched_offset_pref_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pow_sav_params_common_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(drx_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_cc_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(release_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(min_sched_offset_pref_r16_present, 1));

  return SRSASN_SUCCESS;
}
void pow_sav_params_common_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (drx_pref_r16_present) {
    j.write_str("drx-Preference-r16", "supported");
  }
  if (max_cc_pref_r16_present) {
    j.write_str("maxCC-Preference-r16", "supported");
  }
  if (release_pref_r16_present) {
    j.write_str("releasePreference-r16", "supported");
  }
  if (min_sched_offset_pref_r16_present) {
    j.write_str("minSchedulingOffsetPreference-r16", "supported");
  }
  j.end_obj();
}

// PowSav-ParametersFRX-Diff-r16 ::= SEQUENCE
SRSASN_CODE pow_sav_params_frx_diff_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(max_bw_pref_r16_present, 1));
  HANDLE_CODE(bref.pack(max_mimo_layer_pref_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pow_sav_params_frx_diff_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(max_bw_pref_r16_present, 1));
  HANDLE_CODE(bref.unpack(max_mimo_layer_pref_r16_present, 1));

  return SRSASN_SUCCESS;
}
void pow_sav_params_frx_diff_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (max_bw_pref_r16_present) {
    j.write_str("maxBW-Preference-r16", "supported");
  }
  if (max_mimo_layer_pref_r16_present) {
    j.write_str("maxMIMO-LayerPreference-r16", "supported");
  }
  j.end_obj();
}

// PowSav-Parameters-r16 ::= SEQUENCE
SRSASN_CODE pow_sav_params_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pow_sav_params_common_r16_present, 1));
  HANDLE_CODE(bref.pack(pow_sav_params_frx_diff_r16_present, 1));

  if (pow_sav_params_common_r16_present) {
    HANDLE_CODE(pow_sav_params_common_r16.pack(bref));
  }
  if (pow_sav_params_frx_diff_r16_present) {
    HANDLE_CODE(pow_sav_params_frx_diff_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pow_sav_params_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pow_sav_params_common_r16_present, 1));
  HANDLE_CODE(bref.unpack(pow_sav_params_frx_diff_r16_present, 1));

  if (pow_sav_params_common_r16_present) {
    HANDLE_CODE(pow_sav_params_common_r16.unpack(bref));
  }
  if (pow_sav_params_frx_diff_r16_present) {
    HANDLE_CODE(pow_sav_params_frx_diff_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pow_sav_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pow_sav_params_common_r16_present) {
    j.write_fieldname("powSav-ParametersCommon-r16");
    pow_sav_params_common_r16.to_json(j);
  }
  if (pow_sav_params_frx_diff_r16_present) {
    j.write_fieldname("powSav-ParametersFRX-Diff-r16");
    pow_sav_params_frx_diff_r16.to_json(j);
  }
  j.end_obj();
}

// PowSav-ParametersFR2-2-r17 ::= SEQUENCE
SRSASN_CODE pow_sav_params_fr2_2_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(max_bw_pref_r17_present, 1));
  HANDLE_CODE(bref.pack(max_mimo_layer_pref_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE pow_sav_params_fr2_2_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(max_bw_pref_r17_present, 1));
  HANDLE_CODE(bref.unpack(max_mimo_layer_pref_r17_present, 1));

  return SRSASN_SUCCESS;
}
void pow_sav_params_fr2_2_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (max_bw_pref_r17_present) {
    j.write_str("maxBW-Preference-r17", "supported");
  }
  if (max_mimo_layer_pref_r17_present) {
    j.write_str("maxMIMO-LayerPreference-r17", "supported");
  }
  j.end_obj();
}

// PowSav-Parameters-v1700 ::= SEQUENCE
SRSASN_CODE pow_sav_params_v1700_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pow_sav_params_fr2_2_r17_present, 1));

  if (pow_sav_params_fr2_2_r17_present) {
    HANDLE_CODE(pow_sav_params_fr2_2_r17.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pow_sav_params_v1700_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(pow_sav_params_fr2_2_r17_present, 1));

  if (pow_sav_params_fr2_2_r17_present) {
    HANDLE_CODE(pow_sav_params_fr2_2_r17.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void pow_sav_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pow_sav_params_fr2_2_r17_present) {
    j.write_fieldname("powSav-ParametersFR2-2-r17");
    pow_sav_params_fr2_2_r17.to_json(j);
  }
  j.end_obj();
}

// RF-Parameters ::= SEQUENCE
SRSASN_CODE rf_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(supported_band_combination_list.size() > 0, 1));
  HANDLE_CODE(bref.pack(applied_freq_band_list_filt.size() > 0, 1));

  HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_nr, 1, 1024));
  if (supported_band_combination_list.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_combination_list, 1, 65536));
  }
  if (applied_freq_band_list_filt.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, applied_freq_band_list_filt, 1, 1280));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= supported_band_combination_list_v1540.is_present();
    group_flags[0] |= srs_switching_time_requested_present;
    group_flags[1] |= supported_band_combination_list_v1550.is_present();
    group_flags[2] |= supported_band_combination_list_v1560.is_present();
    group_flags[3] |= supported_band_combination_list_v1610.is_present();
    group_flags[3] |= supported_band_combination_list_sidelink_eutra_nr_r16.is_present();
    group_flags[3] |= supported_band_combination_list_ul_tx_switch_r16.is_present();
    group_flags[4] |= supported_band_combination_list_v1630.is_present();
    group_flags[4] |= supported_band_combination_list_sidelink_eutra_nr_v1630.is_present();
    group_flags[4] |= supported_band_combination_list_ul_tx_switch_v1630.is_present();
    group_flags[5] |= supported_band_combination_list_v1640.is_present();
    group_flags[5] |= supported_band_combination_list_ul_tx_switch_v1640.is_present();
    group_flags[6] |= supported_band_combination_list_v1650.is_present();
    group_flags[6] |= supported_band_combination_list_ul_tx_switch_v1650.is_present();
    group_flags[7] |= extended_band_n77_r16_present;
    group_flags[8] |= supported_band_combination_list_ul_tx_switch_v1670.is_present();
    group_flags[9] |= supported_band_combination_list_v1680.is_present();
    group_flags[10] |= supported_band_combination_list_v1690.is_present();
    group_flags[10] |= supported_band_combination_list_ul_tx_switch_v1690.is_present();
    group_flags[11] |= supported_band_combination_list_v1700.is_present();
    group_flags[11] |= supported_band_combination_list_ul_tx_switch_v1700.is_present();
    group_flags[11] |= supported_band_combination_list_sl_relay_discovery_r17.size() > 0;
    group_flags[11] |= supported_band_combination_list_sl_non_relay_discovery_r17.size() > 0;
    group_flags[11] |= supported_band_combination_list_sidelink_eutra_nr_v1710.is_present();
    group_flags[11] |= sidelink_requested_r17_present;
    group_flags[11] |= extended_band_n77_2_r17_present;
    group_flags[12] |= supported_band_combination_list_v1720.is_present();
    group_flags[12] |= supported_band_combination_list_ul_tx_switch_v1720.is_present();
    group_flags[13] |= supported_band_combination_list_v1730.is_present();
    group_flags[13] |= supported_band_combination_list_ul_tx_switch_v1730.is_present();
    group_flags[13] |= supported_band_combination_list_sl_relay_discovery_v1730.is_present();
    group_flags[13] |= supported_band_combination_list_sl_non_relay_discovery_v1730.is_present();
    group_flags[14] |= supported_band_combination_list_v1740.is_present();
    group_flags[14] |= supported_band_combination_list_ul_tx_switch_v1740.is_present();
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1540.is_present(), 1));
      HANDLE_CODE(bref.pack(srs_switching_time_requested_present, 1));
      if (supported_band_combination_list_v1540.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1540, 1, 65536));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1550.is_present(), 1));
      if (supported_band_combination_list_v1550.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1550, 1, 65536));
      }
    }
    if (group_flags[2]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1560.is_present(), 1));
      if (supported_band_combination_list_v1560.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1560, 1, 65536));
      }
    }
    if (group_flags[3]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1610.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_sidelink_eutra_nr_r16.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_r16.is_present(), 1));
      if (supported_band_combination_list_v1610.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1610, 1, 65536));
      }
      if (supported_band_combination_list_sidelink_eutra_nr_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref,
                                    *supported_band_combination_list_sidelink_eutra_nr_r16,
                                    1,
                                    65536,
                                    SeqOfPacker<Packer>(1, 32, Packer())));
      }
      if (supported_band_combination_list_ul_tx_switch_r16.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_r16, 1, 65536));
      }
    }
    if (group_flags[4]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1630.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_sidelink_eutra_nr_v1630.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1630.is_present(), 1));
      if (supported_band_combination_list_v1630.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1630, 1, 65536));
      }
      if (supported_band_combination_list_sidelink_eutra_nr_v1630.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref,
                                    *supported_band_combination_list_sidelink_eutra_nr_v1630,
                                    1,
                                    65536,
                                    SeqOfPacker<Packer>(1, 32, Packer())));
      }
      if (supported_band_combination_list_ul_tx_switch_v1630.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1630, 1, 65536));
      }
    }
    if (group_flags[5]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1640.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1640.is_present(), 1));
      if (supported_band_combination_list_v1640.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1640, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1640.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1640, 1, 65536));
      }
    }
    if (group_flags[6]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1650.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1650.is_present(), 1));
      if (supported_band_combination_list_v1650.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1650, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1650.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1650, 1, 65536));
      }
    }
    if (group_flags[7]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(extended_band_n77_r16_present, 1));
    }
    if (group_flags[8]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1670.is_present(), 1));
      if (supported_band_combination_list_ul_tx_switch_v1670.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1670, 1, 65536));
      }
    }
    if (group_flags[9]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1680.is_present(), 1));
      if (supported_band_combination_list_v1680.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1680, 1, 65536));
      }
    }
    if (group_flags[10]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1690.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1690.is_present(), 1));
      if (supported_band_combination_list_v1690.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1690, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1690.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1690, 1, 65536));
      }
    }
    if (group_flags[11]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1700.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_sl_relay_discovery_r17.size() > 0, 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_sl_non_relay_discovery_r17.size() > 0, 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_sidelink_eutra_nr_v1710.is_present(), 1));
      HANDLE_CODE(bref.pack(sidelink_requested_r17_present, 1));
      HANDLE_CODE(bref.pack(extended_band_n77_2_r17_present, 1));
      if (supported_band_combination_list_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1700, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1700.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1700, 1, 65536));
      }
      if (supported_band_combination_list_sl_relay_discovery_r17.size() > 0) {
        HANDLE_CODE(supported_band_combination_list_sl_relay_discovery_r17.pack(bref));
      }
      if (supported_band_combination_list_sl_non_relay_discovery_r17.size() > 0) {
        HANDLE_CODE(supported_band_combination_list_sl_non_relay_discovery_r17.pack(bref));
      }
      if (supported_band_combination_list_sidelink_eutra_nr_v1710.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref,
                                    *supported_band_combination_list_sidelink_eutra_nr_v1710,
                                    1,
                                    65536,
                                    SeqOfPacker<Packer>(1, 32, Packer())));
      }
    }
    if (group_flags[12]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1720.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1720.is_present(), 1));
      if (supported_band_combination_list_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1720, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1720.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1720, 1, 65536));
      }
    }
    if (group_flags[13]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1730.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1730.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_sl_relay_discovery_v1730.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_sl_non_relay_discovery_v1730.is_present(), 1));
      if (supported_band_combination_list_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1730, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1730, 1, 65536));
      }
      if (supported_band_combination_list_sl_relay_discovery_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_sl_relay_discovery_v1730, 1, 32));
      }
      if (supported_band_combination_list_sl_non_relay_discovery_v1730.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_sl_non_relay_discovery_v1730, 1, 32));
      }
    }
    if (group_flags[14]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(supported_band_combination_list_v1740.is_present(), 1));
      HANDLE_CODE(bref.pack(supported_band_combination_list_ul_tx_switch_v1740.is_present(), 1));
      if (supported_band_combination_list_v1740.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_v1740, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1740.is_present()) {
        HANDLE_CODE(pack_dyn_seq_of(bref, *supported_band_combination_list_ul_tx_switch_v1740, 1, 65536));
      }
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rf_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool supported_band_combination_list_present;
  HANDLE_CODE(bref.unpack(supported_band_combination_list_present, 1));
  bool applied_freq_band_list_filt_present;
  HANDLE_CODE(bref.unpack(applied_freq_band_list_filt_present, 1));

  HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_nr, bref, 1, 1024));
  if (supported_band_combination_list_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_combination_list, bref, 1, 65536));
  }
  if (applied_freq_band_list_filt_present) {
    HANDLE_CODE(unpack_dyn_seq_of(applied_freq_band_list_filt, bref, 1, 1280));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(15);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1540, bref);
      HANDLE_CODE(bref.unpack(srs_switching_time_requested_present, 1));
      if (supported_band_combination_list_v1540.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1540, bref, 1, 65536));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1550, bref);
      if (supported_band_combination_list_v1550.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1550, bref, 1, 65536));
      }
    }
    if (group_flags[2]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1560, bref);
      if (supported_band_combination_list_v1560.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1560, bref, 1, 65536));
      }
    }
    if (group_flags[3]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1610, bref);
      unpack_presence_flag(supported_band_combination_list_sidelink_eutra_nr_r16, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_r16, bref);
      if (supported_band_combination_list_v1610.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1610, bref, 1, 65536));
      }
      if (supported_band_combination_list_sidelink_eutra_nr_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_sidelink_eutra_nr_r16,
                                      bref,
                                      1,
                                      65536,
                                      SeqOfPacker<Packer>(1, 32, Packer())));
      }
      if (supported_band_combination_list_ul_tx_switch_r16.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_r16, bref, 1, 65536));
      }
    }
    if (group_flags[4]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1630, bref);
      unpack_presence_flag(supported_band_combination_list_sidelink_eutra_nr_v1630, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1630, bref);
      if (supported_band_combination_list_v1630.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1630, bref, 1, 65536));
      }
      if (supported_band_combination_list_sidelink_eutra_nr_v1630.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_sidelink_eutra_nr_v1630,
                                      bref,
                                      1,
                                      65536,
                                      SeqOfPacker<Packer>(1, 32, Packer())));
      }
      if (supported_band_combination_list_ul_tx_switch_v1630.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1630, bref, 1, 65536));
      }
    }
    if (group_flags[5]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1640, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1640, bref);
      if (supported_band_combination_list_v1640.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1640, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1640.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1640, bref, 1, 65536));
      }
    }
    if (group_flags[6]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1650, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1650, bref);
      if (supported_band_combination_list_v1650.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1650, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1650.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1650, bref, 1, 65536));
      }
    }
    if (group_flags[7]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(extended_band_n77_r16_present, 1));
    }
    if (group_flags[8]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1670, bref);
      if (supported_band_combination_list_ul_tx_switch_v1670.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1670, bref, 1, 65536));
      }
    }
    if (group_flags[9]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1680, bref);
      if (supported_band_combination_list_v1680.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1680, bref, 1, 65536));
      }
    }
    if (group_flags[10]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1690, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1690, bref);
      if (supported_band_combination_list_v1690.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1690, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1690.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1690, bref, 1, 65536));
      }
    }
    if (group_flags[11]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1700, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1700, bref);
      bool supported_band_combination_list_sl_relay_discovery_r17_present;
      HANDLE_CODE(bref.unpack(supported_band_combination_list_sl_relay_discovery_r17_present, 1));
      bool supported_band_combination_list_sl_non_relay_discovery_r17_present;
      HANDLE_CODE(bref.unpack(supported_band_combination_list_sl_non_relay_discovery_r17_present, 1));
      unpack_presence_flag(supported_band_combination_list_sidelink_eutra_nr_v1710, bref);
      HANDLE_CODE(bref.unpack(sidelink_requested_r17_present, 1));
      HANDLE_CODE(bref.unpack(extended_band_n77_2_r17_present, 1));
      if (supported_band_combination_list_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1700, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1700.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1700, bref, 1, 65536));
      }
      if (supported_band_combination_list_sl_relay_discovery_r17_present) {
        HANDLE_CODE(supported_band_combination_list_sl_relay_discovery_r17.unpack(bref));
      }
      if (supported_band_combination_list_sl_non_relay_discovery_r17_present) {
        HANDLE_CODE(supported_band_combination_list_sl_non_relay_discovery_r17.unpack(bref));
      }
      if (supported_band_combination_list_sidelink_eutra_nr_v1710.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_sidelink_eutra_nr_v1710,
                                      bref,
                                      1,
                                      65536,
                                      SeqOfPacker<Packer>(1, 32, Packer())));
      }
    }
    if (group_flags[12]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1720, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1720, bref);
      if (supported_band_combination_list_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1720, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1720.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1720, bref, 1, 65536));
      }
    }
    if (group_flags[13]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1730, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1730, bref);
      unpack_presence_flag(supported_band_combination_list_sl_relay_discovery_v1730, bref);
      unpack_presence_flag(supported_band_combination_list_sl_non_relay_discovery_v1730, bref);
      if (supported_band_combination_list_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1730, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1730, bref, 1, 65536));
      }
      if (supported_band_combination_list_sl_relay_discovery_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_sl_relay_discovery_v1730, bref, 1, 32));
      }
      if (supported_band_combination_list_sl_non_relay_discovery_v1730.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_sl_non_relay_discovery_v1730, bref, 1, 32));
      }
    }
    if (group_flags[14]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(supported_band_combination_list_v1740, bref);
      unpack_presence_flag(supported_band_combination_list_ul_tx_switch_v1740, bref);
      if (supported_band_combination_list_v1740.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_v1740, bref, 1, 65536));
      }
      if (supported_band_combination_list_ul_tx_switch_v1740.is_present()) {
        HANDLE_CODE(unpack_dyn_seq_of(*supported_band_combination_list_ul_tx_switch_v1740, bref, 1, 65536));
      }
    }
  }
  return SRSASN_SUCCESS;
}
void rf_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.start_array("supportedBandListNR");
  for (const auto& e1 : supported_band_list_nr) {
    e1.to_json(j);
  }
  j.end_array();
  if (supported_band_combination_list.size() > 0) {
    j.start_array("supportedBandCombinationList");
    for (const auto& e1 : supported_band_combination_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (applied_freq_band_list_filt.size() > 0) {
    j.start_array("appliedFreqBandListFilter");
    for (const auto& e1 : applied_freq_band_list_filt) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (supported_band_combination_list_v1540.is_present()) {
      j.start_array("supportedBandCombinationList-v1540");
      for (const auto& e1 : *supported_band_combination_list_v1540) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (srs_switching_time_requested_present) {
      j.write_str("srs-SwitchingTimeRequested", "true");
    }
    if (supported_band_combination_list_v1550.is_present()) {
      j.start_array("supportedBandCombinationList-v1550");
      for (const auto& e1 : *supported_band_combination_list_v1550) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1560.is_present()) {
      j.start_array("supportedBandCombinationList-v1560");
      for (const auto& e1 : *supported_band_combination_list_v1560) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1610.is_present()) {
      j.start_array("supportedBandCombinationList-v1610");
      for (const auto& e1 : *supported_band_combination_list_v1610) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_sidelink_eutra_nr_r16.is_present()) {
      j.start_array("supportedBandCombinationListSidelinkEUTRA-NR-r16");
      for (const auto& e1 : *supported_band_combination_list_sidelink_eutra_nr_r16) {
        j.start_array();
        for (const auto& e2 : e1) {
          e2.to_json(j);
        }
        j.end_array();
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_r16.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-r16");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_r16) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1630.is_present()) {
      j.start_array("supportedBandCombinationList-v1630");
      for (const auto& e1 : *supported_band_combination_list_v1630) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_sidelink_eutra_nr_v1630.is_present()) {
      j.start_array("supportedBandCombinationListSidelinkEUTRA-NR-v1630");
      for (const auto& e1 : *supported_band_combination_list_sidelink_eutra_nr_v1630) {
        j.start_array();
        for (const auto& e2 : e1) {
          e2.to_json(j);
        }
        j.end_array();
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1630.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1630");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1630) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1640.is_present()) {
      j.start_array("supportedBandCombinationList-v1640");
      for (const auto& e1 : *supported_band_combination_list_v1640) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1640.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1640");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1640) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1650.is_present()) {
      j.start_array("supportedBandCombinationList-v1650");
      for (const auto& e1 : *supported_band_combination_list_v1650) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1650.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1650");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1650) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (extended_band_n77_r16_present) {
      j.write_str("extendedBand-n77-r16", "supported");
    }
    if (supported_band_combination_list_ul_tx_switch_v1670.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1670");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1670) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1680.is_present()) {
      j.start_array("supportedBandCombinationList-v1680");
      for (const auto& e1 : *supported_band_combination_list_v1680) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1690.is_present()) {
      j.start_array("supportedBandCombinationList-v1690");
      for (const auto& e1 : *supported_band_combination_list_v1690) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1690.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1690");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1690) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1700.is_present()) {
      j.start_array("supportedBandCombinationList-v1700");
      for (const auto& e1 : *supported_band_combination_list_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1700.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1700");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1700) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_sl_relay_discovery_r17.size() > 0) {
      j.write_str("supportedBandCombinationListSL-RelayDiscovery-r17",
                  supported_band_combination_list_sl_relay_discovery_r17.to_string());
    }
    if (supported_band_combination_list_sl_non_relay_discovery_r17.size() > 0) {
      j.write_str("supportedBandCombinationListSL-NonRelayDiscovery-r17",
                  supported_band_combination_list_sl_non_relay_discovery_r17.to_string());
    }
    if (supported_band_combination_list_sidelink_eutra_nr_v1710.is_present()) {
      j.start_array("supportedBandCombinationListSidelinkEUTRA-NR-v1710");
      for (const auto& e1 : *supported_band_combination_list_sidelink_eutra_nr_v1710) {
        j.start_array();
        for (const auto& e2 : e1) {
          e2.to_json(j);
        }
        j.end_array();
      }
      j.end_array();
    }
    if (sidelink_requested_r17_present) {
      j.write_str("sidelinkRequested-r17", "true");
    }
    if (extended_band_n77_2_r17_present) {
      j.write_str("extendedBand-n77-2-r17", "supported");
    }
    if (supported_band_combination_list_v1720.is_present()) {
      j.start_array("supportedBandCombinationList-v1720");
      for (const auto& e1 : *supported_band_combination_list_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1720.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1720");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1720) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1730.is_present()) {
      j.start_array("supportedBandCombinationList-v1730");
      for (const auto& e1 : *supported_band_combination_list_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1730.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1730");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_sl_relay_discovery_v1730.is_present()) {
      j.start_array("supportedBandCombinationListSL-RelayDiscovery-v1730");
      for (const auto& e1 : *supported_band_combination_list_sl_relay_discovery_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_sl_non_relay_discovery_v1730.is_present()) {
      j.start_array("supportedBandCombinationListSL-NonRelayDiscovery-v1730");
      for (const auto& e1 : *supported_band_combination_list_sl_non_relay_discovery_v1730) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_v1740.is_present()) {
      j.start_array("supportedBandCombinationList-v1740");
      for (const auto& e1 : *supported_band_combination_list_v1740) {
        e1.to_json(j);
      }
      j.end_array();
    }
    if (supported_band_combination_list_ul_tx_switch_v1740.is_present()) {
      j.start_array("supportedBandCombinationList-UplinkTxSwitch-v1740");
      for (const auto& e1 : *supported_band_combination_list_ul_tx_switch_v1740) {
        e1.to_json(j);
      }
      j.end_array();
    }
  }
  j.end_obj();
}

// RLC-ParametersSidelink-r16 ::= SEQUENCE
SRSASN_CODE rlc_params_sidelink_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(am_with_long_sn_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(um_with_long_sn_sidelink_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_params_sidelink_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(am_with_long_sn_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(um_with_long_sn_sidelink_r16_present, 1));

  return SRSASN_SUCCESS;
}
void rlc_params_sidelink_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (am_with_long_sn_sidelink_r16_present) {
    j.write_str("am-WithLongSN-Sidelink-r16", "supported");
  }
  if (um_with_long_sn_sidelink_r16_present) {
    j.write_str("um-WithLongSN-Sidelink-r16", "supported");
  }
  j.end_obj();
}

// RelayParameters-r17 ::= SEQUENCE
SRSASN_CODE relay_params_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(relay_ue_operation_l2_r17_present, 1));
  HANDLE_CODE(bref.pack(remote_ue_operation_l2_r17_present, 1));
  HANDLE_CODE(bref.pack(remote_ue_path_switch_to_idle_inactive_relay_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE relay_params_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(relay_ue_operation_l2_r17_present, 1));
  HANDLE_CODE(bref.unpack(remote_ue_operation_l2_r17_present, 1));
  HANDLE_CODE(bref.unpack(remote_ue_path_switch_to_idle_inactive_relay_r17_present, 1));

  return SRSASN_SUCCESS;
}
void relay_params_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (relay_ue_operation_l2_r17_present) {
    j.write_str("relayUE-Operation-L2-r17", "supported");
  }
  if (remote_ue_operation_l2_r17_present) {
    j.write_str("remoteUE-Operation-L2-r17", "supported");
  }
  if (remote_ue_path_switch_to_idle_inactive_relay_r17_present) {
    j.write_str("remoteUE-PathSwitchToIdleInactiveRelay-r17", "supported");
  }
  j.end_obj();
}

// UE-SidelinkCapabilityAddXDD-Mode-r16 ::= SEQUENCE
SRSASN_CODE ue_sidelink_cap_add_xdd_mode_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mac_params_sidelink_xdd_diff_r16_present, 1));

  if (mac_params_sidelink_xdd_diff_r16_present) {
    HANDLE_CODE(mac_params_sidelink_xdd_diff_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_sidelink_cap_add_xdd_mode_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mac_params_sidelink_xdd_diff_r16_present, 1));

  if (mac_params_sidelink_xdd_diff_r16_present) {
    HANDLE_CODE(mac_params_sidelink_xdd_diff_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_sidelink_cap_add_xdd_mode_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mac_params_sidelink_xdd_diff_r16_present) {
    j.write_fieldname("mac-ParametersSidelinkXDD-Diff-r16");
    mac_params_sidelink_xdd_diff_r16.to_json(j);
  }
  j.end_obj();
}

// SidelinkParametersEUTRA-r16 ::= SEQUENCE
SRSASN_CODE sidelink_params_eutra_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(sl_params_eutra1_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_params_eutra2_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(sl_params_eutra3_r16.size() > 0, 1));
  HANDLE_CODE(bref.pack(supported_band_list_sidelink_eutra_r16.size() > 0, 1));

  if (sl_params_eutra1_r16.size() > 0) {
    HANDLE_CODE(sl_params_eutra1_r16.pack(bref));
  }
  if (sl_params_eutra2_r16.size() > 0) {
    HANDLE_CODE(sl_params_eutra2_r16.pack(bref));
  }
  if (sl_params_eutra3_r16.size() > 0) {
    HANDLE_CODE(sl_params_eutra3_r16.pack(bref));
  }
  if (supported_band_list_sidelink_eutra_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_sidelink_eutra_r16, 1, 256));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_params_eutra_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool sl_params_eutra1_r16_present;
  HANDLE_CODE(bref.unpack(sl_params_eutra1_r16_present, 1));
  bool sl_params_eutra2_r16_present;
  HANDLE_CODE(bref.unpack(sl_params_eutra2_r16_present, 1));
  bool sl_params_eutra3_r16_present;
  HANDLE_CODE(bref.unpack(sl_params_eutra3_r16_present, 1));
  bool supported_band_list_sidelink_eutra_r16_present;
  HANDLE_CODE(bref.unpack(supported_band_list_sidelink_eutra_r16_present, 1));

  if (sl_params_eutra1_r16_present) {
    HANDLE_CODE(sl_params_eutra1_r16.unpack(bref));
  }
  if (sl_params_eutra2_r16_present) {
    HANDLE_CODE(sl_params_eutra2_r16.unpack(bref));
  }
  if (sl_params_eutra3_r16_present) {
    HANDLE_CODE(sl_params_eutra3_r16.unpack(bref));
  }
  if (supported_band_list_sidelink_eutra_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_sidelink_eutra_r16, bref, 1, 256));
  }

  return SRSASN_SUCCESS;
}
void sidelink_params_eutra_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sl_params_eutra1_r16.size() > 0) {
    j.write_str("sl-ParametersEUTRA1-r16", sl_params_eutra1_r16.to_string());
  }
  if (sl_params_eutra2_r16.size() > 0) {
    j.write_str("sl-ParametersEUTRA2-r16", sl_params_eutra2_r16.to_string());
  }
  if (sl_params_eutra3_r16.size() > 0) {
    j.write_str("sl-ParametersEUTRA3-r16", sl_params_eutra3_r16.to_string());
  }
  if (supported_band_list_sidelink_eutra_r16.size() > 0) {
    j.start_array("supportedBandListSidelinkEUTRA-r16");
    for (const auto& e1 : supported_band_list_sidelink_eutra_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// SidelinkParametersNR-r16 ::= SEQUENCE
SRSASN_CODE sidelink_params_nr_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(rlc_params_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(mac_params_sidelink_r16_present, 1));
  HANDLE_CODE(bref.pack(fdd_add_ue_sidelink_cap_r16_present, 1));
  HANDLE_CODE(bref.pack(tdd_add_ue_sidelink_cap_r16_present, 1));
  HANDLE_CODE(bref.pack(supported_band_list_sidelink_r16.size() > 0, 1));

  if (rlc_params_sidelink_r16_present) {
    HANDLE_CODE(rlc_params_sidelink_r16.pack(bref));
  }
  if (mac_params_sidelink_r16_present) {
    HANDLE_CODE(mac_params_sidelink_r16.pack(bref));
  }
  if (fdd_add_ue_sidelink_cap_r16_present) {
    HANDLE_CODE(fdd_add_ue_sidelink_cap_r16.pack(bref));
  }
  if (tdd_add_ue_sidelink_cap_r16_present) {
    HANDLE_CODE(tdd_add_ue_sidelink_cap_r16.pack(bref));
  }
  if (supported_band_list_sidelink_r16.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, supported_band_list_sidelink_r16, 1, 1024));
  }

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= relay_params_r17.is_present();
    group_flags[1] |= p0_olpc_sidelink_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(relay_params_r17.is_present(), 1));
      if (relay_params_r17.is_present()) {
        HANDLE_CODE(relay_params_r17->pack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(p0_olpc_sidelink_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_params_nr_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(rlc_params_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_sidelink_r16_present, 1));
  HANDLE_CODE(bref.unpack(fdd_add_ue_sidelink_cap_r16_present, 1));
  HANDLE_CODE(bref.unpack(tdd_add_ue_sidelink_cap_r16_present, 1));
  bool supported_band_list_sidelink_r16_present;
  HANDLE_CODE(bref.unpack(supported_band_list_sidelink_r16_present, 1));

  if (rlc_params_sidelink_r16_present) {
    HANDLE_CODE(rlc_params_sidelink_r16.unpack(bref));
  }
  if (mac_params_sidelink_r16_present) {
    HANDLE_CODE(mac_params_sidelink_r16.unpack(bref));
  }
  if (fdd_add_ue_sidelink_cap_r16_present) {
    HANDLE_CODE(fdd_add_ue_sidelink_cap_r16.unpack(bref));
  }
  if (tdd_add_ue_sidelink_cap_r16_present) {
    HANDLE_CODE(tdd_add_ue_sidelink_cap_r16.unpack(bref));
  }
  if (supported_band_list_sidelink_r16_present) {
    HANDLE_CODE(unpack_dyn_seq_of(supported_band_list_sidelink_r16, bref, 1, 1024));
  }

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      unpack_presence_flag(relay_params_r17, bref);
      if (relay_params_r17.is_present()) {
        HANDLE_CODE(relay_params_r17->unpack(bref));
      }
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(p0_olpc_sidelink_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void sidelink_params_nr_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (rlc_params_sidelink_r16_present) {
    j.write_fieldname("rlc-ParametersSidelink-r16");
    rlc_params_sidelink_r16.to_json(j);
  }
  if (mac_params_sidelink_r16_present) {
    j.write_fieldname("mac-ParametersSidelink-r16");
    mac_params_sidelink_r16.to_json(j);
  }
  if (fdd_add_ue_sidelink_cap_r16_present) {
    j.write_fieldname("fdd-Add-UE-Sidelink-Capabilities-r16");
    fdd_add_ue_sidelink_cap_r16.to_json(j);
  }
  if (tdd_add_ue_sidelink_cap_r16_present) {
    j.write_fieldname("tdd-Add-UE-Sidelink-Capabilities-r16");
    tdd_add_ue_sidelink_cap_r16.to_json(j);
  }
  if (supported_band_list_sidelink_r16.size() > 0) {
    j.start_array("supportedBandListSidelink-r16");
    for (const auto& e1 : supported_band_list_sidelink_r16) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ext) {
    if (relay_params_r17.is_present()) {
      j.write_fieldname("relayParameters-r17");
      relay_params_r17->to_json(j);
    }
    if (p0_olpc_sidelink_r17_present) {
      j.write_str("p0-OLPC-Sidelink-r17", "supported");
    }
  }
  j.end_obj();
}

// SidelinkParameters-r16 ::= SEQUENCE
SRSASN_CODE sidelink_params_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sidelink_params_nr_r16_present, 1));
  HANDLE_CODE(bref.pack(sidelink_params_eutra_r16_present, 1));

  if (sidelink_params_nr_r16_present) {
    HANDLE_CODE(sidelink_params_nr_r16.pack(bref));
  }
  if (sidelink_params_eutra_r16_present) {
    HANDLE_CODE(sidelink_params_eutra_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sidelink_params_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sidelink_params_nr_r16_present, 1));
  HANDLE_CODE(bref.unpack(sidelink_params_eutra_r16_present, 1));

  if (sidelink_params_nr_r16_present) {
    HANDLE_CODE(sidelink_params_nr_r16.unpack(bref));
  }
  if (sidelink_params_eutra_r16_present) {
    HANDLE_CODE(sidelink_params_eutra_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void sidelink_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sidelink_params_nr_r16_present) {
    j.write_fieldname("sidelinkParametersNR-r16");
    sidelink_params_nr_r16.to_json(j);
  }
  if (sidelink_params_eutra_r16_present) {
    j.write_fieldname("sidelinkParametersEUTRA-r16");
    sidelink_params_eutra_r16.to_json(j);
  }
  j.end_obj();
}

// RedCapParameters-v1740 ::= SEQUENCE
SRSASN_CODE red_cap_params_v1740_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ncd_ssb_for_red_cap_init_bwp_sdt_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE red_cap_params_v1740_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ncd_ssb_for_red_cap_init_bwp_sdt_r17_present, 1));

  return SRSASN_SUCCESS;
}
void red_cap_params_v1740_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ncd_ssb_for_red_cap_init_bwp_sdt_r17_present) {
    j.write_str("ncd-SSB-ForRedCapInitialBWP-SDT-r17", "supported");
  }
  j.end_obj();
}

// AppLayerMeasParameters-r17 ::= SEQUENCE
SRSASN_CODE app_layer_meas_params_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(qoe_streaming_meas_report_r17_present, 1));
  HANDLE_CODE(bref.pack(qoe_mt_si_meas_report_r17_present, 1));
  HANDLE_CODE(bref.pack(qoe_vr_meas_report_r17_present, 1));
  HANDLE_CODE(bref.pack(ran_visible_qo_e_streaming_meas_report_r17_present, 1));
  HANDLE_CODE(bref.pack(ran_visible_qo_e_vr_meas_report_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_meas_report_app_layer_seg_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE app_layer_meas_params_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(qoe_streaming_meas_report_r17_present, 1));
  HANDLE_CODE(bref.unpack(qoe_mt_si_meas_report_r17_present, 1));
  HANDLE_CODE(bref.unpack(qoe_vr_meas_report_r17_present, 1));
  HANDLE_CODE(bref.unpack(ran_visible_qo_e_streaming_meas_report_r17_present, 1));
  HANDLE_CODE(bref.unpack(ran_visible_qo_e_vr_meas_report_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_meas_report_app_layer_seg_r17_present, 1));

  return SRSASN_SUCCESS;
}
void app_layer_meas_params_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (qoe_streaming_meas_report_r17_present) {
    j.write_str("qoe-Streaming-MeasReport-r17", "supported");
  }
  if (qoe_mt_si_meas_report_r17_present) {
    j.write_str("qoe-MTSI-MeasReport-r17", "supported");
  }
  if (qoe_vr_meas_report_r17_present) {
    j.write_str("qoe-VR-MeasReport-r17", "supported");
  }
  if (ran_visible_qo_e_streaming_meas_report_r17_present) {
    j.write_str("ran-VisibleQoE-Streaming-MeasReport-r17", "supported");
  }
  if (ran_visible_qo_e_vr_meas_report_r17_present) {
    j.write_str("ran-VisibleQoE-VR-MeasReport-r17", "supported");
  }
  if (ul_meas_report_app_layer_seg_r17_present) {
    j.write_str("ul-MeasurementReportAppLayer-Seg-r17", "supported");
  }
  j.end_obj();
}

// BAP-Parameters-v1700 ::= SEQUENCE
SRSASN_CODE bap_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(bap_hdr_rewriting_rerouting_r17_present, 1));
  HANDLE_CODE(bref.pack(bap_hdr_rewriting_routing_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(bap_hdr_rewriting_rerouting_r17_present, 1));
  HANDLE_CODE(bref.unpack(bap_hdr_rewriting_routing_r17_present, 1));

  return SRSASN_SUCCESS;
}
void bap_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (bap_hdr_rewriting_rerouting_r17_present) {
    j.write_str("bapHeaderRewriting-Rerouting-r17", "supported");
  }
  if (bap_hdr_rewriting_routing_r17_present) {
    j.write_str("bapHeaderRewriting-Routing-r17", "supported");
  }
  j.end_obj();
}

// HighSpeedParameters-v1700 ::= SEQUENCE
SRSASN_CODE high_speed_params_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_enhancement_ca_r17_present, 1));
  HANDLE_CODE(bref.pack(meas_enhancement_inter_freq_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE high_speed_params_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_enhancement_ca_r17_present, 1));
  HANDLE_CODE(bref.unpack(meas_enhancement_inter_freq_r17_present, 1));

  return SRSASN_SUCCESS;
}
void high_speed_params_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_enhancement_ca_r17_present) {
    j.write_str("measurementEnhancementCA-r17", "supported");
  }
  if (meas_enhancement_inter_freq_r17_present) {
    j.write_str("measurementEnhancementInterFreq-r17", "supported");
  }
  j.end_obj();
}

// MBS-Parameters-r17 ::= SEQUENCE
SRSASN_CODE mbs_params_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(max_mrb_add_r17_present, 1));

  if (max_mrb_add_r17_present) {
    HANDLE_CODE(pack_integer(bref, max_mrb_add_r17, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE mbs_params_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(max_mrb_add_r17_present, 1));

  if (max_mrb_add_r17_present) {
    HANDLE_CODE(unpack_integer(max_mrb_add_r17, bref, (uint8_t)1u, (uint8_t)16u));
  }

  return SRSASN_SUCCESS;
}
void mbs_params_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (max_mrb_add_r17_present) {
    j.write_int("maxMRB-Add-r17", max_mrb_add_r17);
  }
  j.end_obj();
}

// RedCapParameters-r17 ::= SEQUENCE
SRSASN_CODE red_cap_params_r17_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(support_of_red_cap_r17_present, 1));
  HANDLE_CODE(bref.pack(support_of16_drb_red_cap_r17_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE red_cap_params_r17_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(support_of_red_cap_r17_present, 1));
  HANDLE_CODE(bref.unpack(support_of16_drb_red_cap_r17_present, 1));

  return SRSASN_SUCCESS;
}
void red_cap_params_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (support_of_red_cap_r17_present) {
    j.write_str("supportOfRedCap-r17", "supported");
  }
  if (support_of16_drb_red_cap_r17_present) {
    j.write_str("supportOf16DRB-RedCap-r17", "supported");
  }
  j.end_obj();
}

// UE-NR-Capability-v1740 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1740_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(red_cap_params_v1740.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1740_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(red_cap_params_v1740.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1740_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("redCapParameters-v1740");
  red_cap_params_v1740.to_json(j);
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    j.start_obj();
    j.end_obj();
  }
  j.end_obj();
}

// UE-RadioPagingInfo-r17 ::= SEQUENCE
SRSASN_CODE ue_radio_paging_info_r17_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(pei_subgrouping_support_band_list_r17.size() > 0, 1));

  if (pei_subgrouping_support_band_list_r17.size() > 0) {
    HANDLE_CODE(
        pack_dyn_seq_of(bref, pei_subgrouping_support_band_list_r17, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_radio_paging_info_r17_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  bool pei_subgrouping_support_band_list_r17_present;
  HANDLE_CODE(bref.unpack(pei_subgrouping_support_band_list_r17_present, 1));

  if (pei_subgrouping_support_band_list_r17_present) {
    HANDLE_CODE(
        unpack_dyn_seq_of(pei_subgrouping_support_band_list_r17, bref, 1, 1024, integer_packer<uint16_t>(1, 1024)));
  }

  return SRSASN_SUCCESS;
}
void ue_radio_paging_info_r17_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pei_subgrouping_support_band_list_r17.size() > 0) {
    j.start_array("pei-SubgroupingSupportBandList-r17");
    for (const auto& e1 : pei_subgrouping_support_band_list_r17) {
      j.write_int(e1);
    }
    j.end_array();
  }
  j.end_obj();
}

// UE-NR-Capability-v1700 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1700_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(inactive_state_po_determination_r17_present, 1));
  HANDLE_CODE(bref.pack(high_speed_params_v1700_present, 1));
  HANDLE_CODE(bref.pack(pow_sav_params_v1700_present, 1));
  HANDLE_CODE(bref.pack(mac_params_v1700_present, 1));
  HANDLE_CODE(bref.pack(ims_params_v1700_present, 1));
  HANDLE_CODE(bref.pack(app_layer_meas_params_r17_present, 1));
  HANDLE_CODE(bref.pack(red_cap_params_r17_present, 1));
  HANDLE_CODE(bref.pack(ra_sdt_r17_present, 1));
  HANDLE_CODE(bref.pack(srb_sdt_r17_present, 1));
  HANDLE_CODE(bref.pack(gnb_side_rtt_based_pdc_r17_present, 1));
  HANDLE_CODE(bref.pack(bh_rlf_detection_recovery_ind_r17_present, 1));
  HANDLE_CODE(bref.pack(nrdc_params_v1700_present, 1));
  HANDLE_CODE(bref.pack(bap_params_v1700_present, 1));
  HANDLE_CODE(bref.pack(musim_gap_pref_r17_present, 1));
  HANDLE_CODE(bref.pack(musim_leave_connected_r17_present, 1));
  HANDLE_CODE(bref.pack(non_terrestrial_network_r17_present, 1));
  HANDLE_CODE(bref.pack(ntn_scenario_support_r17_present, 1));
  HANDLE_CODE(bref.pack(slice_infofor_cell_resel_r17_present, 1));
  HANDLE_CODE(bref.pack(ue_radio_paging_info_r17_present, 1));
  HANDLE_CODE(bref.pack(ul_gap_fr2_pattern_r17_present, 1));
  HANDLE_CODE(bref.pack(ntn_params_r17_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (high_speed_params_v1700_present) {
    HANDLE_CODE(high_speed_params_v1700.pack(bref));
  }
  if (pow_sav_params_v1700_present) {
    HANDLE_CODE(pow_sav_params_v1700.pack(bref));
  }
  if (mac_params_v1700_present) {
    HANDLE_CODE(mac_params_v1700.pack(bref));
  }
  if (ims_params_v1700_present) {
    HANDLE_CODE(ims_params_v1700.pack(bref));
  }
  HANDLE_CODE(meas_and_mob_params_v1700.pack(bref));
  if (app_layer_meas_params_r17_present) {
    HANDLE_CODE(app_layer_meas_params_r17.pack(bref));
  }
  if (red_cap_params_r17_present) {
    HANDLE_CODE(red_cap_params_r17.pack(bref));
  }
  if (nrdc_params_v1700_present) {
    HANDLE_CODE(nrdc_params_v1700.pack(bref));
  }
  if (bap_params_v1700_present) {
    HANDLE_CODE(bap_params_v1700.pack(bref));
  }
  HANDLE_CODE(mbs_params_r17.pack(bref));
  if (ntn_scenario_support_r17_present) {
    HANDLE_CODE(ntn_scenario_support_r17.pack(bref));
  }
  if (ue_radio_paging_info_r17_present) {
    HANDLE_CODE(ue_radio_paging_info_r17.pack(bref));
  }
  if (ul_gap_fr2_pattern_r17_present) {
    HANDLE_CODE(ul_gap_fr2_pattern_r17.pack(bref));
  }
  if (ntn_params_r17_present) {
    HANDLE_CODE(ntn_params_r17.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1700_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(inactive_state_po_determination_r17_present, 1));
  HANDLE_CODE(bref.unpack(high_speed_params_v1700_present, 1));
  HANDLE_CODE(bref.unpack(pow_sav_params_v1700_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_v1700_present, 1));
  HANDLE_CODE(bref.unpack(ims_params_v1700_present, 1));
  HANDLE_CODE(bref.unpack(app_layer_meas_params_r17_present, 1));
  HANDLE_CODE(bref.unpack(red_cap_params_r17_present, 1));
  HANDLE_CODE(bref.unpack(ra_sdt_r17_present, 1));
  HANDLE_CODE(bref.unpack(srb_sdt_r17_present, 1));
  HANDLE_CODE(bref.unpack(gnb_side_rtt_based_pdc_r17_present, 1));
  HANDLE_CODE(bref.unpack(bh_rlf_detection_recovery_ind_r17_present, 1));
  HANDLE_CODE(bref.unpack(nrdc_params_v1700_present, 1));
  HANDLE_CODE(bref.unpack(bap_params_v1700_present, 1));
  HANDLE_CODE(bref.unpack(musim_gap_pref_r17_present, 1));
  HANDLE_CODE(bref.unpack(musim_leave_connected_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_terrestrial_network_r17_present, 1));
  HANDLE_CODE(bref.unpack(ntn_scenario_support_r17_present, 1));
  HANDLE_CODE(bref.unpack(slice_infofor_cell_resel_r17_present, 1));
  HANDLE_CODE(bref.unpack(ue_radio_paging_info_r17_present, 1));
  HANDLE_CODE(bref.unpack(ul_gap_fr2_pattern_r17_present, 1));
  HANDLE_CODE(bref.unpack(ntn_params_r17_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (high_speed_params_v1700_present) {
    HANDLE_CODE(high_speed_params_v1700.unpack(bref));
  }
  if (pow_sav_params_v1700_present) {
    HANDLE_CODE(pow_sav_params_v1700.unpack(bref));
  }
  if (mac_params_v1700_present) {
    HANDLE_CODE(mac_params_v1700.unpack(bref));
  }
  if (ims_params_v1700_present) {
    HANDLE_CODE(ims_params_v1700.unpack(bref));
  }
  HANDLE_CODE(meas_and_mob_params_v1700.unpack(bref));
  if (app_layer_meas_params_r17_present) {
    HANDLE_CODE(app_layer_meas_params_r17.unpack(bref));
  }
  if (red_cap_params_r17_present) {
    HANDLE_CODE(red_cap_params_r17.unpack(bref));
  }
  if (nrdc_params_v1700_present) {
    HANDLE_CODE(nrdc_params_v1700.unpack(bref));
  }
  if (bap_params_v1700_present) {
    HANDLE_CODE(bap_params_v1700.unpack(bref));
  }
  HANDLE_CODE(mbs_params_r17.unpack(bref));
  if (ntn_scenario_support_r17_present) {
    HANDLE_CODE(ntn_scenario_support_r17.unpack(bref));
  }
  if (ue_radio_paging_info_r17_present) {
    HANDLE_CODE(ue_radio_paging_info_r17.unpack(bref));
  }
  if (ul_gap_fr2_pattern_r17_present) {
    HANDLE_CODE(ul_gap_fr2_pattern_r17.unpack(bref));
  }
  if (ntn_params_r17_present) {
    HANDLE_CODE(ntn_params_r17.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1700_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (inactive_state_po_determination_r17_present) {
    j.write_str("inactiveStatePO-Determination-r17", "supported");
  }
  if (high_speed_params_v1700_present) {
    j.write_fieldname("highSpeedParameters-v1700");
    high_speed_params_v1700.to_json(j);
  }
  if (pow_sav_params_v1700_present) {
    j.write_fieldname("powSav-Parameters-v1700");
    pow_sav_params_v1700.to_json(j);
  }
  if (mac_params_v1700_present) {
    j.write_fieldname("mac-Parameters-v1700");
    mac_params_v1700.to_json(j);
  }
  if (ims_params_v1700_present) {
    j.write_fieldname("ims-Parameters-v1700");
    ims_params_v1700.to_json(j);
  }
  j.write_fieldname("measAndMobParameters-v1700");
  meas_and_mob_params_v1700.to_json(j);
  if (app_layer_meas_params_r17_present) {
    j.write_fieldname("appLayerMeasParameters-r17");
    app_layer_meas_params_r17.to_json(j);
  }
  if (red_cap_params_r17_present) {
    j.write_fieldname("redCapParameters-r17");
    red_cap_params_r17.to_json(j);
  }
  if (ra_sdt_r17_present) {
    j.write_str("ra-SDT-r17", "supported");
  }
  if (srb_sdt_r17_present) {
    j.write_str("srb-SDT-r17", "supported");
  }
  if (gnb_side_rtt_based_pdc_r17_present) {
    j.write_str("gNB-SideRTT-BasedPDC-r17", "supported");
  }
  if (bh_rlf_detection_recovery_ind_r17_present) {
    j.write_str("bh-RLF-DetectionRecovery-Indication-r17", "supported");
  }
  if (nrdc_params_v1700_present) {
    j.write_fieldname("nrdc-Parameters-v1700");
    nrdc_params_v1700.to_json(j);
  }
  if (bap_params_v1700_present) {
    j.write_fieldname("bap-Parameters-v1700");
    bap_params_v1700.to_json(j);
  }
  if (musim_gap_pref_r17_present) {
    j.write_str("musim-GapPreference-r17", "supported");
  }
  if (musim_leave_connected_r17_present) {
    j.write_str("musimLeaveConnected-r17", "supported");
  }
  j.write_fieldname("mbs-Parameters-r17");
  mbs_params_r17.to_json(j);
  if (non_terrestrial_network_r17_present) {
    j.write_str("nonTerrestrialNetwork-r17", "supported");
  }
  if (ntn_scenario_support_r17_present) {
    j.write_str("ntn-ScenarioSupport-r17", ntn_scenario_support_r17.to_string());
  }
  if (slice_infofor_cell_resel_r17_present) {
    j.write_str("sliceInfoforCellReselection-r17", "supported");
  }
  if (ue_radio_paging_info_r17_present) {
    j.write_fieldname("ue-RadioPagingInfo-r17");
    ue_radio_paging_info_r17.to_json(j);
  }
  if (ul_gap_fr2_pattern_r17_present) {
    j.write_str("ul-GapFR2-Pattern-r17", ul_gap_fr2_pattern_r17.to_string());
  }
  if (ntn_params_r17_present) {
    j.write_fieldname("ntn-Parameters-r17");
    ntn_params_r17.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

const char* ue_nr_cap_v1700_s::ntn_scenario_support_r17_opts::to_string() const
{
  static const char* names[] = {"gso", "ngso"};
  return convert_enum_idx(names, 2, value, "ue_nr_cap_v1700_s::ntn_scenario_support_r17_e_");
}

// HighSpeedParameters-v1650 ::= CHOICE
void high_speed_params_v1650_c::set(types::options e)
{
  type_ = e;
}
void high_speed_params_v1650_c::set_intra_nr_meas_enhancement_r16()
{
  set(types::intra_nr_meas_enhancement_r16);
}
void high_speed_params_v1650_c::set_inter_rat_meas_enhancement_r16()
{
  set(types::inter_rat_meas_enhancement_r16);
}
void high_speed_params_v1650_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}
SRSASN_CODE high_speed_params_v1650_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  return SRSASN_SUCCESS;
}
SRSASN_CODE high_speed_params_v1650_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  return SRSASN_SUCCESS;
}

// UE-NR-Capability-v1690 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1690_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ul_rrc_segmentation_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1690_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ul_rrc_segmentation_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1690_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ul_rrc_segmentation_r16_present) {
    j.write_str("ul-RRC-Segmentation-r16", "supported");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// Phy-ParametersSharedSpectrumChAccess-r16 ::= SEQUENCE
SRSASN_CODE phy_params_shared_spec_ch_access_r16_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(ss_sinr_meas_r16_present, 1));
  HANDLE_CODE(bref.pack(sp_csi_report_pucch_r16_present, 1));
  HANDLE_CODE(bref.pack(sp_csi_report_pusch_r16_present, 1));
  HANDLE_CODE(bref.pack(dyn_sfi_r16_present, 1));
  HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_once_per_slot_r16_present, 1));
  HANDLE_CODE(bref.pack(mux_sr_harq_ack_pucch_r16_present, 1));
  HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_multi_per_slot_r16_present, 1));
  HANDLE_CODE(bref.pack(mux_harq_ack_pusch_diff_symbol_r16_present, 1));
  HANDLE_CODE(bref.pack(pucch_repeat_f1_3_4_r16_present, 1));
  HANDLE_CODE(bref.pack(type1_pusch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.pack(type2_pusch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.pack(pusch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.pack(pdsch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_sps_r16_present, 1));
  HANDLE_CODE(bref.pack(cfg_ul_grant_type1_r16_present, 1));
  HANDLE_CODE(bref.pack(cfg_ul_grant_type2_r16_present, 1));
  HANDLE_CODE(bref.pack(pre_empt_ind_dl_r16_present, 1));

  if (mux_sr_harq_ack_csi_pucch_once_per_slot_r16_present) {
    HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_once_per_slot_r16.same_symbol_r16_present, 1));
    HANDLE_CODE(bref.pack(mux_sr_harq_ack_csi_pucch_once_per_slot_r16.diff_symbol_r16_present, 1));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE phy_params_shared_spec_ch_access_r16_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(ss_sinr_meas_r16_present, 1));
  HANDLE_CODE(bref.unpack(sp_csi_report_pucch_r16_present, 1));
  HANDLE_CODE(bref.unpack(sp_csi_report_pusch_r16_present, 1));
  HANDLE_CODE(bref.unpack(dyn_sfi_r16_present, 1));
  HANDLE_CODE(bref.unpack(mux_sr_harq_ack_csi_pucch_once_per_slot_r16_present, 1));
  HANDLE_CODE(bref.unpack(mux_sr_harq_ack_pucch_r16_present, 1));
  HANDLE_CODE(bref.unpack(mux_sr_harq_ack_csi_pucch_multi_per_slot_r16_present, 1));
  HANDLE_CODE(bref.unpack(mux_harq_ack_pusch_diff_symbol_r16_present, 1));
  HANDLE_CODE(bref.unpack(pucch_repeat_f1_3_4_r16_present, 1));
  HANDLE_CODE(bref.unpack(type1_pusch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.unpack(type2_pusch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.unpack(pusch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.unpack(pdsch_repeat_multi_slots_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_sps_r16_present, 1));
  HANDLE_CODE(bref.unpack(cfg_ul_grant_type1_r16_present, 1));
  HANDLE_CODE(bref.unpack(cfg_ul_grant_type2_r16_present, 1));
  HANDLE_CODE(bref.unpack(pre_empt_ind_dl_r16_present, 1));

  if (mux_sr_harq_ack_csi_pucch_once_per_slot_r16_present) {
    HANDLE_CODE(bref.unpack(mux_sr_harq_ack_csi_pucch_once_per_slot_r16.same_symbol_r16_present, 1));
    HANDLE_CODE(bref.unpack(mux_sr_harq_ack_csi_pucch_once_per_slot_r16.diff_symbol_r16_present, 1));
  }

  return SRSASN_SUCCESS;
}
void phy_params_shared_spec_ch_access_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ss_sinr_meas_r16_present) {
    j.write_str("ss-SINR-Meas-r16", "supported");
  }
  if (sp_csi_report_pucch_r16_present) {
    j.write_str("sp-CSI-ReportPUCCH-r16", "supported");
  }
  if (sp_csi_report_pusch_r16_present) {
    j.write_str("sp-CSI-ReportPUSCH-r16", "supported");
  }
  if (dyn_sfi_r16_present) {
    j.write_str("dynamicSFI-r16", "supported");
  }
  if (mux_sr_harq_ack_csi_pucch_once_per_slot_r16_present) {
    j.write_fieldname("mux-SR-HARQ-ACK-CSI-PUCCH-OncePerSlot-r16");
    j.start_obj();
    if (mux_sr_harq_ack_csi_pucch_once_per_slot_r16.same_symbol_r16_present) {
      j.write_str("sameSymbol-r16", "supported");
    }
    if (mux_sr_harq_ack_csi_pucch_once_per_slot_r16.diff_symbol_r16_present) {
      j.write_str("diffSymbol-r16", "supported");
    }
    j.end_obj();
  }
  if (mux_sr_harq_ack_pucch_r16_present) {
    j.write_str("mux-SR-HARQ-ACK-PUCCH-r16", "supported");
  }
  if (mux_sr_harq_ack_csi_pucch_multi_per_slot_r16_present) {
    j.write_str("mux-SR-HARQ-ACK-CSI-PUCCH-MultiPerSlot-r16", "supported");
  }
  if (mux_harq_ack_pusch_diff_symbol_r16_present) {
    j.write_str("mux-HARQ-ACK-PUSCH-DiffSymbol-r16", "supported");
  }
  if (pucch_repeat_f1_3_4_r16_present) {
    j.write_str("pucch-Repetition-F1-3-4-r16", "supported");
  }
  if (type1_pusch_repeat_multi_slots_r16_present) {
    j.write_str("type1-PUSCH-RepetitionMultiSlots-r16", "supported");
  }
  if (type2_pusch_repeat_multi_slots_r16_present) {
    j.write_str("type2-PUSCH-RepetitionMultiSlots-r16", "supported");
  }
  if (pusch_repeat_multi_slots_r16_present) {
    j.write_str("pusch-RepetitionMultiSlots-r16", "supported");
  }
  if (pdsch_repeat_multi_slots_r16_present) {
    j.write_str("pdsch-RepetitionMultiSlots-r16", "supported");
  }
  if (dl_sps_r16_present) {
    j.write_str("downlinkSPS-r16", "supported");
  }
  if (cfg_ul_grant_type1_r16_present) {
    j.write_str("configuredUL-GrantType1-r16", "supported");
  }
  if (cfg_ul_grant_type2_r16_present) {
    j.write_str("configuredUL-GrantType2-r16", "supported");
  }
  if (pre_empt_ind_dl_r16_present) {
    j.write_str("pre-EmptIndication-DL-r16", "supported");
  }
  j.end_obj();
}

// UE-NR-Capability-v1650 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1650_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(mps_prio_ind_r16_present, 1));
  HANDLE_CODE(bref.pack(high_speed_params_v1650_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (high_speed_params_v1650_present) {
    HANDLE_CODE(high_speed_params_v1650.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1650_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(mps_prio_ind_r16_present, 1));
  HANDLE_CODE(bref.unpack(high_speed_params_v1650_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (high_speed_params_v1650_present) {
    HANDLE_CODE(high_speed_params_v1650.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1650_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (mps_prio_ind_r16_present) {
    j.write_str("mpsPriorityIndication-r16", "supported");
  }
  if (high_speed_params_v1650_present) {
    j.write_fieldname("highSpeedParameters-v1650");
    high_speed_params_v1650.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// BAP-Parameters-r16 ::= SEQUENCE
SRSASN_CODE bap_params_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(flow_ctrl_bh_rlc_ch_based_r16_present, 1));
  HANDLE_CODE(bref.pack(flow_ctrl_routing_id_based_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_params_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(flow_ctrl_bh_rlc_ch_based_r16_present, 1));
  HANDLE_CODE(bref.unpack(flow_ctrl_routing_id_based_r16_present, 1));

  return SRSASN_SUCCESS;
}
void bap_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (flow_ctrl_bh_rlc_ch_based_r16_present) {
    j.write_str("flowControlBH-RLC-ChannelBased-r16", "supported");
  }
  if (flow_ctrl_routing_id_based_r16_present) {
    j.write_str("flowControlRouting-ID-Based-r16", "supported");
  }
  j.end_obj();
}

// HighSpeedParameters-r16 ::= SEQUENCE
SRSASN_CODE high_speed_params_r16_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(meas_enhancement_r16_present, 1));
  HANDLE_CODE(bref.pack(demod_enhancement_r16_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE high_speed_params_r16_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(meas_enhancement_r16_present, 1));
  HANDLE_CODE(bref.unpack(demod_enhancement_r16_present, 1));

  return SRSASN_SUCCESS;
}
void high_speed_params_r16_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (meas_enhancement_r16_present) {
    j.write_str("measurementEnhancement-r16", "supported");
  }
  if (demod_enhancement_r16_present) {
    j.write_str("demodulationEnhancement-r16", "supported");
  }
  j.end_obj();
}

// UE-NR-Capability-v1640 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1640_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(redirect_at_resume_by_nas_r16_present, 1));
  HANDLE_CODE(bref.pack(phy_params_shared_spec_ch_access_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (phy_params_shared_spec_ch_access_r16_present) {
    HANDLE_CODE(phy_params_shared_spec_ch_access_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1640_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(redirect_at_resume_by_nas_r16_present, 1));
  HANDLE_CODE(bref.unpack(phy_params_shared_spec_ch_access_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (phy_params_shared_spec_ch_access_r16_present) {
    HANDLE_CODE(phy_params_shared_spec_ch_access_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1640_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (redirect_at_resume_by_nas_r16_present) {
    j.write_str("redirectAtResumeByNAS-r16", "supported");
  }
  if (phy_params_shared_spec_ch_access_r16_present) {
    j.write_fieldname("phy-ParametersSharedSpectrumChAccess-r16");
    phy_params_shared_spec_ch_access_r16.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-CapabilityAddFRX-Mode-v1610 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_add_frx_mode_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(pow_sav_params_frx_diff_r16_present, 1));
  HANDLE_CODE(bref.pack(mac_params_frx_diff_r16_present, 1));

  if (pow_sav_params_frx_diff_r16_present) {
    HANDLE_CODE(pow_sav_params_frx_diff_r16.pack(bref));
  }
  if (mac_params_frx_diff_r16_present) {
    HANDLE_CODE(mac_params_frx_diff_r16.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_add_frx_mode_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(pow_sav_params_frx_diff_r16_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_frx_diff_r16_present, 1));

  if (pow_sav_params_frx_diff_r16_present) {
    HANDLE_CODE(pow_sav_params_frx_diff_r16.unpack(bref));
  }
  if (mac_params_frx_diff_r16_present) {
    HANDLE_CODE(mac_params_frx_diff_r16.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_add_frx_mode_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (pow_sav_params_frx_diff_r16_present) {
    j.write_fieldname("powSav-ParametersFRX-Diff-r16");
    pow_sav_params_frx_diff_r16.to_json(j);
  }
  if (mac_params_frx_diff_r16_present) {
    j.write_fieldname("mac-ParametersFRX-Diff-r16");
    mac_params_frx_diff_r16.to_json(j);
  }
  j.end_obj();
}

// NRDC-Parameters-v1570 ::= SEQUENCE
SRSASN_CODE nrdc_params_v1570_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sfn_sync_nrdc_present, 1));

  return SRSASN_SUCCESS;
}
SRSASN_CODE nrdc_params_v1570_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sfn_sync_nrdc_present, 1));

  return SRSASN_SUCCESS;
}
void nrdc_params_v1570_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sfn_sync_nrdc_present) {
    j.write_str("sfn-SyncNRDC", "supported");
  }
  j.end_obj();
}

// UE-NR-Capability-v1610 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1610_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(in_dev_coex_ind_r16_present, 1));
  HANDLE_CODE(bref.pack(dl_ded_msg_segmentation_r16_present, 1));
  HANDLE_CODE(bref.pack(nrdc_params_v1610_present, 1));
  HANDLE_CODE(bref.pack(pow_sav_params_r16_present, 1));
  HANDLE_CODE(bref.pack(fr1_add_ue_nr_cap_v1610_present, 1));
  HANDLE_CODE(bref.pack(fr2_add_ue_nr_cap_v1610_present, 1));
  HANDLE_CODE(bref.pack(bh_rlf_ind_r16_present, 1));
  HANDLE_CODE(bref.pack(direct_sn_addition_first_rrc_iab_r16_present, 1));
  HANDLE_CODE(bref.pack(bap_params_r16_present, 1));
  HANDLE_CODE(bref.pack(ref_time_provision_r16_present, 1));
  HANDLE_CODE(bref.pack(sidelink_params_r16_present, 1));
  HANDLE_CODE(bref.pack(high_speed_params_r16_present, 1));
  HANDLE_CODE(bref.pack(mac_params_v1610_present, 1));
  HANDLE_CODE(bref.pack(mcg_rlf_recovery_via_scg_r16_present, 1));
  HANDLE_CODE(bref.pack(resume_with_stored_mcg_scells_r16_present, 1));
  HANDLE_CODE(bref.pack(resume_with_stored_scg_r16_present, 1));
  HANDLE_CODE(bref.pack(resume_with_scg_cfg_r16_present, 1));
  HANDLE_CODE(bref.pack(ue_based_perf_meas_params_r16_present, 1));
  HANDLE_CODE(bref.pack(son_params_r16_present, 1));
  HANDLE_CODE(bref.pack(on_demand_sib_connected_r16_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (nrdc_params_v1610_present) {
    HANDLE_CODE(nrdc_params_v1610.pack(bref));
  }
  if (pow_sav_params_r16_present) {
    HANDLE_CODE(pow_sav_params_r16.pack(bref));
  }
  if (fr1_add_ue_nr_cap_v1610_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap_v1610.pack(bref));
  }
  if (fr2_add_ue_nr_cap_v1610_present) {
    HANDLE_CODE(fr2_add_ue_nr_cap_v1610.pack(bref));
  }
  if (bap_params_r16_present) {
    HANDLE_CODE(bap_params_r16.pack(bref));
  }
  if (sidelink_params_r16_present) {
    HANDLE_CODE(sidelink_params_r16.pack(bref));
  }
  if (high_speed_params_r16_present) {
    HANDLE_CODE(high_speed_params_r16.pack(bref));
  }
  if (mac_params_v1610_present) {
    HANDLE_CODE(mac_params_v1610.pack(bref));
  }
  if (ue_based_perf_meas_params_r16_present) {
    HANDLE_CODE(ue_based_perf_meas_params_r16.pack(bref));
  }
  if (son_params_r16_present) {
    HANDLE_CODE(son_params_r16.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1610_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(in_dev_coex_ind_r16_present, 1));
  HANDLE_CODE(bref.unpack(dl_ded_msg_segmentation_r16_present, 1));
  HANDLE_CODE(bref.unpack(nrdc_params_v1610_present, 1));
  HANDLE_CODE(bref.unpack(pow_sav_params_r16_present, 1));
  HANDLE_CODE(bref.unpack(fr1_add_ue_nr_cap_v1610_present, 1));
  HANDLE_CODE(bref.unpack(fr2_add_ue_nr_cap_v1610_present, 1));
  HANDLE_CODE(bref.unpack(bh_rlf_ind_r16_present, 1));
  HANDLE_CODE(bref.unpack(direct_sn_addition_first_rrc_iab_r16_present, 1));
  HANDLE_CODE(bref.unpack(bap_params_r16_present, 1));
  HANDLE_CODE(bref.unpack(ref_time_provision_r16_present, 1));
  HANDLE_CODE(bref.unpack(sidelink_params_r16_present, 1));
  HANDLE_CODE(bref.unpack(high_speed_params_r16_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_v1610_present, 1));
  HANDLE_CODE(bref.unpack(mcg_rlf_recovery_via_scg_r16_present, 1));
  HANDLE_CODE(bref.unpack(resume_with_stored_mcg_scells_r16_present, 1));
  HANDLE_CODE(bref.unpack(resume_with_stored_scg_r16_present, 1));
  HANDLE_CODE(bref.unpack(resume_with_scg_cfg_r16_present, 1));
  HANDLE_CODE(bref.unpack(ue_based_perf_meas_params_r16_present, 1));
  HANDLE_CODE(bref.unpack(son_params_r16_present, 1));
  HANDLE_CODE(bref.unpack(on_demand_sib_connected_r16_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (nrdc_params_v1610_present) {
    HANDLE_CODE(nrdc_params_v1610.unpack(bref));
  }
  if (pow_sav_params_r16_present) {
    HANDLE_CODE(pow_sav_params_r16.unpack(bref));
  }
  if (fr1_add_ue_nr_cap_v1610_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap_v1610.unpack(bref));
  }
  if (fr2_add_ue_nr_cap_v1610_present) {
    HANDLE_CODE(fr2_add_ue_nr_cap_v1610.unpack(bref));
  }
  if (bap_params_r16_present) {
    HANDLE_CODE(bap_params_r16.unpack(bref));
  }
  if (sidelink_params_r16_present) {
    HANDLE_CODE(sidelink_params_r16.unpack(bref));
  }
  if (high_speed_params_r16_present) {
    HANDLE_CODE(high_speed_params_r16.unpack(bref));
  }
  if (mac_params_v1610_present) {
    HANDLE_CODE(mac_params_v1610.unpack(bref));
  }
  if (ue_based_perf_meas_params_r16_present) {
    HANDLE_CODE(ue_based_perf_meas_params_r16.unpack(bref));
  }
  if (son_params_r16_present) {
    HANDLE_CODE(son_params_r16.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1610_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (in_dev_coex_ind_r16_present) {
    j.write_str("inDeviceCoexInd-r16", "supported");
  }
  if (dl_ded_msg_segmentation_r16_present) {
    j.write_str("dl-DedicatedMessageSegmentation-r16", "supported");
  }
  if (nrdc_params_v1610_present) {
    j.write_fieldname("nrdc-Parameters-v1610");
    nrdc_params_v1610.to_json(j);
  }
  if (pow_sav_params_r16_present) {
    j.write_fieldname("powSav-Parameters-r16");
    pow_sav_params_r16.to_json(j);
  }
  if (fr1_add_ue_nr_cap_v1610_present) {
    j.write_fieldname("fr1-Add-UE-NR-Capabilities-v1610");
    fr1_add_ue_nr_cap_v1610.to_json(j);
  }
  if (fr2_add_ue_nr_cap_v1610_present) {
    j.write_fieldname("fr2-Add-UE-NR-Capabilities-v1610");
    fr2_add_ue_nr_cap_v1610.to_json(j);
  }
  if (bh_rlf_ind_r16_present) {
    j.write_str("bh-RLF-Indication-r16", "supported");
  }
  if (direct_sn_addition_first_rrc_iab_r16_present) {
    j.write_str("directSN-AdditionFirstRRC-IAB-r16", "supported");
  }
  if (bap_params_r16_present) {
    j.write_fieldname("bap-Parameters-r16");
    bap_params_r16.to_json(j);
  }
  if (ref_time_provision_r16_present) {
    j.write_str("referenceTimeProvision-r16", "supported");
  }
  if (sidelink_params_r16_present) {
    j.write_fieldname("sidelinkParameters-r16");
    sidelink_params_r16.to_json(j);
  }
  if (high_speed_params_r16_present) {
    j.write_fieldname("highSpeedParameters-r16");
    high_speed_params_r16.to_json(j);
  }
  if (mac_params_v1610_present) {
    j.write_fieldname("mac-Parameters-v1610");
    mac_params_v1610.to_json(j);
  }
  if (mcg_rlf_recovery_via_scg_r16_present) {
    j.write_str("mcgRLF-RecoveryViaSCG-r16", "supported");
  }
  if (resume_with_stored_mcg_scells_r16_present) {
    j.write_str("resumeWithStoredMCG-SCells-r16", "supported");
  }
  if (resume_with_stored_scg_r16_present) {
    j.write_str("resumeWithStoredSCG-r16", "supported");
  }
  if (resume_with_scg_cfg_r16_present) {
    j.write_str("resumeWithSCG-Config-r16", "supported");
  }
  if (ue_based_perf_meas_params_r16_present) {
    j.write_fieldname("ue-BasedPerfMeas-Parameters-r16");
    ue_based_perf_meas_params_r16.to_json(j);
  }
  if (son_params_r16_present) {
    j.write_fieldname("son-Parameters-r16");
    son_params_r16.to_json(j);
  }
  if (on_demand_sib_connected_r16_present) {
    j.write_str("onDemandSIB-Connected-r16", "supported");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-Capability-v1570 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1570_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nrdc_params_v1570_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (nrdc_params_v1570_present) {
    HANDLE_CODE(nrdc_params_v1570.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1570_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(nrdc_params_v1570_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (nrdc_params_v1570_present) {
    HANDLE_CODE(nrdc_params_v1570.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1570_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (nrdc_params_v1570_present) {
    j.write_fieldname("nrdc-Parameters-v1570");
    nrdc_params_v1570.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-Capability-v1560 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1560_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(nrdc_params_present, 1));
  HANDLE_CODE(bref.pack(rx_filts.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (nrdc_params_present) {
    HANDLE_CODE(nrdc_params.pack(bref));
  }
  if (rx_filts.size() > 0) {
    HANDLE_CODE(rx_filts.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1560_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(nrdc_params_present, 1));
  bool rx_filts_present;
  HANDLE_CODE(bref.unpack(rx_filts_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (nrdc_params_present) {
    HANDLE_CODE(nrdc_params.unpack(bref));
  }
  if (rx_filts_present) {
    HANDLE_CODE(rx_filts.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1560_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (nrdc_params_present) {
    j.write_fieldname("nrdc-Parameters");
    nrdc_params.to_json(j);
  }
  if (rx_filts.size() > 0) {
    j.write_str("receivedFilters", rx_filts.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// SDAP-Parameters ::= SEQUENCE
SRSASN_CODE sdap_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(as_reflective_qos_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= sdap_qos_iab_r16_present;
    group_flags[0] |= sdap_hdr_iab_r16_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(sdap_qos_iab_r16_present, 1));
      HANDLE_CODE(bref.pack(sdap_hdr_iab_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sdap_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(as_reflective_qos_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(1);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(sdap_qos_iab_r16_present, 1));
      HANDLE_CODE(bref.unpack(sdap_hdr_iab_r16_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void sdap_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (as_reflective_qos_present) {
    j.write_str("as-ReflectiveQoS", "true");
  }
  if (ext) {
    if (sdap_qos_iab_r16_present) {
      j.write_str("sdap-QOS-IAB-r16", "supported");
    }
    if (sdap_hdr_iab_r16_present) {
      j.write_str("sdapHeaderIAB-r16", "supported");
    }
  }
  j.end_obj();
}

// UE-NR-Capability-v1550 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1550_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(reduced_cp_latency_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1550_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(reduced_cp_latency_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1550_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (reduced_cp_latency_present) {
    j.write_str("reducedCP-Latency", "supported");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-CapabilityAddFRX-Mode-v1540 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_add_frx_mode_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(ims_params_frx_diff_present, 1));

  if (ims_params_frx_diff_present) {
    HANDLE_CODE(ims_params_frx_diff.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_add_frx_mode_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(ims_params_frx_diff_present, 1));

  if (ims_params_frx_diff_present) {
    HANDLE_CODE(ims_params_frx_diff.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_add_frx_mode_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (ims_params_frx_diff_present) {
    j.write_fieldname("ims-ParametersFRX-Diff");
    ims_params_frx_diff.to_json(j);
  }
  j.end_obj();
}

// UE-NR-Capability-v1540 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1540_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(sdap_params_present, 1));
  HANDLE_CODE(bref.pack(overheat_ind_present, 1));
  HANDLE_CODE(bref.pack(ims_params_present, 1));
  HANDLE_CODE(bref.pack(fr1_add_ue_nr_cap_v1540_present, 1));
  HANDLE_CODE(bref.pack(fr2_add_ue_nr_cap_v1540_present, 1));
  HANDLE_CODE(bref.pack(fr1_fr2_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (sdap_params_present) {
    HANDLE_CODE(sdap_params.pack(bref));
  }
  if (ims_params_present) {
    HANDLE_CODE(ims_params.pack(bref));
  }
  if (fr1_add_ue_nr_cap_v1540_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap_v1540.pack(bref));
  }
  if (fr2_add_ue_nr_cap_v1540_present) {
    HANDLE_CODE(fr2_add_ue_nr_cap_v1540.pack(bref));
  }
  if (fr1_fr2_add_ue_nr_cap_present) {
    HANDLE_CODE(fr1_fr2_add_ue_nr_cap.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1540_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(sdap_params_present, 1));
  HANDLE_CODE(bref.unpack(overheat_ind_present, 1));
  HANDLE_CODE(bref.unpack(ims_params_present, 1));
  HANDLE_CODE(bref.unpack(fr1_add_ue_nr_cap_v1540_present, 1));
  HANDLE_CODE(bref.unpack(fr2_add_ue_nr_cap_v1540_present, 1));
  HANDLE_CODE(bref.unpack(fr1_fr2_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (sdap_params_present) {
    HANDLE_CODE(sdap_params.unpack(bref));
  }
  if (ims_params_present) {
    HANDLE_CODE(ims_params.unpack(bref));
  }
  if (fr1_add_ue_nr_cap_v1540_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap_v1540.unpack(bref));
  }
  if (fr2_add_ue_nr_cap_v1540_present) {
    HANDLE_CODE(fr2_add_ue_nr_cap_v1540.unpack(bref));
  }
  if (fr1_fr2_add_ue_nr_cap_present) {
    HANDLE_CODE(fr1_fr2_add_ue_nr_cap.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1540_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (sdap_params_present) {
    j.write_fieldname("sdap-Parameters");
    sdap_params.to_json(j);
  }
  if (overheat_ind_present) {
    j.write_str("overheatingInd", "supported");
  }
  if (ims_params_present) {
    j.write_fieldname("ims-Parameters");
    ims_params.to_json(j);
  }
  if (fr1_add_ue_nr_cap_v1540_present) {
    j.write_fieldname("fr1-Add-UE-NR-Capabilities-v1540");
    fr1_add_ue_nr_cap_v1540.to_json(j);
  }
  if (fr2_add_ue_nr_cap_v1540_present) {
    j.write_fieldname("fr2-Add-UE-NR-Capabilities-v1540");
    fr2_add_ue_nr_cap_v1540.to_json(j);
  }
  if (fr1_fr2_add_ue_nr_cap_present) {
    j.write_fieldname("fr1-fr2-Add-UE-NR-Capabilities");
    fr1_fr2_add_ue_nr_cap.to_json(j);
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-CapabilityAddXDD-Mode-v1530 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_add_xdd_mode_v1530_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(eutra_params_xdd_diff.pack(bref));

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_add_xdd_mode_v1530_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(eutra_params_xdd_diff.unpack(bref));

  return SRSASN_SUCCESS;
}
void ue_nr_cap_add_xdd_mode_v1530_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("eutra-ParametersXDD-Diff");
  eutra_params_xdd_diff.to_json(j);
  j.end_obj();
}

// AccessStratumRelease ::= ENUMERATED
const char* access_stratum_release_opts::to_string() const
{
  static const char* names[] = {"rel15", "rel16", "rel17", "spare5", "spare4", "spare3", "spare2", "spare1"};
  return convert_enum_idx(names, 8, value, "access_stratum_release_e");
}
uint8_t access_stratum_release_opts::to_number() const
{
  static const uint8_t numbers[] = {15, 16, 17};
  return map_enum_number(numbers, 3, value, "access_stratum_release_e");
}

// RLC-Parameters ::= SEQUENCE
SRSASN_CODE rlc_params_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(am_with_short_sn_present, 1));
  HANDLE_CODE(bref.pack(um_with_short_sn_present, 1));
  HANDLE_CODE(bref.pack(um_with_long_sn_present, 1));

  if (ext) {
    ext_groups_packer_guard group_flags;
    group_flags[0] |= extended_t_poll_retx_r16_present;
    group_flags[0] |= extended_t_status_prohibit_r16_present;
    group_flags[1] |= am_with_long_sn_red_cap_r17_present;
    group_flags.pack(bref);

    if (group_flags[0]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(extended_t_poll_retx_r16_present, 1));
      HANDLE_CODE(bref.pack(extended_t_status_prohibit_r16_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_pack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.pack(am_with_long_sn_red_cap_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rlc_params_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(am_with_short_sn_present, 1));
  HANDLE_CODE(bref.unpack(um_with_short_sn_present, 1));
  HANDLE_CODE(bref.unpack(um_with_long_sn_present, 1));

  if (ext) {
    ext_groups_unpacker_guard group_flags(2);
    group_flags.unpack(bref);

    if (group_flags[0]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(extended_t_poll_retx_r16_present, 1));
      HANDLE_CODE(bref.unpack(extended_t_status_prohibit_r16_present, 1));
    }
    if (group_flags[1]) {
      varlength_field_unpack_guard varlen_scope(bref, false);

      HANDLE_CODE(bref.unpack(am_with_long_sn_red_cap_r17_present, 1));
    }
  }
  return SRSASN_SUCCESS;
}
void rlc_params_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (am_with_short_sn_present) {
    j.write_str("am-WithShortSN", "supported");
  }
  if (um_with_short_sn_present) {
    j.write_str("um-WithShortSN", "supported");
  }
  if (um_with_long_sn_present) {
    j.write_str("um-WithLongSN", "supported");
  }
  if (ext) {
    if (extended_t_poll_retx_r16_present) {
      j.write_str("extendedT-PollRetransmit-r16", "supported");
    }
    if (extended_t_status_prohibit_r16_present) {
      j.write_str("extendedT-StatusProhibit-r16", "supported");
    }
    if (am_with_long_sn_red_cap_r17_present) {
      j.write_str("am-WithLongSN-RedCap-r17", "supported");
    }
  }
  j.end_obj();
}

// UE-NR-Capability-v1530 ::= SEQUENCE
SRSASN_CODE ue_nr_cap_v1530_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(fdd_add_ue_nr_cap_v1530_present, 1));
  HANDLE_CODE(bref.pack(tdd_add_ue_nr_cap_v1530_present, 1));
  HANDLE_CODE(bref.pack(dummy_present, 1));
  HANDLE_CODE(bref.pack(inter_rat_params_present, 1));
  HANDLE_CODE(bref.pack(inactive_state_present, 1));
  HANDLE_CODE(bref.pack(delay_budget_report_present, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  if (fdd_add_ue_nr_cap_v1530_present) {
    HANDLE_CODE(fdd_add_ue_nr_cap_v1530.pack(bref));
  }
  if (tdd_add_ue_nr_cap_v1530_present) {
    HANDLE_CODE(tdd_add_ue_nr_cap_v1530.pack(bref));
  }
  if (inter_rat_params_present) {
    HANDLE_CODE(inter_rat_params.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_v1530_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(fdd_add_ue_nr_cap_v1530_present, 1));
  HANDLE_CODE(bref.unpack(tdd_add_ue_nr_cap_v1530_present, 1));
  HANDLE_CODE(bref.unpack(dummy_present, 1));
  HANDLE_CODE(bref.unpack(inter_rat_params_present, 1));
  HANDLE_CODE(bref.unpack(inactive_state_present, 1));
  HANDLE_CODE(bref.unpack(delay_budget_report_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  if (fdd_add_ue_nr_cap_v1530_present) {
    HANDLE_CODE(fdd_add_ue_nr_cap_v1530.unpack(bref));
  }
  if (tdd_add_ue_nr_cap_v1530_present) {
    HANDLE_CODE(tdd_add_ue_nr_cap_v1530.unpack(bref));
  }
  if (inter_rat_params_present) {
    HANDLE_CODE(inter_rat_params.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_v1530_s::to_json(json_writer& j) const
{
  j.start_obj();
  if (fdd_add_ue_nr_cap_v1530_present) {
    j.write_fieldname("fdd-Add-UE-NR-Capabilities-v1530");
    fdd_add_ue_nr_cap_v1530.to_json(j);
  }
  if (tdd_add_ue_nr_cap_v1530_present) {
    j.write_fieldname("tdd-Add-UE-NR-Capabilities-v1530");
    tdd_add_ue_nr_cap_v1530.to_json(j);
  }
  if (dummy_present) {
    j.write_str("dummy", "supported");
  }
  if (inter_rat_params_present) {
    j.write_fieldname("interRAT-Parameters");
    inter_rat_params.to_json(j);
  }
  if (inactive_state_present) {
    j.write_str("inactiveState", "supported");
  }
  if (delay_budget_report_present) {
    j.write_str("delayBudgetReporting", "supported");
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}

// UE-NR-Capability ::= SEQUENCE
SRSASN_CODE ue_nr_cap_s::pack(bit_ref& bref) const
{
  HANDLE_CODE(bref.pack(rlc_params_present, 1));
  HANDLE_CODE(bref.pack(mac_params_present, 1));
  HANDLE_CODE(bref.pack(meas_and_mob_params_present, 1));
  HANDLE_CODE(bref.pack(fdd_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.pack(tdd_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.pack(fr1_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.pack(fr2_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.pack(feature_sets_present, 1));
  HANDLE_CODE(bref.pack(feature_set_combinations.size() > 0, 1));
  HANDLE_CODE(bref.pack(late_non_crit_ext.size() > 0, 1));
  HANDLE_CODE(bref.pack(non_crit_ext_present, 1));

  HANDLE_CODE(access_stratum_release.pack(bref));
  HANDLE_CODE(pdcp_params.pack(bref));
  if (rlc_params_present) {
    HANDLE_CODE(rlc_params.pack(bref));
  }
  if (mac_params_present) {
    HANDLE_CODE(mac_params.pack(bref));
  }
  HANDLE_CODE(phy_params.pack(bref));
  HANDLE_CODE(rf_params.pack(bref));
  if (meas_and_mob_params_present) {
    HANDLE_CODE(meas_and_mob_params.pack(bref));
  }
  if (fdd_add_ue_nr_cap_present) {
    HANDLE_CODE(fdd_add_ue_nr_cap.pack(bref));
  }
  if (tdd_add_ue_nr_cap_present) {
    HANDLE_CODE(tdd_add_ue_nr_cap.pack(bref));
  }
  if (fr1_add_ue_nr_cap_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap.pack(bref));
  }
  if (fr2_add_ue_nr_cap_present) {
    HANDLE_CODE(fr2_add_ue_nr_cap.pack(bref));
  }
  if (feature_sets_present) {
    HANDLE_CODE(feature_sets.pack(bref));
  }
  if (feature_set_combinations.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref,
                                feature_set_combinations,
                                1,
                                1024,
                                SeqOfPacker<SeqOfPacker<Packer>>(1, 32, SeqOfPacker<Packer>(1, 128, Packer()))));
  }
  if (late_non_crit_ext.size() > 0) {
    HANDLE_CODE(late_non_crit_ext.pack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_nr_cap_s::unpack(cbit_ref& bref)
{
  HANDLE_CODE(bref.unpack(rlc_params_present, 1));
  HANDLE_CODE(bref.unpack(mac_params_present, 1));
  HANDLE_CODE(bref.unpack(meas_and_mob_params_present, 1));
  HANDLE_CODE(bref.unpack(fdd_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.unpack(tdd_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.unpack(fr1_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.unpack(fr2_add_ue_nr_cap_present, 1));
  HANDLE_CODE(bref.unpack(feature_sets_present, 1));
  bool feature_set_combinations_present;
  HANDLE_CODE(bref.unpack(feature_set_combinations_present, 1));
  bool late_non_crit_ext_present;
  HANDLE_CODE(bref.unpack(late_non_crit_ext_present, 1));
  HANDLE_CODE(bref.unpack(non_crit_ext_present, 1));

  HANDLE_CODE(access_stratum_release.unpack(bref));
  HANDLE_CODE(pdcp_params.unpack(bref));
  if (rlc_params_present) {
    HANDLE_CODE(rlc_params.unpack(bref));
  }
  if (mac_params_present) {
    HANDLE_CODE(mac_params.unpack(bref));
  }
  HANDLE_CODE(phy_params.unpack(bref));
  HANDLE_CODE(rf_params.unpack(bref));
  if (meas_and_mob_params_present) {
    HANDLE_CODE(meas_and_mob_params.unpack(bref));
  }
  if (fdd_add_ue_nr_cap_present) {
    HANDLE_CODE(fdd_add_ue_nr_cap.unpack(bref));
  }
  if (tdd_add_ue_nr_cap_present) {
    HANDLE_CODE(tdd_add_ue_nr_cap.unpack(bref));
  }
  if (fr1_add_ue_nr_cap_present) {
    HANDLE_CODE(fr1_add_ue_nr_cap.unpack(bref));
  }
  if (fr2_add_ue_nr_cap_present) {
    HANDLE_CODE(fr2_add_ue_nr_cap.unpack(bref));
  }
  if (feature_sets_present) {
    HANDLE_CODE(feature_sets.unpack(bref));
  }
  if (feature_set_combinations_present) {
    HANDLE_CODE(unpack_dyn_seq_of(feature_set_combinations,
                                  bref,
                                  1,
                                  1024,
                                  SeqOfPacker<SeqOfPacker<Packer>>(1, 32, SeqOfPacker<Packer>(1, 128, Packer()))));
  }
  if (late_non_crit_ext_present) {
    HANDLE_CODE(late_non_crit_ext.unpack(bref));
  }
  if (non_crit_ext_present) {
    HANDLE_CODE(non_crit_ext.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void ue_nr_cap_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("accessStratumRelease", access_stratum_release.to_string());
  j.write_fieldname("pdcp-Parameters");
  pdcp_params.to_json(j);
  if (rlc_params_present) {
    j.write_fieldname("rlc-Parameters");
    rlc_params.to_json(j);
  }
  if (mac_params_present) {
    j.write_fieldname("mac-Parameters");
    mac_params.to_json(j);
  }
  j.write_fieldname("phy-Parameters");
  phy_params.to_json(j);
  j.write_fieldname("rf-Parameters");
  rf_params.to_json(j);
  if (meas_and_mob_params_present) {
    j.write_fieldname("measAndMobParameters");
    meas_and_mob_params.to_json(j);
  }
  if (fdd_add_ue_nr_cap_present) {
    j.write_fieldname("fdd-Add-UE-NR-Capabilities");
    fdd_add_ue_nr_cap.to_json(j);
  }
  if (tdd_add_ue_nr_cap_present) {
    j.write_fieldname("tdd-Add-UE-NR-Capabilities");
    tdd_add_ue_nr_cap.to_json(j);
  }
  if (fr1_add_ue_nr_cap_present) {
    j.write_fieldname("fr1-Add-UE-NR-Capabilities");
    fr1_add_ue_nr_cap.to_json(j);
  }
  if (fr2_add_ue_nr_cap_present) {
    j.write_fieldname("fr2-Add-UE-NR-Capabilities");
    fr2_add_ue_nr_cap.to_json(j);
  }
  if (feature_sets_present) {
    j.write_fieldname("featureSets");
    feature_sets.to_json(j);
  }
  if (feature_set_combinations.size() > 0) {
    j.start_array("featureSetCombinations");
    for (const auto& e1 : feature_set_combinations) {
      j.start_array();
      for (const auto& e2 : e1) {
        j.start_array();
        for (const auto& e3 : e2) {
          e3.to_json(j);
        }
        j.end_array();
      }
      j.end_array();
    }
    j.end_array();
  }
  if (late_non_crit_ext.size() > 0) {
    j.write_str("lateNonCriticalExtension", late_non_crit_ext.to_string());
  }
  if (non_crit_ext_present) {
    j.write_fieldname("nonCriticalExtension");
    non_crit_ext.to_json(j);
  }
  j.end_obj();
}
