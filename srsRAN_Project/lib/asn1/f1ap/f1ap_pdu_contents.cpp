/*
 *
 * Copyright 2021-2023 Software Radio Systems Limited
 *
 * This file is part of srsRAN.
 *
 * srsRAN is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * srsRAN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * A copy of the GNU Affero General Public License can be found in
 * the LICENSE file in the top-level directory of this distribution
 * and at http://www.gnu.org/licenses/.
 *
 */

#include "srsran/asn1/f1ap/f1ap_pdu_contents.h"
#include <sstream>

using namespace asn1;
using namespace asn1::f1ap;

/*******************************************************************************
 *                                Struct Methods
 ******************************************************************************/

// AccessAndMobilityIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t access_and_mob_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 359, 360, 443};
  return map_enum_number(names, 4, idx, "id");
}
bool access_and_mob_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 359, 360, 443};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e access_and_mob_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 359:
      return crit_e::ignore;
    case 360:
      return crit_e::ignore;
    case 443:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
access_and_mob_ind_ies_o::value_c access_and_mob_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 359:
      ret.set(value_c::types::rach_report_info_list);
      break;
    case 360:
      ret.set(value_c::types::rlf_report_info_list);
      break;
    case 443:
      ret.set(value_c::types::successful_ho_report_info_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e access_and_mob_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 359:
      return presence_e::optional;
    case 360:
      return presence_e::optional;
    case 443:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void access_and_mob_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rach_report_info_list:
      c.destroy<rach_report_info_list_l>();
      break;
    case types::rlf_report_info_list:
      c.destroy<rlf_report_info_list_l>();
      break;
    case types::successful_ho_report_info_list:
      c.destroy<successful_ho_report_info_list_l>();
      break;
    default:
      break;
  }
}
void access_and_mob_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::rach_report_info_list:
      c.init<rach_report_info_list_l>();
      break;
    case types::rlf_report_info_list:
      c.init<rlf_report_info_list_l>();
      break;
    case types::successful_ho_report_info_list:
      c.init<successful_ho_report_info_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }
}
access_and_mob_ind_ies_o::value_c::value_c(const access_and_mob_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::rach_report_info_list:
      c.init(other.c.get<rach_report_info_list_l>());
      break;
    case types::rlf_report_info_list:
      c.init(other.c.get<rlf_report_info_list_l>());
      break;
    case types::successful_ho_report_info_list:
      c.init(other.c.get<successful_ho_report_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }
}
access_and_mob_ind_ies_o::value_c&
access_and_mob_ind_ies_o::value_c::operator=(const access_and_mob_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::rach_report_info_list:
      c.set(other.c.get<rach_report_info_list_l>());
      break;
    case types::rlf_report_info_list:
      c.set(other.c.get<rlf_report_info_list_l>());
      break;
    case types::successful_ho_report_info_list:
      c.set(other.c.get<successful_ho_report_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& access_and_mob_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
rach_report_info_list_l& access_and_mob_ind_ies_o::value_c::rach_report_info_list()
{
  assert_choice_type(types::rach_report_info_list, type_, "Value");
  return c.get<rach_report_info_list_l>();
}
rlf_report_info_list_l& access_and_mob_ind_ies_o::value_c::rlf_report_info_list()
{
  assert_choice_type(types::rlf_report_info_list, type_, "Value");
  return c.get<rlf_report_info_list_l>();
}
successful_ho_report_info_list_l& access_and_mob_ind_ies_o::value_c::successful_ho_report_info_list()
{
  assert_choice_type(types::successful_ho_report_info_list, type_, "Value");
  return c.get<successful_ho_report_info_list_l>();
}
const uint16_t& access_and_mob_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const rach_report_info_list_l& access_and_mob_ind_ies_o::value_c::rach_report_info_list() const
{
  assert_choice_type(types::rach_report_info_list, type_, "Value");
  return c.get<rach_report_info_list_l>();
}
const rlf_report_info_list_l& access_and_mob_ind_ies_o::value_c::rlf_report_info_list() const
{
  assert_choice_type(types::rlf_report_info_list, type_, "Value");
  return c.get<rlf_report_info_list_l>();
}
const successful_ho_report_info_list_l& access_and_mob_ind_ies_o::value_c::successful_ho_report_info_list() const
{
  assert_choice_type(types::successful_ho_report_info_list, type_, "Value");
  return c.get<successful_ho_report_info_list_l>();
}
void access_and_mob_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::rach_report_info_list:
      j.start_array("RACHReportInformationList");
      for (const auto& e1 : c.get<rach_report_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::rlf_report_info_list:
      j.start_array("RLFReportInformationList");
      for (const auto& e1 : c.get<rlf_report_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::successful_ho_report_info_list:
      j.start_array("SuccessfulHOReportInformationList");
      for (const auto& e1 : c.get<successful_ho_report_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE access_and_mob_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::rach_report_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<rach_report_info_list_l>(), 1, 64, true));
      break;
    case types::rlf_report_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<rlf_report_info_list_l>(), 1, 64, true));
      break;
    case types::successful_ho_report_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<successful_ho_report_info_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE access_and_mob_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::rach_report_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<rach_report_info_list_l>(), bref, 1, 64, true));
      break;
    case types::rlf_report_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<rlf_report_info_list_l>(), bref, 1, 64, true));
      break;
    case types::successful_ho_report_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<successful_ho_report_info_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "access_and_mob_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE access_and_mob_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += rach_report_info_list_present ? 1 : 0;
  nof_ies += rlf_report_info_list_present ? 1 : 0;
  nof_ies += successful_ho_report_info_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (rach_report_info_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)359, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, rach_report_info_list, 1, 64, true));
  }
  if (rlf_report_info_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)360, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, rlf_report_info_list, 1, 64, true));
  }
  if (successful_ho_report_info_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)443, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, successful_ho_report_info_list, 1, 64, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE access_and_mob_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 359: {
        rach_report_info_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(rach_report_info_list, bref, 1, 64, true));
        break;
      }
      case 360: {
        rlf_report_info_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(rlf_report_info_list, bref, 1, 64, true));
        break;
      }
      case 443: {
        successful_ho_report_info_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(successful_ho_report_info_list, bref, 1, 64, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void access_and_mob_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (rach_report_info_list_present) {
    j.write_int("id", 359);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : rach_report_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (rlf_report_info_list_present) {
    j.write_int("id", 360);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : rlf_report_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (successful_ho_report_info_list_present) {
    j.write_int("id", 443);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : successful_ho_report_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// AccessSuccessIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t access_success_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 111};
  return map_enum_number(names, 3, idx, "id");
}
bool access_success_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 111};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e access_success_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
access_success_ies_o::value_c access_success_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e access_success_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void access_success_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    default:
      break;
  }
}
void access_success_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }
}
access_success_ies_o::value_c::value_c(const access_success_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }
}
access_success_ies_o::value_c& access_success_ies_o::value_c::operator=(const access_success_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }

  return *this;
}
uint64_t& access_success_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& access_success_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
nr_cgi_s& access_success_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const uint64_t& access_success_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& access_success_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const nr_cgi_s& access_success_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
void access_success_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE access_success_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE access_success_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "access_success_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE access_success_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)111, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(nr_cgi.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE access_success_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void access_success_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 111);
  j.write_str("criticality", "reject");
  nr_cgi.to_json(j);
  j.end_obj();
}

// AperiodicSRS ::= SEQUENCE
SRSASN_CODE aperiodic_srs_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(srs_res_trigger_present, 1));
  HANDLE_CODE(bref.pack(ie_exts_present, 1));

  HANDLE_CODE(aperiodic.pack(bref));
  if (srs_res_trigger_present) {
    HANDLE_CODE(srs_res_trigger.pack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE aperiodic_srs_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(srs_res_trigger_present, 1));
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(aperiodic.unpack(bref));
  if (srs_res_trigger_present) {
    HANDLE_CODE(srs_res_trigger.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(ie_exts.unpack(bref));
  }

  return SRSASN_SUCCESS;
}
void aperiodic_srs_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("aperiodic", "true");
  if (srs_res_trigger_present) {
    j.write_fieldname("sRSResourceTrigger");
    srs_res_trigger.to_json(j);
  }
  if (ie_exts_present) {
    j.write_fieldname("iE-Extensions");
    ie_exts.to_json(j);
  }
  j.end_obj();
}

const char* aperiodic_srs_s::aperiodic_opts::to_string() const
{
  static const char* names[] = {"true"};
  return convert_enum_idx(names, 1, value, "aperiodic_srs_s::aperiodic_e_");
}

// BAPMappingConfiguration-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_map_cfg_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 283, 285, 299, 512, 514, 516, 641};
  return map_enum_number(names, 8, idx, "id");
}
bool bap_map_cfg_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 283, 285, 299, 512, 514, 516, 641};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e bap_map_cfg_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 283:
      return crit_e::ignore;
    case 285:
      return crit_e::ignore;
    case 299:
      return crit_e::ignore;
    case 512:
      return crit_e::ignore;
    case 514:
      return crit_e::ignore;
    case 516:
      return crit_e::ignore;
    case 641:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
bap_map_cfg_ies_o::value_c bap_map_cfg_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 283:
      ret.set(value_c::types::bh_routing_info_added_list);
      break;
    case 285:
      ret.set(value_c::types::bh_routing_info_remd_list);
      break;
    case 299:
      ret.set(value_c::types::traffic_map_info);
      break;
    case 512:
      ret.set(value_c::types::buffer_size_thresh);
      break;
    case 514:
      ret.set(value_c::types::bap_hdr_rewriting_added_list);
      break;
    case 516:
      ret.set(value_c::types::re_routing_enable_ind);
      break;
    case 641:
      ret.set(value_c::types::bap_hdr_rewriting_remd_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_map_cfg_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 283:
      return presence_e::optional;
    case 285:
      return presence_e::optional;
    case 299:
      return presence_e::optional;
    case 512:
      return presence_e::optional;
    case 514:
      return presence_e::optional;
    case 516:
      return presence_e::optional;
    case 641:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void bap_map_cfg_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::bh_routing_info_added_list:
      c.destroy<bh_routing_info_added_list_l>();
      break;
    case types::bh_routing_info_remd_list:
      c.destroy<bh_routing_info_remd_list_l>();
      break;
    case types::traffic_map_info:
      c.destroy<traffic_map_info_c>();
      break;
    case types::bap_hdr_rewriting_added_list:
      c.destroy<bap_hdr_rewriting_added_list_l>();
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.destroy<bap_hdr_rewriting_remd_list_l>();
      break;
    default:
      break;
  }
}
void bap_map_cfg_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::bh_routing_info_added_list:
      c.init<bh_routing_info_added_list_l>();
      break;
    case types::bh_routing_info_remd_list:
      c.init<bh_routing_info_remd_list_l>();
      break;
    case types::traffic_map_info:
      c.init<traffic_map_info_c>();
      break;
    case types::buffer_size_thresh:
      break;
    case types::bap_hdr_rewriting_added_list:
      c.init<bap_hdr_rewriting_added_list_l>();
      break;
    case types::re_routing_enable_ind:
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.init<bap_hdr_rewriting_remd_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }
}
bap_map_cfg_ies_o::value_c::value_c(const bap_map_cfg_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::bh_routing_info_added_list:
      c.init(other.c.get<bh_routing_info_added_list_l>());
      break;
    case types::bh_routing_info_remd_list:
      c.init(other.c.get<bh_routing_info_remd_list_l>());
      break;
    case types::traffic_map_info:
      c.init(other.c.get<traffic_map_info_c>());
      break;
    case types::buffer_size_thresh:
      c.init(other.c.get<uint32_t>());
      break;
    case types::bap_hdr_rewriting_added_list:
      c.init(other.c.get<bap_hdr_rewriting_added_list_l>());
      break;
    case types::re_routing_enable_ind:
      c.init(other.c.get<re_routing_enable_ind_e>());
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.init(other.c.get<bap_hdr_rewriting_remd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }
}
bap_map_cfg_ies_o::value_c& bap_map_cfg_ies_o::value_c::operator=(const bap_map_cfg_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::bh_routing_info_added_list:
      c.set(other.c.get<bh_routing_info_added_list_l>());
      break;
    case types::bh_routing_info_remd_list:
      c.set(other.c.get<bh_routing_info_remd_list_l>());
      break;
    case types::traffic_map_info:
      c.set(other.c.get<traffic_map_info_c>());
      break;
    case types::buffer_size_thresh:
      c.set(other.c.get<uint32_t>());
      break;
    case types::bap_hdr_rewriting_added_list:
      c.set(other.c.get<bap_hdr_rewriting_added_list_l>());
      break;
    case types::re_routing_enable_ind:
      c.set(other.c.get<re_routing_enable_ind_e>());
      break;
    case types::bap_hdr_rewriting_remd_list:
      c.set(other.c.get<bap_hdr_rewriting_remd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }

  return *this;
}
uint16_t& bap_map_cfg_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
bh_routing_info_added_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_added_list()
{
  assert_choice_type(types::bh_routing_info_added_list, type_, "Value");
  return c.get<bh_routing_info_added_list_l>();
}
bh_routing_info_remd_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_remd_list()
{
  assert_choice_type(types::bh_routing_info_remd_list, type_, "Value");
  return c.get<bh_routing_info_remd_list_l>();
}
traffic_map_info_c& bap_map_cfg_ies_o::value_c::traffic_map_info()
{
  assert_choice_type(types::traffic_map_info, type_, "Value");
  return c.get<traffic_map_info_c>();
}
uint32_t& bap_map_cfg_ies_o::value_c::buffer_size_thresh()
{
  assert_choice_type(types::buffer_size_thresh, type_, "Value");
  return c.get<uint32_t>();
}
bap_hdr_rewriting_added_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_added_list()
{
  assert_choice_type(types::bap_hdr_rewriting_added_list, type_, "Value");
  return c.get<bap_hdr_rewriting_added_list_l>();
}
re_routing_enable_ind_e& bap_map_cfg_ies_o::value_c::re_routing_enable_ind()
{
  assert_choice_type(types::re_routing_enable_ind, type_, "Value");
  return c.get<re_routing_enable_ind_e>();
}
bap_hdr_rewriting_remd_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_remd_list()
{
  assert_choice_type(types::bap_hdr_rewriting_remd_list, type_, "Value");
  return c.get<bap_hdr_rewriting_remd_list_l>();
}
const uint16_t& bap_map_cfg_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const bh_routing_info_added_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_added_list() const
{
  assert_choice_type(types::bh_routing_info_added_list, type_, "Value");
  return c.get<bh_routing_info_added_list_l>();
}
const bh_routing_info_remd_list_l& bap_map_cfg_ies_o::value_c::bh_routing_info_remd_list() const
{
  assert_choice_type(types::bh_routing_info_remd_list, type_, "Value");
  return c.get<bh_routing_info_remd_list_l>();
}
const traffic_map_info_c& bap_map_cfg_ies_o::value_c::traffic_map_info() const
{
  assert_choice_type(types::traffic_map_info, type_, "Value");
  return c.get<traffic_map_info_c>();
}
const uint32_t& bap_map_cfg_ies_o::value_c::buffer_size_thresh() const
{
  assert_choice_type(types::buffer_size_thresh, type_, "Value");
  return c.get<uint32_t>();
}
const bap_hdr_rewriting_added_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_added_list() const
{
  assert_choice_type(types::bap_hdr_rewriting_added_list, type_, "Value");
  return c.get<bap_hdr_rewriting_added_list_l>();
}
const re_routing_enable_ind_e& bap_map_cfg_ies_o::value_c::re_routing_enable_ind() const
{
  assert_choice_type(types::re_routing_enable_ind, type_, "Value");
  return c.get<re_routing_enable_ind_e>();
}
const bap_hdr_rewriting_remd_list_l& bap_map_cfg_ies_o::value_c::bap_hdr_rewriting_remd_list() const
{
  assert_choice_type(types::bap_hdr_rewriting_remd_list, type_, "Value");
  return c.get<bap_hdr_rewriting_remd_list_l>();
}
void bap_map_cfg_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::bh_routing_info_added_list:
      j.start_array("BH-Routing-Information-Added-List");
      for (const auto& e1 : c.get<bh_routing_info_added_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::bh_routing_info_remd_list:
      j.start_array("BH-Routing-Information-Removed-List");
      for (const auto& e1 : c.get<bh_routing_info_remd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::traffic_map_info:
      j.write_fieldname("TrafficMappingInfo");
      c.get<traffic_map_info_c>().to_json(j);
      break;
    case types::buffer_size_thresh:
      j.write_int("INTEGER (0..16777215)", c.get<uint32_t>());
      break;
    case types::bap_hdr_rewriting_added_list:
      j.start_array("BAP-Header-Rewriting-Added-List");
      for (const auto& e1 : c.get<bap_hdr_rewriting_added_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::re_routing_enable_ind:
      j.write_str("Re-routingEnableIndicator", c.get<re_routing_enable_ind_e>().to_string());
      break;
    case types::bap_hdr_rewriting_remd_list:
      j.start_array("BAP-Header-Rewriting-Removed-List");
      for (const auto& e1 : c.get<bap_hdr_rewriting_remd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE bap_map_cfg_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::bh_routing_info_added_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_routing_info_added_list_l>(), 1, 1024, true));
      break;
    case types::bh_routing_info_remd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bh_routing_info_remd_list_l>(), 1, 1024, true));
      break;
    case types::traffic_map_info:
      HANDLE_CODE(c.get<traffic_map_info_c>().pack(bref));
      break;
    case types::buffer_size_thresh:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)16777215u, false, true));
      break;
    case types::bap_hdr_rewriting_added_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bap_hdr_rewriting_added_list_l>(), 1, 1024, true));
      break;
    case types::re_routing_enable_ind:
      HANDLE_CODE(c.get<re_routing_enable_ind_e>().pack(bref));
      break;
    case types::bap_hdr_rewriting_remd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<bap_hdr_rewriting_remd_list_l>(), 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::bh_routing_info_added_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_routing_info_added_list_l>(), bref, 1, 1024, true));
      break;
    case types::bh_routing_info_remd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bh_routing_info_remd_list_l>(), bref, 1, 1024, true));
      break;
    case types::traffic_map_info:
      HANDLE_CODE(c.get<traffic_map_info_c>().unpack(bref));
      break;
    case types::buffer_size_thresh:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)16777215u, false, true));
      break;
    case types::bap_hdr_rewriting_added_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bap_hdr_rewriting_added_list_l>(), bref, 1, 1024, true));
      break;
    case types::re_routing_enable_ind:
      HANDLE_CODE(c.get<re_routing_enable_ind_e>().unpack(bref));
      break;
    case types::bap_hdr_rewriting_remd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<bap_hdr_rewriting_remd_list_l>(), bref, 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE bap_map_cfg_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += bh_routing_info_added_list_present ? 1 : 0;
  nof_ies += bh_routing_info_remd_list_present ? 1 : 0;
  nof_ies += traffic_map_info_present ? 1 : 0;
  nof_ies += buffer_size_thresh_present ? 1 : 0;
  nof_ies += bap_hdr_rewriting_added_list_present ? 1 : 0;
  nof_ies += re_routing_enable_ind_present ? 1 : 0;
  nof_ies += bap_hdr_rewriting_remd_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (bh_routing_info_added_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)283, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, bh_routing_info_added_list, 1, 1024, true));
  }
  if (bh_routing_info_remd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)285, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, bh_routing_info_remd_list, 1, 1024, true));
  }
  if (traffic_map_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)299, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(traffic_map_info.pack(bref));
  }
  if (buffer_size_thresh_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)512, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, buffer_size_thresh, (uint32_t)0u, (uint32_t)16777215u, false, true));
  }
  if (bap_hdr_rewriting_added_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)514, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, bap_hdr_rewriting_added_list, 1, 1024, true));
  }
  if (re_routing_enable_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)516, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(re_routing_enable_ind.pack(bref));
  }
  if (bap_hdr_rewriting_remd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)641, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, bap_hdr_rewriting_remd_list, 1, 1024, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 283: {
        bh_routing_info_added_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(bh_routing_info_added_list, bref, 1, 1024, true));
        break;
      }
      case 285: {
        bh_routing_info_remd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(bh_routing_info_remd_list, bref, 1, 1024, true));
        break;
      }
      case 299: {
        traffic_map_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(traffic_map_info.unpack(bref));
        break;
      }
      case 512: {
        buffer_size_thresh_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(buffer_size_thresh, bref, (uint32_t)0u, (uint32_t)16777215u, false, true));
        break;
      }
      case 514: {
        bap_hdr_rewriting_added_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(bap_hdr_rewriting_added_list, bref, 1, 1024, true));
        break;
      }
      case 516: {
        re_routing_enable_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(re_routing_enable_ind.unpack(bref));
        break;
      }
      case 641: {
        bap_hdr_rewriting_remd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(bap_hdr_rewriting_remd_list, bref, 1, 1024, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void bap_map_cfg_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (bh_routing_info_added_list_present) {
    j.write_int("id", 283);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : bh_routing_info_added_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (bh_routing_info_remd_list_present) {
    j.write_int("id", 285);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : bh_routing_info_remd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (traffic_map_info_present) {
    j.write_int("id", 299);
    j.write_str("criticality", "ignore");
    traffic_map_info.to_json(j);
  }
  if (buffer_size_thresh_present) {
    j.write_int("id", 512);
    j.write_str("criticality", "ignore");
    j.write_int("Value", buffer_size_thresh);
  }
  if (bap_hdr_rewriting_added_list_present) {
    j.write_int("id", 514);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : bap_hdr_rewriting_added_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (re_routing_enable_ind_present) {
    j.write_int("id", 516);
    j.write_str("criticality", "ignore");
    j.write_str("Value", re_routing_enable_ind.to_string());
  }
  if (bap_hdr_rewriting_remd_list_present) {
    j.write_int("id", 641);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : bap_hdr_rewriting_remd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// BAPMappingConfigurationAcknowledge-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_map_cfg_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7};
  return map_enum_number(names, 2, idx, "id");
}
bool bap_map_cfg_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e bap_map_cfg_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
bap_map_cfg_ack_ies_o::value_c bap_map_cfg_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_map_cfg_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void bap_map_cfg_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void bap_map_cfg_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }
}
bap_map_cfg_ack_ies_o::value_c::value_c(const bap_map_cfg_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }
}
bap_map_cfg_ack_ies_o::value_c& bap_map_cfg_ack_ies_o::value_c::operator=(const bap_map_cfg_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& bap_map_cfg_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& bap_map_cfg_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& bap_map_cfg_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& bap_map_cfg_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void bap_map_cfg_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE bap_map_cfg_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE bap_map_cfg_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void bap_map_cfg_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BAPMappingConfigurationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t bap_map_cfg_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool bap_map_cfg_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e bap_map_cfg_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
bap_map_cfg_fail_ies_o::value_c bap_map_cfg_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e bap_map_cfg_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void bap_map_cfg_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void bap_map_cfg_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }
}
bap_map_cfg_fail_ies_o::value_c::value_c(const bap_map_cfg_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }
}
bap_map_cfg_fail_ies_o::value_c&
bap_map_cfg_fail_ies_o::value_c::operator=(const bap_map_cfg_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& bap_map_cfg_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& bap_map_cfg_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& bap_map_cfg_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& bap_map_cfg_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& bap_map_cfg_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& bap_map_cfg_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& bap_map_cfg_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& bap_map_cfg_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void bap_map_cfg_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE bap_map_cfg_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "bap_map_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE bap_map_cfg_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (time_to_wait_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)77, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE bap_map_cfg_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void bap_map_cfg_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_int("id", 77);
    j.write_str("criticality", "ignore");
    j.write_str("Value", time_to_wait.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastContextModificationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_mod_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool broadcast_context_mod_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_mod_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_mod_fail_ies_o::value_c broadcast_context_mod_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_mod_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_mod_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_mod_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }
}
broadcast_context_mod_fail_ies_o::value_c::value_c(const broadcast_context_mod_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }
}
broadcast_context_mod_fail_ies_o::value_c&
broadcast_context_mod_fail_ies_o::value_c::operator=(const broadcast_context_mod_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_mod_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& broadcast_context_mod_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_mod_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& broadcast_context_mod_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_mod_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_mod_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_mod_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_mod_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastContextModificationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_mod_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 481, 454, 476, 470, 472};
  return map_enum_number(names, 7, idx, "id");
}
bool broadcast_context_mod_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 481, 454, 476, 470, 472};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_mod_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 454:
      return crit_e::reject;
    case 476:
      return crit_e::reject;
    case 470:
      return crit_e::reject;
    case 472:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_mod_request_ies_o::value_c broadcast_context_mod_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 454:
      ret.set(value_c::types::mbs_cu_to_du_rrc_info);
      break;
    case 476:
      ret.set(value_c::types::broadcast_m_rbs_to_be_setup_mod_list);
      break;
    case 470:
      ret.set(value_c::types::broadcast_m_rbs_to_be_modified_list);
      break;
    case 472:
      ret.set(value_c::types::broadcast_m_rbs_to_be_released_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_mod_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 454:
      return presence_e::mandatory;
    case 476:
      return presence_e::optional;
    case 470:
      return presence_e::optional;
    case 472:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_mod_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.destroy<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.destroy<broadcast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.destroy<broadcast_m_rbs_to_be_modified_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.destroy<broadcast_m_rbs_to_be_released_list_l>();
      break;
    default:
      break;
  }
}
void broadcast_context_mod_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.init<broadcast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.init<broadcast_m_rbs_to_be_modified_list_l>();
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.init<broadcast_m_rbs_to_be_released_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }
}
broadcast_context_mod_request_ies_o::value_c::value_c(const broadcast_context_mod_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_modified_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }
}
broadcast_context_mod_request_ies_o::value_c&
broadcast_context_mod_request_ies_o::value_c::operator=(const broadcast_context_mod_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.set(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_modified_list_l>());
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_service_area_c& broadcast_context_mod_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
mbs_cu_to_du_rrc_info_s& broadcast_context_mod_request_ies_o::value_c::mbs_cu_to_du_rrc_info()
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
broadcast_m_rbs_to_be_setup_mod_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_mod_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_mod_list_l>();
}
broadcast_m_rbs_to_be_modified_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_modified_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_modified_list_l>();
}
broadcast_m_rbs_to_be_released_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_released_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_released_list_l>();
}
const uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_service_area_c& broadcast_context_mod_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const mbs_cu_to_du_rrc_info_s& broadcast_context_mod_request_ies_o::value_c::mbs_cu_to_du_rrc_info() const
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
const broadcast_m_rbs_to_be_setup_mod_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_mod_list_l>();
}
const broadcast_m_rbs_to_be_modified_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_modified_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_modified_list_l>();
}
const broadcast_m_rbs_to_be_released_list_l&
broadcast_context_mod_request_ies_o::value_c::broadcast_m_rbs_to_be_released_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_released_list_l>();
}
void broadcast_context_mod_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::mbs_cu_to_du_rrc_info:
      j.write_fieldname("MBS-CUtoDURRCInformation");
      c.get<mbs_cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      j.start_array("BroadcastMRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      j.start_array("BroadcastMRBs-ToBeModified-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      j.start_array("BroadcastMRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_mod_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_released_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_released_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_mod_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += mbs_service_area_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_to_be_modified_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_to_be_released_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (mbs_service_area_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)481, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)454, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_cu_to_du_rrc_info.pack(bref));
  }
  if (broadcast_m_rbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)476, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_to_be_setup_mod_list, 1, 32, true));
  }
  if (broadcast_m_rbs_to_be_modified_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)470, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_to_be_modified_list, 1, 32, true));
  }
  if (broadcast_m_rbs_to_be_released_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)472, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_to_be_released_list, 1, 32, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.unpack(bref));
        break;
      }
      case 454: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_cu_to_du_rrc_info.unpack(bref));
        break;
      }
      case 476: {
        broadcast_m_rbs_to_be_setup_mod_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_to_be_setup_mod_list, bref, 1, 32, true));
        break;
      }
      case 470: {
        broadcast_m_rbs_to_be_modified_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_to_be_modified_list, bref, 1, 32, true));
        break;
      }
      case 472: {
        broadcast_m_rbs_to_be_released_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_to_be_released_list, bref, 1, 32, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_mod_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  if (mbs_service_area_present) {
    j.write_int("id", 481);
    j.write_str("criticality", "reject");
    mbs_service_area.to_json(j);
  }
  j.write_int("id", 454);
  j.write_str("criticality", "reject");
  mbs_cu_to_du_rrc_info.to_json(j);
  if (broadcast_m_rbs_to_be_setup_mod_list_present) {
    j.write_int("id", 476);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_to_be_setup_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (broadcast_m_rbs_to_be_modified_list_present) {
    j.write_int("id", 470);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_to_be_modified_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (broadcast_m_rbs_to_be_released_list_present) {
    j.write_int("id", 472);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_to_be_released_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

// BroadcastContextModificationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_mod_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 468, 462, 464, 458, 7};
  return map_enum_number(names, 7, idx, "id");
}
bool broadcast_context_mod_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 468, 462, 464, 458, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_mod_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 468:
      return crit_e::reject;
    case 462:
      return crit_e::ignore;
    case 464:
      return crit_e::reject;
    case 458:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_mod_resp_ies_o::value_c broadcast_context_mod_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 468:
      ret.set(value_c::types::broadcast_m_rbs_setup_mod_list);
      break;
    case 462:
      ret.set(value_c::types::broadcast_m_rbs_failed_to_be_setup_mod_list);
      break;
    case 464:
      ret.set(value_c::types::broadcast_m_rbs_modified_list);
      break;
    case 458:
      ret.set(value_c::types::broadcast_m_rbs_failed_to_be_modified_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_mod_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 468:
      return presence_e::optional;
    case 462:
      return presence_e::optional;
    case 464:
      return presence_e::optional;
    case 458:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_mod_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::broadcast_m_rbs_setup_mod_list:
      c.destroy<broadcast_m_rbs_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.destroy<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_modified_list:
      c.destroy<broadcast_m_rbs_modified_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.destroy<broadcast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_mod_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      c.init<broadcast_m_rbs_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.init<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::broadcast_m_rbs_modified_list:
      c.init<broadcast_m_rbs_modified_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.init<broadcast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }
}
broadcast_context_mod_resp_ies_o::value_c::value_c(const broadcast_context_mod_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      c.init(other.c.get<broadcast_m_rbs_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_modified_list:
      c.init(other.c.get<broadcast_m_rbs_modified_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.init(other.c.get<broadcast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }
}
broadcast_context_mod_resp_ies_o::value_c&
broadcast_context_mod_resp_ies_o::value_c::operator=(const broadcast_context_mod_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      c.set(other.c.get<broadcast_m_rbs_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::broadcast_m_rbs_modified_list:
      c.set(other.c.get<broadcast_m_rbs_modified_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      c.set(other.c.get<broadcast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
broadcast_m_rbs_setup_mod_list_l& broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_setup_mod_list()
{
  assert_choice_type(types::broadcast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_mod_list_l>();
}
broadcast_m_rbs_failed_to_be_setup_mod_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
}
broadcast_m_rbs_modified_list_l& broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_modified_list()
{
  assert_choice_type(types::broadcast_m_rbs_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_modified_list_l>();
}
broadcast_m_rbs_failed_to_be_modified_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_modified_list()
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_modified_list_l>();
}
crit_diagnostics_s& broadcast_context_mod_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const broadcast_m_rbs_setup_mod_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_setup_mod_list() const
{
  assert_choice_type(types::broadcast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_mod_list_l>();
}
const broadcast_m_rbs_failed_to_be_setup_mod_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>();
}
const broadcast_m_rbs_modified_list_l& broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_modified_list() const
{
  assert_choice_type(types::broadcast_m_rbs_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_modified_list_l>();
}
const broadcast_m_rbs_failed_to_be_modified_list_l&
broadcast_context_mod_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_modified_list() const
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_modified_list_l>();
}
const crit_diagnostics_s& broadcast_context_mod_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_mod_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      j.start_array("BroadcastMRBs-SetupMod-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      j.start_array("BroadcastMRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_modified_list:
      j.start_array("BroadcastMRBs-Modified-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      j.start_array("BroadcastMRBs-FailedToBeModified-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_mod_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_modified_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_failed_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_failed_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_failed_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_mod_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += broadcast_m_rbs_setup_mod_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_modified_list_present ? 1 : 0;
  nof_ies += broadcast_m_rbs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (broadcast_m_rbs_setup_mod_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)468, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_setup_mod_list, 1, 32, true));
  }
  if (broadcast_m_rbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)462, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_failed_to_be_setup_mod_list, 1, 32, true));
  }
  if (broadcast_m_rbs_modified_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)464, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_modified_list, 1, 32, true));
  }
  if (broadcast_m_rbs_failed_to_be_modified_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)458, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_failed_to_be_modified_list, 1, 32, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_mod_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 468: {
        broadcast_m_rbs_setup_mod_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_setup_mod_list, bref, 1, 32, true));
        break;
      }
      case 462: {
        broadcast_m_rbs_failed_to_be_setup_mod_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_failed_to_be_setup_mod_list, bref, 1, 32, true));
        break;
      }
      case 464: {
        broadcast_m_rbs_modified_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_modified_list, bref, 1, 32, true));
        break;
      }
      case 458: {
        broadcast_m_rbs_failed_to_be_modified_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_failed_to_be_modified_list, bref, 1, 32, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_mod_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  if (broadcast_m_rbs_setup_mod_list_present) {
    j.write_int("id", 468);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_setup_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (broadcast_m_rbs_failed_to_be_setup_mod_list_present) {
    j.write_int("id", 462);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_failed_to_be_setup_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (broadcast_m_rbs_modified_list_present) {
    j.write_int("id", 464);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_modified_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (broadcast_m_rbs_failed_to_be_modified_list_present) {
    j.write_int("id", 458);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_failed_to_be_modified_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastContextReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool broadcast_context_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_release_cmd_ies_o::value_c broadcast_context_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void broadcast_context_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }
}
broadcast_context_release_cmd_ies_o::value_c::value_c(const broadcast_context_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }
}
broadcast_context_release_cmd_ies_o::value_c&
broadcast_context_release_cmd_ies_o::value_c::operator=(const broadcast_context_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void broadcast_context_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

// BroadcastContextReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool broadcast_context_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_release_complete_ies_o::value_c
broadcast_context_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }
}
broadcast_context_release_complete_ies_o::value_c::value_c(
    const broadcast_context_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }
}
broadcast_context_release_complete_ies_o::value_c& broadcast_context_release_complete_ies_o::value_c::operator=(
    const broadcast_context_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
crit_diagnostics_s& broadcast_context_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const crit_diagnostics_s& broadcast_context_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastContextReleaseRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_release_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool broadcast_context_release_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_release_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_release_request_ies_o::value_c broadcast_context_release_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_release_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_release_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void broadcast_context_release_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }
}
broadcast_context_release_request_ies_o::value_c::value_c(const broadcast_context_release_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }
}
broadcast_context_release_request_ies_o::value_c& broadcast_context_release_request_ies_o::value_c::operator=(
    const broadcast_context_release_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_release_request_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_release_request_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void broadcast_context_release_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_release_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_release_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_release_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_release_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

// BroadcastContextSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool broadcast_context_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_setup_fail_ies_o::value_c broadcast_context_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }
}
broadcast_context_setup_fail_ies_o::value_c::value_c(const broadcast_context_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }
}
broadcast_context_setup_fail_ies_o::value_c&
broadcast_context_setup_fail_ies_o::value_c::operator=(const broadcast_context_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& broadcast_context_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& broadcast_context_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& broadcast_context_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& broadcast_context_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_du_mbs_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (gnb_du_mbs_f1ap_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        gnb_du_mbs_f1ap_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  if (gnb_du_mbs_f1ap_id_present) {
    j.write_int("id", 452);
    j.write_str("criticality", "ignore");
    j.write_int("Value", gnb_du_mbs_f1ap_id);
  }
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// BroadcastContextSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 455, 481, 454, 456, 474};
  return map_enum_number(names, 6, idx, "id");
}
bool broadcast_context_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 455, 481, 454, 456, 474};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 455:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 454:
      return crit_e::reject;
    case 456:
      return crit_e::reject;
    case 474:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_setup_request_ies_o::value_c broadcast_context_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 455:
      ret.set(value_c::types::mbs_session_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 454:
      ret.set(value_c::types::mbs_cu_to_du_rrc_info);
      break;
    case 456:
      ret.set(value_c::types::snssai);
      break;
    case 474:
      ret.set(value_c::types::broadcast_m_rbs_to_be_setup_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 455:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 454:
      return presence_e::mandatory;
    case 456:
      return presence_e::mandatory;
    case 474:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_session_id:
      c.destroy<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.destroy<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::snssai:
      c.destroy<snssai_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.destroy<broadcast_m_rbs_to_be_setup_list_l>();
      break;
    default:
      break;
  }
}
void broadcast_context_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::mbs_session_id:
      c.init<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init<mbs_cu_to_du_rrc_info_s>();
      break;
    case types::snssai:
      c.init<snssai_s>();
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.init<broadcast_m_rbs_to_be_setup_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }
}
broadcast_context_setup_request_ies_o::value_c::value_c(const broadcast_context_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.init(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.init(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::snssai:
      c.init(other.c.get<snssai_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.init(other.c.get<broadcast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }
}
broadcast_context_setup_request_ies_o::value_c&
broadcast_context_setup_request_ies_o::value_c::operator=(const broadcast_context_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.set(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::mbs_cu_to_du_rrc_info:
      c.set(other.c.get<mbs_cu_to_du_rrc_info_s>());
      break;
    case types::snssai:
      c.set(other.c.get<snssai_s>());
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      c.set(other.c.get<broadcast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_session_id_s& broadcast_context_setup_request_ies_o::value_c::mbs_session_id()
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
mbs_service_area_c& broadcast_context_setup_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
mbs_cu_to_du_rrc_info_s& broadcast_context_setup_request_ies_o::value_c::mbs_cu_to_du_rrc_info()
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
snssai_s& broadcast_context_setup_request_ies_o::value_c::snssai()
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
broadcast_m_rbs_to_be_setup_list_l& broadcast_context_setup_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_list()
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_list_l>();
}
const uint64_t& broadcast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_session_id_s& broadcast_context_setup_request_ies_o::value_c::mbs_session_id() const
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
const mbs_service_area_c& broadcast_context_setup_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const mbs_cu_to_du_rrc_info_s& broadcast_context_setup_request_ies_o::value_c::mbs_cu_to_du_rrc_info() const
{
  assert_choice_type(types::mbs_cu_to_du_rrc_info, type_, "Value");
  return c.get<mbs_cu_to_du_rrc_info_s>();
}
const snssai_s& broadcast_context_setup_request_ies_o::value_c::snssai() const
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
const broadcast_m_rbs_to_be_setup_list_l&
broadcast_context_setup_request_ies_o::value_c::broadcast_m_rbs_to_be_setup_list() const
{
  assert_choice_type(types::broadcast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_to_be_setup_list_l>();
}
void broadcast_context_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      j.write_fieldname("MBS-Session-ID");
      c.get<mbs_session_id_s>().to_json(j);
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::mbs_cu_to_du_rrc_info:
      j.write_fieldname("MBS-CUtoDURRCInformation");
      c.get<mbs_cu_to_du_rrc_info_s>().to_json(j);
      break;
    case types::snssai:
      j.write_fieldname("SNSSAI");
      c.get<snssai_s>().to_json(j);
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      j.start_array("BroadcastMRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().pack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().pack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().pack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_to_be_setup_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().unpack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::mbs_cu_to_du_rrc_info:
      HANDLE_CODE(c.get<mbs_cu_to_du_rrc_info_s>().unpack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().unpack(bref));
      break;
    case types::broadcast_m_rbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += mbs_service_area_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)455, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_session_id.pack(bref));
  }
  if (mbs_service_area_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)481, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)454, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_cu_to_du_rrc_info.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)456, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(snssai.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)474, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_to_be_setup_list, 1, 32, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 455: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_session_id.unpack(bref));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.unpack(bref));
        break;
      }
      case 454: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_cu_to_du_rrc_info.unpack(bref));
        break;
      }
      case 456: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(snssai.unpack(bref));
        break;
      }
      case 474: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_to_be_setup_list, bref, 1, 32, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 455);
  j.write_str("criticality", "reject");
  mbs_session_id.to_json(j);
  if (mbs_service_area_present) {
    j.write_int("id", 481);
    j.write_str("criticality", "reject");
    mbs_service_area.to_json(j);
  }
  j.write_int("id", 454);
  j.write_str("criticality", "reject");
  mbs_cu_to_du_rrc_info.to_json(j);
  j.write_int("id", 456);
  j.write_str("criticality", "reject");
  snssai.to_json(j);
  j.write_int("id", 474);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : broadcast_m_rbs_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

// BroadcastContextSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t broadcast_context_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 466, 460, 646, 7};
  return map_enum_number(names, 6, idx, "id");
}
bool broadcast_context_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 466, 460, 646, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e broadcast_context_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 466:
      return crit_e::reject;
    case 460:
      return crit_e::ignore;
    case 646:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
broadcast_context_setup_resp_ies_o::value_c broadcast_context_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 466:
      ret.set(value_c::types::broadcast_m_rbs_setup_list);
      break;
    case 460:
      ret.set(value_c::types::broadcast_m_rbs_failed_to_be_setup_list);
      break;
    case 646:
      ret.set(value_c::types::broadcast_area_scope);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e broadcast_context_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 466:
      return presence_e::mandatory;
    case 460:
      return presence_e::optional;
    case 646:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void broadcast_context_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::broadcast_m_rbs_setup_list:
      c.destroy<broadcast_m_rbs_setup_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.destroy<broadcast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::broadcast_area_scope:
      c.destroy<broadcast_area_scope_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void broadcast_context_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::broadcast_m_rbs_setup_list:
      c.init<broadcast_m_rbs_setup_list_l>();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.init<broadcast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::broadcast_area_scope:
      c.init<broadcast_area_scope_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }
}
broadcast_context_setup_resp_ies_o::value_c::value_c(const broadcast_context_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_list:
      c.init(other.c.get<broadcast_m_rbs_setup_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.init(other.c.get<broadcast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::broadcast_area_scope:
      c.init(other.c.get<broadcast_area_scope_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }
}
broadcast_context_setup_resp_ies_o::value_c&
broadcast_context_setup_resp_ies_o::value_c::operator=(const broadcast_context_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_list:
      c.set(other.c.get<broadcast_m_rbs_setup_list_l>());
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      c.set(other.c.get<broadcast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::broadcast_area_scope:
      c.set(other.c.get<broadcast_area_scope_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
broadcast_m_rbs_setup_list_l& broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_setup_list()
{
  assert_choice_type(types::broadcast_m_rbs_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_list_l>();
}
broadcast_m_rbs_failed_to_be_setup_list_l&
broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_list()
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_list_l>();
}
broadcast_area_scope_c& broadcast_context_setup_resp_ies_o::value_c::broadcast_area_scope()
{
  assert_choice_type(types::broadcast_area_scope, type_, "Value");
  return c.get<broadcast_area_scope_c>();
}
crit_diagnostics_s& broadcast_context_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& broadcast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const broadcast_m_rbs_setup_list_l& broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_setup_list() const
{
  assert_choice_type(types::broadcast_m_rbs_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_setup_list_l>();
}
const broadcast_m_rbs_failed_to_be_setup_list_l&
broadcast_context_setup_resp_ies_o::value_c::broadcast_m_rbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::broadcast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<broadcast_m_rbs_failed_to_be_setup_list_l>();
}
const broadcast_area_scope_c& broadcast_context_setup_resp_ies_o::value_c::broadcast_area_scope() const
{
  assert_choice_type(types::broadcast_area_scope, type_, "Value");
  return c.get<broadcast_area_scope_c>();
}
const crit_diagnostics_s& broadcast_context_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void broadcast_context_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::broadcast_m_rbs_setup_list:
      j.start_array("BroadcastMRBs-Setup-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      j.start_array("BroadcastMRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<broadcast_m_rbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::broadcast_area_scope:
      j.write_fieldname("BroadcastAreaScope");
      c.get<broadcast_area_scope_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE broadcast_context_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_setup_list_l>(), 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_m_rbs_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::broadcast_area_scope:
      HANDLE_CODE(c.get<broadcast_area_scope_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::broadcast_m_rbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_m_rbs_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::broadcast_area_scope:
      HANDLE_CODE(c.get<broadcast_area_scope_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "broadcast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE broadcast_context_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += broadcast_m_rbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += broadcast_area_scope_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)466, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_setup_list, 1, 32, true));
  }
  if (broadcast_m_rbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)460, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_m_rbs_failed_to_be_setup_list, 1, 32, true));
  }
  if (broadcast_area_scope_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)646, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(broadcast_area_scope.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE broadcast_context_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 466: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_setup_list, bref, 1, 32, true));
        break;
      }
      case 460: {
        broadcast_m_rbs_failed_to_be_setup_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_m_rbs_failed_to_be_setup_list, bref, 1, 32, true));
        break;
      }
      case 646: {
        broadcast_area_scope_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(broadcast_area_scope.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void broadcast_context_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 466);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : broadcast_m_rbs_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (broadcast_m_rbs_failed_to_be_setup_list_present) {
    j.write_int("id", 460);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : broadcast_m_rbs_failed_to_be_setup_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (broadcast_area_scope_present) {
    j.write_int("id", 646);
    j.write_str("criticality", "ignore");
    broadcast_area_scope.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// CUDURadioInformationTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cu_du_radio_info_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 250};
  return map_enum_number(names, 2, idx, "id");
}
bool cu_du_radio_info_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 250};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e cu_du_radio_info_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 250:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
cu_du_radio_info_transfer_ies_o::value_c cu_du_radio_info_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 250:
      ret.set(value_c::types::cu_du_radio_info_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cu_du_radio_info_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 250:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void cu_du_radio_info_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cu_du_radio_info_type:
      c.destroy<cu_du_radio_info_type_c>();
      break;
    default:
      break;
  }
}
void cu_du_radio_info_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cu_du_radio_info_type:
      c.init<cu_du_radio_info_type_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }
}
cu_du_radio_info_transfer_ies_o::value_c::value_c(const cu_du_radio_info_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cu_du_radio_info_type:
      c.init(other.c.get<cu_du_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }
}
cu_du_radio_info_transfer_ies_o::value_c&
cu_du_radio_info_transfer_ies_o::value_c::operator=(const cu_du_radio_info_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cu_du_radio_info_type:
      c.set(other.c.get<cu_du_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }

  return *this;
}
uint16_t& cu_du_radio_info_transfer_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cu_du_radio_info_type_c& cu_du_radio_info_transfer_ies_o::value_c::cu_du_radio_info_type()
{
  assert_choice_type(types::cu_du_radio_info_type, type_, "Value");
  return c.get<cu_du_radio_info_type_c>();
}
const uint16_t& cu_du_radio_info_transfer_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cu_du_radio_info_type_c& cu_du_radio_info_transfer_ies_o::value_c::cu_du_radio_info_type() const
{
  assert_choice_type(types::cu_du_radio_info_type, type_, "Value");
  return c.get<cu_du_radio_info_type_c>();
}
void cu_du_radio_info_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cu_du_radio_info_type:
      j.write_fieldname("CUDURadioInformationType");
      c.get<cu_du_radio_info_type_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE cu_du_radio_info_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cu_du_radio_info_type:
      HANDLE_CODE(c.get<cu_du_radio_info_type_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cu_du_radio_info_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cu_du_radio_info_type:
      HANDLE_CODE(c.get<cu_du_radio_info_type_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "cu_du_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE cu_du_radio_info_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)250, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cu_du_radio_info_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cu_du_radio_info_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 250: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cu_du_radio_info_type.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void cu_du_radio_info_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 250);
  j.write_str("criticality", "ignore");
  cu_du_radio_info_type.to_json(j);
  j.end_obj();
}

// CellTrafficTraceIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t cell_traffic_trace_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 243, 378, 379, 380};
  return map_enum_number(names, 6, idx, "id");
}
bool cell_traffic_trace_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 243, 378, 379, 380};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e cell_traffic_trace_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 243:
      return crit_e::ignore;
    case 378:
      return crit_e::ignore;
    case 379:
      return crit_e::ignore;
    case 380:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
cell_traffic_trace_ies_o::value_c cell_traffic_trace_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 243:
      ret.set(value_c::types::trace_id);
      break;
    case 378:
      ret.set(value_c::types::trace_collection_entity_ip_address);
      break;
    case 379:
      ret.set(value_c::types::privacy_ind);
      break;
    case 380:
      ret.set(value_c::types::trace_collection_entity_uri);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e cell_traffic_trace_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 243:
      return presence_e::mandatory;
    case 378:
      return presence_e::mandatory;
    case 379:
      return presence_e::optional;
    case 380:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void cell_traffic_trace_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trace_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    case types::trace_collection_entity_ip_address:
      c.destroy<bounded_bitstring<1, 160, true, true>>();
      break;
    case types::trace_collection_entity_uri:
      c.destroy<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
      break;
    default:
      break;
  }
}
void cell_traffic_trace_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trace_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::trace_collection_entity_ip_address:
      c.init<bounded_bitstring<1, 160, true, true>>();
      break;
    case types::privacy_ind:
      break;
    case types::trace_collection_entity_uri:
      c.init<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }
}
cell_traffic_trace_ies_o::value_c::value_c(const cell_traffic_trace_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::trace_collection_entity_ip_address:
      c.init(other.c.get<bounded_bitstring<1, 160, true, true>>());
      break;
    case types::privacy_ind:
      c.init(other.c.get<privacy_ind_e>());
      break;
    case types::trace_collection_entity_uri:
      c.init(other.c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }
}
cell_traffic_trace_ies_o::value_c&
cell_traffic_trace_ies_o::value_c::operator=(const cell_traffic_trace_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::trace_collection_entity_ip_address:
      c.set(other.c.get<bounded_bitstring<1, 160, true, true>>());
      break;
    case types::privacy_ind:
      c.set(other.c.get<privacy_ind_e>());
      break;
    case types::trace_collection_entity_uri:
      c.set(other.c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }

  return *this;
}
uint64_t& cell_traffic_trace_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& cell_traffic_trace_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
fixed_octstring<8, true>& cell_traffic_trace_ies_o::value_c::trace_id()
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
bounded_bitstring<1, 160, true, true>& cell_traffic_trace_ies_o::value_c::trace_collection_entity_ip_address()
{
  assert_choice_type(types::trace_collection_entity_ip_address, type_, "Value");
  return c.get<bounded_bitstring<1, 160, true, true>>();
}
privacy_ind_e& cell_traffic_trace_ies_o::value_c::privacy_ind()
{
  assert_choice_type(types::privacy_ind, type_, "Value");
  return c.get<privacy_ind_e>();
}
visible_string<0, MAX_ASN_STRING_LENGTH, false, true>& cell_traffic_trace_ies_o::value_c::trace_collection_entity_uri()
{
  assert_choice_type(types::trace_collection_entity_uri, type_, "Value");
  return c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
}
const uint64_t& cell_traffic_trace_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& cell_traffic_trace_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const fixed_octstring<8, true>& cell_traffic_trace_ies_o::value_c::trace_id() const
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const bounded_bitstring<1, 160, true, true>&
cell_traffic_trace_ies_o::value_c::trace_collection_entity_ip_address() const
{
  assert_choice_type(types::trace_collection_entity_ip_address, type_, "Value");
  return c.get<bounded_bitstring<1, 160, true, true>>();
}
const privacy_ind_e& cell_traffic_trace_ies_o::value_c::privacy_ind() const
{
  assert_choice_type(types::privacy_ind, type_, "Value");
  return c.get<privacy_ind_e>();
}
const visible_string<0, MAX_ASN_STRING_LENGTH, false, true>&
cell_traffic_trace_ies_o::value_c::trace_collection_entity_uri() const
{
  assert_choice_type(types::trace_collection_entity_uri, type_, "Value");
  return c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>();
}
void cell_traffic_trace_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trace_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    case types::trace_collection_entity_ip_address:
      j.write_str("BIT STRING", c.get<bounded_bitstring<1, 160, true, true>>().to_string());
      break;
    case types::privacy_ind:
      j.write_str("PrivacyIndicator", c.get<privacy_ind_e>().to_string());
      break;
    case types::trace_collection_entity_uri:
      j.write_str("VisibleString", c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE cell_traffic_trace_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    case types::trace_collection_entity_ip_address:
      HANDLE_CODE((c.get<bounded_bitstring<1, 160, true, true>>().pack(bref)));
      break;
    case types::privacy_ind:
      HANDLE_CODE(c.get<privacy_ind_e>().pack(bref));
      break;
    case types::trace_collection_entity_uri:
      HANDLE_CODE((c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_traffic_trace_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    case types::trace_collection_entity_ip_address:
      HANDLE_CODE((c.get<bounded_bitstring<1, 160, true, true>>().unpack(bref)));
      break;
    case types::privacy_ind:
      HANDLE_CODE(c.get<privacy_ind_e>().unpack(bref));
      break;
    case types::trace_collection_entity_uri:
      HANDLE_CODE((c.get<visible_string<0, MAX_ASN_STRING_LENGTH, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "cell_traffic_trace_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE cell_traffic_trace_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += privacy_ind_present ? 1 : 0;
  nof_ies += trace_collection_entity_uri_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)243, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(trace_id.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)378, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(trace_collection_entity_ip_address.pack(bref));
  }
  if (privacy_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)379, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(privacy_ind.pack(bref));
  }
  if (trace_collection_entity_uri_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)380, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(trace_collection_entity_uri.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE cell_traffic_trace_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 243: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_id.unpack(bref));
        break;
      }
      case 378: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_collection_entity_ip_address.unpack(bref));
        break;
      }
      case 379: {
        privacy_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(privacy_ind.unpack(bref));
        break;
      }
      case 380: {
        trace_collection_entity_uri_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_collection_entity_uri.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void cell_traffic_trace_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 243);
  j.write_str("criticality", "ignore");
  j.write_str("Value", trace_id.to_string());
  j.write_int("id", 378);
  j.write_str("criticality", "ignore");
  j.write_str("Value", trace_collection_entity_ip_address.to_string());
  if (privacy_ind_present) {
    j.write_int("id", 379);
    j.write_str("criticality", "ignore");
    j.write_str("Value", privacy_ind.to_string());
  }
  if (trace_collection_entity_uri_present) {
    j.write_int("id", 380);
    j.write_str("criticality", "ignore");
    j.write_str("Value", trace_collection_entity_uri.to_string());
  }
  j.end_obj();
}

// DUCURadioInformationTransferIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t du_cu_radio_info_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 249};
  return map_enum_number(names, 2, idx, "id");
}
bool du_cu_radio_info_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 249};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e du_cu_radio_info_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 249:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
du_cu_radio_info_transfer_ies_o::value_c du_cu_radio_info_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 249:
      ret.set(value_c::types::du_cu_radio_info_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e du_cu_radio_info_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 249:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void du_cu_radio_info_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::du_cu_radio_info_type:
      c.destroy<du_cu_radio_info_type_c>();
      break;
    default:
      break;
  }
}
void du_cu_radio_info_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::du_cu_radio_info_type:
      c.init<du_cu_radio_info_type_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }
}
du_cu_radio_info_transfer_ies_o::value_c::value_c(const du_cu_radio_info_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::du_cu_radio_info_type:
      c.init(other.c.get<du_cu_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }
}
du_cu_radio_info_transfer_ies_o::value_c&
du_cu_radio_info_transfer_ies_o::value_c::operator=(const du_cu_radio_info_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::du_cu_radio_info_type:
      c.set(other.c.get<du_cu_radio_info_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }

  return *this;
}
uint16_t& du_cu_radio_info_transfer_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
du_cu_radio_info_type_c& du_cu_radio_info_transfer_ies_o::value_c::du_cu_radio_info_type()
{
  assert_choice_type(types::du_cu_radio_info_type, type_, "Value");
  return c.get<du_cu_radio_info_type_c>();
}
const uint16_t& du_cu_radio_info_transfer_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const du_cu_radio_info_type_c& du_cu_radio_info_transfer_ies_o::value_c::du_cu_radio_info_type() const
{
  assert_choice_type(types::du_cu_radio_info_type, type_, "Value");
  return c.get<du_cu_radio_info_type_c>();
}
void du_cu_radio_info_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::du_cu_radio_info_type:
      j.write_fieldname("DUCURadioInformationType");
      c.get<du_cu_radio_info_type_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE du_cu_radio_info_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::du_cu_radio_info_type:
      HANDLE_CODE(c.get<du_cu_radio_info_type_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE du_cu_radio_info_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::du_cu_radio_info_type:
      HANDLE_CODE(c.get<du_cu_radio_info_type_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "du_cu_radio_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE du_cu_radio_info_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)249, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(du_cu_radio_info_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE du_cu_radio_info_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 249: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(du_cu_radio_info_type.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void du_cu_radio_info_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 249);
  j.write_str("criticality", "ignore");
  du_cu_radio_info_type.to_json(j);
  j.end_obj();
}

// DeactivateTraceIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t deactiv_trace_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 243};
  return map_enum_number(names, 3, idx, "id");
}
bool deactiv_trace_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 243};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e deactiv_trace_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 243:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
deactiv_trace_ies_o::value_c deactiv_trace_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 243:
      ret.set(value_c::types::trace_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e deactiv_trace_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 243:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void deactiv_trace_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trace_id:
      c.destroy<fixed_octstring<8, true>>();
      break;
    default:
      break;
  }
}
void deactiv_trace_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trace_id:
      c.init<fixed_octstring<8, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }
}
deactiv_trace_ies_o::value_c::value_c(const deactiv_trace_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.init(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }
}
deactiv_trace_ies_o::value_c& deactiv_trace_ies_o::value_c::operator=(const deactiv_trace_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trace_id:
      c.set(other.c.get<fixed_octstring<8, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }

  return *this;
}
uint64_t& deactiv_trace_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& deactiv_trace_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
fixed_octstring<8, true>& deactiv_trace_ies_o::value_c::trace_id()
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
const uint64_t& deactiv_trace_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& deactiv_trace_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const fixed_octstring<8, true>& deactiv_trace_ies_o::value_c::trace_id() const
{
  assert_choice_type(types::trace_id, type_, "Value");
  return c.get<fixed_octstring<8, true>>();
}
void deactiv_trace_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trace_id:
      j.write_str("OCTET STRING", c.get<fixed_octstring<8, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE deactiv_trace_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE deactiv_trace_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_id:
      HANDLE_CODE((c.get<fixed_octstring<8, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "deactiv_trace_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE deactiv_trace_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)243, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(trace_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE deactiv_trace_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 243: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_id.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void deactiv_trace_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 243);
  j.write_str("criticality", "ignore");
  j.write_str("Value", trace_id.to_string());
  j.end_obj();
}

// E-CIDMeasurementFailureIndication-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0};
  return map_enum_number(names, 5, idx, "id");
}
bool e_c_id_meas_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_fail_ind_ies_o::value_c e_c_id_meas_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }
}
e_c_id_meas_fail_ind_ies_o::value_c::value_c(const e_c_id_meas_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }
}
e_c_id_meas_fail_ind_ies_o::value_c&
e_c_id_meas_fail_ind_ies_o::value_c::operator=(const e_c_id_meas_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& e_c_id_meas_fail_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_fail_ind_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& e_c_id_meas_fail_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void e_c_id_meas_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE e_c_id_meas_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)412, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)413, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 412);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_ue_meas_id);
  j.write_int("id", 413);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_meas_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

// E-CIDMeasurementInitiationFailure-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_initiation_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0, 7};
  return map_enum_number(names, 6, idx, "id");
}
bool e_c_id_meas_initiation_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_initiation_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_initiation_fail_ies_o::value_c e_c_id_meas_initiation_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_initiation_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_initiation_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_initiation_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }
}
e_c_id_meas_initiation_fail_ies_o::value_c::value_c(const e_c_id_meas_initiation_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }
}
e_c_id_meas_initiation_fail_ies_o::value_c&
e_c_id_meas_initiation_fail_ies_o::value_c::operator=(const e_c_id_meas_initiation_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& e_c_id_meas_initiation_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& e_c_id_meas_initiation_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_initiation_fail_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& e_c_id_meas_initiation_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& e_c_id_meas_initiation_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void e_c_id_meas_initiation_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_initiation_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE e_c_id_meas_initiation_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)412, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)413, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_initiation_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 412);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_ue_meas_id);
  j.write_int("id", 413);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_meas_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// E-CIDMeasurementInitiationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_initiation_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 424, 416, 414, 672};
  return map_enum_number(names, 8, idx, "id");
}
bool e_c_id_meas_initiation_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 424, 416, 414, 672};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_initiation_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 424:
      return crit_e::reject;
    case 416:
      return crit_e::reject;
    case 414:
      return crit_e::reject;
    case 672:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_initiation_request_ies_o::value_c e_c_id_meas_initiation_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 424:
      ret.set(value_c::types::e_c_id_report_characteristics);
      break;
    case 416:
      ret.set(value_c::types::e_c_id_meas_periodicity);
      break;
    case 414:
      ret.set(value_c::types::e_c_id_meas_quantities);
      break;
    case 672:
      ret.set(value_c::types::pos_meas_periodicity_nr_ao_a);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_initiation_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 424:
      return presence_e::mandatory;
    case 416:
      return presence_e::conditional;
    case 414:
      return presence_e::mandatory;
    case 672:
      return presence_e::conditional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_initiation_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::e_c_id_meas_quantities:
      c.destroy<e_c_id_meas_quantities_l>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_initiation_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::e_c_id_report_characteristics:
      break;
    case types::e_c_id_meas_periodicity:
      break;
    case types::e_c_id_meas_quantities:
      c.init<e_c_id_meas_quantities_l>();
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }
}
e_c_id_meas_initiation_request_ies_o::value_c::value_c(const e_c_id_meas_initiation_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::e_c_id_report_characteristics:
      c.init(other.c.get<e_c_id_report_characteristics_e>());
      break;
    case types::e_c_id_meas_periodicity:
      c.init(other.c.get<meas_periodicity_e>());
      break;
    case types::e_c_id_meas_quantities:
      c.init(other.c.get<e_c_id_meas_quantities_l>());
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      c.init(other.c.get<pos_meas_periodicity_nr_ao_a_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }
}
e_c_id_meas_initiation_request_ies_o::value_c&
e_c_id_meas_initiation_request_ies_o::value_c::operator=(const e_c_id_meas_initiation_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::e_c_id_report_characteristics:
      c.set(other.c.get<e_c_id_report_characteristics_e>());
      break;
    case types::e_c_id_meas_periodicity:
      c.set(other.c.get<meas_periodicity_e>());
      break;
    case types::e_c_id_meas_quantities:
      c.set(other.c.get<e_c_id_meas_quantities_l>());
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      c.set(other.c.get<pos_meas_periodicity_nr_ao_a_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
e_c_id_report_characteristics_e& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_report_characteristics()
{
  assert_choice_type(types::e_c_id_report_characteristics, type_, "Value");
  return c.get<e_c_id_report_characteristics_e>();
}
meas_periodicity_e& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_periodicity()
{
  assert_choice_type(types::e_c_id_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
e_c_id_meas_quantities_l& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_quantities()
{
  assert_choice_type(types::e_c_id_meas_quantities, type_, "Value");
  return c.get<e_c_id_meas_quantities_l>();
}
pos_meas_periodicity_nr_ao_a_e& e_c_id_meas_initiation_request_ies_o::value_c::pos_meas_periodicity_nr_ao_a()
{
  assert_choice_type(types::pos_meas_periodicity_nr_ao_a, type_, "Value");
  return c.get<pos_meas_periodicity_nr_ao_a_e>();
}
const uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_initiation_request_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const e_c_id_report_characteristics_e&
e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_report_characteristics() const
{
  assert_choice_type(types::e_c_id_report_characteristics, type_, "Value");
  return c.get<e_c_id_report_characteristics_e>();
}
const meas_periodicity_e& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_periodicity() const
{
  assert_choice_type(types::e_c_id_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
const e_c_id_meas_quantities_l& e_c_id_meas_initiation_request_ies_o::value_c::e_c_id_meas_quantities() const
{
  assert_choice_type(types::e_c_id_meas_quantities, type_, "Value");
  return c.get<e_c_id_meas_quantities_l>();
}
const pos_meas_periodicity_nr_ao_a_e&
e_c_id_meas_initiation_request_ies_o::value_c::pos_meas_periodicity_nr_ao_a() const
{
  assert_choice_type(types::pos_meas_periodicity_nr_ao_a, type_, "Value");
  return c.get<pos_meas_periodicity_nr_ao_a_e>();
}
void e_c_id_meas_initiation_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::e_c_id_report_characteristics:
      j.write_str("E-CID-ReportCharacteristics", c.get<e_c_id_report_characteristics_e>().to_string());
      break;
    case types::e_c_id_meas_periodicity:
      j.write_str("MeasurementPeriodicity", c.get<meas_periodicity_e>().to_string());
      break;
    case types::e_c_id_meas_quantities:
      j.start_array("E-CID-MeasurementQuantities");
      for (const auto& e1 : c.get<e_c_id_meas_quantities_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      j.write_str("PosMeasurementPeriodicityNR-AoA", c.get<pos_meas_periodicity_nr_ao_a_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_initiation_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_report_characteristics:
      HANDLE_CODE(c.get<e_c_id_report_characteristics_e>().pack(bref));
      break;
    case types::e_c_id_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().pack(bref));
      break;
    case types::e_c_id_meas_quantities:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<e_c_id_meas_quantities_l>(), 1, 64, true));
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      HANDLE_CODE(c.get<pos_meas_periodicity_nr_ao_a_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_report_characteristics:
      HANDLE_CODE(c.get<e_c_id_report_characteristics_e>().unpack(bref));
      break;
    case types::e_c_id_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().unpack(bref));
      break;
    case types::e_c_id_meas_quantities:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<e_c_id_meas_quantities_l>(), bref, 1, 64, true));
      break;
    case types::pos_meas_periodicity_nr_ao_a:
      HANDLE_CODE(c.get<pos_meas_periodicity_nr_ao_a_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE e_c_id_meas_initiation_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 6;
  nof_ies += e_c_id_meas_periodicity_present ? 1 : 0;
  nof_ies += pos_meas_periodicity_nr_ao_a_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)412, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)413, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)424, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(e_c_id_report_characteristics.pack(bref));
  }
  if (e_c_id_meas_periodicity_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)416, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(e_c_id_meas_periodicity.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)414, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, e_c_id_meas_quantities, 1, 64, true));
  }
  if (pos_meas_periodicity_nr_ao_a_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)672, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_meas_periodicity_nr_ao_a.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 6;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 424: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_report_characteristics.unpack(bref));
        break;
      }
      case 416: {
        e_c_id_meas_periodicity_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_meas_periodicity.unpack(bref));
        break;
      }
      case 414: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(e_c_id_meas_quantities, bref, 1, 64, true));
        break;
      }
      case 672: {
        pos_meas_periodicity_nr_ao_a_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_periodicity_nr_ao_a.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_initiation_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 412);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_ue_meas_id);
  j.write_int("id", 413);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_meas_id);
  j.write_int("id", 424);
  j.write_str("criticality", "reject");
  j.write_str("Value", e_c_id_report_characteristics.to_string());
  if (e_c_id_meas_periodicity_present) {
    j.write_int("id", 416);
    j.write_str("criticality", "reject");
    j.write_str("Value", e_c_id_meas_periodicity.to_string());
  }
  j.write_int("id", 414);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : e_c_id_meas_quantities) {
    e1.to_json(j);
  }
  j.end_array();
  if (pos_meas_periodicity_nr_ao_a_present) {
    j.write_int("id", 672);
    j.write_str("criticality", "reject");
    j.write_str("Value", pos_meas_periodicity_nr_ao_a.to_string());
  }
  j.end_obj();
}

// E-CIDMeasurementInitiationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_initiation_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418, 7};
  return map_enum_number(names, 7, idx, "id");
}
bool e_c_id_meas_initiation_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_initiation_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 417:
      return crit_e::ignore;
    case 418:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_initiation_resp_ies_o::value_c e_c_id_meas_initiation_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 417:
      ret.set(value_c::types::e_c_id_meas_result);
      break;
    case 418:
      ret.set(value_c::types::cell_portion_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_initiation_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 417:
      return presence_e::optional;
    case 418:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_initiation_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::e_c_id_meas_result:
      c.destroy<e_c_id_meas_result_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_initiation_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::e_c_id_meas_result:
      c.init<e_c_id_meas_result_s>();
      break;
    case types::cell_portion_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }
}
e_c_id_meas_initiation_resp_ies_o::value_c::value_c(const e_c_id_meas_initiation_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.init(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }
}
e_c_id_meas_initiation_resp_ies_o::value_c&
e_c_id_meas_initiation_resp_ies_o::value_c::operator=(const e_c_id_meas_initiation_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.set(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
e_c_id_meas_result_s& e_c_id_meas_initiation_resp_ies_o::value_c::e_c_id_meas_result()
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::cell_portion_id()
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& e_c_id_meas_initiation_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const e_c_id_meas_result_s& e_c_id_meas_initiation_resp_ies_o::value_c::e_c_id_meas_result() const
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
const uint16_t& e_c_id_meas_initiation_resp_ies_o::value_c::cell_portion_id() const
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& e_c_id_meas_initiation_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void e_c_id_meas_initiation_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      j.write_fieldname("E-CID-MeasurementResult");
      c.get<e_c_id_meas_result_s>().to_json(j);
      break;
    case types::cell_portion_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_initiation_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().pack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().unpack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE e_c_id_meas_initiation_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += e_c_id_meas_result_present ? 1 : 0;
  nof_ies += cell_portion_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)412, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)413, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  if (e_c_id_meas_result_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)417, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(e_c_id_meas_result.pack(bref));
  }
  if (cell_portion_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)418, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, cell_portion_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_initiation_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 417: {
        e_c_id_meas_result_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_meas_result.unpack(bref));
        break;
      }
      case 418: {
        cell_portion_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(cell_portion_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_initiation_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 412);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_ue_meas_id);
  j.write_int("id", 413);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_meas_id);
  if (e_c_id_meas_result_present) {
    j.write_int("id", 417);
    j.write_str("criticality", "ignore");
    e_c_id_meas_result.to_json(j);
  }
  if (cell_portion_id_present) {
    j.write_int("id", 418);
    j.write_str("criticality", "ignore");
    j.write_int("Value", cell_portion_id);
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// E-CIDMeasurementReport-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418};
  return map_enum_number(names, 6, idx, "id");
}
bool e_c_id_meas_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413, 417, 418};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    case 417:
      return crit_e::ignore;
    case 418:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_report_ies_o::value_c e_c_id_meas_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    case 417:
      ret.set(value_c::types::e_c_id_meas_result);
      break;
    case 418:
      ret.set(value_c::types::cell_portion_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    case 417:
      return presence_e::mandatory;
    case 418:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::e_c_id_meas_result:
      c.destroy<e_c_id_meas_result_s>();
      break;
    default:
      break;
  }
}
void e_c_id_meas_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::lmf_ue_meas_id:
      break;
    case types::ran_ue_meas_id:
      break;
    case types::e_c_id_meas_result:
      c.init<e_c_id_meas_result_s>();
      break;
    case types::cell_portion_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }
}
e_c_id_meas_report_ies_o::value_c::value_c(const e_c_id_meas_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.init(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }
}
e_c_id_meas_report_ies_o::value_c&
e_c_id_meas_report_ies_o::value_c::operator=(const e_c_id_meas_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      c.set(other.c.get<e_c_id_meas_result_s>());
      break;
    case types::cell_portion_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_report_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_report_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
e_c_id_meas_result_s& e_c_id_meas_report_ies_o::value_c::e_c_id_meas_result()
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
uint16_t& e_c_id_meas_report_ies_o::value_c::cell_portion_id()
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_report_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_report_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const e_c_id_meas_result_s& e_c_id_meas_report_ies_o::value_c::e_c_id_meas_result() const
{
  assert_choice_type(types::e_c_id_meas_result, type_, "Value");
  return c.get<e_c_id_meas_result_s>();
}
const uint16_t& e_c_id_meas_report_ies_o::value_c::cell_portion_id() const
{
  assert_choice_type(types::cell_portion_id, type_, "Value");
  return c.get<uint16_t>();
}
void e_c_id_meas_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::e_c_id_meas_result:
      j.write_fieldname("E-CID-MeasurementResult");
      c.get<e_c_id_meas_result_s>().to_json(j);
      break;
    case types::cell_portion_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().pack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::e_c_id_meas_result:
      HANDLE_CODE(c.get<e_c_id_meas_result_s>().unpack(bref));
      break;
    case types::cell_portion_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE e_c_id_meas_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += cell_portion_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)412, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)413, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)417, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(e_c_id_meas_result.pack(bref));
  }
  if (cell_portion_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)418, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, cell_portion_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 417: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(e_c_id_meas_result.unpack(bref));
        break;
      }
      case 418: {
        cell_portion_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(cell_portion_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 412);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_ue_meas_id);
  j.write_int("id", 413);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_meas_id);
  j.write_int("id", 417);
  j.write_str("criticality", "ignore");
  e_c_id_meas_result.to_json(j);
  if (cell_portion_id_present) {
    j.write_int("id", 418);
    j.write_str("criticality", "ignore");
    j.write_int("Value", cell_portion_id);
  }
  j.end_obj();
}

// E-CIDMeasurementTerminationCommand-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t e_c_id_meas_termination_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 412, 413};
  return map_enum_number(names, 4, idx, "id");
}
bool e_c_id_meas_termination_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 412, 413};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e e_c_id_meas_termination_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 412:
      return crit_e::reject;
    case 413:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
e_c_id_meas_termination_cmd_ies_o::value_c e_c_id_meas_termination_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 412:
      ret.set(value_c::types::lmf_ue_meas_id);
      break;
    case 413:
      ret.set(value_c::types::ran_ue_meas_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e e_c_id_meas_termination_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 412:
      return presence_e::mandatory;
    case 413:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void e_c_id_meas_termination_cmd_ies_o::value_c::destroy_() {}
void e_c_id_meas_termination_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
e_c_id_meas_termination_cmd_ies_o::value_c::value_c(const e_c_id_meas_termination_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
  }
}
e_c_id_meas_termination_cmd_ies_o::value_c&
e_c_id_meas_termination_cmd_ies_o::value_c::operator=(const e_c_id_meas_termination_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::lmf_ue_meas_id()
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::ran_ue_meas_id()
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& e_c_id_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::lmf_ue_meas_id() const
{
  assert_choice_type(types::lmf_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& e_c_id_meas_termination_cmd_ies_o::value_c::ran_ue_meas_id() const
{
  assert_choice_type(types::ran_ue_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
void e_c_id_meas_termination_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::lmf_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    case types::ran_ue_meas_id:
      j.write_int("INTEGER (1..256,...)", c.get<uint16_t>());
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE e_c_id_meas_termination_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_termination_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::lmf_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    case types::ran_ue_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)1u, (uint16_t)256u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "e_c_id_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE e_c_id_meas_termination_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)412, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)413, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_meas_id, (uint16_t)1u, (uint16_t)256u, true, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE e_c_id_meas_termination_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 412: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      case 413: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_meas_id, bref, (uint16_t)1u, (uint16_t)256u, true, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void e_c_id_meas_termination_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 412);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_ue_meas_id);
  j.write_int("id", 413);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_meas_id);
  j.end_obj();
}

// ErrorIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t error_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 40, 41, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool error_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e error_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 40:
      return crit_e::ignore;
    case 41:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
error_ind_ies_o::value_c error_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e error_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 40:
      return presence_e::optional;
    case 41:
      return presence_e::optional;
    case 0:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void error_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void error_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
}
error_ind_ies_o::value_c::value_c(const error_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
}
error_ind_ies_o::value_c& error_ind_ies_o::value_c::operator=(const error_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& error_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint64_t& error_ind_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& error_ind_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& error_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& error_ind_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& error_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& error_ind_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& error_ind_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& error_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& error_ind_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void error_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE error_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE error_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "error_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE error_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += gnb_cu_ue_f1ap_id_present ? 1 : 0;
  nof_ies += gnb_du_ue_f1ap_id_present ? 1 : 0;
  nof_ies += cause_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (gnb_cu_ue_f1ap_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (gnb_du_ue_f1ap_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (cause_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE error_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 40: {
        gnb_cu_ue_f1ap_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        gnb_du_ue_f1ap_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        cause_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void error_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (gnb_cu_ue_f1ap_id_present) {
    j.write_int("id", 40);
    j.write_str("criticality", "ignore");
    j.write_int("Value", gnb_cu_ue_f1ap_id);
  }
  if (gnb_du_ue_f1ap_id_present) {
    j.write_int("id", 41);
    j.write_str("criticality", "ignore");
    j.write_int("Value", gnb_du_ue_f1ap_id);
  }
  if (cause_present) {
    j.write_int("id", 0);
    j.write_str("criticality", "ignore");
    cause.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

// SemipersistentSRS-ExtIEs ::= OBJECT SET OF F1AP-PROTOCOL-EXTENSION
uint32_t semipersistent_srs_ext_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {435};
  return map_enum_number(names, 1, idx, "id");
}
bool semipersistent_srs_ext_ies_o::is_id_valid(const uint32_t& id)
{
  return 435 == id;
}
crit_e semipersistent_srs_ext_ies_o::get_crit(const uint32_t& id)
{
  if (id == 435) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
semipersistent_srs_ext_ies_o::ext_c semipersistent_srs_ext_ies_o::get_ext(const uint32_t& id)
{
  ext_c ret{};
  if (id != 435) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e semipersistent_srs_ext_ies_o::get_presence(const uint32_t& id)
{
  if (id == 435) {
    return presence_e::optional;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Extension ::= OPEN TYPE
void semipersistent_srs_ext_ies_o::ext_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("SpatialRelationPerSRSResource");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE semipersistent_srs_ext_ies_o::ext_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE semipersistent_srs_ext_ies_o::ext_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-associatedLogicalF1-ConnectionItemRes ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_associated_lc_f1_conn_item_res_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {80};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_associated_lc_f1_conn_item_res_o::is_id_valid(const uint32_t& id)
{
  return 80 == id;
}
crit_e ue_associated_lc_f1_conn_item_res_o::get_crit(const uint32_t& id)
{
  if (id == 80) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_associated_lc_f1_conn_item_res_o::value_c ue_associated_lc_f1_conn_item_res_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 80) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_associated_lc_f1_conn_item_res_o::get_presence(const uint32_t& id)
{
  if (id == 80) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_associated_lc_f1_conn_item_res_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-associatedLogicalF1-ConnectionItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// ResetAll ::= ENUMERATED
const char* reset_all_opts::to_string() const
{
  static const char* names[] = {"reset-all"};
  return convert_enum_idx(names, 1, value, "reset_all_e");
}

// SemipersistentSRS ::= SEQUENCE
SRSASN_CODE semipersistent_srs_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(bref.pack(srs_spatial_relation_present, 1));
  HANDLE_CODE(bref.pack(ie_exts.size() > 0, 1));

  HANDLE_CODE(pack_integer(bref, srs_res_set_id, (uint8_t)0u, (uint8_t)15u, true, true));
  if (srs_spatial_relation_present) {
    HANDLE_CODE(srs_spatial_relation.pack(bref));
  }
  if (ie_exts.size() > 0) {
    HANDLE_CODE(pack_dyn_seq_of(bref, ie_exts, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE semipersistent_srs_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(bref.unpack(srs_spatial_relation_present, 1));
  bool ie_exts_present;
  HANDLE_CODE(bref.unpack(ie_exts_present, 1));

  HANDLE_CODE(unpack_integer(srs_res_set_id, bref, (uint8_t)0u, (uint8_t)15u, true, true));
  if (srs_spatial_relation_present) {
    HANDLE_CODE(srs_spatial_relation.unpack(bref));
  }
  if (ie_exts_present) {
    HANDLE_CODE(unpack_dyn_seq_of(ie_exts, bref, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
void semipersistent_srs_s::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("sRSResourceSetID", srs_res_set_id);
  if (srs_spatial_relation_present) {
    j.write_fieldname("sRSSpatialRelation");
    srs_spatial_relation.to_json(j);
  }
  if (ie_exts.size() > 0) {
    j.write_fieldname("iE-Extensions");
  }
  j.end_obj();
}

// TRPInformationItemTRPResp ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_item_trp_resp_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {401};
  return map_enum_number(names, 1, idx, "id");
}
bool trp_info_item_trp_resp_o::is_id_valid(const uint32_t& id)
{
  return 401 == id;
}
crit_e trp_info_item_trp_resp_o::get_crit(const uint32_t& id)
{
  if (id == 401) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
trp_info_item_trp_resp_o::value_c trp_info_item_trp_resp_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 401) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_item_trp_resp_o::get_presence(const uint32_t& id)
{
  if (id == 401) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void trp_info_item_trp_resp_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("TRPInformationItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE trp_info_item_trp_resp_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_item_trp_resp_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// TRPInformationTypeItemTRPReq ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_type_item_trp_req_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {399};
  return map_enum_number(names, 1, idx, "id");
}
bool trp_info_type_item_trp_req_o::is_id_valid(const uint32_t& id)
{
  return 399 == id;
}
crit_e trp_info_type_item_trp_req_o::get_crit(const uint32_t& id)
{
  if (id == 399) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
trp_info_type_item_trp_req_o::value_c trp_info_type_item_trp_req_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 399) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_type_item_trp_req_o::get_presence(const uint32_t& id)
{
  if (id == 399) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void trp_info_type_item_trp_req_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_str("TRPInformationTypeItem", c.to_string());
  j.end_obj();
}
SRSASN_CODE trp_info_type_item_trp_req_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_type_item_trp_req_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

// UE-associatedLogicalF1-ConnectionItemResAck ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ue_associated_lc_f1_conn_item_res_ack_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {80};
  return map_enum_number(names, 1, idx, "id");
}
bool ue_associated_lc_f1_conn_item_res_ack_o::is_id_valid(const uint32_t& id)
{
  return 80 == id;
}
crit_e ue_associated_lc_f1_conn_item_res_ack_o::get_crit(const uint32_t& id)
{
  if (id == 80) {
    return crit_e::ignore;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
ue_associated_lc_f1_conn_item_res_ack_o::value_c ue_associated_lc_f1_conn_item_res_ack_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 80) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ue_associated_lc_f1_conn_item_res_ack_o::get_presence(const uint32_t& id)
{
  if (id == 80) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void ue_associated_lc_f1_conn_item_res_ack_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_fieldname("UE-associatedLogicalF1-ConnectionItem");
  c.to_json(j);
  j.end_obj();
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_ack_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.pack(bref));
  return SRSASN_SUCCESS;
}
SRSASN_CODE ue_associated_lc_f1_conn_item_res_ack_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(c.unpack(bref));
  return SRSASN_SUCCESS;
}

template struct asn1::protocol_ie_single_container_s<ue_associated_lc_f1_conn_item_res_o>;

template struct asn1::protocol_ie_single_container_s<mc_paging_cell_item_ies_o>;

template struct asn1::protocol_ie_single_container_s<paging_cell_item_ies_o>;

// ResetType ::= CHOICE
void reset_type_c::destroy_()
{
  switch (type_) {
    case types::part_of_f1_interface:
      c.destroy<ue_associated_lc_f1_conn_list_res_l>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void reset_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::f1_interface:
      break;
    case types::part_of_f1_interface:
      c.init<ue_associated_lc_f1_conn_list_res_l>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
}
reset_type_c::reset_type_c(const reset_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::f1_interface:
      c.init(other.c.get<reset_all_e>());
      break;
    case types::part_of_f1_interface:
      c.init(other.c.get<ue_associated_lc_f1_conn_list_res_l>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
}
reset_type_c& reset_type_c::operator=(const reset_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::f1_interface:
      c.set(other.c.get<reset_all_e>());
      break;
    case types::part_of_f1_interface:
      c.set(other.c.get<ue_associated_lc_f1_conn_list_res_l>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }

  return *this;
}
reset_all_e& reset_type_c::set_f1_interface()
{
  set(types::f1_interface);
  return c.get<reset_all_e>();
}
ue_associated_lc_f1_conn_list_res_l& reset_type_c::set_part_of_f1_interface()
{
  set(types::part_of_f1_interface);
  return c.get<ue_associated_lc_f1_conn_list_res_l>();
}
protocol_ie_single_container_s<reset_type_ext_ies_o>& reset_type_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>();
}
void reset_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::f1_interface:
      j.write_str("f1-Interface", "reset-all");
      break;
    case types::part_of_f1_interface:
      j.start_array("partOfF1-Interface");
      for (const auto& e1 : c.get<ue_associated_lc_f1_conn_list_res_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::f1_interface:
      HANDLE_CODE(c.get<reset_all_e>().pack(bref));
      break;
    case types::part_of_f1_interface:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_associated_lc_f1_conn_list_res_l>(), 1, 65536, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::f1_interface:
      HANDLE_CODE(c.get<reset_all_e>().unpack(bref));
      break;
    case types::part_of_f1_interface:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_associated_lc_f1_conn_list_res_l>(), bref, 1, 65536, true));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<reset_type_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* reset_type_c::types_opts::to_string() const
{
  static const char* names[] = {"f1-Interface", "partOfF1-Interface", "choice-extension"};
  return convert_enum_idx(names, 3, value, "reset_type_c::types");
}

// SRSType ::= CHOICE
void srs_type_c::destroy_()
{
  switch (type_) {
    case types::semipersistent_srs:
      c.destroy<semipersistent_srs_s>();
      break;
    case types::aperiodic_srs:
      c.destroy<aperiodic_srs_s>();
      break;
    case types::choice_ext:
      c.destroy<protocol_ie_single_container_s<srs_type_ext_ies_o>>();
      break;
    default:
      break;
  }
}
void srs_type_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::semipersistent_srs:
      c.init<semipersistent_srs_s>();
      break;
    case types::aperiodic_srs:
      c.init<aperiodic_srs_s>();
      break;
    case types::choice_ext:
      c.init<protocol_ie_single_container_s<srs_type_ext_ies_o>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }
}
srs_type_c::srs_type_c(const srs_type_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::semipersistent_srs:
      c.init(other.c.get<semipersistent_srs_s>());
      break;
    case types::aperiodic_srs:
      c.init(other.c.get<aperiodic_srs_s>());
      break;
    case types::choice_ext:
      c.init(other.c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }
}
srs_type_c& srs_type_c::operator=(const srs_type_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::semipersistent_srs:
      c.set(other.c.get<semipersistent_srs_s>());
      break;
    case types::aperiodic_srs:
      c.set(other.c.get<aperiodic_srs_s>());
      break;
    case types::choice_ext:
      c.set(other.c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }

  return *this;
}
semipersistent_srs_s& srs_type_c::set_semipersistent_srs()
{
  set(types::semipersistent_srs);
  return c.get<semipersistent_srs_s>();
}
aperiodic_srs_s& srs_type_c::set_aperiodic_srs()
{
  set(types::aperiodic_srs);
  return c.get<aperiodic_srs_s>();
}
protocol_ie_single_container_s<srs_type_ext_ies_o>& srs_type_c::set_choice_ext()
{
  set(types::choice_ext);
  return c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>();
}
void srs_type_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::semipersistent_srs:
      j.write_fieldname("semipersistentSRS");
      c.get<semipersistent_srs_s>().to_json(j);
      break;
    case types::aperiodic_srs:
      j.write_fieldname("aperiodicSRS");
      c.get<aperiodic_srs_s>().to_json(j);
      break;
    case types::choice_ext:
      j.write_fieldname("choice-extension");
      c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
  }
  j.end_obj();
}
SRSASN_CODE srs_type_c::pack(bit_ref& bref) const
{
  type_.pack(bref);
  switch (type_) {
    case types::semipersistent_srs:
      HANDLE_CODE(c.get<semipersistent_srs_s>().pack(bref));
      break;
    case types::aperiodic_srs:
      HANDLE_CODE(c.get<aperiodic_srs_s>().pack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE srs_type_c::unpack(cbit_ref& bref)
{
  types e;
  e.unpack(bref);
  set(e);
  switch (type_) {
    case types::semipersistent_srs:
      HANDLE_CODE(c.get<semipersistent_srs_s>().unpack(bref));
      break;
    case types::aperiodic_srs:
      HANDLE_CODE(c.get<aperiodic_srs_s>().unpack(bref));
      break;
    case types::choice_ext:
      HANDLE_CODE(c.get<protocol_ie_single_container_s<srs_type_ext_ies_o>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "srs_type_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

const char* srs_type_c::types_opts::to_string() const
{
  static const char* names[] = {"semipersistentSRS", "aperiodicSRS", "choice-extension"};
  return convert_enum_idx(names, 3, value, "srs_type_c::types");
}

template struct asn1::protocol_ie_single_container_s<trp_info_item_trp_resp_o>;

template struct asn1::protocol_ie_single_container_s<trp_info_type_item_trp_req_o>;

template struct asn1::protocol_ie_single_container_s<ue_associated_lc_f1_conn_item_res_ack_o>;

// F1RemovalFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool f1_removal_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_removal_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_removal_fail_ies_o::value_c f1_removal_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_removal_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
}
f1_removal_fail_ies_o::value_c::value_c(const f1_removal_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
}
f1_removal_fail_ies_o::value_c& f1_removal_fail_ies_o::value_c::operator=(const f1_removal_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_removal_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& f1_removal_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& f1_removal_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_removal_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& f1_removal_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& f1_removal_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_removal_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_removal_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1RemovalRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78};
  return map_enum_number(names, 1, idx, "id");
}
bool f1_removal_request_ies_o::is_id_valid(const uint32_t& id)
{
  return 78 == id;
}
crit_e f1_removal_request_ies_o::get_crit(const uint32_t& id)
{
  if (id == 78) {
    return crit_e::reject;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}
f1_removal_request_ies_o::value_c f1_removal_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  if (id != 78) {
    asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_request_ies_o::get_presence(const uint32_t& id)
{
  if (id == 78) {
    return presence_e::mandatory;
  }
  asn1::log_error("The id={} is not recognized", id);
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("INTEGER (0..255,...)", c);
  j.end_obj();
}
SRSASN_CODE f1_removal_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  HANDLE_CODE(pack_integer(bref, c, (uint16_t)0u, (uint16_t)255u, true, true));
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  HANDLE_CODE(unpack_integer(c, bref, (uint16_t)0u, (uint16_t)255u, true, true));
  return SRSASN_SUCCESS;
}

// F1RemovalResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_removal_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7};
  return map_enum_number(names, 2, idx, "id");
}
bool f1_removal_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_removal_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_removal_resp_ies_o::value_c f1_removal_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_removal_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_removal_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_removal_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
}
f1_removal_resp_ies_o::value_c::value_c(const f1_removal_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
}
f1_removal_resp_ies_o::value_c& f1_removal_resp_ies_o::value_c::operator=(const f1_removal_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_removal_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& f1_removal_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_removal_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& f1_removal_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_removal_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_removal_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_removal_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1SetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool f1_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_fail_ies_o::value_c f1_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void f1_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
}
f1_setup_fail_ies_o::value_c::value_c(const f1_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
}
f1_setup_fail_ies_o::value_c& f1_setup_fail_ies_o::value_c::operator=(const f1_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& f1_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& f1_setup_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& f1_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& f1_setup_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& f1_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& f1_setup_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& f1_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void f1_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1SetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 42, 45, 44, 171, 254, 281, 427};
  return map_enum_number(names, 8, idx, "id");
}
bool f1_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 42, 45, 44, 171, 254, 281, 427};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 42:
      return crit_e::reject;
    case 45:
      return crit_e::ignore;
    case 44:
      return crit_e::reject;
    case 171:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 281:
      return crit_e::ignore;
    case 427:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_request_ies_o::value_c f1_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 42:
      ret.set(value_c::types::gnb_du_id);
      break;
    case 45:
      ret.set(value_c::types::gnb_du_name);
      break;
    case 44:
      ret.set(value_c::types::gnb_du_served_cells_list);
      break;
    case 171:
      ret.set(value_c::types::gnb_du_rrc_version);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 427:
      ret.set(value_c::types::extended_gnb_du_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 42:
      return presence_e::mandatory;
    case 45:
      return presence_e::optional;
    case 44:
      return presence_e::optional;
    case 171:
      return presence_e::mandatory;
    case 254:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 427:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::gnb_du_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::gnb_du_served_cells_list:
      c.destroy<gnb_du_served_cells_list_l>();
      break;
    case types::gnb_du_rrc_version:
      c.destroy<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_du_name:
      c.destroy<extended_gnb_du_name_s>();
      break;
    default:
      break;
  }
}
void f1_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_du_id:
      break;
    case types::gnb_du_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::gnb_du_served_cells_list:
      c.init<gnb_du_served_cells_list_l>();
      break;
    case types::gnb_du_rrc_version:
      c.init<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_du_name:
      c.init<extended_gnb_du_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
}
f1_setup_request_ies_o::value_c::value_c(const f1_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::gnb_du_served_cells_list:
      c.init(other.c.get<gnb_du_served_cells_list_l>());
      break;
    case types::gnb_du_rrc_version:
      c.init(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_du_name:
      c.init(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
}
f1_setup_request_ies_o::value_c&
f1_setup_request_ies_o::value_c::operator=(const f1_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::gnb_du_served_cells_list:
      c.set(other.c.get<gnb_du_served_cells_list_l>());
      break;
    case types::gnb_du_rrc_version:
      c.set(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_du_name:
      c.set(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint64_t& f1_setup_request_ies_o::value_c::gnb_du_id()
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
printable_string<1, 150, true, true>& f1_setup_request_ies_o::value_c::gnb_du_name()
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
gnb_du_served_cells_list_l& f1_setup_request_ies_o::value_c::gnb_du_served_cells_list()
{
  assert_choice_type(types::gnb_du_served_cells_list, type_, "Value");
  return c.get<gnb_du_served_cells_list_l>();
}
rrc_version_s& f1_setup_request_ies_o::value_c::gnb_du_rrc_version()
{
  assert_choice_type(types::gnb_du_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
transport_layer_address_info_s& f1_setup_request_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
fixed_bitstring<10, false, true>& f1_setup_request_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
extended_gnb_du_name_s& f1_setup_request_ies_o::value_c::extended_gnb_du_name()
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
const uint16_t& f1_setup_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint64_t& f1_setup_request_ies_o::value_c::gnb_du_id() const
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
const printable_string<1, 150, true, true>& f1_setup_request_ies_o::value_c::gnb_du_name() const
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const gnb_du_served_cells_list_l& f1_setup_request_ies_o::value_c::gnb_du_served_cells_list() const
{
  assert_choice_type(types::gnb_du_served_cells_list, type_, "Value");
  return c.get<gnb_du_served_cells_list_l>();
}
const rrc_version_s& f1_setup_request_ies_o::value_c::gnb_du_rrc_version() const
{
  assert_choice_type(types::gnb_du_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
const transport_layer_address_info_s& f1_setup_request_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const fixed_bitstring<10, false, true>& f1_setup_request_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const extended_gnb_du_name_s& f1_setup_request_ies_o::value_c::extended_gnb_du_name() const
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
void f1_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_id:
      j.write_int("INTEGER (0..68719476735)", c.get<uint64_t>());
      break;
    case types::gnb_du_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::gnb_du_served_cells_list:
      j.start_array("GNB-DU-Served-Cells-List");
      for (const auto& e1 : c.get<gnb_du_served_cells_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_du_rrc_version:
      j.write_fieldname("RRC-Version");
      c.get<rrc_version_s>().to_json(j);
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::extended_gnb_du_name:
      j.write_fieldname("Extended-GNB-DU-Name");
      c.get<extended_gnb_du_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::gnb_du_served_cells_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_served_cells_list_l>(), 1, 512, true));
      break;
    case types::gnb_du_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().pack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::gnb_du_served_cells_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_served_cells_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_du_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().unpack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// F1SetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t f1_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 82, 3, 170, 254, 287, 281, 426};
  return map_enum_number(names, 8, idx, "id");
}
bool f1_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 82, 3, 170, 254, 287, 281, 426};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e f1_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 82:
      return crit_e::ignore;
    case 3:
      return crit_e::reject;
    case 170:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 287:
      return crit_e::reject;
    case 281:
      return crit_e::ignore;
    case 426:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
f1_setup_resp_ies_o::value_c f1_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 82:
      ret.set(value_c::types::gnb_cu_name);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 170:
      ret.set(value_c::types::gnb_cu_rrc_version);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 287:
      ret.set(value_c::types::ul_bh_non_up_traffic_map);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 426:
      ret.set(value_c::types::extended_gnb_cu_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e f1_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 82:
      return presence_e::optional;
    case 3:
      return presence_e::optional;
    case 170:
      return presence_e::mandatory;
    case 254:
      return presence_e::optional;
    case 287:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 426:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void f1_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::gnb_cu_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::gnb_cu_rrc_version:
      c.destroy<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.destroy<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.destroy<extended_gnb_cu_name_s>();
      break;
    default:
      break;
  }
}
void f1_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::gnb_cu_rrc_version:
      c.init<rrc_version_s>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.init<extended_gnb_cu_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
}
f1_setup_resp_ies_o::value_c::value_c(const f1_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::gnb_cu_rrc_version:
      c.init(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.init(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
}
f1_setup_resp_ies_o::value_c& f1_setup_resp_ies_o::value_c::operator=(const f1_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::gnb_cu_rrc_version:
      c.set(other.c.get<rrc_version_s>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.set(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.set(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& f1_setup_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
printable_string<1, 150, true, true>& f1_setup_resp_ies_o::value_c::gnb_cu_name()
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
cells_to_be_activ_list_l& f1_setup_resp_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
rrc_version_s& f1_setup_resp_ies_o::value_c::gnb_cu_rrc_version()
{
  assert_choice_type(types::gnb_cu_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
transport_layer_address_info_s& f1_setup_resp_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
ul_bh_non_up_traffic_map_s& f1_setup_resp_ies_o::value_c::ul_bh_non_up_traffic_map()
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
fixed_bitstring<10, false, true>& f1_setup_resp_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
extended_gnb_cu_name_s& f1_setup_resp_ies_o::value_c::extended_gnb_cu_name()
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
const uint16_t& f1_setup_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const printable_string<1, 150, true, true>& f1_setup_resp_ies_o::value_c::gnb_cu_name() const
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const cells_to_be_activ_list_l& f1_setup_resp_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const rrc_version_s& f1_setup_resp_ies_o::value_c::gnb_cu_rrc_version() const
{
  assert_choice_type(types::gnb_cu_rrc_version, type_, "Value");
  return c.get<rrc_version_s>();
}
const transport_layer_address_info_s& f1_setup_resp_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const ul_bh_non_up_traffic_map_s& f1_setup_resp_ies_o::value_c::ul_bh_non_up_traffic_map() const
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
const fixed_bitstring<10, false, true>& f1_setup_resp_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const extended_gnb_cu_name_s& f1_setup_resp_ies_o::value_c::extended_gnb_cu_name() const
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
void f1_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_rrc_version:
      j.write_fieldname("RRC-Version");
      c.get<rrc_version_s>().to_json(j);
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::ul_bh_non_up_traffic_map:
      j.write_fieldname("UL-BH-Non-UP-Traffic-Mapping");
      c.get<ul_bh_non_up_traffic_map_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::extended_gnb_cu_name:
      j.write_fieldname("Extended-GNB-CU-Name");
      c.get<extended_gnb_cu_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE f1_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::gnb_cu_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().pack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_cu_rrc_version:
      HANDLE_CODE(c.get<rrc_version_s>().unpack(bref));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "f1_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBCUConfigurationUpdateAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 1, 7, 132, 134, 189, 254};
  return map_enum_number(names, 7, idx, "id");
}
bool gnb_cu_cfg_upd_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 1, 7, 132, 134, 189, 254};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 1:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 132:
      return crit_e::ignore;
    case 134:
      return crit_e::ignore;
    case 189:
      return crit_e::ignore;
    case 254:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_ack_ies_o::value_c gnb_cu_cfg_upd_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 1:
      ret.set(value_c::types::cells_failed_to_be_activ_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 132:
      ret.set(value_c::types::gnb_cu_tnl_assoc_setup_list);
      break;
    case 134:
      ret.set(value_c::types::gnb_cu_tnl_assoc_failed_to_setup_list);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 1:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 132:
      return presence_e::optional;
    case 134:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_failed_to_be_activ_list:
      c.destroy<cells_failed_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.destroy<gnb_cu_tnl_assoc_setup_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.destroy<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_failed_to_be_activ_list:
      c.init<cells_failed_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.init<gnb_cu_tnl_assoc_setup_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.init<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ack_ies_o::value_c::value_c(const gnb_cu_cfg_upd_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      c.init(other.c.get<cells_failed_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_setup_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ack_ies_o::value_c&
gnb_cu_cfg_upd_ack_ies_o::value_c::operator=(const gnb_cu_cfg_upd_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      c.set(other.c.get<cells_failed_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_setup_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_failed_to_be_activ_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::cells_failed_to_be_activ_list()
{
  assert_choice_type(types::cells_failed_to_be_activ_list, type_, "Value");
  return c.get<cells_failed_to_be_activ_list_l>();
}
crit_diagnostics_s& gnb_cu_cfg_upd_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
gnb_cu_tnl_assoc_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_setup_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_setup_list_l>();
}
gnb_cu_tnl_assoc_failed_to_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_failed_to_setup_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_failed_to_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
}
ded_si_delivery_needed_ue_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
transport_layer_address_info_s& gnb_cu_cfg_upd_ack_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const uint16_t& gnb_cu_cfg_upd_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_failed_to_be_activ_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::cells_failed_to_be_activ_list() const
{
  assert_choice_type(types::cells_failed_to_be_activ_list, type_, "Value");
  return c.get<cells_failed_to_be_activ_list_l>();
}
const crit_diagnostics_s& gnb_cu_cfg_upd_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const gnb_cu_tnl_assoc_setup_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_setup_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_setup_list_l>();
}
const gnb_cu_tnl_assoc_failed_to_setup_list_l&
gnb_cu_cfg_upd_ack_ies_o::value_c::gnb_cu_tnl_assoc_failed_to_setup_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_failed_to_setup_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>();
}
const ded_si_delivery_needed_ue_list_l& gnb_cu_cfg_upd_ack_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const transport_layer_address_info_s& gnb_cu_cfg_upd_ack_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
void gnb_cu_cfg_upd_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_failed_to_be_activ_list:
      j.start_array("Cells-Failed-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_failed_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      j.start_array("GNB-CU-TNL-Association-Setup-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      j.start_array("GNB-CU-TNL-Association-Failed-To-Setup-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_failed_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_failed_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_setup_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>(), 1, 32, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_failed_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_failed_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::gnb_cu_tnl_assoc_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_failed_to_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_failed_to_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBCUConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_cu_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_fail_ies_o::value_c gnb_cu_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_fail_ies_o::value_c::value_c(const gnb_cu_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_fail_ies_o::value_c&
gnb_cu_cfg_upd_fail_ies_o::value_c::operator=(const gnb_cu_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_cu_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_cu_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_cu_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_cu_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_cu_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_cu_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_cu_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_cu_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBCUConfigurationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_cu_cfg_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 3, 5, 121, 123, 125, 129, 105, 244, 254, 287, 281, 447, 449, 82, 426};
  return map_enum_number(names, 16, idx, "id");
}
bool gnb_cu_cfg_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 3, 5, 121, 123, 125, 129, 105, 244, 254, 287, 281, 447, 449, 82, 426};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_cu_cfg_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 3:
      return crit_e::reject;
    case 5:
      return crit_e::reject;
    case 121:
      return crit_e::ignore;
    case 123:
      return crit_e::ignore;
    case 125:
      return crit_e::ignore;
    case 129:
      return crit_e::ignore;
    case 105:
      return crit_e::reject;
    case 244:
      return crit_e::ignore;
    case 254:
      return crit_e::ignore;
    case 287:
      return crit_e::reject;
    case 281:
      return crit_e::ignore;
    case 447:
      return crit_e::ignore;
    case 449:
      return crit_e::ignore;
    case 82:
      return crit_e::ignore;
    case 426:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_cu_cfg_upd_ies_o::value_c gnb_cu_cfg_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 5:
      ret.set(value_c::types::cells_to_be_deactiv_list);
      break;
    case 121:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_add_list);
      break;
    case 123:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_rem_list);
      break;
    case 125:
      ret.set(value_c::types::gnb_cu_tnl_assoc_to_upd_list);
      break;
    case 129:
      ret.set(value_c::types::cells_to_be_barred_list);
      break;
    case 105:
      ret.set(value_c::types::protected_eutra_res_list);
      break;
    case 244:
      ret.set(value_c::types::neighbour_cell_info_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 287:
      ret.set(value_c::types::ul_bh_non_up_traffic_map);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 447:
      ret.set(value_c::types::cco_assist_info);
      break;
    case 449:
      ret.set(value_c::types::cells_for_son_list);
      break;
    case 82:
      ret.set(value_c::types::gnb_cu_name);
      break;
    case 426:
      ret.set(value_c::types::extended_gnb_cu_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_cu_cfg_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 3:
      return presence_e::optional;
    case 5:
      return presence_e::optional;
    case 121:
      return presence_e::optional;
    case 123:
      return presence_e::optional;
    case 125:
      return presence_e::optional;
    case 129:
      return presence_e::optional;
    case 105:
      return presence_e::optional;
    case 244:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    case 287:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 447:
      return presence_e::optional;
    case 449:
      return presence_e::optional;
    case 82:
      return presence_e::optional;
    case 426:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_cu_cfg_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::cells_to_be_deactiv_list:
      c.destroy<cells_to_be_deactiv_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.destroy<gnb_cu_tnl_assoc_to_add_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.destroy<gnb_cu_tnl_assoc_to_rem_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.destroy<gnb_cu_tnl_assoc_to_upd_list_l>();
      break;
    case types::cells_to_be_barred_list:
      c.destroy<cells_to_be_barred_list_l>();
      break;
    case types::protected_eutra_res_list:
      c.destroy<protected_eutra_res_list_l>();
      break;
    case types::neighbour_cell_info_list:
      c.destroy<neighbour_cell_info_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.destroy<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::cco_assist_info:
      c.destroy<cco_assist_info_s>();
      break;
    case types::cells_for_son_list:
      c.destroy<cells_for_son_list_l>();
      break;
    case types::gnb_cu_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.destroy<extended_gnb_cu_name_s>();
      break;
    default:
      break;
  }
}
void gnb_cu_cfg_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::cells_to_be_deactiv_list:
      c.init<cells_to_be_deactiv_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.init<gnb_cu_tnl_assoc_to_add_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.init<gnb_cu_tnl_assoc_to_rem_list_l>();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.init<gnb_cu_tnl_assoc_to_upd_list_l>();
      break;
    case types::cells_to_be_barred_list:
      c.init<cells_to_be_barred_list_l>();
      break;
    case types::protected_eutra_res_list:
      c.init<protected_eutra_res_list_l>();
      break;
    case types::neighbour_cell_info_list:
      c.init<neighbour_cell_info_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::cco_assist_info:
      c.init<cco_assist_info_s>();
      break;
    case types::cells_for_son_list:
      c.init<cells_for_son_list_l>();
      break;
    case types::gnb_cu_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_cu_name:
      c.init<extended_gnb_cu_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ies_o::value_c::value_c(const gnb_cu_cfg_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::cells_to_be_deactiv_list:
      c.init(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_add_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_rem_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.init(other.c.get<gnb_cu_tnl_assoc_to_upd_list_l>());
      break;
    case types::cells_to_be_barred_list:
      c.init(other.c.get<cells_to_be_barred_list_l>());
      break;
    case types::protected_eutra_res_list:
      c.init(other.c.get<protected_eutra_res_list_l>());
      break;
    case types::neighbour_cell_info_list:
      c.init(other.c.get<neighbour_cell_info_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cco_assist_info:
      c.init(other.c.get<cco_assist_info_s>());
      break;
    case types::cells_for_son_list:
      c.init(other.c.get<cells_for_son_list_l>());
      break;
    case types::gnb_cu_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.init(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
}
gnb_cu_cfg_upd_ies_o::value_c& gnb_cu_cfg_upd_ies_o::value_c::operator=(const gnb_cu_cfg_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::cells_to_be_deactiv_list:
      c.set(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_add_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_rem_list_l>());
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      c.set(other.c.get<gnb_cu_tnl_assoc_to_upd_list_l>());
      break;
    case types::cells_to_be_barred_list:
      c.set(other.c.get<cells_to_be_barred_list_l>());
      break;
    case types::protected_eutra_res_list:
      c.set(other.c.get<protected_eutra_res_list_l>());
      break;
    case types::neighbour_cell_info_list:
      c.set(other.c.get<neighbour_cell_info_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.set(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cco_assist_info:
      c.set(other.c.get<cco_assist_info_s>());
      break;
    case types::cells_for_son_list:
      c.set(other.c.get<cells_for_son_list_l>());
      break;
    case types::gnb_cu_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_cu_name:
      c.set(other.c.get<extended_gnb_cu_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_cu_cfg_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_to_be_activ_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
cells_to_be_deactiv_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_deactiv_list()
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
gnb_cu_tnl_assoc_to_add_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_add_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_add_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_add_list_l>();
}
gnb_cu_tnl_assoc_to_rem_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_rem_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_rem_list_l>();
}
gnb_cu_tnl_assoc_to_upd_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_upd_list()
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_upd_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_upd_list_l>();
}
cells_to_be_barred_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_barred_list()
{
  assert_choice_type(types::cells_to_be_barred_list, type_, "Value");
  return c.get<cells_to_be_barred_list_l>();
}
protected_eutra_res_list_l& gnb_cu_cfg_upd_ies_o::value_c::protected_eutra_res_list()
{
  assert_choice_type(types::protected_eutra_res_list, type_, "Value");
  return c.get<protected_eutra_res_list_l>();
}
neighbour_cell_info_list_l& gnb_cu_cfg_upd_ies_o::value_c::neighbour_cell_info_list()
{
  assert_choice_type(types::neighbour_cell_info_list, type_, "Value");
  return c.get<neighbour_cell_info_list_l>();
}
transport_layer_address_info_s& gnb_cu_cfg_upd_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
ul_bh_non_up_traffic_map_s& gnb_cu_cfg_upd_ies_o::value_c::ul_bh_non_up_traffic_map()
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
fixed_bitstring<10, false, true>& gnb_cu_cfg_upd_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
cco_assist_info_s& gnb_cu_cfg_upd_ies_o::value_c::cco_assist_info()
{
  assert_choice_type(types::cco_assist_info, type_, "Value");
  return c.get<cco_assist_info_s>();
}
cells_for_son_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_for_son_list()
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
printable_string<1, 150, true, true>& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_name()
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
extended_gnb_cu_name_s& gnb_cu_cfg_upd_ies_o::value_c::extended_gnb_cu_name()
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
const uint16_t& gnb_cu_cfg_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_to_be_activ_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const cells_to_be_deactiv_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_deactiv_list() const
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
const gnb_cu_tnl_assoc_to_add_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_add_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_add_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_add_list_l>();
}
const gnb_cu_tnl_assoc_to_rem_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_rem_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_rem_list_l>();
}
const gnb_cu_tnl_assoc_to_upd_list_l& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_tnl_assoc_to_upd_list() const
{
  assert_choice_type(types::gnb_cu_tnl_assoc_to_upd_list, type_, "Value");
  return c.get<gnb_cu_tnl_assoc_to_upd_list_l>();
}
const cells_to_be_barred_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_to_be_barred_list() const
{
  assert_choice_type(types::cells_to_be_barred_list, type_, "Value");
  return c.get<cells_to_be_barred_list_l>();
}
const protected_eutra_res_list_l& gnb_cu_cfg_upd_ies_o::value_c::protected_eutra_res_list() const
{
  assert_choice_type(types::protected_eutra_res_list, type_, "Value");
  return c.get<protected_eutra_res_list_l>();
}
const neighbour_cell_info_list_l& gnb_cu_cfg_upd_ies_o::value_c::neighbour_cell_info_list() const
{
  assert_choice_type(types::neighbour_cell_info_list, type_, "Value");
  return c.get<neighbour_cell_info_list_l>();
}
const transport_layer_address_info_s& gnb_cu_cfg_upd_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const ul_bh_non_up_traffic_map_s& gnb_cu_cfg_upd_ies_o::value_c::ul_bh_non_up_traffic_map() const
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
const fixed_bitstring<10, false, true>& gnb_cu_cfg_upd_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const cco_assist_info_s& gnb_cu_cfg_upd_ies_o::value_c::cco_assist_info() const
{
  assert_choice_type(types::cco_assist_info, type_, "Value");
  return c.get<cco_assist_info_s>();
}
const cells_for_son_list_l& gnb_cu_cfg_upd_ies_o::value_c::cells_for_son_list() const
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
const printable_string<1, 150, true, true>& gnb_cu_cfg_upd_ies_o::value_c::gnb_cu_name() const
{
  assert_choice_type(types::gnb_cu_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const extended_gnb_cu_name_s& gnb_cu_cfg_upd_ies_o::value_c::extended_gnb_cu_name() const
{
  assert_choice_type(types::extended_gnb_cu_name, type_, "Value");
  return c.get<extended_gnb_cu_name_s>();
}
void gnb_cu_cfg_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_to_be_deactiv_list:
      j.start_array("Cells-to-be-Deactivated-List");
      for (const auto& e1 : c.get<cells_to_be_deactiv_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      j.start_array("GNB-CU-TNL-Association-To-Add-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_add_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      j.start_array("GNB-CU-TNL-Association-To-Remove-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      j.start_array("GNB-CU-TNL-Association-To-Update-List");
      for (const auto& e1 : c.get<gnb_cu_tnl_assoc_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_to_be_barred_list:
      j.start_array("Cells-to-be-Barred-List");
      for (const auto& e1 : c.get<cells_to_be_barred_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::protected_eutra_res_list:
      j.start_array("Protected-EUTRA-Resources-List");
      for (const auto& e1 : c.get<protected_eutra_res_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::neighbour_cell_info_list:
      j.start_array("Neighbour-Cell-Information-List");
      for (const auto& e1 : c.get<neighbour_cell_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::ul_bh_non_up_traffic_map:
      j.write_fieldname("UL-BH-Non-UP-Traffic-Mapping");
      c.get<ul_bh_non_up_traffic_map_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::cco_assist_info:
      j.write_fieldname("CCO-Assistance-Information");
      c.get<cco_assist_info_s>().to_json(j);
      break;
    case types::cells_for_son_list:
      j.start_array("CellsForSON-List");
      for (const auto& e1 : c.get<cells_for_son_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_cu_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::extended_gnb_cu_name:
      j.write_fieldname("Extended-GNB-CU-Name");
      c.get<extended_gnb_cu_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_cu_cfg_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_deactiv_list_l>(), 1, 512, true));
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_add_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_rem_list_l>(), 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_cu_tnl_assoc_to_upd_list_l>(), 1, 32, true));
      break;
    case types::cells_to_be_barred_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_barred_list_l>(), 1, 512, true));
      break;
    case types::protected_eutra_res_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<protected_eutra_res_list_l>(), 1, 256, true));
      break;
    case types::neighbour_cell_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<neighbour_cell_info_list_l>(), 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::cco_assist_info:
      HANDLE_CODE(c.get<cco_assist_info_s>().pack(bref));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_for_son_list_l>(), 1, 256, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_deactiv_list_l>(), bref, 1, 512, true));
      break;
    case types::gnb_cu_tnl_assoc_to_add_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_add_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_rem_list_l>(), bref, 1, 32, true));
      break;
    case types::gnb_cu_tnl_assoc_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_cu_tnl_assoc_to_upd_list_l>(), bref, 1, 32, true));
      break;
    case types::cells_to_be_barred_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_barred_list_l>(), bref, 1, 512, true));
      break;
    case types::protected_eutra_res_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<protected_eutra_res_list_l>(), bref, 1, 256, true));
      break;
    case types::neighbour_cell_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<neighbour_cell_info_list_l>(), bref, 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::cco_assist_info:
      HANDLE_CODE(c.get<cco_assist_info_s>().unpack(bref));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_for_son_list_l>(), bref, 1, 256, true));
      break;
    case types::gnb_cu_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::extended_gnb_cu_name:
      HANDLE_CODE(c.get<extended_gnb_cu_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_cu_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUConfigurationUpdateAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 3, 7, 5, 254, 287, 281, 449};
  return map_enum_number(names, 8, idx, "id");
}
bool gnb_du_cfg_upd_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 3, 7, 5, 254, 287, 281, 449};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 3:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 5:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 287:
      return crit_e::reject;
    case 281:
      return crit_e::ignore;
    case 449:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_ack_ies_o::value_c gnb_du_cfg_upd_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 3:
      ret.set(value_c::types::cells_to_be_activ_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 5:
      ret.set(value_c::types::cells_to_be_deactiv_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 287:
      ret.set(value_c::types::ul_bh_non_up_traffic_map);
      break;
    case 281:
      ret.set(value_c::types::bap_address);
      break;
    case 449:
      ret.set(value_c::types::cells_for_son_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 3:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 5:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    case 287:
      return presence_e::optional;
    case 281:
      return presence_e::optional;
    case 449:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_to_be_activ_list:
      c.destroy<cells_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::cells_to_be_deactiv_list:
      c.destroy<cells_to_be_deactiv_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.destroy<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.destroy<fixed_bitstring<10, false, true>>();
      break;
    case types::cells_for_son_list:
      c.destroy<cells_for_son_list_l>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_to_be_activ_list:
      c.init<cells_to_be_activ_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::cells_to_be_deactiv_list:
      c.init<cells_to_be_deactiv_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init<ul_bh_non_up_traffic_map_s>();
      break;
    case types::bap_address:
      c.init<fixed_bitstring<10, false, true>>();
      break;
    case types::cells_for_son_list:
      c.init<cells_for_son_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ack_ies_o::value_c::value_c(const gnb_du_cfg_upd_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.init(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::cells_to_be_deactiv_list:
      c.init(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.init(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.init(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cells_for_son_list:
      c.init(other.c.get<cells_for_son_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ack_ies_o::value_c&
gnb_du_cfg_upd_ack_ies_o::value_c::operator=(const gnb_du_cfg_upd_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      c.set(other.c.get<cells_to_be_activ_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::cells_to_be_deactiv_list:
      c.set(other.c.get<cells_to_be_deactiv_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::ul_bh_non_up_traffic_map:
      c.set(other.c.get<ul_bh_non_up_traffic_map_s>());
      break;
    case types::bap_address:
      c.set(other.c.get<fixed_bitstring<10, false, true>>());
      break;
    case types::cells_for_son_list:
      c.set(other.c.get<cells_for_son_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_to_be_activ_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_activ_list()
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
crit_diagnostics_s& gnb_du_cfg_upd_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
cells_to_be_deactiv_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_deactiv_list()
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
transport_layer_address_info_s& gnb_du_cfg_upd_ack_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
ul_bh_non_up_traffic_map_s& gnb_du_cfg_upd_ack_ies_o::value_c::ul_bh_non_up_traffic_map()
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
fixed_bitstring<10, false, true>& gnb_du_cfg_upd_ack_ies_o::value_c::bap_address()
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
cells_for_son_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_for_son_list()
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
const uint16_t& gnb_du_cfg_upd_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_to_be_activ_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_activ_list() const
{
  assert_choice_type(types::cells_to_be_activ_list, type_, "Value");
  return c.get<cells_to_be_activ_list_l>();
}
const crit_diagnostics_s& gnb_du_cfg_upd_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const cells_to_be_deactiv_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_to_be_deactiv_list() const
{
  assert_choice_type(types::cells_to_be_deactiv_list, type_, "Value");
  return c.get<cells_to_be_deactiv_list_l>();
}
const transport_layer_address_info_s& gnb_du_cfg_upd_ack_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const ul_bh_non_up_traffic_map_s& gnb_du_cfg_upd_ack_ies_o::value_c::ul_bh_non_up_traffic_map() const
{
  assert_choice_type(types::ul_bh_non_up_traffic_map, type_, "Value");
  return c.get<ul_bh_non_up_traffic_map_s>();
}
const fixed_bitstring<10, false, true>& gnb_du_cfg_upd_ack_ies_o::value_c::bap_address() const
{
  assert_choice_type(types::bap_address, type_, "Value");
  return c.get<fixed_bitstring<10, false, true>>();
}
const cells_for_son_list_l& gnb_du_cfg_upd_ack_ies_o::value_c::cells_for_son_list() const
{
  assert_choice_type(types::cells_for_son_list, type_, "Value");
  return c.get<cells_for_son_list_l>();
}
void gnb_du_cfg_upd_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_to_be_activ_list:
      j.start_array("Cells-to-be-Activated-List");
      for (const auto& e1 : c.get<cells_to_be_activ_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::cells_to_be_deactiv_list:
      j.start_array("Cells-to-be-Deactivated-List");
      for (const auto& e1 : c.get<cells_to_be_deactiv_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::ul_bh_non_up_traffic_map:
      j.write_fieldname("UL-BH-Non-UP-Traffic-Mapping");
      c.get<ul_bh_non_up_traffic_map_s>().to_json(j);
      break;
    case types::bap_address:
      j.write_str("BIT STRING", c.get<fixed_bitstring<10, false, true>>().to_string());
      break;
    case types::cells_for_son_list:
      j.start_array("CellsForSON-List");
      for (const auto& e1 : c.get<cells_for_son_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_activ_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_deactiv_list_l>(), 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().pack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().pack(bref)));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_for_son_list_l>(), 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_to_be_activ_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_activ_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::cells_to_be_deactiv_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_deactiv_list_l>(), bref, 1, 512, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::ul_bh_non_up_traffic_map:
      HANDLE_CODE(c.get<ul_bh_non_up_traffic_map_s>().unpack(bref));
      break;
    case types::bap_address:
      HANDLE_CODE((c.get<fixed_bitstring<10, false, true>>().unpack(bref)));
      break;
    case types::cells_for_son_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_for_son_list_l>(), bref, 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_fail_ies_o::value_c gnb_du_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_du_cfg_upd_fail_ies_o::value_c::value_c(const gnb_du_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
}
gnb_du_cfg_upd_fail_ies_o::value_c&
gnb_du_cfg_upd_fail_ies_o::value_c::operator=(const gnb_du_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_du_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_du_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_du_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_du_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_du_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_du_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_du_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_du_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUConfigurationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_cfg_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 58, 62, 60, 89, 189, 42, 228, 254, 446, 45, 427};
  return map_enum_number(names, 12, idx, "id");
}
bool gnb_du_cfg_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 58, 62, 60, 89, 189, 42, 228, 254, 446, 45, 427};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_cfg_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 58:
      return crit_e::reject;
    case 62:
      return crit_e::reject;
    case 60:
      return crit_e::reject;
    case 89:
      return crit_e::reject;
    case 189:
      return crit_e::ignore;
    case 42:
      return crit_e::reject;
    case 228:
      return crit_e::reject;
    case 254:
      return crit_e::ignore;
    case 446:
      return crit_e::ignore;
    case 45:
      return crit_e::ignore;
    case 427:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_cfg_upd_ies_o::value_c gnb_du_cfg_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 58:
      ret.set(value_c::types::served_cells_to_add_list);
      break;
    case 62:
      ret.set(value_c::types::served_cells_to_modify_list);
      break;
    case 60:
      ret.set(value_c::types::served_cells_to_delete_list);
      break;
    case 89:
      ret.set(value_c::types::cells_status_list);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    case 42:
      ret.set(value_c::types::gnb_du_id);
      break;
    case 228:
      ret.set(value_c::types::gnb_du_tnl_assoc_to_rem_list);
      break;
    case 254:
      ret.set(value_c::types::transport_layer_address_info);
      break;
    case 446:
      ret.set(value_c::types::coverage_mod_notif);
      break;
    case 45:
      ret.set(value_c::types::gnb_du_name);
      break;
    case 427:
      ret.set(value_c::types::extended_gnb_du_name);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_cfg_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 58:
      return presence_e::optional;
    case 62:
      return presence_e::optional;
    case 60:
      return presence_e::optional;
    case 89:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    case 42:
      return presence_e::optional;
    case 228:
      return presence_e::optional;
    case 254:
      return presence_e::optional;
    case 446:
      return presence_e::optional;
    case 45:
      return presence_e::optional;
    case 427:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_cfg_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::served_cells_to_add_list:
      c.destroy<served_cells_to_add_list_l>();
      break;
    case types::served_cells_to_modify_list:
      c.destroy<served_cells_to_modify_list_l>();
      break;
    case types::served_cells_to_delete_list:
      c.destroy<served_cells_to_delete_list_l>();
      break;
    case types::cells_status_list:
      c.destroy<cells_status_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.destroy<gnb_du_tnl_assoc_to_rem_list_l>();
      break;
    case types::transport_layer_address_info:
      c.destroy<transport_layer_address_info_s>();
      break;
    case types::coverage_mod_notif:
      c.destroy<coverage_mod_notif_s>();
      break;
    case types::gnb_du_name:
      c.destroy<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_du_name:
      c.destroy<extended_gnb_du_name_s>();
      break;
    default:
      break;
  }
}
void gnb_du_cfg_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::served_cells_to_add_list:
      c.init<served_cells_to_add_list_l>();
      break;
    case types::served_cells_to_modify_list:
      c.init<served_cells_to_modify_list_l>();
      break;
    case types::served_cells_to_delete_list:
      c.init<served_cells_to_delete_list_l>();
      break;
    case types::cells_status_list:
      c.init<cells_status_list_l>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::gnb_du_id:
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.init<gnb_du_tnl_assoc_to_rem_list_l>();
      break;
    case types::transport_layer_address_info:
      c.init<transport_layer_address_info_s>();
      break;
    case types::coverage_mod_notif:
      c.init<coverage_mod_notif_s>();
      break;
    case types::gnb_du_name:
      c.init<printable_string<1, 150, true, true>>();
      break;
    case types::extended_gnb_du_name:
      c.init<extended_gnb_du_name_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ies_o::value_c::value_c(const gnb_du_cfg_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      c.init(other.c.get<served_cells_to_add_list_l>());
      break;
    case types::served_cells_to_modify_list:
      c.init(other.c.get<served_cells_to_modify_list_l>());
      break;
    case types::served_cells_to_delete_list:
      c.init(other.c.get<served_cells_to_delete_list_l>());
      break;
    case types::cells_status_list:
      c.init(other.c.get<cells_status_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::gnb_du_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.init(other.c.get<gnb_du_tnl_assoc_to_rem_list_l>());
      break;
    case types::transport_layer_address_info:
      c.init(other.c.get<transport_layer_address_info_s>());
      break;
    case types::coverage_mod_notif:
      c.init(other.c.get<coverage_mod_notif_s>());
      break;
    case types::gnb_du_name:
      c.init(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_du_name:
      c.init(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
}
gnb_du_cfg_upd_ies_o::value_c& gnb_du_cfg_upd_ies_o::value_c::operator=(const gnb_du_cfg_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      c.set(other.c.get<served_cells_to_add_list_l>());
      break;
    case types::served_cells_to_modify_list:
      c.set(other.c.get<served_cells_to_modify_list_l>());
      break;
    case types::served_cells_to_delete_list:
      c.set(other.c.get<served_cells_to_delete_list_l>());
      break;
    case types::cells_status_list:
      c.set(other.c.get<cells_status_list_l>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::gnb_du_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      c.set(other.c.get<gnb_du_tnl_assoc_to_rem_list_l>());
      break;
    case types::transport_layer_address_info:
      c.set(other.c.get<transport_layer_address_info_s>());
      break;
    case types::coverage_mod_notif:
      c.set(other.c.get<coverage_mod_notif_s>());
      break;
    case types::gnb_du_name:
      c.set(other.c.get<printable_string<1, 150, true, true>>());
      break;
    case types::extended_gnb_du_name:
      c.set(other.c.get<extended_gnb_du_name_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_cfg_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
served_cells_to_add_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_add_list()
{
  assert_choice_type(types::served_cells_to_add_list, type_, "Value");
  return c.get<served_cells_to_add_list_l>();
}
served_cells_to_modify_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_modify_list()
{
  assert_choice_type(types::served_cells_to_modify_list, type_, "Value");
  return c.get<served_cells_to_modify_list_l>();
}
served_cells_to_delete_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_delete_list()
{
  assert_choice_type(types::served_cells_to_delete_list, type_, "Value");
  return c.get<served_cells_to_delete_list_l>();
}
cells_status_list_l& gnb_du_cfg_upd_ies_o::value_c::cells_status_list()
{
  assert_choice_type(types::cells_status_list, type_, "Value");
  return c.get<cells_status_list_l>();
}
ded_si_delivery_needed_ue_list_l& gnb_du_cfg_upd_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
uint64_t& gnb_du_cfg_upd_ies_o::value_c::gnb_du_id()
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
gnb_du_tnl_assoc_to_rem_list_l& gnb_du_cfg_upd_ies_o::value_c::gnb_du_tnl_assoc_to_rem_list()
{
  assert_choice_type(types::gnb_du_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_du_tnl_assoc_to_rem_list_l>();
}
transport_layer_address_info_s& gnb_du_cfg_upd_ies_o::value_c::transport_layer_address_info()
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
coverage_mod_notif_s& gnb_du_cfg_upd_ies_o::value_c::coverage_mod_notif()
{
  assert_choice_type(types::coverage_mod_notif, type_, "Value");
  return c.get<coverage_mod_notif_s>();
}
printable_string<1, 150, true, true>& gnb_du_cfg_upd_ies_o::value_c::gnb_du_name()
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
extended_gnb_du_name_s& gnb_du_cfg_upd_ies_o::value_c::extended_gnb_du_name()
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
const uint16_t& gnb_du_cfg_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const served_cells_to_add_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_add_list() const
{
  assert_choice_type(types::served_cells_to_add_list, type_, "Value");
  return c.get<served_cells_to_add_list_l>();
}
const served_cells_to_modify_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_modify_list() const
{
  assert_choice_type(types::served_cells_to_modify_list, type_, "Value");
  return c.get<served_cells_to_modify_list_l>();
}
const served_cells_to_delete_list_l& gnb_du_cfg_upd_ies_o::value_c::served_cells_to_delete_list() const
{
  assert_choice_type(types::served_cells_to_delete_list, type_, "Value");
  return c.get<served_cells_to_delete_list_l>();
}
const cells_status_list_l& gnb_du_cfg_upd_ies_o::value_c::cells_status_list() const
{
  assert_choice_type(types::cells_status_list, type_, "Value");
  return c.get<cells_status_list_l>();
}
const ded_si_delivery_needed_ue_list_l& gnb_du_cfg_upd_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const uint64_t& gnb_du_cfg_upd_ies_o::value_c::gnb_du_id() const
{
  assert_choice_type(types::gnb_du_id, type_, "Value");
  return c.get<uint64_t>();
}
const gnb_du_tnl_assoc_to_rem_list_l& gnb_du_cfg_upd_ies_o::value_c::gnb_du_tnl_assoc_to_rem_list() const
{
  assert_choice_type(types::gnb_du_tnl_assoc_to_rem_list, type_, "Value");
  return c.get<gnb_du_tnl_assoc_to_rem_list_l>();
}
const transport_layer_address_info_s& gnb_du_cfg_upd_ies_o::value_c::transport_layer_address_info() const
{
  assert_choice_type(types::transport_layer_address_info, type_, "Value");
  return c.get<transport_layer_address_info_s>();
}
const coverage_mod_notif_s& gnb_du_cfg_upd_ies_o::value_c::coverage_mod_notif() const
{
  assert_choice_type(types::coverage_mod_notif, type_, "Value");
  return c.get<coverage_mod_notif_s>();
}
const printable_string<1, 150, true, true>& gnb_du_cfg_upd_ies_o::value_c::gnb_du_name() const
{
  assert_choice_type(types::gnb_du_name, type_, "Value");
  return c.get<printable_string<1, 150, true, true>>();
}
const extended_gnb_du_name_s& gnb_du_cfg_upd_ies_o::value_c::extended_gnb_du_name() const
{
  assert_choice_type(types::extended_gnb_du_name, type_, "Value");
  return c.get<extended_gnb_du_name_s>();
}
void gnb_du_cfg_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::served_cells_to_add_list:
      j.start_array("Served-Cells-To-Add-List");
      for (const auto& e1 : c.get<served_cells_to_add_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::served_cells_to_modify_list:
      j.start_array("Served-Cells-To-Modify-List");
      for (const auto& e1 : c.get<served_cells_to_modify_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::served_cells_to_delete_list:
      j.start_array("Served-Cells-To-Delete-List");
      for (const auto& e1 : c.get<served_cells_to_delete_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cells_status_list:
      j.start_array("Cells-Status-List");
      for (const auto& e1 : c.get<cells_status_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::gnb_du_id:
      j.write_int("INTEGER (0..68719476735)", c.get<uint64_t>());
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      j.start_array("GNB-DU-TNL-Association-To-Remove-List");
      for (const auto& e1 : c.get<gnb_du_tnl_assoc_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::transport_layer_address_info:
      j.write_fieldname("Transport-Layer-Address-Info");
      c.get<transport_layer_address_info_s>().to_json(j);
      break;
    case types::coverage_mod_notif:
      j.write_fieldname("Coverage-Modification-Notification");
      c.get<coverage_mod_notif_s>().to_json(j);
      break;
    case types::gnb_du_name:
      j.write_str("PrintableString", c.get<printable_string<1, 150, true, true>>().to_string());
      break;
    case types::extended_gnb_du_name:
      j.write_fieldname("Extended-GNB-DU-Name");
      c.get<extended_gnb_du_name_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_cfg_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::served_cells_to_add_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_add_list_l>(), 1, 512, true));
      break;
    case types::served_cells_to_modify_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_modify_list_l>(), 1, 512, true));
      break;
    case types::served_cells_to_delete_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<served_cells_to_delete_list_l>(), 1, 512, true));
      break;
    case types::cells_status_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_status_list_l>(), 0, 512, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<gnb_du_tnl_assoc_to_rem_list_l>(), 1, 32, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().pack(bref));
      break;
    case types::coverage_mod_notif:
      HANDLE_CODE(c.get<coverage_mod_notif_s>().pack(bref));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().pack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::served_cells_to_add_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_add_list_l>(), bref, 1, 512, true));
      break;
    case types::served_cells_to_modify_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_modify_list_l>(), bref, 1, 512, true));
      break;
    case types::served_cells_to_delete_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<served_cells_to_delete_list_l>(), bref, 1, 512, true));
      break;
    case types::cells_status_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_status_list_l>(), bref, 0, 512, true));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    case types::gnb_du_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
      break;
    case types::gnb_du_tnl_assoc_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<gnb_du_tnl_assoc_to_rem_list_l>(), bref, 1, 32, true));
      break;
    case types::transport_layer_address_info:
      HANDLE_CODE(c.get<transport_layer_address_info_s>().unpack(bref));
      break;
    case types::coverage_mod_notif:
      HANDLE_CODE(c.get<coverage_mod_notif_s>().unpack(bref));
      break;
    case types::gnb_du_name:
      HANDLE_CODE((c.get<printable_string<1, 150, true, true>>().unpack(bref)));
      break;
    case types::extended_gnb_du_name:
      HANDLE_CODE(c.get<extended_gnb_du_name_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_cfg_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceConfigurationAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_cfg_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7};
  return map_enum_number(names, 2, idx, "id");
}
bool gnb_du_res_cfg_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_cfg_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_cfg_ack_ies_o::value_c gnb_du_res_cfg_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_cfg_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_cfg_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_du_res_cfg_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }
}
gnb_du_res_cfg_ack_ies_o::value_c::value_c(const gnb_du_res_cfg_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }
}
gnb_du_res_cfg_ack_ies_o::value_c&
gnb_du_res_cfg_ack_ies_o::value_c::operator=(const gnb_du_res_cfg_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_cfg_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& gnb_du_res_cfg_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_du_res_cfg_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& gnb_du_res_cfg_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_du_res_cfg_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_cfg_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceConfigurationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_cfg_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_res_cfg_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_cfg_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_cfg_fail_ies_o::value_c gnb_du_res_cfg_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_cfg_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_cfg_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void gnb_du_res_cfg_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }
}
gnb_du_res_cfg_fail_ies_o::value_c::value_c(const gnb_du_res_cfg_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }
}
gnb_du_res_cfg_fail_ies_o::value_c&
gnb_du_res_cfg_fail_ies_o::value_c::operator=(const gnb_du_res_cfg_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_cfg_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& gnb_du_res_cfg_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& gnb_du_res_cfg_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& gnb_du_res_cfg_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& gnb_du_res_cfg_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& gnb_du_res_cfg_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& gnb_du_res_cfg_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& gnb_du_res_cfg_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void gnb_du_res_cfg_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_cfg_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceConfigurationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_cfg_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 288, 289, 533, 534};
  return map_enum_number(names, 5, idx, "id");
}
bool gnb_du_res_cfg_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 288, 289, 533, 534};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_cfg_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 288:
      return crit_e::reject;
    case 289:
      return crit_e::reject;
    case 533:
      return crit_e::reject;
    case 534:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_cfg_ies_o::value_c gnb_du_res_cfg_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 288:
      ret.set(value_c::types::activ_cells_to_be_upd_list);
      break;
    case 289:
      ret.set(value_c::types::child_nodes_list);
      break;
    case 533:
      ret.set(value_c::types::neighbour_node_cells_list);
      break;
    case 534:
      ret.set(value_c::types::serving_cells_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_cfg_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 288:
      return presence_e::optional;
    case 289:
      return presence_e::optional;
    case 533:
      return presence_e::optional;
    case 534:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_cfg_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::activ_cells_to_be_upd_list:
      c.destroy<activ_cells_to_be_upd_list_l>();
      break;
    case types::child_nodes_list:
      c.destroy<child_nodes_list_l>();
      break;
    case types::neighbour_node_cells_list:
      c.destroy<neighbour_node_cells_list_l>();
      break;
    case types::serving_cells_list:
      c.destroy<serving_cells_list_l>();
      break;
    default:
      break;
  }
}
void gnb_du_res_cfg_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::activ_cells_to_be_upd_list:
      c.init<activ_cells_to_be_upd_list_l>();
      break;
    case types::child_nodes_list:
      c.init<child_nodes_list_l>();
      break;
    case types::neighbour_node_cells_list:
      c.init<neighbour_node_cells_list_l>();
      break;
    case types::serving_cells_list:
      c.init<serving_cells_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }
}
gnb_du_res_cfg_ies_o::value_c::value_c(const gnb_du_res_cfg_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::activ_cells_to_be_upd_list:
      c.init(other.c.get<activ_cells_to_be_upd_list_l>());
      break;
    case types::child_nodes_list:
      c.init(other.c.get<child_nodes_list_l>());
      break;
    case types::neighbour_node_cells_list:
      c.init(other.c.get<neighbour_node_cells_list_l>());
      break;
    case types::serving_cells_list:
      c.init(other.c.get<serving_cells_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }
}
gnb_du_res_cfg_ies_o::value_c& gnb_du_res_cfg_ies_o::value_c::operator=(const gnb_du_res_cfg_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::activ_cells_to_be_upd_list:
      c.set(other.c.get<activ_cells_to_be_upd_list_l>());
      break;
    case types::child_nodes_list:
      c.set(other.c.get<child_nodes_list_l>());
      break;
    case types::neighbour_node_cells_list:
      c.set(other.c.get<neighbour_node_cells_list_l>());
      break;
    case types::serving_cells_list:
      c.set(other.c.get<serving_cells_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_cfg_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
activ_cells_to_be_upd_list_l& gnb_du_res_cfg_ies_o::value_c::activ_cells_to_be_upd_list()
{
  assert_choice_type(types::activ_cells_to_be_upd_list, type_, "Value");
  return c.get<activ_cells_to_be_upd_list_l>();
}
child_nodes_list_l& gnb_du_res_cfg_ies_o::value_c::child_nodes_list()
{
  assert_choice_type(types::child_nodes_list, type_, "Value");
  return c.get<child_nodes_list_l>();
}
neighbour_node_cells_list_l& gnb_du_res_cfg_ies_o::value_c::neighbour_node_cells_list()
{
  assert_choice_type(types::neighbour_node_cells_list, type_, "Value");
  return c.get<neighbour_node_cells_list_l>();
}
serving_cells_list_l& gnb_du_res_cfg_ies_o::value_c::serving_cells_list()
{
  assert_choice_type(types::serving_cells_list, type_, "Value");
  return c.get<serving_cells_list_l>();
}
const uint16_t& gnb_du_res_cfg_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const activ_cells_to_be_upd_list_l& gnb_du_res_cfg_ies_o::value_c::activ_cells_to_be_upd_list() const
{
  assert_choice_type(types::activ_cells_to_be_upd_list, type_, "Value");
  return c.get<activ_cells_to_be_upd_list_l>();
}
const child_nodes_list_l& gnb_du_res_cfg_ies_o::value_c::child_nodes_list() const
{
  assert_choice_type(types::child_nodes_list, type_, "Value");
  return c.get<child_nodes_list_l>();
}
const neighbour_node_cells_list_l& gnb_du_res_cfg_ies_o::value_c::neighbour_node_cells_list() const
{
  assert_choice_type(types::neighbour_node_cells_list, type_, "Value");
  return c.get<neighbour_node_cells_list_l>();
}
const serving_cells_list_l& gnb_du_res_cfg_ies_o::value_c::serving_cells_list() const
{
  assert_choice_type(types::serving_cells_list, type_, "Value");
  return c.get<serving_cells_list_l>();
}
void gnb_du_res_cfg_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::activ_cells_to_be_upd_list:
      j.start_array("Activated-Cells-to-be-Updated-List");
      for (const auto& e1 : c.get<activ_cells_to_be_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::child_nodes_list:
      j.start_array("Child-Nodes-List");
      for (const auto& e1 : c.get<child_nodes_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::neighbour_node_cells_list:
      j.start_array("Neighbour-Node-Cells-List");
      for (const auto& e1 : c.get<neighbour_node_cells_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::serving_cells_list:
      j.start_array("Serving-Cells-List");
      for (const auto& e1 : c.get<serving_cells_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_cfg_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::activ_cells_to_be_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<activ_cells_to_be_upd_list_l>(), 1, 512, true));
      break;
    case types::child_nodes_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<child_nodes_list_l>(), 1, 1024, true));
      break;
    case types::neighbour_node_cells_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<neighbour_node_cells_list_l>(), 1, 1024, true));
      break;
    case types::serving_cells_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<serving_cells_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::activ_cells_to_be_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<activ_cells_to_be_upd_list_l>(), bref, 1, 512, true));
      break;
    case types::child_nodes_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<child_nodes_list_l>(), bref, 1, 1024, true));
      break;
    case types::neighbour_node_cells_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<neighbour_node_cells_list_l>(), bref, 1, 1024, true));
      break;
    case types::serving_cells_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<serving_cells_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_cfg_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceCoordinationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_coordination_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 106, 101, 213};
  return map_enum_number(names, 4, idx, "id");
}
bool gnb_du_res_coordination_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 106, 101, 213};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_coordination_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 106:
      return crit_e::reject;
    case 101:
      return crit_e::reject;
    case 213:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_coordination_request_ies_o::value_c gnb_du_res_coordination_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 106:
      ret.set(value_c::types::request_type);
      break;
    case 101:
      ret.set(value_c::types::eutra_nr_cell_res_coordination_req_container);
      break;
    case 213:
      ret.set(value_c::types::ignore_res_coordination_container);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_coordination_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 106:
      return presence_e::mandatory;
    case 101:
      return presence_e::mandatory;
    case 213:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_coordination_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::eutra_nr_cell_res_coordination_req_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void gnb_du_res_coordination_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::request_type:
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::ignore_res_coordination_container:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
}
gnb_du_res_coordination_request_ies_o::value_c::value_c(const gnb_du_res_coordination_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::request_type:
      c.init(other.c.get<request_type_e>());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ignore_res_coordination_container:
      c.init(other.c.get<ignore_res_coordination_container_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
}
gnb_du_res_coordination_request_ies_o::value_c&
gnb_du_res_coordination_request_ies_o::value_c::operator=(const gnb_du_res_coordination_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::request_type:
      c.set(other.c.get<request_type_e>());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::ignore_res_coordination_container:
      c.set(other.c.get<ignore_res_coordination_container_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_coordination_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
request_type_e& gnb_du_res_coordination_request_ies_o::value_c::request_type()
{
  assert_choice_type(types::request_type, type_, "Value");
  return c.get<request_type_e>();
}
unbounded_octstring<true>&
gnb_du_res_coordination_request_ies_o::value_c::eutra_nr_cell_res_coordination_req_container()
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
ignore_res_coordination_container_e& gnb_du_res_coordination_request_ies_o::value_c::ignore_res_coordination_container()
{
  assert_choice_type(types::ignore_res_coordination_container, type_, "Value");
  return c.get<ignore_res_coordination_container_e>();
}
const uint16_t& gnb_du_res_coordination_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const request_type_e& gnb_du_res_coordination_request_ies_o::value_c::request_type() const
{
  assert_choice_type(types::request_type, type_, "Value");
  return c.get<request_type_e>();
}
const unbounded_octstring<true>&
gnb_du_res_coordination_request_ies_o::value_c::eutra_nr_cell_res_coordination_req_container() const
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const ignore_res_coordination_container_e&
gnb_du_res_coordination_request_ies_o::value_c::ignore_res_coordination_container() const
{
  assert_choice_type(types::ignore_res_coordination_container, type_, "Value");
  return c.get<ignore_res_coordination_container_e>();
}
void gnb_du_res_coordination_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::request_type:
      j.write_str("RequestType", c.get<request_type_e>().to_string());
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::ignore_res_coordination_container:
      j.write_str("IgnoreResourceCoordinationContainer", "yes");
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_coordination_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::request_type:
      HANDLE_CODE(c.get<request_type_e>().pack(bref));
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::ignore_res_coordination_container:
      HANDLE_CODE(c.get<ignore_res_coordination_container_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::request_type:
      HANDLE_CODE(c.get<request_type_e>().unpack(bref));
      break;
    case types::eutra_nr_cell_res_coordination_req_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::ignore_res_coordination_container:
      HANDLE_CODE(c.get<ignore_res_coordination_container_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUResourceCoordinationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_res_coordination_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 102};
  return map_enum_number(names, 2, idx, "id");
}
bool gnb_du_res_coordination_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 102};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_res_coordination_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 102:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_res_coordination_resp_ies_o::value_c gnb_du_res_coordination_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 102:
      ret.set(value_c::types::eutra_nr_cell_res_coordination_req_ack_container);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_res_coordination_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 102:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_res_coordination_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void gnb_du_res_coordination_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
}
gnb_du_res_coordination_resp_ies_o::value_c::value_c(const gnb_du_res_coordination_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
}
gnb_du_res_coordination_resp_ies_o::value_c&
gnb_du_res_coordination_resp_ies_o::value_c::operator=(const gnb_du_res_coordination_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_res_coordination_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
unbounded_octstring<true>&
gnb_du_res_coordination_resp_ies_o::value_c::eutra_nr_cell_res_coordination_req_ack_container()
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_ack_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint16_t& gnb_du_res_coordination_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>&
gnb_du_res_coordination_resp_ies_o::value_c::eutra_nr_cell_res_coordination_req_ack_container() const
{
  assert_choice_type(types::eutra_nr_cell_res_coordination_req_ack_container, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void gnb_du_res_coordination_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::eutra_nr_cell_res_coordination_req_ack_container:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_res_coordination_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// GNBDUStatusIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t gnb_du_status_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 172, 509};
  return map_enum_number(names, 3, idx, "id");
}
bool gnb_du_status_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 172, 509};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e gnb_du_status_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 172:
      return crit_e::reject;
    case 509:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
gnb_du_status_ind_ies_o::value_c gnb_du_status_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 172:
      ret.set(value_c::types::gnb_du_overload_info);
      break;
    case 509:
      ret.set(value_c::types::iab_congestion_ind);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e gnb_du_status_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 172:
      return presence_e::mandatory;
    case 509:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void gnb_du_status_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::iab_congestion_ind:
      c.destroy<iab_congestion_ind_s>();
      break;
    default:
      break;
  }
}
void gnb_du_status_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_du_overload_info:
      break;
    case types::iab_congestion_ind:
      c.init<iab_congestion_ind_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
}
gnb_du_status_ind_ies_o::value_c::value_c(const gnb_du_status_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      c.init(other.c.get<gnb_du_overload_info_e>());
      break;
    case types::iab_congestion_ind:
      c.init(other.c.get<iab_congestion_ind_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
}
gnb_du_status_ind_ies_o::value_c&
gnb_du_status_ind_ies_o::value_c::operator=(const gnb_du_status_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      c.set(other.c.get<gnb_du_overload_info_e>());
      break;
    case types::iab_congestion_ind:
      c.set(other.c.get<iab_congestion_ind_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& gnb_du_status_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
gnb_du_overload_info_e& gnb_du_status_ind_ies_o::value_c::gnb_du_overload_info()
{
  assert_choice_type(types::gnb_du_overload_info, type_, "Value");
  return c.get<gnb_du_overload_info_e>();
}
iab_congestion_ind_s& gnb_du_status_ind_ies_o::value_c::iab_congestion_ind()
{
  assert_choice_type(types::iab_congestion_ind, type_, "Value");
  return c.get<iab_congestion_ind_s>();
}
const uint16_t& gnb_du_status_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const gnb_du_overload_info_e& gnb_du_status_ind_ies_o::value_c::gnb_du_overload_info() const
{
  assert_choice_type(types::gnb_du_overload_info, type_, "Value");
  return c.get<gnb_du_overload_info_e>();
}
const iab_congestion_ind_s& gnb_du_status_ind_ies_o::value_c::iab_congestion_ind() const
{
  assert_choice_type(types::iab_congestion_ind, type_, "Value");
  return c.get<iab_congestion_ind_s>();
}
void gnb_du_status_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_overload_info:
      j.write_str("GNBDUOverloadInformation", c.get<gnb_du_overload_info_e>().to_string());
      break;
    case types::iab_congestion_ind:
      j.write_fieldname("IABCongestionIndication");
      c.get<iab_congestion_ind_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE gnb_du_status_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_overload_info:
      HANDLE_CODE(c.get<gnb_du_overload_info_e>().pack(bref));
      break;
    case types::iab_congestion_ind:
      HANDLE_CODE(c.get<iab_congestion_ind_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_status_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_du_overload_info:
      HANDLE_CODE(c.get<gnb_du_overload_info_e>().unpack(bref));
      break;
    case types::iab_congestion_ind:
      HANDLE_CODE(c.get<iab_congestion_ind_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "gnb_du_status_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABTNLAddressFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_tnl_address_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool iab_tnl_address_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_tnl_address_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_tnl_address_fail_ies_o::value_c iab_tnl_address_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_tnl_address_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_tnl_address_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void iab_tnl_address_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }
}
iab_tnl_address_fail_ies_o::value_c::value_c(const iab_tnl_address_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }
}
iab_tnl_address_fail_ies_o::value_c&
iab_tnl_address_fail_ies_o::value_c::operator=(const iab_tnl_address_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_tnl_address_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& iab_tnl_address_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& iab_tnl_address_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& iab_tnl_address_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& iab_tnl_address_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& iab_tnl_address_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& iab_tnl_address_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& iab_tnl_address_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void iab_tnl_address_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_tnl_address_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABTNLAddressRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_tnl_address_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 297, 296, 292, 513};
  return map_enum_number(names, 5, idx, "id");
}
bool iab_tnl_address_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 297, 296, 292, 513};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_tnl_address_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 297:
      return crit_e::reject;
    case 296:
      return crit_e::reject;
    case 292:
      return crit_e::reject;
    case 513:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_tnl_address_request_ies_o::value_c iab_tnl_address_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 297:
      ret.set(value_c::types::ia_bv4_addresses_requested);
      break;
    case 296:
      ret.set(value_c::types::iab_ip_v6_request_type);
      break;
    case 292:
      ret.set(value_c::types::iab_tnl_addresses_to_rem_list);
      break;
    case 513:
      ret.set(value_c::types::iab_tnl_addresses_exception);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_tnl_address_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 297:
      return presence_e::optional;
    case 296:
      return presence_e::optional;
    case 292:
      return presence_e::optional;
    case 513:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_tnl_address_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ia_bv4_addresses_requested:
      c.destroy<ia_bv4_addresses_requested_s>();
      break;
    case types::iab_ip_v6_request_type:
      c.destroy<iab_ip_v6_request_type_c>();
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.destroy<iab_tnl_addresses_to_rem_list_l>();
      break;
    case types::iab_tnl_addresses_exception:
      c.destroy<iab_tnl_addresses_exception_s>();
      break;
    default:
      break;
  }
}
void iab_tnl_address_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::ia_bv4_addresses_requested:
      c.init<ia_bv4_addresses_requested_s>();
      break;
    case types::iab_ip_v6_request_type:
      c.init<iab_ip_v6_request_type_c>();
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.init<iab_tnl_addresses_to_rem_list_l>();
      break;
    case types::iab_tnl_addresses_exception:
      c.init<iab_tnl_addresses_exception_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }
}
iab_tnl_address_request_ies_o::value_c::value_c(const iab_tnl_address_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ia_bv4_addresses_requested:
      c.init(other.c.get<ia_bv4_addresses_requested_s>());
      break;
    case types::iab_ip_v6_request_type:
      c.init(other.c.get<iab_ip_v6_request_type_c>());
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.init(other.c.get<iab_tnl_addresses_to_rem_list_l>());
      break;
    case types::iab_tnl_addresses_exception:
      c.init(other.c.get<iab_tnl_addresses_exception_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }
}
iab_tnl_address_request_ies_o::value_c&
iab_tnl_address_request_ies_o::value_c::operator=(const iab_tnl_address_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ia_bv4_addresses_requested:
      c.set(other.c.get<ia_bv4_addresses_requested_s>());
      break;
    case types::iab_ip_v6_request_type:
      c.set(other.c.get<iab_ip_v6_request_type_c>());
      break;
    case types::iab_tnl_addresses_to_rem_list:
      c.set(other.c.get<iab_tnl_addresses_to_rem_list_l>());
      break;
    case types::iab_tnl_addresses_exception:
      c.set(other.c.get<iab_tnl_addresses_exception_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_tnl_address_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
ia_bv4_addresses_requested_s& iab_tnl_address_request_ies_o::value_c::ia_bv4_addresses_requested()
{
  assert_choice_type(types::ia_bv4_addresses_requested, type_, "Value");
  return c.get<ia_bv4_addresses_requested_s>();
}
iab_ip_v6_request_type_c& iab_tnl_address_request_ies_o::value_c::iab_ip_v6_request_type()
{
  assert_choice_type(types::iab_ip_v6_request_type, type_, "Value");
  return c.get<iab_ip_v6_request_type_c>();
}
iab_tnl_addresses_to_rem_list_l& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_to_rem_list()
{
  assert_choice_type(types::iab_tnl_addresses_to_rem_list, type_, "Value");
  return c.get<iab_tnl_addresses_to_rem_list_l>();
}
iab_tnl_addresses_exception_s& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_exception()
{
  assert_choice_type(types::iab_tnl_addresses_exception, type_, "Value");
  return c.get<iab_tnl_addresses_exception_s>();
}
const uint16_t& iab_tnl_address_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const ia_bv4_addresses_requested_s& iab_tnl_address_request_ies_o::value_c::ia_bv4_addresses_requested() const
{
  assert_choice_type(types::ia_bv4_addresses_requested, type_, "Value");
  return c.get<ia_bv4_addresses_requested_s>();
}
const iab_ip_v6_request_type_c& iab_tnl_address_request_ies_o::value_c::iab_ip_v6_request_type() const
{
  assert_choice_type(types::iab_ip_v6_request_type, type_, "Value");
  return c.get<iab_ip_v6_request_type_c>();
}
const iab_tnl_addresses_to_rem_list_l& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_to_rem_list() const
{
  assert_choice_type(types::iab_tnl_addresses_to_rem_list, type_, "Value");
  return c.get<iab_tnl_addresses_to_rem_list_l>();
}
const iab_tnl_addresses_exception_s& iab_tnl_address_request_ies_o::value_c::iab_tnl_addresses_exception() const
{
  assert_choice_type(types::iab_tnl_addresses_exception, type_, "Value");
  return c.get<iab_tnl_addresses_exception_s>();
}
void iab_tnl_address_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ia_bv4_addresses_requested:
      j.write_fieldname("IABv4AddressesRequested");
      c.get<ia_bv4_addresses_requested_s>().to_json(j);
      break;
    case types::iab_ip_v6_request_type:
      j.write_fieldname("IABIPv6RequestType");
      c.get<iab_ip_v6_request_type_c>().to_json(j);
      break;
    case types::iab_tnl_addresses_to_rem_list:
      j.start_array("IAB-TNL-Addresses-To-Remove-List");
      for (const auto& e1 : c.get<iab_tnl_addresses_to_rem_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::iab_tnl_addresses_exception:
      j.write_fieldname("IAB-TNL-Addresses-Exception");
      c.get<iab_tnl_addresses_exception_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_tnl_address_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ia_bv4_addresses_requested:
      HANDLE_CODE(c.get<ia_bv4_addresses_requested_s>().pack(bref));
      break;
    case types::iab_ip_v6_request_type:
      HANDLE_CODE(c.get<iab_ip_v6_request_type_c>().pack(bref));
      break;
    case types::iab_tnl_addresses_to_rem_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<iab_tnl_addresses_to_rem_list_l>(), 1, 1024, true));
      break;
    case types::iab_tnl_addresses_exception:
      HANDLE_CODE(c.get<iab_tnl_addresses_exception_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ia_bv4_addresses_requested:
      HANDLE_CODE(c.get<ia_bv4_addresses_requested_s>().unpack(bref));
      break;
    case types::iab_ip_v6_request_type:
      HANDLE_CODE(c.get<iab_ip_v6_request_type_c>().unpack(bref));
      break;
    case types::iab_tnl_addresses_to_rem_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<iab_tnl_addresses_to_rem_list_l>(), bref, 1, 1024, true));
      break;
    case types::iab_tnl_addresses_exception:
      HANDLE_CODE(c.get<iab_tnl_addresses_exception_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABTNLAddressResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_tnl_address_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 294};
  return map_enum_number(names, 2, idx, "id");
}
bool iab_tnl_address_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 294};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_tnl_address_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 294:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_tnl_address_resp_ies_o::value_c iab_tnl_address_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 294:
      ret.set(value_c::types::iab_allocated_tnl_address_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_tnl_address_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 294:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_tnl_address_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::iab_allocated_tnl_address_list:
      c.destroy<iab_allocated_tnl_address_list_l>();
      break;
    default:
      break;
  }
}
void iab_tnl_address_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::iab_allocated_tnl_address_list:
      c.init<iab_allocated_tnl_address_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }
}
iab_tnl_address_resp_ies_o::value_c::value_c(const iab_tnl_address_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::iab_allocated_tnl_address_list:
      c.init(other.c.get<iab_allocated_tnl_address_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }
}
iab_tnl_address_resp_ies_o::value_c&
iab_tnl_address_resp_ies_o::value_c::operator=(const iab_tnl_address_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::iab_allocated_tnl_address_list:
      c.set(other.c.get<iab_allocated_tnl_address_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_tnl_address_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
iab_allocated_tnl_address_list_l& iab_tnl_address_resp_ies_o::value_c::iab_allocated_tnl_address_list()
{
  assert_choice_type(types::iab_allocated_tnl_address_list, type_, "Value");
  return c.get<iab_allocated_tnl_address_list_l>();
}
const uint16_t& iab_tnl_address_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const iab_allocated_tnl_address_list_l& iab_tnl_address_resp_ies_o::value_c::iab_allocated_tnl_address_list() const
{
  assert_choice_type(types::iab_allocated_tnl_address_list, type_, "Value");
  return c.get<iab_allocated_tnl_address_list_l>();
}
void iab_tnl_address_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::iab_allocated_tnl_address_list:
      j.start_array("IAB-Allocated-TNL-Address-List");
      for (const auto& e1 : c.get<iab_allocated_tnl_address_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_tnl_address_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::iab_allocated_tnl_address_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<iab_allocated_tnl_address_list_l>(), 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::iab_allocated_tnl_address_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<iab_allocated_tnl_address_list_l>(), bref, 1, 1024, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_tnl_address_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABUPConfigurationUpdateFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_up_cfg_upd_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool iab_up_cfg_upd_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 77, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_up_cfg_upd_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 77:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_up_cfg_upd_fail_ies_o::value_c iab_up_cfg_upd_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 77:
      ret.set(value_c::types::time_to_wait);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_up_cfg_upd_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 77:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_up_cfg_upd_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void iab_up_cfg_upd_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::time_to_wait:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }
}
iab_up_cfg_upd_fail_ies_o::value_c::value_c(const iab_up_cfg_upd_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.init(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }
}
iab_up_cfg_upd_fail_ies_o::value_c&
iab_up_cfg_upd_fail_ies_o::value_c::operator=(const iab_up_cfg_upd_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::time_to_wait:
      c.set(other.c.get<time_to_wait_e>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_up_cfg_upd_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& iab_up_cfg_upd_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
time_to_wait_e& iab_up_cfg_upd_fail_ies_o::value_c::time_to_wait()
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
crit_diagnostics_s& iab_up_cfg_upd_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& iab_up_cfg_upd_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& iab_up_cfg_upd_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const time_to_wait_e& iab_up_cfg_upd_fail_ies_o::value_c::time_to_wait() const
{
  assert_choice_type(types::time_to_wait, type_, "Value");
  return c.get<time_to_wait_e>();
}
const crit_diagnostics_s& iab_up_cfg_upd_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void iab_up_cfg_upd_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::time_to_wait:
      j.write_str("TimeToWait", c.get<time_to_wait_e>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_up_cfg_upd_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::time_to_wait:
      HANDLE_CODE(c.get<time_to_wait_e>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABUPConfigurationUpdateRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_up_cfg_upd_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 300, 302};
  return map_enum_number(names, 3, idx, "id");
}
bool iab_up_cfg_upd_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 300, 302};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_up_cfg_upd_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 300:
      return crit_e::ignore;
    case 302:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_up_cfg_upd_request_ies_o::value_c iab_up_cfg_upd_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 300:
      ret.set(value_c::types::ul_up_tnl_info_to_upd_list);
      break;
    case 302:
      ret.set(value_c::types::ul_up_tnl_address_to_upd_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_up_cfg_upd_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 300:
      return presence_e::optional;
    case 302:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_up_cfg_upd_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ul_up_tnl_info_to_upd_list:
      c.destroy<ul_up_tnl_info_to_upd_list_l>();
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.destroy<ul_up_tnl_address_to_upd_list_l>();
      break;
    default:
      break;
  }
}
void iab_up_cfg_upd_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::ul_up_tnl_info_to_upd_list:
      c.init<ul_up_tnl_info_to_upd_list_l>();
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.init<ul_up_tnl_address_to_upd_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }
}
iab_up_cfg_upd_request_ies_o::value_c::value_c(const iab_up_cfg_upd_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ul_up_tnl_info_to_upd_list:
      c.init(other.c.get<ul_up_tnl_info_to_upd_list_l>());
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.init(other.c.get<ul_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }
}
iab_up_cfg_upd_request_ies_o::value_c&
iab_up_cfg_upd_request_ies_o::value_c::operator=(const iab_up_cfg_upd_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ul_up_tnl_info_to_upd_list:
      c.set(other.c.get<ul_up_tnl_info_to_upd_list_l>());
      break;
    case types::ul_up_tnl_address_to_upd_list:
      c.set(other.c.get<ul_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_up_cfg_upd_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
ul_up_tnl_info_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_info_to_upd_list()
{
  assert_choice_type(types::ul_up_tnl_info_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_info_to_upd_list_l>();
}
ul_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_address_to_upd_list()
{
  assert_choice_type(types::ul_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_address_to_upd_list_l>();
}
const uint16_t& iab_up_cfg_upd_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const ul_up_tnl_info_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_info_to_upd_list() const
{
  assert_choice_type(types::ul_up_tnl_info_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_info_to_upd_list_l>();
}
const ul_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_request_ies_o::value_c::ul_up_tnl_address_to_upd_list() const
{
  assert_choice_type(types::ul_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<ul_up_tnl_address_to_upd_list_l>();
}
void iab_up_cfg_upd_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ul_up_tnl_info_to_upd_list:
      j.start_array("UL-UP-TNL-Information-to-Update-List");
      for (const auto& e1 : c.get<ul_up_tnl_info_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::ul_up_tnl_address_to_upd_list:
      j.start_array("UL-UP-TNL-Address-to-Update-List");
      for (const auto& e1 : c.get<ul_up_tnl_address_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_up_cfg_upd_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ul_up_tnl_info_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ul_up_tnl_info_to_upd_list_l>(), 1, 32678, true));
      break;
    case types::ul_up_tnl_address_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ul_up_tnl_address_to_upd_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ul_up_tnl_info_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ul_up_tnl_info_to_upd_list_l>(), bref, 1, 32678, true));
      break;
    case types::ul_up_tnl_address_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ul_up_tnl_address_to_upd_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// IABUPConfigurationUpdateResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t iab_up_cfg_upd_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 7, 304};
  return map_enum_number(names, 3, idx, "id");
}
bool iab_up_cfg_upd_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 7, 304};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e iab_up_cfg_upd_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 304:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
iab_up_cfg_upd_resp_ies_o::value_c iab_up_cfg_upd_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 304:
      ret.set(value_c::types::dl_up_tnl_address_to_upd_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e iab_up_cfg_upd_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    case 304:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void iab_up_cfg_upd_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.destroy<dl_up_tnl_address_to_upd_list_l>();
      break;
    default:
      break;
  }
}
void iab_up_cfg_upd_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.init<dl_up_tnl_address_to_upd_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }
}
iab_up_cfg_upd_resp_ies_o::value_c::value_c(const iab_up_cfg_upd_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.init(other.c.get<dl_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }
}
iab_up_cfg_upd_resp_ies_o::value_c&
iab_up_cfg_upd_resp_ies_o::value_c::operator=(const iab_up_cfg_upd_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::dl_up_tnl_address_to_upd_list:
      c.set(other.c.get<dl_up_tnl_address_to_upd_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& iab_up_cfg_upd_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& iab_up_cfg_upd_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
dl_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_resp_ies_o::value_c::dl_up_tnl_address_to_upd_list()
{
  assert_choice_type(types::dl_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<dl_up_tnl_address_to_upd_list_l>();
}
const uint16_t& iab_up_cfg_upd_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& iab_up_cfg_upd_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const dl_up_tnl_address_to_upd_list_l& iab_up_cfg_upd_resp_ies_o::value_c::dl_up_tnl_address_to_upd_list() const
{
  assert_choice_type(types::dl_up_tnl_address_to_upd_list, type_, "Value");
  return c.get<dl_up_tnl_address_to_upd_list_l>();
}
void iab_up_cfg_upd_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::dl_up_tnl_address_to_upd_list:
      j.start_array("DL-UP-TNL-Address-to-Update-List");
      for (const auto& e1 : c.get<dl_up_tnl_address_to_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE iab_up_cfg_upd_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::dl_up_tnl_address_to_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<dl_up_tnl_address_to_upd_list_l>(), 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::dl_up_tnl_address_to_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<dl_up_tnl_address_to_upd_list_l>(), bref, 1, 8, true));
      break;
    default:
      log_invalid_choice_id(type_, "iab_up_cfg_upd_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementActivation-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_activation_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 649, 570};
  return map_enum_number(names, 4, idx, "id");
}
bool meas_activation_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 649, 570};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_activation_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 649:
      return crit_e::reject;
    case 570:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_activation_ies_o::value_c meas_activation_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 649:
      ret.set(value_c::types::activation_request_type);
      break;
    case 570:
      ret.set(value_c::types::prs_meas_info_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_activation_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 649:
      return presence_e::mandatory;
    case 570:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_activation_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::prs_meas_info_list:
      c.destroy<prs_meas_info_list_l>();
      break;
    default:
      break;
  }
}
void meas_activation_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::activation_request_type:
      break;
    case types::prs_meas_info_list:
      c.init<prs_meas_info_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }
}
meas_activation_ies_o::value_c::value_c(const meas_activation_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::activation_request_type:
      c.init(other.c.get<activation_request_type_e>());
      break;
    case types::prs_meas_info_list:
      c.init(other.c.get<prs_meas_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }
}
meas_activation_ies_o::value_c& meas_activation_ies_o::value_c::operator=(const meas_activation_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::activation_request_type:
      c.set(other.c.get<activation_request_type_e>());
      break;
    case types::prs_meas_info_list:
      c.set(other.c.get<prs_meas_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_activation_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_activation_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
activation_request_type_e& meas_activation_ies_o::value_c::activation_request_type()
{
  assert_choice_type(types::activation_request_type, type_, "Value");
  return c.get<activation_request_type_e>();
}
prs_meas_info_list_l& meas_activation_ies_o::value_c::prs_meas_info_list()
{
  assert_choice_type(types::prs_meas_info_list, type_, "Value");
  return c.get<prs_meas_info_list_l>();
}
const uint64_t& meas_activation_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_activation_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const activation_request_type_e& meas_activation_ies_o::value_c::activation_request_type() const
{
  assert_choice_type(types::activation_request_type, type_, "Value");
  return c.get<activation_request_type_e>();
}
const prs_meas_info_list_l& meas_activation_ies_o::value_c::prs_meas_info_list() const
{
  assert_choice_type(types::prs_meas_info_list, type_, "Value");
  return c.get<prs_meas_info_list_l>();
}
void meas_activation_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::activation_request_type:
      j.write_str("ActivationRequestType", c.get<activation_request_type_e>().to_string());
      break;
    case types::prs_meas_info_list:
      j.start_array("PRS-Measurement-Info-List");
      for (const auto& e1 : c.get<prs_meas_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_activation_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::activation_request_type:
      HANDLE_CODE(c.get<activation_request_type_e>().pack(bref));
      break;
    case types::prs_meas_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<prs_meas_info_list_l>(), 1, 4, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_activation_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::activation_request_type:
      HANDLE_CODE(c.get<activation_request_type_e>().unpack(bref));
      break;
    case types::prs_meas_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<prs_meas_info_list_l>(), bref, 1, 4, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_activation_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementPreconfigurationConfirm-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_precfg_confirm_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 650, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool meas_precfg_confirm_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 650, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_precfg_confirm_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 650:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_precfg_confirm_ies_o::value_c meas_precfg_confirm_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 650:
      ret.set(value_c::types::pos_meas_gap_pre_cfg_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_precfg_confirm_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 650:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_precfg_confirm_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_meas_gap_pre_cfg_list:
      c.destroy<pos_meas_gap_pre_cfg_list_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void meas_precfg_confirm_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::pos_meas_gap_pre_cfg_list:
      c.init<pos_meas_gap_pre_cfg_list_s>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }
}
meas_precfg_confirm_ies_o::value_c::value_c(const meas_precfg_confirm_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::pos_meas_gap_pre_cfg_list:
      c.init(other.c.get<pos_meas_gap_pre_cfg_list_s>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }
}
meas_precfg_confirm_ies_o::value_c&
meas_precfg_confirm_ies_o::value_c::operator=(const meas_precfg_confirm_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::pos_meas_gap_pre_cfg_list:
      c.set(other.c.get<pos_meas_gap_pre_cfg_list_s>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
pos_meas_gap_pre_cfg_list_s& meas_precfg_confirm_ies_o::value_c::pos_meas_gap_pre_cfg_list()
{
  assert_choice_type(types::pos_meas_gap_pre_cfg_list, type_, "Value");
  return c.get<pos_meas_gap_pre_cfg_list_s>();
}
crit_diagnostics_s& meas_precfg_confirm_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_precfg_confirm_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const pos_meas_gap_pre_cfg_list_s& meas_precfg_confirm_ies_o::value_c::pos_meas_gap_pre_cfg_list() const
{
  assert_choice_type(types::pos_meas_gap_pre_cfg_list, type_, "Value");
  return c.get<pos_meas_gap_pre_cfg_list_s>();
}
const crit_diagnostics_s& meas_precfg_confirm_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void meas_precfg_confirm_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::pos_meas_gap_pre_cfg_list:
      j.write_fieldname("PosMeasGapPreConfigList");
      c.get<pos_meas_gap_pre_cfg_list_s>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_precfg_confirm_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::pos_meas_gap_pre_cfg_list:
      HANDLE_CODE(c.get<pos_meas_gap_pre_cfg_list_s>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_confirm_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::pos_meas_gap_pre_cfg_list:
      HANDLE_CODE(c.get<pos_meas_gap_pre_cfg_list_s>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_confirm_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementPreconfigurationRefuse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_precfg_refuse_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool meas_precfg_refuse_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_precfg_refuse_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_precfg_refuse_ies_o::value_c meas_precfg_refuse_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_precfg_refuse_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_precfg_refuse_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void meas_precfg_refuse_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }
}
meas_precfg_refuse_ies_o::value_c::value_c(const meas_precfg_refuse_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }
}
meas_precfg_refuse_ies_o::value_c&
meas_precfg_refuse_ies_o::value_c::operator=(const meas_precfg_refuse_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& meas_precfg_refuse_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& meas_precfg_refuse_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_precfg_refuse_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& meas_precfg_refuse_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& meas_precfg_refuse_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void meas_precfg_refuse_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_precfg_refuse_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_refuse_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_refuse_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MeasurementPreconfigurationRequired-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t meas_precfg_required_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 569};
  return map_enum_number(names, 3, idx, "id");
}
bool meas_precfg_required_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 569};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e meas_precfg_required_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 569:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
meas_precfg_required_ies_o::value_c meas_precfg_required_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 569:
      ret.set(value_c::types::trp_prs_info_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e meas_precfg_required_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 569:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void meas_precfg_required_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_prs_info_list:
      c.destroy<trp_prs_info_list_l>();
      break;
    default:
      break;
  }
}
void meas_precfg_required_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trp_prs_info_list:
      c.init<trp_prs_info_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }
}
meas_precfg_required_ies_o::value_c::value_c(const meas_precfg_required_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trp_prs_info_list:
      c.init(other.c.get<trp_prs_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }
}
meas_precfg_required_ies_o::value_c&
meas_precfg_required_ies_o::value_c::operator=(const meas_precfg_required_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trp_prs_info_list:
      c.set(other.c.get<trp_prs_info_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }

  return *this;
}
uint64_t& meas_precfg_required_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& meas_precfg_required_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
trp_prs_info_list_l& meas_precfg_required_ies_o::value_c::trp_prs_info_list()
{
  assert_choice_type(types::trp_prs_info_list, type_, "Value");
  return c.get<trp_prs_info_list_l>();
}
const uint64_t& meas_precfg_required_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& meas_precfg_required_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const trp_prs_info_list_l& meas_precfg_required_ies_o::value_c::trp_prs_info_list() const
{
  assert_choice_type(types::trp_prs_info_list, type_, "Value");
  return c.get<trp_prs_info_list_l>();
}
void meas_precfg_required_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trp_prs_info_list:
      j.start_array("TRP-PRS-Info-List");
      for (const auto& e1 : c.get<trp_prs_info_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE meas_precfg_required_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trp_prs_info_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_prs_info_list_l>(), 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_required_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trp_prs_info_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_prs_info_list_l>(), bref, 1, 256, true));
      break;
    default:
      log_invalid_choice_id(type_, "meas_precfg_required_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextModificationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_mod_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_context_mod_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_mod_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_mod_fail_ies_o::value_c multicast_context_mod_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_mod_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_mod_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_mod_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }
}
multicast_context_mod_fail_ies_o::value_c::value_c(const multicast_context_mod_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }
}
multicast_context_mod_fail_ies_o::value_c&
multicast_context_mod_fail_ies_o::value_c::operator=(const multicast_context_mod_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_mod_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& multicast_context_mod_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_mod_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_mod_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& multicast_context_mod_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_mod_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_mod_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextModificationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_mod_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 481, 500, 494, 496};
  return map_enum_number(names, 6, idx, "id");
}
bool multicast_context_mod_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 481, 500, 494, 496};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_mod_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 500:
      return crit_e::reject;
    case 494:
      return crit_e::reject;
    case 496:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_mod_request_ies_o::value_c multicast_context_mod_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 500:
      ret.set(value_c::types::multicast_m_rbs_to_be_setup_mod_list);
      break;
    case 494:
      ret.set(value_c::types::multicast_m_rbs_to_be_modified_list);
      break;
    case 496:
      ret.set(value_c::types::multicast_m_rbs_to_be_released_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_mod_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 500:
      return presence_e::optional;
    case 494:
      return presence_e::optional;
    case 496:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_mod_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.destroy<multicast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.destroy<multicast_m_rbs_to_be_modified_list_l>();
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.destroy<multicast_m_rbs_to_be_released_list_l>();
      break;
    default:
      break;
  }
}
void multicast_context_mod_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.init<multicast_m_rbs_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.init<multicast_m_rbs_to_be_modified_list_l>();
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.init<multicast_m_rbs_to_be_released_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }
}
multicast_context_mod_request_ies_o::value_c::value_c(const multicast_context_mod_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.init(other.c.get<multicast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.init(other.c.get<multicast_m_rbs_to_be_modified_list_l>());
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.init(other.c.get<multicast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }
}
multicast_context_mod_request_ies_o::value_c&
multicast_context_mod_request_ies_o::value_c::operator=(const multicast_context_mod_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      c.set(other.c.get<multicast_m_rbs_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      c.set(other.c.get<multicast_m_rbs_to_be_modified_list_l>());
      break;
    case types::multicast_m_rbs_to_be_released_list:
      c.set(other.c.get<multicast_m_rbs_to_be_released_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_service_area_c& multicast_context_mod_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
multicast_m_rbs_to_be_setup_mod_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_setup_mod_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_mod_list_l>();
}
multicast_m_rbs_to_be_modified_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_modified_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_modified_list_l>();
}
multicast_m_rbs_to_be_released_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_released_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_released_list_l>();
}
const uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_mod_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_service_area_c& multicast_context_mod_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const multicast_m_rbs_to_be_setup_mod_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_setup_mod_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_mod_list_l>();
}
const multicast_m_rbs_to_be_modified_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_modified_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_modified_list_l>();
}
const multicast_m_rbs_to_be_released_list_l&
multicast_context_mod_request_ies_o::value_c::multicast_m_rbs_to_be_released_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_released_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_released_list_l>();
}
void multicast_context_mod_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      j.start_array("MulticastMRBs-ToBeSetupMod-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      j.start_array("MulticastMRBs-ToBeModified-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_to_be_released_list:
      j.start_array("MulticastMRBs-ToBeReleased-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_released_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_mod_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_released_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_released_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_to_be_released_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_released_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextModificationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_mod_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 492, 486, 488, 482, 7};
  return map_enum_number(names, 7, idx, "id");
}
bool multicast_context_mod_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 492, 486, 488, 482, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_mod_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 492:
      return crit_e::reject;
    case 486:
      return crit_e::ignore;
    case 488:
      return crit_e::reject;
    case 482:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_mod_resp_ies_o::value_c multicast_context_mod_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 492:
      ret.set(value_c::types::multicast_m_rbs_setup_mod_list);
      break;
    case 486:
      ret.set(value_c::types::multicast_m_rbs_failed_to_be_setup_mod_list);
      break;
    case 488:
      ret.set(value_c::types::multicast_m_rbs_modified_list);
      break;
    case 482:
      ret.set(value_c::types::multicast_m_rbs_failed_to_be_modified_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_mod_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 492:
      return presence_e::optional;
    case 486:
      return presence_e::optional;
    case 488:
      return presence_e::optional;
    case 482:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_mod_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::multicast_m_rbs_setup_mod_list:
      c.destroy<multicast_m_rbs_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.destroy<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_modified_list:
      c.destroy<multicast_m_rbs_modified_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.destroy<multicast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_mod_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::multicast_m_rbs_setup_mod_list:
      c.init<multicast_m_rbs_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.init<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
      break;
    case types::multicast_m_rbs_modified_list:
      c.init<multicast_m_rbs_modified_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.init<multicast_m_rbs_failed_to_be_modified_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }
}
multicast_context_mod_resp_ies_o::value_c::value_c(const multicast_context_mod_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_mod_list:
      c.init(other.c.get<multicast_m_rbs_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.init(other.c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_modified_list:
      c.init(other.c.get<multicast_m_rbs_modified_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.init(other.c.get<multicast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }
}
multicast_context_mod_resp_ies_o::value_c&
multicast_context_mod_resp_ies_o::value_c::operator=(const multicast_context_mod_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_mod_list:
      c.set(other.c.get<multicast_m_rbs_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      c.set(other.c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>());
      break;
    case types::multicast_m_rbs_modified_list:
      c.set(other.c.get<multicast_m_rbs_modified_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      c.set(other.c.get<multicast_m_rbs_failed_to_be_modified_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
multicast_m_rbs_setup_mod_list_l& multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_setup_mod_list()
{
  assert_choice_type(types::multicast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_mod_list_l>();
}
multicast_m_rbs_failed_to_be_setup_mod_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_mod_list()
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
}
multicast_m_rbs_modified_list_l& multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_modified_list()
{
  assert_choice_type(types::multicast_m_rbs_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_modified_list_l>();
}
multicast_m_rbs_failed_to_be_modified_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_modified_list()
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_modified_list_l>();
}
crit_diagnostics_s& multicast_context_mod_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_mod_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const multicast_m_rbs_setup_mod_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_setup_mod_list() const
{
  assert_choice_type(types::multicast_m_rbs_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_mod_list_l>();
}
const multicast_m_rbs_failed_to_be_setup_mod_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_mod_list() const
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_mod_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>();
}
const multicast_m_rbs_modified_list_l& multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_modified_list() const
{
  assert_choice_type(types::multicast_m_rbs_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_modified_list_l>();
}
const multicast_m_rbs_failed_to_be_modified_list_l&
multicast_context_mod_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_modified_list() const
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_modified_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_modified_list_l>();
}
const crit_diagnostics_s& multicast_context_mod_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_mod_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_mod_list:
      j.start_array("MulticastMRBs-SetupMod-List");
      for (const auto& e1 : c.get<multicast_m_rbs_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      j.start_array("MulticastMRBs-FailedToBeSetupMod-List");
      for (const auto& e1 : c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_modified_list:
      j.start_array("MulticastMRBs-Modified-List");
      for (const auto& e1 : c.get<multicast_m_rbs_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      j.start_array("MulticastMRBs-FailedToBeModified-List");
      for (const auto& e1 : c.get<multicast_m_rbs_failed_to_be_modified_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_mod_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_modified_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_failed_to_be_modified_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_mod_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_failed_to_be_setup_mod_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_modified_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_failed_to_be_modified_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_mod_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_context_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_release_cmd_ies_o::value_c multicast_context_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void multicast_context_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }
}
multicast_context_release_cmd_ies_o::value_c::value_c(const multicast_context_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }
}
multicast_context_release_cmd_ies_o::value_c&
multicast_context_release_cmd_ies_o::value_c::operator=(const multicast_context_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void multicast_context_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_context_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_release_complete_ies_o::value_c
multicast_context_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }
}
multicast_context_release_complete_ies_o::value_c::value_c(
    const multicast_context_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }
}
multicast_context_release_complete_ies_o::value_c& multicast_context_release_complete_ies_o::value_c::operator=(
    const multicast_context_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
crit_diagnostics_s& multicast_context_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const crit_diagnostics_s& multicast_context_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextReleaseRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_release_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_context_release_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_release_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_release_request_ies_o::value_c multicast_context_release_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_release_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_release_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void multicast_context_release_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }
}
multicast_context_release_request_ies_o::value_c::value_c(const multicast_context_release_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }
}
multicast_context_release_request_ies_o::value_c& multicast_context_release_request_ies_o::value_c::operator=(
    const multicast_context_release_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_release_request_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& multicast_context_release_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_release_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_release_request_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void multicast_context_release_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_release_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_release_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_context_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_setup_fail_ies_o::value_c multicast_context_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::optional;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }
}
multicast_context_setup_fail_ies_o::value_c::value_c(const multicast_context_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }
}
multicast_context_setup_fail_ies_o::value_c&
multicast_context_setup_fail_ies_o::value_c::operator=(const multicast_context_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& multicast_context_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& multicast_context_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& multicast_context_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& multicast_context_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 455, 481, 456, 498};
  return map_enum_number(names, 5, idx, "id");
}
bool multicast_context_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 455, 481, 456, 498};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 455:
      return crit_e::reject;
    case 481:
      return crit_e::reject;
    case 456:
      return crit_e::reject;
    case 498:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_setup_request_ies_o::value_c multicast_context_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 455:
      ret.set(value_c::types::mbs_session_id);
      break;
    case 481:
      ret.set(value_c::types::mbs_service_area);
      break;
    case 456:
      ret.set(value_c::types::snssai);
      break;
    case 498:
      ret.set(value_c::types::multicast_m_rbs_to_be_setup_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 455:
      return presence_e::mandatory;
    case 481:
      return presence_e::optional;
    case 456:
      return presence_e::mandatory;
    case 498:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_session_id:
      c.destroy<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.destroy<mbs_service_area_c>();
      break;
    case types::snssai:
      c.destroy<snssai_s>();
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.destroy<multicast_m_rbs_to_be_setup_list_l>();
      break;
    default:
      break;
  }
}
void multicast_context_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::mbs_session_id:
      c.init<mbs_session_id_s>();
      break;
    case types::mbs_service_area:
      c.init<mbs_service_area_c>();
      break;
    case types::snssai:
      c.init<snssai_s>();
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.init<multicast_m_rbs_to_be_setup_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }
}
multicast_context_setup_request_ies_o::value_c::value_c(const multicast_context_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.init(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.init(other.c.get<mbs_service_area_c>());
      break;
    case types::snssai:
      c.init(other.c.get<snssai_s>());
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.init(other.c.get<multicast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }
}
multicast_context_setup_request_ies_o::value_c&
multicast_context_setup_request_ies_o::value_c::operator=(const multicast_context_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      c.set(other.c.get<mbs_session_id_s>());
      break;
    case types::mbs_service_area:
      c.set(other.c.get<mbs_service_area_c>());
      break;
    case types::snssai:
      c.set(other.c.get<snssai_s>());
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      c.set(other.c.get<multicast_m_rbs_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_session_id_s& multicast_context_setup_request_ies_o::value_c::mbs_session_id()
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
mbs_service_area_c& multicast_context_setup_request_ies_o::value_c::mbs_service_area()
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
snssai_s& multicast_context_setup_request_ies_o::value_c::snssai()
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
multicast_m_rbs_to_be_setup_list_l& multicast_context_setup_request_ies_o::value_c::multicast_m_rbs_to_be_setup_list()
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_list_l>();
}
const uint64_t& multicast_context_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_session_id_s& multicast_context_setup_request_ies_o::value_c::mbs_session_id() const
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
const mbs_service_area_c& multicast_context_setup_request_ies_o::value_c::mbs_service_area() const
{
  assert_choice_type(types::mbs_service_area, type_, "Value");
  return c.get<mbs_service_area_c>();
}
const snssai_s& multicast_context_setup_request_ies_o::value_c::snssai() const
{
  assert_choice_type(types::snssai, type_, "Value");
  return c.get<snssai_s>();
}
const multicast_m_rbs_to_be_setup_list_l&
multicast_context_setup_request_ies_o::value_c::multicast_m_rbs_to_be_setup_list() const
{
  assert_choice_type(types::multicast_m_rbs_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_to_be_setup_list_l>();
}
void multicast_context_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_session_id:
      j.write_fieldname("MBS-Session-ID");
      c.get<mbs_session_id_s>().to_json(j);
      break;
    case types::mbs_service_area:
      j.write_fieldname("MBS-ServiceArea");
      c.get<mbs_service_area_c>().to_json(j);
      break;
    case types::snssai:
      j.write_fieldname("SNSSAI");
      c.get<snssai_s>().to_json(j);
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      j.start_array("MulticastMRBs-ToBeSetup-List");
      for (const auto& e1 : c.get<multicast_m_rbs_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().pack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().pack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().pack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_to_be_setup_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().unpack(bref));
      break;
    case types::mbs_service_area:
      HANDLE_CODE(c.get<mbs_service_area_c>().unpack(bref));
      break;
    case types::snssai:
      HANDLE_CODE(c.get<snssai_s>().unpack(bref));
      break;
    case types::multicast_m_rbs_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastContextSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_context_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 490, 484, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool multicast_context_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 490, 484, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_context_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 490:
      return crit_e::reject;
    case 484:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_context_setup_resp_ies_o::value_c multicast_context_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 490:
      ret.set(value_c::types::multicast_m_rbs_setup_list);
      break;
    case 484:
      ret.set(value_c::types::multicast_m_rbs_failed_to_be_setup_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_context_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 490:
      return presence_e::mandatory;
    case 484:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_context_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::multicast_m_rbs_setup_list:
      c.destroy<multicast_m_rbs_setup_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.destroy<multicast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_context_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::multicast_m_rbs_setup_list:
      c.init<multicast_m_rbs_setup_list_l>();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.init<multicast_m_rbs_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }
}
multicast_context_setup_resp_ies_o::value_c::value_c(const multicast_context_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_list:
      c.init(other.c.get<multicast_m_rbs_setup_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.init(other.c.get<multicast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }
}
multicast_context_setup_resp_ies_o::value_c&
multicast_context_setup_resp_ies_o::value_c::operator=(const multicast_context_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_list:
      c.set(other.c.get<multicast_m_rbs_setup_list_l>());
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      c.set(other.c.get<multicast_m_rbs_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
multicast_m_rbs_setup_list_l& multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_setup_list()
{
  assert_choice_type(types::multicast_m_rbs_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_list_l>();
}
multicast_m_rbs_failed_to_be_setup_list_l&
multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_list()
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_list_l>();
}
crit_diagnostics_s& multicast_context_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_context_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const multicast_m_rbs_setup_list_l& multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_setup_list() const
{
  assert_choice_type(types::multicast_m_rbs_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_setup_list_l>();
}
const multicast_m_rbs_failed_to_be_setup_list_l&
multicast_context_setup_resp_ies_o::value_c::multicast_m_rbs_failed_to_be_setup_list() const
{
  assert_choice_type(types::multicast_m_rbs_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_m_rbs_failed_to_be_setup_list_l>();
}
const crit_diagnostics_s& multicast_context_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_context_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::multicast_m_rbs_setup_list:
      j.start_array("MulticastMRBs-Setup-List");
      for (const auto& e1 : c.get<multicast_m_rbs_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      j.start_array("MulticastMRBs-FailedToBeSetup-List");
      for (const auto& e1 : c.get<multicast_m_rbs_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_context_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_setup_list_l>(), 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_m_rbs_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::multicast_m_rbs_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_m_rbs_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_m_rbs_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_context_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionReleaseCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_release_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 0};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_distribution_release_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_release_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_release_cmd_ies_o::value_c
multicast_distribution_release_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_release_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_release_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void multicast_distribution_release_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }
}
multicast_distribution_release_cmd_ies_o::value_c::value_c(
    const multicast_distribution_release_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }
}
multicast_distribution_release_cmd_ies_o::value_c& multicast_distribution_release_cmd_ies_o::value_c::operator=(
    const multicast_distribution_release_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_cmd_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
cause_c& multicast_distribution_release_cmd_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_release_cmd_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_cmd_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const cause_c& multicast_distribution_release_cmd_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void multicast_distribution_release_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_release_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionReleaseCompleteIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_release_complete_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_distribution_release_complete_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_release_complete_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_release_complete_ies_o::value_c
multicast_distribution_release_complete_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_release_complete_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_release_complete_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_distribution_release_complete_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }
}
multicast_distribution_release_complete_ies_o::value_c::value_c(
    const multicast_distribution_release_complete_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }
}
multicast_distribution_release_complete_ies_o::value_c&
multicast_distribution_release_complete_ies_o::value_c::operator=(
    const multicast_distribution_release_complete_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_complete_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
crit_diagnostics_s& multicast_distribution_release_complete_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_release_complete_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_release_complete_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const crit_diagnostics_s& multicast_distribution_release_complete_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_distribution_release_complete_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_release_complete_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_complete_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_release_complete_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionSetupFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_setup_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool multicast_distribution_setup_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_setup_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::ignore;
    case 502:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_setup_fail_ies_o::value_c multicast_distribution_setup_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_setup_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::optional;
    case 502:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_setup_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void multicast_distribution_setup_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }
}
multicast_distribution_setup_fail_ies_o::value_c::value_c(const multicast_distribution_setup_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }
}
multicast_distribution_setup_fail_ies_o::value_c& multicast_distribution_setup_fail_ies_o::value_c::operator=(
    const multicast_distribution_setup_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_fail_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
cause_c& multicast_distribution_setup_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& multicast_distribution_setup_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_setup_fail_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_fail_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const cause_c& multicast_distribution_setup_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& multicast_distribution_setup_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void multicast_distribution_setup_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_setup_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionSetupRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_setup_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 503};
  return map_enum_number(names, 4, idx, "id");
}
bool multicast_distribution_setup_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 503};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_setup_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 503:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_setup_request_ies_o::value_c
multicast_distribution_setup_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 503:
      ret.set(value_c::types::multicast_f1_u_context_to_be_setup_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_setup_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 503:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_setup_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.destroy<multicast_f1_u_context_to_be_setup_list_l>();
      break;
    default:
      break;
  }
}
void multicast_distribution_setup_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.init<multicast_f1_u_context_to_be_setup_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }
}
multicast_distribution_setup_request_ies_o::value_c::value_c(
    const multicast_distribution_setup_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.init(other.c.get<multicast_f1_u_context_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }
}
multicast_distribution_setup_request_ies_o::value_c& multicast_distribution_setup_request_ies_o::value_c::operator=(
    const multicast_distribution_setup_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      c.set(other.c.get<multicast_f1_u_context_to_be_setup_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_request_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
multicast_f1_u_context_to_be_setup_list_l&
multicast_distribution_setup_request_ies_o::value_c::multicast_f1_u_context_to_be_setup_list()
{
  assert_choice_type(types::multicast_f1_u_context_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_to_be_setup_list_l>();
}
const uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_setup_request_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_request_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const multicast_f1_u_context_to_be_setup_list_l&
multicast_distribution_setup_request_ies_o::value_c::multicast_f1_u_context_to_be_setup_list() const
{
  assert_choice_type(types::multicast_f1_u_context_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_to_be_setup_list_l>();
}
void multicast_distribution_setup_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      j.start_array("MulticastF1UContext-ToBeSetup-List");
      for (const auto& e1 : c.get<multicast_f1_u_context_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_setup_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_f1_u_context_to_be_setup_list_l>(), 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::multicast_f1_u_context_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_f1_u_context_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastDistributionSetupResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_distribution_setup_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {451, 452, 502, 505, 507, 7, 681};
  return map_enum_number(names, 7, idx, "id");
}
bool multicast_distribution_setup_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {451, 452, 502, 505, 507, 7, 681};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_distribution_setup_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 451:
      return crit_e::reject;
    case 452:
      return crit_e::reject;
    case 502:
      return crit_e::reject;
    case 505:
      return crit_e::reject;
    case 507:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 681:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_distribution_setup_resp_ies_o::value_c multicast_distribution_setup_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 451:
      ret.set(value_c::types::gnb_cu_mbs_f1ap_id);
      break;
    case 452:
      ret.set(value_c::types::gnb_du_mbs_f1ap_id);
      break;
    case 502:
      ret.set(value_c::types::mbs_multicast_f1_u_context_descriptor);
      break;
    case 505:
      ret.set(value_c::types::multicast_f1_u_context_setup_list);
      break;
    case 507:
      ret.set(value_c::types::multicast_f1_u_context_failed_to_be_setup_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 681:
      ret.set(value_c::types::multicast_f1_u_context_ref_cu);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_distribution_setup_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 451:
      return presence_e::mandatory;
    case 452:
      return presence_e::mandatory;
    case 502:
      return presence_e::mandatory;
    case 505:
      return presence_e::mandatory;
    case 507:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 681:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_distribution_setup_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_multicast_f1_u_context_descriptor:
      c.destroy<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_setup_list:
      c.destroy<multicast_f1_u_context_setup_list_l>();
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.destroy<multicast_f1_u_context_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.destroy<fixed_octstring<4, true>>();
      break;
    default:
      break;
  }
}
void multicast_distribution_setup_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      break;
    case types::gnb_du_mbs_f1ap_id:
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init<mbs_multicast_f1_u_context_descriptor_s>();
      break;
    case types::multicast_f1_u_context_setup_list:
      c.init<multicast_f1_u_context_setup_list_l>();
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.init<multicast_f1_u_context_failed_to_be_setup_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.init<fixed_octstring<4, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }
}
multicast_distribution_setup_resp_ies_o::value_c::value_c(const multicast_distribution_setup_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.init(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_setup_list:
      c.init(other.c.get<multicast_f1_u_context_setup_list_l>());
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.init(other.c.get<multicast_f1_u_context_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.init(other.c.get<fixed_octstring<4, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }
}
multicast_distribution_setup_resp_ies_o::value_c& multicast_distribution_setup_resp_ies_o::value_c::operator=(
    const multicast_distribution_setup_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      c.set(other.c.get<mbs_multicast_f1_u_context_descriptor_s>());
      break;
    case types::multicast_f1_u_context_setup_list:
      c.set(other.c.get<multicast_f1_u_context_setup_list_l>());
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      c.set(other.c.get<multicast_f1_u_context_failed_to_be_setup_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::multicast_f1_u_context_ref_cu:
      c.set(other.c.get<fixed_octstring<4, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id()
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_resp_ies_o::value_c::mbs_multicast_f1_u_context_descriptor()
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
multicast_f1_u_context_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_setup_list()
{
  assert_choice_type(types::multicast_f1_u_context_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_setup_list_l>();
}
multicast_f1_u_context_failed_to_be_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_failed_to_be_setup_list()
{
  assert_choice_type(types::multicast_f1_u_context_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_failed_to_be_setup_list_l>();
}
crit_diagnostics_s& multicast_distribution_setup_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
fixed_octstring<4, true>& multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_ref_cu()
{
  assert_choice_type(types::multicast_f1_u_context_ref_cu, type_, "Value");
  return c.get<fixed_octstring<4, true>>();
}
const uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_cu_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& multicast_distribution_setup_resp_ies_o::value_c::gnb_du_mbs_f1ap_id() const
{
  assert_choice_type(types::gnb_du_mbs_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const mbs_multicast_f1_u_context_descriptor_s&
multicast_distribution_setup_resp_ies_o::value_c::mbs_multicast_f1_u_context_descriptor() const
{
  assert_choice_type(types::mbs_multicast_f1_u_context_descriptor, type_, "Value");
  return c.get<mbs_multicast_f1_u_context_descriptor_s>();
}
const multicast_f1_u_context_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_setup_list() const
{
  assert_choice_type(types::multicast_f1_u_context_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_setup_list_l>();
}
const multicast_f1_u_context_failed_to_be_setup_list_l&
multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_failed_to_be_setup_list() const
{
  assert_choice_type(types::multicast_f1_u_context_failed_to_be_setup_list, type_, "Value");
  return c.get<multicast_f1_u_context_failed_to_be_setup_list_l>();
}
const crit_diagnostics_s& multicast_distribution_setup_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const fixed_octstring<4, true>& multicast_distribution_setup_resp_ies_o::value_c::multicast_f1_u_context_ref_cu() const
{
  assert_choice_type(types::multicast_f1_u_context_ref_cu, type_, "Value");
  return c.get<fixed_octstring<4, true>>();
}
void multicast_distribution_setup_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_mbs_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      j.write_fieldname("MBSMulticastF1UContextDescriptor");
      c.get<mbs_multicast_f1_u_context_descriptor_s>().to_json(j);
      break;
    case types::multicast_f1_u_context_setup_list:
      j.start_array("MulticastF1UContext-Setup-List");
      for (const auto& e1 : c.get<multicast_f1_u_context_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      j.start_array("MulticastF1UContext-FailedToBeSetup-List");
      for (const auto& e1 : c.get<multicast_f1_u_context_failed_to_be_setup_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::multicast_f1_u_context_ref_cu:
      j.write_str("OCTET STRING", c.get<fixed_octstring<4, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_distribution_setup_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().pack(bref));
      break;
    case types::multicast_f1_u_context_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_f1_u_context_setup_list_l>(), 1, 32, true));
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<multicast_f1_u_context_failed_to_be_setup_list_l>(), 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::multicast_f1_u_context_ref_cu:
      HANDLE_CODE((c.get<fixed_octstring<4, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_mbs_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::mbs_multicast_f1_u_context_descriptor:
      HANDLE_CODE(c.get<mbs_multicast_f1_u_context_descriptor_s>().unpack(bref));
      break;
    case types::multicast_f1_u_context_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_f1_u_context_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::multicast_f1_u_context_failed_to_be_setup_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<multicast_f1_u_context_failed_to_be_setup_list_l>(), bref, 1, 32, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::multicast_f1_u_context_ref_cu:
      HANDLE_CODE((c.get<fixed_octstring<4, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_distribution_setup_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// MulticastGroupPagingIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t multicast_group_paging_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {455, 479, 687};
  return map_enum_number(names, 3, idx, "id");
}
bool multicast_group_paging_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {455, 479, 687};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e multicast_group_paging_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 455:
      return crit_e::reject;
    case 479:
      return crit_e::ignore;
    case 687:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
multicast_group_paging_ies_o::value_c multicast_group_paging_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 455:
      ret.set(value_c::types::mbs_session_id);
      break;
    case 479:
      ret.set(value_c::types::ue_id_list_for_paging_list);
      break;
    case 687:
      ret.set(value_c::types::mc_paging_cell_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e multicast_group_paging_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 455:
      return presence_e::mandatory;
    case 479:
      return presence_e::optional;
    case 687:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void multicast_group_paging_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::mbs_session_id:
      c.destroy<mbs_session_id_s>();
      break;
    case types::ue_id_list_for_paging_list:
      c.destroy<ue_id_list_for_paging_list_l>();
      break;
    case types::mc_paging_cell_list:
      c.destroy<mc_paging_cell_list_l>();
      break;
    default:
      break;
  }
}
void multicast_group_paging_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::mbs_session_id:
      c.init<mbs_session_id_s>();
      break;
    case types::ue_id_list_for_paging_list:
      c.init<ue_id_list_for_paging_list_l>();
      break;
    case types::mc_paging_cell_list:
      c.init<mc_paging_cell_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }
}
multicast_group_paging_ies_o::value_c::value_c(const multicast_group_paging_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::mbs_session_id:
      c.init(other.c.get<mbs_session_id_s>());
      break;
    case types::ue_id_list_for_paging_list:
      c.init(other.c.get<ue_id_list_for_paging_list_l>());
      break;
    case types::mc_paging_cell_list:
      c.init(other.c.get<mc_paging_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }
}
multicast_group_paging_ies_o::value_c&
multicast_group_paging_ies_o::value_c::operator=(const multicast_group_paging_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::mbs_session_id:
      c.set(other.c.get<mbs_session_id_s>());
      break;
    case types::ue_id_list_for_paging_list:
      c.set(other.c.get<ue_id_list_for_paging_list_l>());
      break;
    case types::mc_paging_cell_list:
      c.set(other.c.get<mc_paging_cell_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }

  return *this;
}
mbs_session_id_s& multicast_group_paging_ies_o::value_c::mbs_session_id()
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
ue_id_list_for_paging_list_l& multicast_group_paging_ies_o::value_c::ue_id_list_for_paging_list()
{
  assert_choice_type(types::ue_id_list_for_paging_list, type_, "Value");
  return c.get<ue_id_list_for_paging_list_l>();
}
mc_paging_cell_list_l& multicast_group_paging_ies_o::value_c::mc_paging_cell_list()
{
  assert_choice_type(types::mc_paging_cell_list, type_, "Value");
  return c.get<mc_paging_cell_list_l>();
}
const mbs_session_id_s& multicast_group_paging_ies_o::value_c::mbs_session_id() const
{
  assert_choice_type(types::mbs_session_id, type_, "Value");
  return c.get<mbs_session_id_s>();
}
const ue_id_list_for_paging_list_l& multicast_group_paging_ies_o::value_c::ue_id_list_for_paging_list() const
{
  assert_choice_type(types::ue_id_list_for_paging_list, type_, "Value");
  return c.get<ue_id_list_for_paging_list_l>();
}
const mc_paging_cell_list_l& multicast_group_paging_ies_o::value_c::mc_paging_cell_list() const
{
  assert_choice_type(types::mc_paging_cell_list, type_, "Value");
  return c.get<mc_paging_cell_list_l>();
}
void multicast_group_paging_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::mbs_session_id:
      j.write_fieldname("MBS-Session-ID");
      c.get<mbs_session_id_s>().to_json(j);
      break;
    case types::ue_id_list_for_paging_list:
      j.start_array("UEIdentity-List-For-Paging-List");
      for (const auto& e1 : c.get<ue_id_list_for_paging_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::mc_paging_cell_list:
      j.start_array("MC-PagingCell-list");
      for (const auto& e1 : c.get<mc_paging_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE multicast_group_paging_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().pack(bref));
      break;
    case types::ue_id_list_for_paging_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_id_list_for_paging_list_l>(), 1, 4096, true));
      break;
    case types::mc_paging_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<mc_paging_cell_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_group_paging_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::mbs_session_id:
      HANDLE_CODE(c.get<mbs_session_id_s>().unpack(bref));
      break;
    case types::ue_id_list_for_paging_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_id_list_for_paging_list_l>(), bref, 1, 4096, true));
      break;
    case types::mc_paging_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<mc_paging_cell_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "multicast_group_paging_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// NetworkAccessRateReductionIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t network_access_rate_reduction_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 225};
  return map_enum_number(names, 2, idx, "id");
}
bool network_access_rate_reduction_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 225};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e network_access_rate_reduction_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 225:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
network_access_rate_reduction_ies_o::value_c network_access_rate_reduction_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 225:
      ret.set(value_c::types::uac_assist_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e network_access_rate_reduction_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 225:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void network_access_rate_reduction_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::uac_assist_info:
      c.destroy<uac_assist_info_s>();
      break;
    default:
      break;
  }
}
void network_access_rate_reduction_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::uac_assist_info:
      c.init<uac_assist_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
}
network_access_rate_reduction_ies_o::value_c::value_c(const network_access_rate_reduction_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      c.init(other.c.get<uac_assist_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
}
network_access_rate_reduction_ies_o::value_c&
network_access_rate_reduction_ies_o::value_c::operator=(const network_access_rate_reduction_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      c.set(other.c.get<uac_assist_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }

  return *this;
}
uint16_t& network_access_rate_reduction_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uac_assist_info_s& network_access_rate_reduction_ies_o::value_c::uac_assist_info()
{
  assert_choice_type(types::uac_assist_info, type_, "Value");
  return c.get<uac_assist_info_s>();
}
const uint16_t& network_access_rate_reduction_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uac_assist_info_s& network_access_rate_reduction_ies_o::value_c::uac_assist_info() const
{
  assert_choice_type(types::uac_assist_info, type_, "Value");
  return c.get<uac_assist_info_s>();
}
void network_access_rate_reduction_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::uac_assist_info:
      j.write_fieldname("UAC-Assistance-Info");
      c.get<uac_assist_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE network_access_rate_reduction_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uac_assist_info:
      HANDLE_CODE(c.get<uac_assist_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE network_access_rate_reduction_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::uac_assist_info:
      HANDLE_CODE(c.get<uac_assist_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "network_access_rate_reduction_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// NotifyIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t notify_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 137};
  return map_enum_number(names, 3, idx, "id");
}
bool notify_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 137};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e notify_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 137:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
notify_ies_o::value_c notify_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 137:
      ret.set(value_c::types::drb_notify_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e notify_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 137:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void notify_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::drb_notify_list:
      c.destroy<drb_notify_list_l>();
      break;
    default:
      break;
  }
}
void notify_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::drb_notify_list:
      c.init<drb_notify_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
}
notify_ies_o::value_c::value_c(const notify_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      c.init(other.c.get<drb_notify_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
}
notify_ies_o::value_c& notify_ies_o::value_c::operator=(const notify_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      c.set(other.c.get<drb_notify_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }

  return *this;
}
uint64_t& notify_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& notify_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
drb_notify_list_l& notify_ies_o::value_c::drb_notify_list()
{
  assert_choice_type(types::drb_notify_list, type_, "Value");
  return c.get<drb_notify_list_l>();
}
const uint64_t& notify_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& notify_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const drb_notify_list_l& notify_ies_o::value_c::drb_notify_list() const
{
  assert_choice_type(types::drb_notify_list, type_, "Value");
  return c.get<drb_notify_list_l>();
}
void notify_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::drb_notify_list:
      j.start_array("DRB-Notify-List");
      for (const auto& e1 : c.get<drb_notify_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE notify_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_notify_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<drb_notify_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE notify_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::drb_notify_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<drb_notify_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "notify_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementFailureIndication-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 0};
  return map_enum_number(names, 4, idx, "id");
}
bool pdc_meas_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_fail_ind_ies_o::value_c pdc_meas_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void pdc_meas_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }
}
pdc_meas_fail_ind_ies_o::value_c::value_c(const pdc_meas_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }
}
pdc_meas_fail_ind_ies_o::value_c&
pdc_meas_fail_ind_ies_o::value_c::operator=(const pdc_meas_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_fail_ind_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
cause_c& pdc_meas_fail_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_fail_ind_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_fail_ind_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const cause_c& pdc_meas_fail_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void pdc_meas_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementInitiationFailure-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_initiation_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool pdc_meas_initiation_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_initiation_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_initiation_fail_ies_o::value_c pdc_meas_initiation_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_initiation_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_initiation_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void pdc_meas_initiation_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }
}
pdc_meas_initiation_fail_ies_o::value_c::value_c(const pdc_meas_initiation_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }
}
pdc_meas_initiation_fail_ies_o::value_c&
pdc_meas_initiation_fail_ies_o::value_c::operator=(const pdc_meas_initiation_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_initiation_fail_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
cause_c& pdc_meas_initiation_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& pdc_meas_initiation_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_initiation_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_initiation_fail_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const cause_c& pdc_meas_initiation_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& pdc_meas_initiation_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void pdc_meas_initiation_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_initiation_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementInitiationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_initiation_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 545, 541, 542};
  return map_enum_number(names, 6, idx, "id");
}
bool pdc_meas_initiation_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 545, 541, 542};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_initiation_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::reject;
    case 545:
      return crit_e::reject;
    case 541:
      return crit_e::reject;
    case 542:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_initiation_request_ies_o::value_c pdc_meas_initiation_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 545:
      ret.set(value_c::types::pdc_report_type);
      break;
    case 541:
      ret.set(value_c::types::pdc_meas_periodicity);
      break;
    case 542:
      ret.set(value_c::types::pdc_meas_quantities);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_initiation_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 545:
      return presence_e::mandatory;
    case 541:
      return presence_e::conditional;
    case 542:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_initiation_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pdc_meas_quantities:
      c.destroy<pdc_meas_quantities_l>();
      break;
    default:
      break;
  }
}
void pdc_meas_initiation_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::pdc_report_type:
      break;
    case types::pdc_meas_periodicity:
      break;
    case types::pdc_meas_quantities:
      c.init<pdc_meas_quantities_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }
}
pdc_meas_initiation_request_ies_o::value_c::value_c(const pdc_meas_initiation_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pdc_report_type:
      c.init(other.c.get<pdc_report_type_e>());
      break;
    case types::pdc_meas_periodicity:
      c.init(other.c.get<pdc_meas_periodicity_e>());
      break;
    case types::pdc_meas_quantities:
      c.init(other.c.get<pdc_meas_quantities_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }
}
pdc_meas_initiation_request_ies_o::value_c&
pdc_meas_initiation_request_ies_o::value_c::operator=(const pdc_meas_initiation_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pdc_report_type:
      c.set(other.c.get<pdc_report_type_e>());
      break;
    case types::pdc_meas_periodicity:
      c.set(other.c.get<pdc_meas_periodicity_e>());
      break;
    case types::pdc_meas_quantities:
      c.set(other.c.get<pdc_meas_quantities_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_initiation_request_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
pdc_report_type_e& pdc_meas_initiation_request_ies_o::value_c::pdc_report_type()
{
  assert_choice_type(types::pdc_report_type, type_, "Value");
  return c.get<pdc_report_type_e>();
}
pdc_meas_periodicity_e& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_periodicity()
{
  assert_choice_type(types::pdc_meas_periodicity, type_, "Value");
  return c.get<pdc_meas_periodicity_e>();
}
pdc_meas_quantities_l& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_quantities()
{
  assert_choice_type(types::pdc_meas_quantities, type_, "Value");
  return c.get<pdc_meas_quantities_l>();
}
const uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_initiation_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_initiation_request_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const pdc_report_type_e& pdc_meas_initiation_request_ies_o::value_c::pdc_report_type() const
{
  assert_choice_type(types::pdc_report_type, type_, "Value");
  return c.get<pdc_report_type_e>();
}
const pdc_meas_periodicity_e& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_periodicity() const
{
  assert_choice_type(types::pdc_meas_periodicity, type_, "Value");
  return c.get<pdc_meas_periodicity_e>();
}
const pdc_meas_quantities_l& pdc_meas_initiation_request_ies_o::value_c::pdc_meas_quantities() const
{
  assert_choice_type(types::pdc_meas_quantities, type_, "Value");
  return c.get<pdc_meas_quantities_l>();
}
void pdc_meas_initiation_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::pdc_report_type:
      j.write_str("PDCReportType", c.get<pdc_report_type_e>().to_string());
      break;
    case types::pdc_meas_periodicity:
      j.write_str("PDCMeasurementPeriodicity", c.get<pdc_meas_periodicity_e>().to_string());
      break;
    case types::pdc_meas_quantities:
      j.start_array("PDCMeasurementQuantities");
      for (const auto& e1 : c.get<pdc_meas_quantities_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_initiation_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_report_type:
      HANDLE_CODE(c.get<pdc_report_type_e>().pack(bref));
      break;
    case types::pdc_meas_periodicity:
      HANDLE_CODE(c.get<pdc_meas_periodicity_e>().pack(bref));
      break;
    case types::pdc_meas_quantities:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pdc_meas_quantities_l>(), 1, 16, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_report_type:
      HANDLE_CODE(c.get<pdc_report_type_e>().unpack(bref));
      break;
    case types::pdc_meas_periodicity:
      HANDLE_CODE(c.get<pdc_meas_periodicity_e>().unpack(bref));
      break;
    case types::pdc_meas_quantities:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pdc_meas_quantities_l>(), bref, 1, 16, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementInitiationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_initiation_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 544, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool pdc_meas_initiation_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 544, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_initiation_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::reject;
    case 544:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_initiation_resp_ies_o::value_c pdc_meas_initiation_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 544:
      ret.set(value_c::types::pdc_meas_result);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_initiation_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 544:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_initiation_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pdc_meas_result:
      c.destroy<pdc_meas_result_s>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void pdc_meas_initiation_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::pdc_meas_result:
      c.init<pdc_meas_result_s>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }
}
pdc_meas_initiation_resp_ies_o::value_c::value_c(const pdc_meas_initiation_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.init(other.c.get<pdc_meas_result_s>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }
}
pdc_meas_initiation_resp_ies_o::value_c&
pdc_meas_initiation_resp_ies_o::value_c::operator=(const pdc_meas_initiation_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.set(other.c.get<pdc_meas_result_s>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_initiation_resp_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
pdc_meas_result_s& pdc_meas_initiation_resp_ies_o::value_c::pdc_meas_result()
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
crit_diagnostics_s& pdc_meas_initiation_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_initiation_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_initiation_resp_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const pdc_meas_result_s& pdc_meas_initiation_resp_ies_o::value_c::pdc_meas_result() const
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
const crit_diagnostics_s& pdc_meas_initiation_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void pdc_meas_initiation_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      j.write_fieldname("PDCMeasurementResult");
      c.get<pdc_meas_result_s>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_initiation_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_initiation_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementReport-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546, 544};
  return map_enum_number(names, 4, idx, "id");
}
bool pdc_meas_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546, 544};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::reject;
    case 544:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_report_ies_o::value_c pdc_meas_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    case 544:
      ret.set(value_c::types::pdc_meas_result);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    case 544:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pdc_meas_result:
      c.destroy<pdc_meas_result_s>();
      break;
    default:
      break;
  }
}
void pdc_meas_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::ran_ue_pdc_meas_id:
      break;
    case types::pdc_meas_result:
      c.init<pdc_meas_result_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }
}
pdc_meas_report_ies_o::value_c::value_c(const pdc_meas_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.init(other.c.get<pdc_meas_result_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }
}
pdc_meas_report_ies_o::value_c& pdc_meas_report_ies_o::value_c::operator=(const pdc_meas_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      c.set(other.c.get<pdc_meas_result_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_report_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
pdc_meas_result_s& pdc_meas_report_ies_o::value_c::pdc_meas_result()
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
const uint64_t& pdc_meas_report_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_report_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_report_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const pdc_meas_result_s& pdc_meas_report_ies_o::value_c::pdc_meas_result() const
{
  assert_choice_type(types::pdc_meas_result, type_, "Value");
  return c.get<pdc_meas_result_s>();
}
void pdc_meas_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    case types::pdc_meas_result:
      j.write_fieldname("PDCMeasurementResult");
      c.get<pdc_meas_result_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    case types::pdc_meas_result:
      HANDLE_CODE(c.get<pdc_meas_result_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PDCMeasurementTerminationCommand-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pdc_meas_termination_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 546};
  return map_enum_number(names, 3, idx, "id");
}
bool pdc_meas_termination_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 546};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pdc_meas_termination_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 546:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pdc_meas_termination_cmd_ies_o::value_c pdc_meas_termination_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 546:
      ret.set(value_c::types::ran_ue_pdc_meas_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pdc_meas_termination_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 546:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pdc_meas_termination_cmd_ies_o::value_c::destroy_() {}
void pdc_meas_termination_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
pdc_meas_termination_cmd_ies_o::value_c::value_c(const pdc_meas_termination_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
  }
}
pdc_meas_termination_cmd_ies_o::value_c&
pdc_meas_termination_cmd_ies_o::value_c::operator=(const pdc_meas_termination_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
  }

  return *this;
}
uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint8_t& pdc_meas_termination_cmd_ies_o::value_c::ran_ue_pdc_meas_id()
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& pdc_meas_termination_cmd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint8_t& pdc_meas_termination_cmd_ies_o::value_c::ran_ue_pdc_meas_id() const
{
  assert_choice_type(types::ran_ue_pdc_meas_id, type_, "Value");
  return c.get<uint8_t>();
}
void pdc_meas_termination_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::ran_ue_pdc_meas_id:
      j.write_int("INTEGER (1..16,...)", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pdc_meas_termination_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_termination_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::ran_ue_pdc_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)1u, (uint8_t)16u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "pdc_meas_termination_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PRSConfigurationFailure-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t prs_cfg_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool prs_cfg_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e prs_cfg_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
prs_cfg_fail_ies_o::value_c prs_cfg_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e prs_cfg_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void prs_cfg_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void prs_cfg_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }
}
prs_cfg_fail_ies_o::value_c::value_c(const prs_cfg_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }
}
prs_cfg_fail_ies_o::value_c& prs_cfg_fail_ies_o::value_c::operator=(const prs_cfg_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& prs_cfg_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& prs_cfg_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& prs_cfg_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& prs_cfg_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& prs_cfg_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& prs_cfg_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void prs_cfg_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE prs_cfg_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PRSConfigurationRequest-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t prs_cfg_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {571, 549};
  return map_enum_number(names, 2, idx, "id");
}
bool prs_cfg_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {571, 549};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e prs_cfg_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 571:
      return crit_e::reject;
    case 549:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
prs_cfg_request_ies_o::value_c prs_cfg_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 571:
      ret.set(value_c::types::prs_cfg_request_type);
      break;
    case 549:
      ret.set(value_c::types::prstrp_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e prs_cfg_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 571:
      return presence_e::mandatory;
    case 549:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void prs_cfg_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::prstrp_list:
      c.destroy<prstrp_list_l>();
      break;
    default:
      break;
  }
}
void prs_cfg_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::prs_cfg_request_type:
      break;
    case types::prstrp_list:
      c.init<prstrp_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }
}
prs_cfg_request_ies_o::value_c::value_c(const prs_cfg_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::prs_cfg_request_type:
      c.init(other.c.get<prs_cfg_request_type_e>());
      break;
    case types::prstrp_list:
      c.init(other.c.get<prstrp_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }
}
prs_cfg_request_ies_o::value_c& prs_cfg_request_ies_o::value_c::operator=(const prs_cfg_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::prs_cfg_request_type:
      c.set(other.c.get<prs_cfg_request_type_e>());
      break;
    case types::prstrp_list:
      c.set(other.c.get<prstrp_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }

  return *this;
}
prs_cfg_request_type_e& prs_cfg_request_ies_o::value_c::prs_cfg_request_type()
{
  assert_choice_type(types::prs_cfg_request_type, type_, "Value");
  return c.get<prs_cfg_request_type_e>();
}
prstrp_list_l& prs_cfg_request_ies_o::value_c::prstrp_list()
{
  assert_choice_type(types::prstrp_list, type_, "Value");
  return c.get<prstrp_list_l>();
}
const prs_cfg_request_type_e& prs_cfg_request_ies_o::value_c::prs_cfg_request_type() const
{
  assert_choice_type(types::prs_cfg_request_type, type_, "Value");
  return c.get<prs_cfg_request_type_e>();
}
const prstrp_list_l& prs_cfg_request_ies_o::value_c::prstrp_list() const
{
  assert_choice_type(types::prstrp_list, type_, "Value");
  return c.get<prstrp_list_l>();
}
void prs_cfg_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::prs_cfg_request_type:
      j.write_str("PRSConfigRequestType", c.get<prs_cfg_request_type_e>().to_string());
      break;
    case types::prstrp_list:
      j.start_array("PRSTRPList");
      for (const auto& e1 : c.get<prstrp_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE prs_cfg_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::prs_cfg_request_type:
      HANDLE_CODE(c.get<prs_cfg_request_type_e>().pack(bref));
      break;
    case types::prstrp_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<prstrp_list_l>(), 1, 65535, true));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::prs_cfg_request_type:
      HANDLE_CODE(c.get<prs_cfg_request_type_e>().unpack(bref));
      break;
    case types::prstrp_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<prstrp_list_l>(), bref, 1, 65535, true));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PRSConfigurationResponse-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t prs_cfg_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 550, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool prs_cfg_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 550, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e prs_cfg_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 550:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
prs_cfg_resp_ies_o::value_c prs_cfg_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 550:
      ret.set(value_c::types::prs_tx_trp_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e prs_cfg_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 550:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void prs_cfg_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::prs_tx_trp_list:
      c.destroy<prs_tx_trp_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void prs_cfg_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::prs_tx_trp_list:
      c.init<prs_tx_trp_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }
}
prs_cfg_resp_ies_o::value_c::value_c(const prs_cfg_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::prs_tx_trp_list:
      c.init(other.c.get<prs_tx_trp_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }
}
prs_cfg_resp_ies_o::value_c& prs_cfg_resp_ies_o::value_c::operator=(const prs_cfg_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::prs_tx_trp_list:
      c.set(other.c.get<prs_tx_trp_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& prs_cfg_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
prs_tx_trp_list_l& prs_cfg_resp_ies_o::value_c::prs_tx_trp_list()
{
  assert_choice_type(types::prs_tx_trp_list, type_, "Value");
  return c.get<prs_tx_trp_list_l>();
}
crit_diagnostics_s& prs_cfg_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& prs_cfg_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const prs_tx_trp_list_l& prs_cfg_resp_ies_o::value_c::prs_tx_trp_list() const
{
  assert_choice_type(types::prs_tx_trp_list, type_, "Value");
  return c.get<prs_tx_trp_list_l>();
}
const crit_diagnostics_s& prs_cfg_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void prs_cfg_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::prs_tx_trp_list:
      j.start_array("PRSTransmissionTRPList");
      for (const auto& e1 : c.get<prs_tx_trp_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE prs_cfg_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::prs_tx_trp_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<prs_tx_trp_list_l>(), 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::prs_tx_trp_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<prs_tx_trp_list_l>(), bref, 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "prs_cfg_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSCancelRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_cancel_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 142, 148, 157, 220};
  return map_enum_number(names, 5, idx, "id");
}
bool pws_cancel_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 142, 148, 157, 220};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_cancel_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 142:
      return crit_e::reject;
    case 148:
      return crit_e::reject;
    case 157:
      return crit_e::reject;
    case 220:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_cancel_request_ies_o::value_c pws_cancel_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 142:
      ret.set(value_c::types::numof_broadcast_request);
      break;
    case 148:
      ret.set(value_c::types::broadcast_to_be_cancelled_list);
      break;
    case 157:
      ret.set(value_c::types::cancel_all_warning_msgs_ind);
      break;
    case 220:
      ret.set(value_c::types::notif_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_cancel_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 142:
      return presence_e::mandatory;
    case 148:
      return presence_e::optional;
    case 157:
      return presence_e::optional;
    case 220:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_cancel_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::broadcast_to_be_cancelled_list:
      c.destroy<broadcast_to_be_cancelled_list_l>();
      break;
    case types::notif_info:
      c.destroy<notif_info_s>();
      break;
    default:
      break;
  }
}
void pws_cancel_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::numof_broadcast_request:
      break;
    case types::broadcast_to_be_cancelled_list:
      c.init<broadcast_to_be_cancelled_list_l>();
      break;
    case types::cancel_all_warning_msgs_ind:
      break;
    case types::notif_info:
      c.init<notif_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
}
pws_cancel_request_ies_o::value_c::value_c(const pws_cancel_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      c.init(other.c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      c.init(other.c.get<broadcast_to_be_cancelled_list_l>());
      break;
    case types::cancel_all_warning_msgs_ind:
      c.init(other.c.get<cancel_all_warning_msgs_ind_e>());
      break;
    case types::notif_info:
      c.init(other.c.get<notif_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
}
pws_cancel_request_ies_o::value_c&
pws_cancel_request_ies_o::value_c::operator=(const pws_cancel_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      c.set(other.c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      c.set(other.c.get<broadcast_to_be_cancelled_list_l>());
      break;
    case types::cancel_all_warning_msgs_ind:
      c.set(other.c.get<cancel_all_warning_msgs_ind_e>());
      break;
    case types::notif_info:
      c.set(other.c.get<notif_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_cancel_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& pws_cancel_request_ies_o::value_c::numof_broadcast_request()
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
broadcast_to_be_cancelled_list_l& pws_cancel_request_ies_o::value_c::broadcast_to_be_cancelled_list()
{
  assert_choice_type(types::broadcast_to_be_cancelled_list, type_, "Value");
  return c.get<broadcast_to_be_cancelled_list_l>();
}
cancel_all_warning_msgs_ind_e& pws_cancel_request_ies_o::value_c::cancel_all_warning_msgs_ind()
{
  assert_choice_type(types::cancel_all_warning_msgs_ind, type_, "Value");
  return c.get<cancel_all_warning_msgs_ind_e>();
}
notif_info_s& pws_cancel_request_ies_o::value_c::notif_info()
{
  assert_choice_type(types::notif_info, type_, "Value");
  return c.get<notif_info_s>();
}
const uint16_t& pws_cancel_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& pws_cancel_request_ies_o::value_c::numof_broadcast_request() const
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
const broadcast_to_be_cancelled_list_l& pws_cancel_request_ies_o::value_c::broadcast_to_be_cancelled_list() const
{
  assert_choice_type(types::broadcast_to_be_cancelled_list, type_, "Value");
  return c.get<broadcast_to_be_cancelled_list_l>();
}
const cancel_all_warning_msgs_ind_e& pws_cancel_request_ies_o::value_c::cancel_all_warning_msgs_ind() const
{
  assert_choice_type(types::cancel_all_warning_msgs_ind, type_, "Value");
  return c.get<cancel_all_warning_msgs_ind_e>();
}
const notif_info_s& pws_cancel_request_ies_o::value_c::notif_info() const
{
  assert_choice_type(types::notif_info, type_, "Value");
  return c.get<notif_info_s>();
}
void pws_cancel_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::numof_broadcast_request:
      j.write_int("INTEGER (0..65535)", c.get<uint32_t>());
      break;
    case types::broadcast_to_be_cancelled_list:
      j.start_array("Broadcast-To-Be-Cancelled-List");
      for (const auto& e1 : c.get<broadcast_to_be_cancelled_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::cancel_all_warning_msgs_ind:
      j.write_str("Cancel-all-Warning-Messages-Indicator", "true");
      break;
    case types::notif_info:
      j.write_fieldname("NotificationInformation");
      c.get<notif_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_cancel_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::broadcast_to_be_cancelled_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<broadcast_to_be_cancelled_list_l>(), 1, 512, true));
      break;
    case types::cancel_all_warning_msgs_ind:
      HANDLE_CODE(c.get<cancel_all_warning_msgs_ind_e>().pack(bref));
      break;
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::broadcast_to_be_cancelled_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<broadcast_to_be_cancelled_list_l>(), bref, 1, 512, true));
      break;
    case types::cancel_all_warning_msgs_ind:
      HANDLE_CODE(c.get<cancel_all_warning_msgs_ind_e>().unpack(bref));
      break;
    case types::notif_info:
      HANDLE_CODE(c.get<notif_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSCancelResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_cancel_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 150, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool pws_cancel_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 150, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_cancel_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 150:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_cancel_resp_ies_o::value_c pws_cancel_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 150:
      ret.set(value_c::types::cells_broadcast_cancelled_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_cancel_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 150:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_cancel_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_broadcast_cancelled_list:
      c.destroy<cells_broadcast_cancelled_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void pws_cancel_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_broadcast_cancelled_list:
      c.init<cells_broadcast_cancelled_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
}
pws_cancel_resp_ies_o::value_c::value_c(const pws_cancel_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      c.init(other.c.get<cells_broadcast_cancelled_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
}
pws_cancel_resp_ies_o::value_c& pws_cancel_resp_ies_o::value_c::operator=(const pws_cancel_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      c.set(other.c.get<cells_broadcast_cancelled_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_cancel_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_broadcast_cancelled_list_l& pws_cancel_resp_ies_o::value_c::cells_broadcast_cancelled_list()
{
  assert_choice_type(types::cells_broadcast_cancelled_list, type_, "Value");
  return c.get<cells_broadcast_cancelled_list_l>();
}
crit_diagnostics_s& pws_cancel_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& pws_cancel_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_broadcast_cancelled_list_l& pws_cancel_resp_ies_o::value_c::cells_broadcast_cancelled_list() const
{
  assert_choice_type(types::cells_broadcast_cancelled_list, type_, "Value");
  return c.get<cells_broadcast_cancelled_list_l>();
}
const crit_diagnostics_s& pws_cancel_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void pws_cancel_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_broadcast_cancelled_list:
      j.start_array("Cells-Broadcast-Cancelled-List");
      for (const auto& e1 : c.get<cells_broadcast_cancelled_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_cancel_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_cancelled_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_broadcast_cancelled_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_cancelled_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_broadcast_cancelled_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "pws_cancel_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSFailureIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 154};
  return map_enum_number(names, 2, idx, "id");
}
bool pws_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 154};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 154:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_fail_ind_ies_o::value_c pws_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 154:
      ret.set(value_c::types::pws_failed_nr_cgi_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 154:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pws_failed_nr_cgi_list:
      c.destroy<pws_failed_nr_cgi_list_l>();
      break;
    default:
      break;
  }
}
void pws_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pws_failed_nr_cgi_list:
      c.init<pws_failed_nr_cgi_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
}
pws_fail_ind_ies_o::value_c::value_c(const pws_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      c.init(other.c.get<pws_failed_nr_cgi_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
}
pws_fail_ind_ies_o::value_c& pws_fail_ind_ies_o::value_c::operator=(const pws_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      c.set(other.c.get<pws_failed_nr_cgi_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_fail_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
pws_failed_nr_cgi_list_l& pws_fail_ind_ies_o::value_c::pws_failed_nr_cgi_list()
{
  assert_choice_type(types::pws_failed_nr_cgi_list, type_, "Value");
  return c.get<pws_failed_nr_cgi_list_l>();
}
const uint16_t& pws_fail_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const pws_failed_nr_cgi_list_l& pws_fail_ind_ies_o::value_c::pws_failed_nr_cgi_list() const
{
  assert_choice_type(types::pws_failed_nr_cgi_list, type_, "Value");
  return c.get<pws_failed_nr_cgi_list_l>();
}
void pws_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pws_failed_nr_cgi_list:
      j.start_array("PWS-Failed-NR-CGI-List");
      for (const auto& e1 : c.get<pws_failed_nr_cgi_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_failed_nr_cgi_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pws_failed_nr_cgi_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_failed_nr_cgi_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pws_failed_nr_cgi_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PWSRestartIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pws_restart_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 152};
  return map_enum_number(names, 2, idx, "id");
}
bool pws_restart_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 152};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pws_restart_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 152:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pws_restart_ind_ies_o::value_c pws_restart_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 152:
      ret.set(value_c::types::nr_cgi_list_for_restart_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pws_restart_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 152:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pws_restart_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi_list_for_restart_list:
      c.destroy<nr_cgi_list_for_restart_list_l>();
      break;
    default:
      break;
  }
}
void pws_restart_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi_list_for_restart_list:
      c.init<nr_cgi_list_for_restart_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
}
pws_restart_ind_ies_o::value_c::value_c(const pws_restart_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      c.init(other.c.get<nr_cgi_list_for_restart_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
}
pws_restart_ind_ies_o::value_c& pws_restart_ind_ies_o::value_c::operator=(const pws_restart_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      c.set(other.c.get<nr_cgi_list_for_restart_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& pws_restart_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_list_for_restart_list_l& pws_restart_ind_ies_o::value_c::nr_cgi_list_for_restart_list()
{
  assert_choice_type(types::nr_cgi_list_for_restart_list, type_, "Value");
  return c.get<nr_cgi_list_for_restart_list_l>();
}
const uint16_t& pws_restart_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_list_for_restart_list_l& pws_restart_ind_ies_o::value_c::nr_cgi_list_for_restart_list() const
{
  assert_choice_type(types::nr_cgi_list_for_restart_list, type_, "Value");
  return c.get<nr_cgi_list_for_restart_list_l>();
}
void pws_restart_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi_list_for_restart_list:
      j.start_array("NR-CGI-List-For-Restart-List");
      for (const auto& e1 : c.get<nr_cgi_list_for_restart_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pws_restart_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi_list_for_restart_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<nr_cgi_list_for_restart_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_restart_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi_list_for_restart_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<nr_cgi_list_for_restart_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "pws_restart_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PagingIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t paging_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {117, 127, 114, 115, 113, 216, 580, 581, 582, 583, 620, 622, 623, 694};
  return map_enum_number(names, 14, idx, "id");
}
bool paging_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {117, 127, 114, 115, 113, 216, 580, 581, 582, 583, 620, 622, 623, 694};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e paging_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 117:
      return crit_e::reject;
    case 127:
      return crit_e::reject;
    case 114:
      return crit_e::ignore;
    case 115:
      return crit_e::ignore;
    case 113:
      return crit_e::ignore;
    case 216:
      return crit_e::ignore;
    case 580:
      return crit_e::ignore;
    case 581:
      return crit_e::ignore;
    case 582:
      return crit_e::ignore;
    case 583:
      return crit_e::ignore;
    case 620:
      return crit_e::ignore;
    case 622:
      return crit_e::ignore;
    case 623:
      return crit_e::ignore;
    case 694:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
paging_ies_o::value_c paging_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 117:
      ret.set(value_c::types::ue_id_idx_value);
      break;
    case 127:
      ret.set(value_c::types::paging_id);
      break;
    case 114:
      ret.set(value_c::types::paging_drx);
      break;
    case 115:
      ret.set(value_c::types::paging_prio);
      break;
    case 113:
      ret.set(value_c::types::paging_cell_list);
      break;
    case 216:
      ret.set(value_c::types::paging_origin);
      break;
    case 580:
      ret.set(value_c::types::ran_ue_paging_drx);
      break;
    case 581:
      ret.set(value_c::types::cn_ue_paging_drx);
      break;
    case 582:
      ret.set(value_c::types::nr_paginge_drx_info);
      break;
    case 583:
      ret.set(value_c::types::nr_paginge_drx_infofor_rrc_inactive);
      break;
    case 620:
      ret.set(value_c::types::paging_cause);
      break;
    case 622:
      ret.set(value_c::types::pe_ip_s_assist_info);
      break;
    case 623:
      ret.set(value_c::types::ue_paging_cap);
      break;
    case 694:
      ret.set(value_c::types::extended_ue_id_idx_value);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e paging_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 117:
      return presence_e::mandatory;
    case 127:
      return presence_e::mandatory;
    case 114:
      return presence_e::optional;
    case 115:
      return presence_e::optional;
    case 113:
      return presence_e::mandatory;
    case 216:
      return presence_e::optional;
    case 580:
      return presence_e::optional;
    case 581:
      return presence_e::optional;
    case 582:
      return presence_e::optional;
    case 583:
      return presence_e::optional;
    case 620:
      return presence_e::optional;
    case 622:
      return presence_e::optional;
    case 623:
      return presence_e::optional;
    case 694:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void paging_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ue_id_idx_value:
      c.destroy<ue_id_idx_value_c>();
      break;
    case types::paging_id:
      c.destroy<paging_id_c>();
      break;
    case types::paging_cell_list:
      c.destroy<paging_cell_list_l>();
      break;
    case types::nr_paginge_drx_info:
      c.destroy<nr_paginge_drx_info_s>();
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.destroy<nr_paginge_drx_infofor_rrc_inactive_s>();
      break;
    case types::pe_ip_s_assist_info:
      c.destroy<pe_ip_s_assist_info_s>();
      break;
    case types::ue_paging_cap:
      c.destroy<ue_paging_cap_s>();
      break;
    case types::extended_ue_id_idx_value:
      c.destroy<fixed_bitstring<16, false, true>>();
      break;
    default:
      break;
  }
}
void paging_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::ue_id_idx_value:
      c.init<ue_id_idx_value_c>();
      break;
    case types::paging_id:
      c.init<paging_id_c>();
      break;
    case types::paging_drx:
      break;
    case types::paging_prio:
      break;
    case types::paging_cell_list:
      c.init<paging_cell_list_l>();
      break;
    case types::paging_origin:
      break;
    case types::ran_ue_paging_drx:
      break;
    case types::cn_ue_paging_drx:
      break;
    case types::nr_paginge_drx_info:
      c.init<nr_paginge_drx_info_s>();
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.init<nr_paginge_drx_infofor_rrc_inactive_s>();
      break;
    case types::paging_cause:
      break;
    case types::pe_ip_s_assist_info:
      c.init<pe_ip_s_assist_info_s>();
      break;
    case types::ue_paging_cap:
      c.init<ue_paging_cap_s>();
      break;
    case types::extended_ue_id_idx_value:
      c.init<fixed_bitstring<16, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
}
paging_ies_o::value_c::value_c(const paging_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::ue_id_idx_value:
      c.init(other.c.get<ue_id_idx_value_c>());
      break;
    case types::paging_id:
      c.init(other.c.get<paging_id_c>());
      break;
    case types::paging_drx:
      c.init(other.c.get<paging_drx_e>());
      break;
    case types::paging_prio:
      c.init(other.c.get<paging_prio_e>());
      break;
    case types::paging_cell_list:
      c.init(other.c.get<paging_cell_list_l>());
      break;
    case types::paging_origin:
      c.init(other.c.get<paging_origin_e>());
      break;
    case types::ran_ue_paging_drx:
      c.init(other.c.get<paging_drx_e>());
      break;
    case types::cn_ue_paging_drx:
      c.init(other.c.get<paging_drx_e>());
      break;
    case types::nr_paginge_drx_info:
      c.init(other.c.get<nr_paginge_drx_info_s>());
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.init(other.c.get<nr_paginge_drx_infofor_rrc_inactive_s>());
      break;
    case types::paging_cause:
      c.init(other.c.get<paging_cause_e>());
      break;
    case types::pe_ip_s_assist_info:
      c.init(other.c.get<pe_ip_s_assist_info_s>());
      break;
    case types::ue_paging_cap:
      c.init(other.c.get<ue_paging_cap_s>());
      break;
    case types::extended_ue_id_idx_value:
      c.init(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
}
paging_ies_o::value_c& paging_ies_o::value_c::operator=(const paging_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::ue_id_idx_value:
      c.set(other.c.get<ue_id_idx_value_c>());
      break;
    case types::paging_id:
      c.set(other.c.get<paging_id_c>());
      break;
    case types::paging_drx:
      c.set(other.c.get<paging_drx_e>());
      break;
    case types::paging_prio:
      c.set(other.c.get<paging_prio_e>());
      break;
    case types::paging_cell_list:
      c.set(other.c.get<paging_cell_list_l>());
      break;
    case types::paging_origin:
      c.set(other.c.get<paging_origin_e>());
      break;
    case types::ran_ue_paging_drx:
      c.set(other.c.get<paging_drx_e>());
      break;
    case types::cn_ue_paging_drx:
      c.set(other.c.get<paging_drx_e>());
      break;
    case types::nr_paginge_drx_info:
      c.set(other.c.get<nr_paginge_drx_info_s>());
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      c.set(other.c.get<nr_paginge_drx_infofor_rrc_inactive_s>());
      break;
    case types::paging_cause:
      c.set(other.c.get<paging_cause_e>());
      break;
    case types::pe_ip_s_assist_info:
      c.set(other.c.get<pe_ip_s_assist_info_s>());
      break;
    case types::ue_paging_cap:
      c.set(other.c.get<ue_paging_cap_s>());
      break;
    case types::extended_ue_id_idx_value:
      c.set(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }

  return *this;
}
ue_id_idx_value_c& paging_ies_o::value_c::ue_id_idx_value()
{
  assert_choice_type(types::ue_id_idx_value, type_, "Value");
  return c.get<ue_id_idx_value_c>();
}
paging_id_c& paging_ies_o::value_c::paging_id()
{
  assert_choice_type(types::paging_id, type_, "Value");
  return c.get<paging_id_c>();
}
paging_drx_e& paging_ies_o::value_c::paging_drx()
{
  assert_choice_type(types::paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
paging_prio_e& paging_ies_o::value_c::paging_prio()
{
  assert_choice_type(types::paging_prio, type_, "Value");
  return c.get<paging_prio_e>();
}
paging_cell_list_l& paging_ies_o::value_c::paging_cell_list()
{
  assert_choice_type(types::paging_cell_list, type_, "Value");
  return c.get<paging_cell_list_l>();
}
paging_origin_e& paging_ies_o::value_c::paging_origin()
{
  assert_choice_type(types::paging_origin, type_, "Value");
  return c.get<paging_origin_e>();
}
paging_drx_e& paging_ies_o::value_c::ran_ue_paging_drx()
{
  assert_choice_type(types::ran_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
paging_drx_e& paging_ies_o::value_c::cn_ue_paging_drx()
{
  assert_choice_type(types::cn_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
nr_paginge_drx_info_s& paging_ies_o::value_c::nr_paginge_drx_info()
{
  assert_choice_type(types::nr_paginge_drx_info, type_, "Value");
  return c.get<nr_paginge_drx_info_s>();
}
nr_paginge_drx_infofor_rrc_inactive_s& paging_ies_o::value_c::nr_paginge_drx_infofor_rrc_inactive()
{
  assert_choice_type(types::nr_paginge_drx_infofor_rrc_inactive, type_, "Value");
  return c.get<nr_paginge_drx_infofor_rrc_inactive_s>();
}
paging_cause_e& paging_ies_o::value_c::paging_cause()
{
  assert_choice_type(types::paging_cause, type_, "Value");
  return c.get<paging_cause_e>();
}
pe_ip_s_assist_info_s& paging_ies_o::value_c::pe_ip_s_assist_info()
{
  assert_choice_type(types::pe_ip_s_assist_info, type_, "Value");
  return c.get<pe_ip_s_assist_info_s>();
}
ue_paging_cap_s& paging_ies_o::value_c::ue_paging_cap()
{
  assert_choice_type(types::ue_paging_cap, type_, "Value");
  return c.get<ue_paging_cap_s>();
}
fixed_bitstring<16, false, true>& paging_ies_o::value_c::extended_ue_id_idx_value()
{
  assert_choice_type(types::extended_ue_id_idx_value, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
const ue_id_idx_value_c& paging_ies_o::value_c::ue_id_idx_value() const
{
  assert_choice_type(types::ue_id_idx_value, type_, "Value");
  return c.get<ue_id_idx_value_c>();
}
const paging_id_c& paging_ies_o::value_c::paging_id() const
{
  assert_choice_type(types::paging_id, type_, "Value");
  return c.get<paging_id_c>();
}
const paging_drx_e& paging_ies_o::value_c::paging_drx() const
{
  assert_choice_type(types::paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
const paging_prio_e& paging_ies_o::value_c::paging_prio() const
{
  assert_choice_type(types::paging_prio, type_, "Value");
  return c.get<paging_prio_e>();
}
const paging_cell_list_l& paging_ies_o::value_c::paging_cell_list() const
{
  assert_choice_type(types::paging_cell_list, type_, "Value");
  return c.get<paging_cell_list_l>();
}
const paging_origin_e& paging_ies_o::value_c::paging_origin() const
{
  assert_choice_type(types::paging_origin, type_, "Value");
  return c.get<paging_origin_e>();
}
const paging_drx_e& paging_ies_o::value_c::ran_ue_paging_drx() const
{
  assert_choice_type(types::ran_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
const paging_drx_e& paging_ies_o::value_c::cn_ue_paging_drx() const
{
  assert_choice_type(types::cn_ue_paging_drx, type_, "Value");
  return c.get<paging_drx_e>();
}
const nr_paginge_drx_info_s& paging_ies_o::value_c::nr_paginge_drx_info() const
{
  assert_choice_type(types::nr_paginge_drx_info, type_, "Value");
  return c.get<nr_paginge_drx_info_s>();
}
const nr_paginge_drx_infofor_rrc_inactive_s& paging_ies_o::value_c::nr_paginge_drx_infofor_rrc_inactive() const
{
  assert_choice_type(types::nr_paginge_drx_infofor_rrc_inactive, type_, "Value");
  return c.get<nr_paginge_drx_infofor_rrc_inactive_s>();
}
const paging_cause_e& paging_ies_o::value_c::paging_cause() const
{
  assert_choice_type(types::paging_cause, type_, "Value");
  return c.get<paging_cause_e>();
}
const pe_ip_s_assist_info_s& paging_ies_o::value_c::pe_ip_s_assist_info() const
{
  assert_choice_type(types::pe_ip_s_assist_info, type_, "Value");
  return c.get<pe_ip_s_assist_info_s>();
}
const ue_paging_cap_s& paging_ies_o::value_c::ue_paging_cap() const
{
  assert_choice_type(types::ue_paging_cap, type_, "Value");
  return c.get<ue_paging_cap_s>();
}
const fixed_bitstring<16, false, true>& paging_ies_o::value_c::extended_ue_id_idx_value() const
{
  assert_choice_type(types::extended_ue_id_idx_value, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
void paging_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::ue_id_idx_value:
      j.write_fieldname("UEIdentityIndexValue");
      c.get<ue_id_idx_value_c>().to_json(j);
      break;
    case types::paging_id:
      j.write_fieldname("PagingIdentity");
      c.get<paging_id_c>().to_json(j);
      break;
    case types::paging_drx:
      j.write_str("PagingDRX", c.get<paging_drx_e>().to_string());
      break;
    case types::paging_prio:
      j.write_str("PagingPriority", c.get<paging_prio_e>().to_string());
      break;
    case types::paging_cell_list:
      j.start_array("PagingCell-list");
      for (const auto& e1 : c.get<paging_cell_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::paging_origin:
      j.write_str("PagingOrigin", "non-3gpp");
      break;
    case types::ran_ue_paging_drx:
      j.write_str("PagingDRX", c.get<paging_drx_e>().to_string());
      break;
    case types::cn_ue_paging_drx:
      j.write_str("PagingDRX", c.get<paging_drx_e>().to_string());
      break;
    case types::nr_paginge_drx_info:
      j.write_fieldname("NRPagingeDRXInformation");
      c.get<nr_paginge_drx_info_s>().to_json(j);
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      j.write_fieldname("NRPagingeDRXInformationforRRCINACTIVE");
      c.get<nr_paginge_drx_infofor_rrc_inactive_s>().to_json(j);
      break;
    case types::paging_cause:
      j.write_str("PagingCause", "voice");
      break;
    case types::pe_ip_s_assist_info:
      j.write_fieldname("PEIPSAssistanceInfo");
      c.get<pe_ip_s_assist_info_s>().to_json(j);
      break;
    case types::ue_paging_cap:
      j.write_fieldname("UEPagingCapability");
      c.get<ue_paging_cap_s>().to_json(j);
      break;
    case types::extended_ue_id_idx_value:
      j.write_str("BIT STRING", c.get<fixed_bitstring<16, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE paging_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ue_id_idx_value:
      HANDLE_CODE(c.get<ue_id_idx_value_c>().pack(bref));
      break;
    case types::paging_id:
      HANDLE_CODE(c.get<paging_id_c>().pack(bref));
      break;
    case types::paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().pack(bref));
      break;
    case types::paging_prio:
      HANDLE_CODE(c.get<paging_prio_e>().pack(bref));
      break;
    case types::paging_cell_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<paging_cell_list_l>(), 1, 512, true));
      break;
    case types::paging_origin:
      HANDLE_CODE(c.get<paging_origin_e>().pack(bref));
      break;
    case types::ran_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().pack(bref));
      break;
    case types::cn_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().pack(bref));
      break;
    case types::nr_paginge_drx_info:
      HANDLE_CODE(c.get<nr_paginge_drx_info_s>().pack(bref));
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      HANDLE_CODE(c.get<nr_paginge_drx_infofor_rrc_inactive_s>().pack(bref));
      break;
    case types::paging_cause:
      HANDLE_CODE(c.get<paging_cause_e>().pack(bref));
      break;
    case types::pe_ip_s_assist_info:
      HANDLE_CODE(c.get<pe_ip_s_assist_info_s>().pack(bref));
      break;
    case types::ue_paging_cap:
      HANDLE_CODE(c.get<ue_paging_cap_s>().pack(bref));
      break;
    case types::extended_ue_id_idx_value:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::ue_id_idx_value:
      HANDLE_CODE(c.get<ue_id_idx_value_c>().unpack(bref));
      break;
    case types::paging_id:
      HANDLE_CODE(c.get<paging_id_c>().unpack(bref));
      break;
    case types::paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().unpack(bref));
      break;
    case types::paging_prio:
      HANDLE_CODE(c.get<paging_prio_e>().unpack(bref));
      break;
    case types::paging_cell_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<paging_cell_list_l>(), bref, 1, 512, true));
      break;
    case types::paging_origin:
      HANDLE_CODE(c.get<paging_origin_e>().unpack(bref));
      break;
    case types::ran_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().unpack(bref));
      break;
    case types::cn_ue_paging_drx:
      HANDLE_CODE(c.get<paging_drx_e>().unpack(bref));
      break;
    case types::nr_paginge_drx_info:
      HANDLE_CODE(c.get<nr_paginge_drx_info_s>().unpack(bref));
      break;
    case types::nr_paginge_drx_infofor_rrc_inactive:
      HANDLE_CODE(c.get<nr_paginge_drx_infofor_rrc_inactive_s>().unpack(bref));
      break;
    case types::paging_cause:
      HANDLE_CODE(c.get<paging_cause_e>().unpack(bref));
      break;
    case types::pe_ip_s_assist_info:
      HANDLE_CODE(c.get<pe_ip_s_assist_info_s>().unpack(bref));
      break;
    case types::ue_paging_cap:
      HANDLE_CODE(c.get<ue_paging_cap_s>().unpack(bref));
      break;
    case types::extended_ue_id_idx_value:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "paging_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PosSystemInformationDeliveryCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t pos_sys_info_delivery_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 111, 682, 156};
  return map_enum_number(names, 4, idx, "id");
}
bool pos_sys_info_delivery_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 111, 682, 156};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e pos_sys_info_delivery_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    case 682:
      return crit_e::reject;
    case 156:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
pos_sys_info_delivery_cmd_ies_o::value_c pos_sys_info_delivery_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    case 682:
      ret.set(value_c::types::pos_sitype_list);
      break;
    case 156:
      ret.set(value_c::types::confirmed_ue_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e pos_sys_info_delivery_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    case 682:
      return presence_e::mandatory;
    case 156:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void pos_sys_info_delivery_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    case types::pos_sitype_list:
      c.destroy<pos_sitype_list_l>();
      break;
    default:
      break;
  }
}
void pos_sys_info_delivery_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::pos_sitype_list:
      c.init<pos_sitype_list_l>();
      break;
    case types::confirmed_ue_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }
}
pos_sys_info_delivery_cmd_ies_o::value_c::value_c(const pos_sys_info_delivery_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::pos_sitype_list:
      c.init(other.c.get<pos_sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }
}
pos_sys_info_delivery_cmd_ies_o::value_c&
pos_sys_info_delivery_cmd_ies_o::value_c::operator=(const pos_sys_info_delivery_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::pos_sitype_list:
      c.set(other.c.get<pos_sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }

  return *this;
}
uint16_t& pos_sys_info_delivery_cmd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_s& pos_sys_info_delivery_cmd_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
pos_sitype_list_l& pos_sys_info_delivery_cmd_ies_o::value_c::pos_sitype_list()
{
  assert_choice_type(types::pos_sitype_list, type_, "Value");
  return c.get<pos_sitype_list_l>();
}
uint64_t& pos_sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id()
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& pos_sys_info_delivery_cmd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_s& pos_sys_info_delivery_cmd_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const pos_sitype_list_l& pos_sys_info_delivery_cmd_ies_o::value_c::pos_sitype_list() const
{
  assert_choice_type(types::pos_sitype_list, type_, "Value");
  return c.get<pos_sitype_list_l>();
}
const uint64_t& pos_sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id() const
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
void pos_sys_info_delivery_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::pos_sitype_list:
      j.start_array("PosSItypeList");
      for (const auto& e1 : c.get<pos_sitype_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::confirmed_ue_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE pos_sys_info_delivery_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::pos_sitype_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_sitype_list_l>(), 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sys_info_delivery_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::pos_sitype_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_sitype_list_l>(), bref, 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "pos_sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningActivationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_activation_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_activation_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_activation_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_activation_fail_ies_o::value_c positioning_activation_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_activation_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_activation_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_activation_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }
}
positioning_activation_fail_ies_o::value_c::value_c(const positioning_activation_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }
}
positioning_activation_fail_ies_o::value_c&
positioning_activation_fail_ies_o::value_c::operator=(const positioning_activation_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_activation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_activation_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& positioning_activation_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& positioning_activation_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& positioning_activation_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_activation_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& positioning_activation_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& positioning_activation_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_activation_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_activation_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningActivationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_activation_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 403, 404};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_activation_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 403, 404};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_activation_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 403:
      return crit_e::reject;
    case 404:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_activation_request_ies_o::value_c positioning_activation_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 403:
      ret.set(value_c::types::srs_type);
      break;
    case 404:
      ret.set(value_c::types::activation_time);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_activation_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 403:
      return presence_e::mandatory;
    case 404:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_activation_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_type:
      c.destroy<srs_type_c>();
      break;
    case types::activation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_activation_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srs_type:
      c.init<srs_type_c>();
      break;
    case types::activation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }
}
positioning_activation_request_ies_o::value_c::value_c(const positioning_activation_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srs_type:
      c.init(other.c.get<srs_type_c>());
      break;
    case types::activation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }
}
positioning_activation_request_ies_o::value_c&
positioning_activation_request_ies_o::value_c::operator=(const positioning_activation_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srs_type:
      c.set(other.c.get<srs_type_c>());
      break;
    case types::activation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_activation_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_activation_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
srs_type_c& positioning_activation_request_ies_o::value_c::srs_type()
{
  assert_choice_type(types::srs_type, type_, "Value");
  return c.get<srs_type_c>();
}
fixed_bitstring<64, false, true>& positioning_activation_request_ies_o::value_c::activation_time()
{
  assert_choice_type(types::activation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const uint64_t& positioning_activation_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_activation_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const srs_type_c& positioning_activation_request_ies_o::value_c::srs_type() const
{
  assert_choice_type(types::srs_type, type_, "Value");
  return c.get<srs_type_c>();
}
const fixed_bitstring<64, false, true>& positioning_activation_request_ies_o::value_c::activation_time() const
{
  assert_choice_type(types::activation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
void positioning_activation_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srs_type:
      j.write_fieldname("SRSType");
      c.get<srs_type_c>().to_json(j);
      break;
    case types::activation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_activation_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_type:
      HANDLE_CODE(c.get<srs_type_c>().pack(bref));
      break;
    case types::activation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_type:
      HANDLE_CODE(c.get<srs_type_c>().unpack(bref));
      break;
    case types::activation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningActivationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_activation_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 420, 421, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_activation_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 420, 421, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_activation_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 420:
      return crit_e::ignore;
    case 421:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_activation_resp_ies_o::value_c positioning_activation_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 420:
      ret.set(value_c::types::sys_frame_num);
      break;
    case 421:
      ret.set(value_c::types::slot_num);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_activation_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 420:
      return presence_e::optional;
    case 421:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_activation_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_activation_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::sys_frame_num:
      break;
    case types::slot_num:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }
}
positioning_activation_resp_ies_o::value_c::value_c(const positioning_activation_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::sys_frame_num:
      c.init(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.init(other.c.get<uint8_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }
}
positioning_activation_resp_ies_o::value_c&
positioning_activation_resp_ies_o::value_c::operator=(const positioning_activation_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::sys_frame_num:
      c.set(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.set(other.c.get<uint8_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_activation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_activation_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint16_t& positioning_activation_resp_ies_o::value_c::sys_frame_num()
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
uint8_t& positioning_activation_resp_ies_o::value_c::slot_num()
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
crit_diagnostics_s& positioning_activation_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& positioning_activation_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_activation_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& positioning_activation_resp_ies_o::value_c::sys_frame_num() const
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
const uint8_t& positioning_activation_resp_ies_o::value_c::slot_num() const
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
const crit_diagnostics_s& positioning_activation_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_activation_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::sys_frame_num:
      j.write_int("INTEGER (0..1023)", c.get<uint16_t>());
      break;
    case types::slot_num:
      j.write_int("INTEGER (0..79)", c.get<uint8_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_activation_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_activation_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningAssistanceInformationControlIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_assist_info_ctrl_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 392, 393, 406, 394};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_assist_info_ctrl_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 392, 393, 406, 394};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_assist_info_ctrl_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 392:
      return crit_e::reject;
    case 393:
      return crit_e::reject;
    case 406:
      return crit_e::reject;
    case 394:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_assist_info_ctrl_ies_o::value_c positioning_assist_info_ctrl_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 392:
      ret.set(value_c::types::pos_assist_info);
      break;
    case 393:
      ret.set(value_c::types::pos_broadcast);
      break;
    case 406:
      ret.set(value_c::types::positioning_broadcast_cells);
      break;
    case 394:
      ret.set(value_c::types::routing_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_assist_info_ctrl_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 392:
      return presence_e::optional;
    case 393:
      return presence_e::optional;
    case 406:
      return presence_e::optional;
    case 394:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_assist_info_ctrl_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_assist_info:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::positioning_broadcast_cells:
      c.destroy<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void positioning_assist_info_ctrl_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pos_assist_info:
      c.init<unbounded_octstring<true>>();
      break;
    case types::pos_broadcast:
      break;
    case types::positioning_broadcast_cells:
      c.init<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }
}
positioning_assist_info_ctrl_ies_o::value_c::value_c(const positioning_assist_info_ctrl_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::pos_broadcast:
      c.init(other.c.get<pos_broadcast_e>());
      break;
    case types::positioning_broadcast_cells:
      c.init(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }
}
positioning_assist_info_ctrl_ies_o::value_c&
positioning_assist_info_ctrl_ies_o::value_c::operator=(const positioning_assist_info_ctrl_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::pos_broadcast:
      c.set(other.c.get<pos_broadcast_e>());
      break;
    case types::positioning_broadcast_cells:
      c.set(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_assist_info_ctrl_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::pos_assist_info()
{
  assert_choice_type(types::pos_assist_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
pos_broadcast_e& positioning_assist_info_ctrl_ies_o::value_c::pos_broadcast()
{
  assert_choice_type(types::pos_broadcast, type_, "Value");
  return c.get<pos_broadcast_e>();
}
positioning_broadcast_cells_l& positioning_assist_info_ctrl_ies_o::value_c::positioning_broadcast_cells()
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::routing_id()
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint16_t& positioning_assist_info_ctrl_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::pos_assist_info() const
{
  assert_choice_type(types::pos_assist_info, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const pos_broadcast_e& positioning_assist_info_ctrl_ies_o::value_c::pos_broadcast() const
{
  assert_choice_type(types::pos_broadcast, type_, "Value");
  return c.get<pos_broadcast_e>();
}
const positioning_broadcast_cells_l& positioning_assist_info_ctrl_ies_o::value_c::positioning_broadcast_cells() const
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
const unbounded_octstring<true>& positioning_assist_info_ctrl_ies_o::value_c::routing_id() const
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void positioning_assist_info_ctrl_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pos_assist_info:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::pos_broadcast:
      j.write_str("PosBroadcast", c.get<pos_broadcast_e>().to_string());
      break;
    case types::positioning_broadcast_cells:
      j.start_array("PositioningBroadcastCells");
      for (const auto& e1 : c.get<positioning_broadcast_cells_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::routing_id:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_assist_info_ctrl_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::pos_broadcast:
      HANDLE_CODE(c.get<pos_broadcast_e>().pack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<positioning_broadcast_cells_l>(), 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_ctrl_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::pos_broadcast:
      HANDLE_CODE(c.get<pos_broadcast_e>().unpack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<positioning_broadcast_cells_l>(), bref, 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_ctrl_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningAssistanceInformationFeedbackIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_assist_info_feedback_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 395, 406, 394, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_assist_info_feedback_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 395, 406, 394, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_assist_info_feedback_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 395:
      return crit_e::reject;
    case 406:
      return crit_e::reject;
    case 394:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_assist_info_feedback_ies_o::value_c positioning_assist_info_feedback_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 395:
      ret.set(value_c::types::pos_assist_info_fail_list);
      break;
    case 406:
      ret.set(value_c::types::positioning_broadcast_cells);
      break;
    case 394:
      ret.set(value_c::types::routing_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_assist_info_feedback_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 395:
      return presence_e::optional;
    case 406:
      return presence_e::optional;
    case 394:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_assist_info_feedback_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_assist_info_fail_list:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::positioning_broadcast_cells:
      c.destroy<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.destroy<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_assist_info_feedback_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pos_assist_info_fail_list:
      c.init<unbounded_octstring<true>>();
      break;
    case types::positioning_broadcast_cells:
      c.init<positioning_broadcast_cells_l>();
      break;
    case types::routing_id:
      c.init<unbounded_octstring<true>>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }
}
positioning_assist_info_feedback_ies_o::value_c::value_c(const positioning_assist_info_feedback_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info_fail_list:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::positioning_broadcast_cells:
      c.init(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }
}
positioning_assist_info_feedback_ies_o::value_c&
positioning_assist_info_feedback_ies_o::value_c::operator=(const positioning_assist_info_feedback_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pos_assist_info_fail_list:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::positioning_broadcast_cells:
      c.set(other.c.get<positioning_broadcast_cells_l>());
      break;
    case types::routing_id:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_assist_info_feedback_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::pos_assist_info_fail_list()
{
  assert_choice_type(types::pos_assist_info_fail_list, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
positioning_broadcast_cells_l& positioning_assist_info_feedback_ies_o::value_c::positioning_broadcast_cells()
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::routing_id()
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
crit_diagnostics_s& positioning_assist_info_feedback_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& positioning_assist_info_feedback_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::pos_assist_info_fail_list() const
{
  assert_choice_type(types::pos_assist_info_fail_list, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const positioning_broadcast_cells_l&
positioning_assist_info_feedback_ies_o::value_c::positioning_broadcast_cells() const
{
  assert_choice_type(types::positioning_broadcast_cells, type_, "Value");
  return c.get<positioning_broadcast_cells_l>();
}
const unbounded_octstring<true>& positioning_assist_info_feedback_ies_o::value_c::routing_id() const
{
  assert_choice_type(types::routing_id, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const crit_diagnostics_s& positioning_assist_info_feedback_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_assist_info_feedback_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pos_assist_info_fail_list:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::positioning_broadcast_cells:
      j.start_array("PositioningBroadcastCells");
      for (const auto& e1 : c.get<positioning_broadcast_cells_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::routing_id:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_assist_info_feedback_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info_fail_list:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<positioning_broadcast_cells_l>(), 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_feedback_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pos_assist_info_fail_list:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::positioning_broadcast_cells:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<positioning_broadcast_cells_l>(), bref, 1, 16384, true));
      break;
    case types::routing_id:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_assist_info_feedback_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningDeactivationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_deactivation_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 405};
  return map_enum_number(names, 3, idx, "id");
}
bool positioning_deactivation_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 405};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_deactivation_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 405:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_deactivation_ies_o::value_c positioning_deactivation_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 405:
      ret.set(value_c::types::abort_tx);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_deactivation_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 405:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_deactivation_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::abort_tx:
      c.destroy<abort_tx_c>();
      break;
    default:
      break;
  }
}
void positioning_deactivation_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::abort_tx:
      c.init<abort_tx_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }
}
positioning_deactivation_ies_o::value_c::value_c(const positioning_deactivation_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::abort_tx:
      c.init(other.c.get<abort_tx_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }
}
positioning_deactivation_ies_o::value_c&
positioning_deactivation_ies_o::value_c::operator=(const positioning_deactivation_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::abort_tx:
      c.set(other.c.get<abort_tx_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_deactivation_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_deactivation_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
abort_tx_c& positioning_deactivation_ies_o::value_c::abort_tx()
{
  assert_choice_type(types::abort_tx, type_, "Value");
  return c.get<abort_tx_c>();
}
const uint64_t& positioning_deactivation_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_deactivation_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const abort_tx_c& positioning_deactivation_ies_o::value_c::abort_tx() const
{
  assert_choice_type(types::abort_tx, type_, "Value");
  return c.get<abort_tx_c>();
}
void positioning_deactivation_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::abort_tx:
      j.write_fieldname("AbortTransmission");
      c.get<abort_tx_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_deactivation_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::abort_tx:
      HANDLE_CODE(c.get<abort_tx_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_deactivation_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::abort_tx:
      HANDLE_CODE(c.get<abort_tx_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_deactivation_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_info_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_fail_ies_o::value_c positioning_info_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_info_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }
}
positioning_info_fail_ies_o::value_c::value_c(const positioning_info_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }
}
positioning_info_fail_ies_o::value_c&
positioning_info_fail_ies_o::value_c::operator=(const positioning_info_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_fail_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_fail_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
cause_c& positioning_info_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& positioning_info_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint64_t& positioning_info_fail_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_fail_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const cause_c& positioning_info_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& positioning_info_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_info_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 391, 575, 689};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_info_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 391, 575, 689};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 391:
      return crit_e::ignore;
    case 575:
      return crit_e::ignore;
    case 689:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_request_ies_o::value_c positioning_info_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 391:
      ret.set(value_c::types::requested_srs_tx_characteristics);
      break;
    case 575:
      ret.set(value_c::types::ue_report_info);
      break;
    case 689:
      ret.set(value_c::types::srs_pos_rrc_inactive_query_ind);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 391:
      return presence_e::optional;
    case 575:
      return presence_e::optional;
    case 689:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::requested_srs_tx_characteristics:
      c.destroy<requested_srs_tx_characteristics_s>();
      break;
    case types::ue_report_info:
      c.destroy<ue_report_info_s>();
      break;
    default:
      break;
  }
}
void positioning_info_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::requested_srs_tx_characteristics:
      c.init<requested_srs_tx_characteristics_s>();
      break;
    case types::ue_report_info:
      c.init<ue_report_info_s>();
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }
}
positioning_info_request_ies_o::value_c::value_c(const positioning_info_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::requested_srs_tx_characteristics:
      c.init(other.c.get<requested_srs_tx_characteristics_s>());
      break;
    case types::ue_report_info:
      c.init(other.c.get<ue_report_info_s>());
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      c.init(other.c.get<srs_pos_rrc_inactive_query_ind_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }
}
positioning_info_request_ies_o::value_c&
positioning_info_request_ies_o::value_c::operator=(const positioning_info_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::requested_srs_tx_characteristics:
      c.set(other.c.get<requested_srs_tx_characteristics_s>());
      break;
    case types::ue_report_info:
      c.set(other.c.get<ue_report_info_s>());
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      c.set(other.c.get<srs_pos_rrc_inactive_query_ind_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_request_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_request_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
requested_srs_tx_characteristics_s& positioning_info_request_ies_o::value_c::requested_srs_tx_characteristics()
{
  assert_choice_type(types::requested_srs_tx_characteristics, type_, "Value");
  return c.get<requested_srs_tx_characteristics_s>();
}
ue_report_info_s& positioning_info_request_ies_o::value_c::ue_report_info()
{
  assert_choice_type(types::ue_report_info, type_, "Value");
  return c.get<ue_report_info_s>();
}
srs_pos_rrc_inactive_query_ind_e& positioning_info_request_ies_o::value_c::srs_pos_rrc_inactive_query_ind()
{
  assert_choice_type(types::srs_pos_rrc_inactive_query_ind, type_, "Value");
  return c.get<srs_pos_rrc_inactive_query_ind_e>();
}
const uint64_t& positioning_info_request_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_request_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const requested_srs_tx_characteristics_s&
positioning_info_request_ies_o::value_c::requested_srs_tx_characteristics() const
{
  assert_choice_type(types::requested_srs_tx_characteristics, type_, "Value");
  return c.get<requested_srs_tx_characteristics_s>();
}
const ue_report_info_s& positioning_info_request_ies_o::value_c::ue_report_info() const
{
  assert_choice_type(types::ue_report_info, type_, "Value");
  return c.get<ue_report_info_s>();
}
const srs_pos_rrc_inactive_query_ind_e& positioning_info_request_ies_o::value_c::srs_pos_rrc_inactive_query_ind() const
{
  assert_choice_type(types::srs_pos_rrc_inactive_query_ind, type_, "Value");
  return c.get<srs_pos_rrc_inactive_query_ind_e>();
}
void positioning_info_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::requested_srs_tx_characteristics:
      j.write_fieldname("RequestedSRSTransmissionCharacteristics");
      c.get<requested_srs_tx_characteristics_s>().to_json(j);
      break;
    case types::ue_report_info:
      j.write_fieldname("UEReportingInformation");
      c.get<ue_report_info_s>().to_json(j);
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      j.write_str("SRSPosRRCInactiveQueryIndication", "true");
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::requested_srs_tx_characteristics:
      HANDLE_CODE(c.get<requested_srs_tx_characteristics_s>().pack(bref));
      break;
    case types::ue_report_info:
      HANDLE_CODE(c.get<ue_report_info_s>().pack(bref));
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      HANDLE_CODE(c.get<srs_pos_rrc_inactive_query_ind_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::requested_srs_tx_characteristics:
      HANDLE_CODE(c.get<requested_srs_tx_characteristics_s>().unpack(bref));
      break;
    case types::ue_report_info:
      HANDLE_CODE(c.get<ue_report_info_s>().unpack(bref));
      break;
    case types::srs_pos_rrc_inactive_query_ind:
      HANDLE_CODE(c.get<srs_pos_rrc_inactive_query_ind_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 407, 419, 7, 674};
  return map_enum_number(names, 6, idx, "id");
}
bool positioning_info_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 407, 419, 7, 674};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 407:
      return crit_e::ignore;
    case 419:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    case 674:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_resp_ies_o::value_c positioning_info_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 419:
      ret.set(value_c::types::sfn_initisation_time);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 674:
      ret.set(value_c::types::srs_pos_rrc_inactive_cfg);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 407:
      return presence_e::optional;
    case 419:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 674:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.destroy<unbounded_octstring<true>>();
      break;
    default:
      break;
  }
}
void positioning_info_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.init<unbounded_octstring<true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }
}
positioning_info_resp_ies_o::value_c::value_c(const positioning_info_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.init(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }
}
positioning_info_resp_ies_o::value_c&
positioning_info_resp_ies_o::value_c::operator=(const positioning_info_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::srs_pos_rrc_inactive_cfg:
      c.set(other.c.get<unbounded_octstring<true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_resp_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_resp_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
srs_cfg_s& positioning_info_resp_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
fixed_bitstring<64, false, true>& positioning_info_resp_ies_o::value_c::sfn_initisation_time()
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
crit_diagnostics_s& positioning_info_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
unbounded_octstring<true>& positioning_info_resp_ies_o::value_c::srs_pos_rrc_inactive_cfg()
{
  assert_choice_type(types::srs_pos_rrc_inactive_cfg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
const uint64_t& positioning_info_resp_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_resp_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const srs_cfg_s& positioning_info_resp_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const fixed_bitstring<64, false, true>& positioning_info_resp_ies_o::value_c::sfn_initisation_time() const
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const crit_diagnostics_s& positioning_info_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const unbounded_octstring<true>& positioning_info_resp_ies_o::value_c::srs_pos_rrc_inactive_cfg() const
{
  assert_choice_type(types::srs_pos_rrc_inactive_cfg, type_, "Value");
  return c.get<unbounded_octstring<true>>();
}
void positioning_info_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::sfn_initisation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::srs_pos_rrc_inactive_cfg:
      j.write_str("OCTET STRING", c.get<unbounded_octstring<true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::srs_pos_rrc_inactive_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::srs_pos_rrc_inactive_cfg:
      HANDLE_CODE(c.get<unbounded_octstring<true>>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningInformationUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_info_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 407, 419};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_info_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 407, 419};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_info_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 407:
      return crit_e::ignore;
    case 419:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_info_upd_ies_o::value_c positioning_info_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 419:
      ret.set(value_c::types::sfn_initisation_time);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_info_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 407:
      return presence_e::optional;
    case 419:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_info_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_info_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::sfn_initisation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }
}
positioning_info_upd_ies_o::value_c::value_c(const positioning_info_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }
}
positioning_info_upd_ies_o::value_c&
positioning_info_upd_ies_o::value_c::operator=(const positioning_info_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::sfn_initisation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }

  return *this;
}
uint64_t& positioning_info_upd_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& positioning_info_upd_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
srs_cfg_s& positioning_info_upd_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
fixed_bitstring<64, false, true>& positioning_info_upd_ies_o::value_c::sfn_initisation_time()
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const uint64_t& positioning_info_upd_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& positioning_info_upd_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const srs_cfg_s& positioning_info_upd_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const fixed_bitstring<64, false, true>& positioning_info_upd_ies_o::value_c::sfn_initisation_time() const
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
void positioning_info_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::sfn_initisation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_info_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_info_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementAbortIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_abort_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411};
  return map_enum_number(names, 3, idx, "id");
}
bool positioning_meas_abort_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_abort_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_abort_ies_o::value_c positioning_meas_abort_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_abort_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_abort_ies_o::value_c::destroy_() {}
void positioning_meas_abort_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
}
positioning_meas_abort_ies_o::value_c::value_c(const positioning_meas_abort_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
  }
}
positioning_meas_abort_ies_o::value_c&
positioning_meas_abort_ies_o::value_c::operator=(const positioning_meas_abort_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_abort_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_abort_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_abort_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint16_t& positioning_meas_abort_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_abort_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_abort_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
void positioning_meas_abort_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_abort_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_abort_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_abort_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_meas_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_fail_ies_o::value_c positioning_meas_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_meas_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }
}
positioning_meas_fail_ies_o::value_c::value_c(const positioning_meas_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }
}
positioning_meas_fail_ies_o::value_c&
positioning_meas_fail_ies_o::value_c::operator=(const positioning_meas_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_fail_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_fail_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
cause_c& positioning_meas_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& positioning_meas_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& positioning_meas_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_fail_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_fail_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const cause_c& positioning_meas_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& positioning_meas_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_meas_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementFailureIndicationIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_fail_ind_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 0};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_meas_fail_ind_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 0};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_fail_ind_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_fail_ind_ies_o::value_c positioning_meas_fail_ind_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_fail_ind_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_fail_ind_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    default:
      break;
  }
}
void positioning_meas_fail_ind_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }
}
positioning_meas_fail_ind_ies_o::value_c::value_c(const positioning_meas_fail_ind_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }
}
positioning_meas_fail_ind_ies_o::value_c&
positioning_meas_fail_ind_ies_o::value_c::operator=(const positioning_meas_fail_ind_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_fail_ind_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_fail_ind_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_fail_ind_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
cause_c& positioning_meas_fail_ind_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const uint16_t& positioning_meas_fail_ind_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_fail_ind_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_fail_ind_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const cause_c& positioning_meas_fail_ind_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
void positioning_meas_fail_ind_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_fail_ind_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ind_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_fail_ind_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementReportIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 397};
  return map_enum_number(names, 4, idx, "id");
}
bool positioning_meas_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 397};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 397:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_report_ies_o::value_c positioning_meas_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 397:
      ret.set(value_c::types::pos_meas_result_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 397:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_meas_result_list:
      c.destroy<pos_meas_result_list_l>();
      break;
    default:
      break;
  }
}
void positioning_meas_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::pos_meas_result_list:
      c.init<pos_meas_result_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }
}
positioning_meas_report_ies_o::value_c::value_c(const positioning_meas_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.init(other.c.get<pos_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }
}
positioning_meas_report_ies_o::value_c&
positioning_meas_report_ies_o::value_c::operator=(const positioning_meas_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.set(other.c.get<pos_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_report_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_report_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_report_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
pos_meas_result_list_l& positioning_meas_report_ies_o::value_c::pos_meas_result_list()
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
const uint16_t& positioning_meas_report_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_report_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_report_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const pos_meas_result_list_l& positioning_meas_report_ies_o::value_c::pos_meas_result_list() const
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
void positioning_meas_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      j.start_array("PosMeasurementResultList");
      for (const auto& e1 : c.get<pos_meas_result_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_meas_result_list_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_meas_result_list_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 422, 408, 409, 396, 419, 407, 423, 420, 421, 438, 555, 574, 573, 634};
  return map_enum_number(names, 17, idx, "id");
}
bool positioning_meas_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 422, 408, 409, 396, 419, 407, 423, 420, 421, 438, 555, 574, 573, 634};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 422:
      return crit_e::reject;
    case 408:
      return crit_e::reject;
    case 409:
      return crit_e::reject;
    case 396:
      return crit_e::reject;
    case 419:
      return crit_e::ignore;
    case 407:
      return crit_e::ignore;
    case 423:
      return crit_e::ignore;
    case 420:
      return crit_e::ignore;
    case 421:
      return crit_e::ignore;
    case 438:
      return crit_e::reject;
    case 555:
      return crit_e::ignore;
    case 574:
      return crit_e::ignore;
    case 573:
      return crit_e::ignore;
    case 634:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_request_ies_o::value_c positioning_meas_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 422:
      ret.set(value_c::types::trp_meas_request_list);
      break;
    case 408:
      ret.set(value_c::types::pos_report_characteristics);
      break;
    case 409:
      ret.set(value_c::types::pos_meas_periodicity);
      break;
    case 396:
      ret.set(value_c::types::pos_meas_quantities);
      break;
    case 419:
      ret.set(value_c::types::sfn_initisation_time);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 423:
      ret.set(value_c::types::meas_beam_info_request);
      break;
    case 420:
      ret.set(value_c::types::sys_frame_num);
      break;
    case 421:
      ret.set(value_c::types::slot_num);
      break;
    case 438:
      ret.set(value_c::types::pos_meas_periodicity_extended);
      break;
    case 555:
      ret.set(value_c::types::resp_time);
      break;
    case 574:
      ret.set(value_c::types::meas_characteristics_request_ind);
      break;
    case 573:
      ret.set(value_c::types::meas_time_occasion);
      break;
    case 634:
      ret.set(value_c::types::pos_meas_amount);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 422:
      return presence_e::mandatory;
    case 408:
      return presence_e::mandatory;
    case 409:
      return presence_e::conditional;
    case 396:
      return presence_e::mandatory;
    case 419:
      return presence_e::optional;
    case 407:
      return presence_e::optional;
    case 423:
      return presence_e::optional;
    case 420:
      return presence_e::optional;
    case 421:
      return presence_e::optional;
    case 438:
      return presence_e::conditional;
    case 555:
      return presence_e::optional;
    case 574:
      return presence_e::optional;
    case 573:
      return presence_e::optional;
    case 634:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_meas_request_list:
      c.destroy<trp_meas_request_list_l>();
      break;
    case types::pos_meas_quantities:
      c.destroy<pos_meas_quantities_l>();
      break;
    case types::sfn_initisation_time:
      c.destroy<fixed_bitstring<64, false, true>>();
      break;
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::resp_time:
      c.destroy<resp_time_s>();
      break;
    case types::meas_characteristics_request_ind:
      c.destroy<fixed_bitstring<16, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_meas_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::trp_meas_request_list:
      c.init<trp_meas_request_list_l>();
      break;
    case types::pos_report_characteristics:
      break;
    case types::pos_meas_periodicity:
      break;
    case types::pos_meas_quantities:
      c.init<pos_meas_quantities_l>();
      break;
    case types::sfn_initisation_time:
      c.init<fixed_bitstring<64, false, true>>();
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::meas_beam_info_request:
      break;
    case types::sys_frame_num:
      break;
    case types::slot_num:
      break;
    case types::pos_meas_periodicity_extended:
      break;
    case types::resp_time:
      c.init<resp_time_s>();
      break;
    case types::meas_characteristics_request_ind:
      c.init<fixed_bitstring<16, false, true>>();
      break;
    case types::meas_time_occasion:
      break;
    case types::pos_meas_amount:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }
}
positioning_meas_request_ies_o::value_c::value_c(const positioning_meas_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::trp_meas_request_list:
      c.init(other.c.get<trp_meas_request_list_l>());
      break;
    case types::pos_report_characteristics:
      c.init(other.c.get<pos_report_characteristics_e>());
      break;
    case types::pos_meas_periodicity:
      c.init(other.c.get<meas_periodicity_e>());
      break;
    case types::pos_meas_quantities:
      c.init(other.c.get<pos_meas_quantities_l>());
      break;
    case types::sfn_initisation_time:
      c.init(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::meas_beam_info_request:
      c.init(other.c.get<meas_beam_info_request_e>());
      break;
    case types::sys_frame_num:
      c.init(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.init(other.c.get<uint8_t>());
      break;
    case types::pos_meas_periodicity_extended:
      c.init(other.c.get<meas_periodicity_extended_e>());
      break;
    case types::resp_time:
      c.init(other.c.get<resp_time_s>());
      break;
    case types::meas_characteristics_request_ind:
      c.init(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.init(other.c.get<meas_time_occasion_e>());
      break;
    case types::pos_meas_amount:
      c.init(other.c.get<pos_meas_amount_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }
}
positioning_meas_request_ies_o::value_c&
positioning_meas_request_ies_o::value_c::operator=(const positioning_meas_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::trp_meas_request_list:
      c.set(other.c.get<trp_meas_request_list_l>());
      break;
    case types::pos_report_characteristics:
      c.set(other.c.get<pos_report_characteristics_e>());
      break;
    case types::pos_meas_periodicity:
      c.set(other.c.get<meas_periodicity_e>());
      break;
    case types::pos_meas_quantities:
      c.set(other.c.get<pos_meas_quantities_l>());
      break;
    case types::sfn_initisation_time:
      c.set(other.c.get<fixed_bitstring<64, false, true>>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::meas_beam_info_request:
      c.set(other.c.get<meas_beam_info_request_e>());
      break;
    case types::sys_frame_num:
      c.set(other.c.get<uint16_t>());
      break;
    case types::slot_num:
      c.set(other.c.get<uint8_t>());
      break;
    case types::pos_meas_periodicity_extended:
      c.set(other.c.get<meas_periodicity_extended_e>());
      break;
    case types::resp_time:
      c.set(other.c.get<resp_time_s>());
      break;
    case types::meas_characteristics_request_ind:
      c.set(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.set(other.c.get<meas_time_occasion_e>());
      break;
    case types::pos_meas_amount:
      c.set(other.c.get<pos_meas_amount_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_request_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_request_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
trp_meas_request_list_l& positioning_meas_request_ies_o::value_c::trp_meas_request_list()
{
  assert_choice_type(types::trp_meas_request_list, type_, "Value");
  return c.get<trp_meas_request_list_l>();
}
pos_report_characteristics_e& positioning_meas_request_ies_o::value_c::pos_report_characteristics()
{
  assert_choice_type(types::pos_report_characteristics, type_, "Value");
  return c.get<pos_report_characteristics_e>();
}
meas_periodicity_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity()
{
  assert_choice_type(types::pos_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
pos_meas_quantities_l& positioning_meas_request_ies_o::value_c::pos_meas_quantities()
{
  assert_choice_type(types::pos_meas_quantities, type_, "Value");
  return c.get<pos_meas_quantities_l>();
}
fixed_bitstring<64, false, true>& positioning_meas_request_ies_o::value_c::sfn_initisation_time()
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
srs_cfg_s& positioning_meas_request_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
meas_beam_info_request_e& positioning_meas_request_ies_o::value_c::meas_beam_info_request()
{
  assert_choice_type(types::meas_beam_info_request, type_, "Value");
  return c.get<meas_beam_info_request_e>();
}
uint16_t& positioning_meas_request_ies_o::value_c::sys_frame_num()
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
uint8_t& positioning_meas_request_ies_o::value_c::slot_num()
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
meas_periodicity_extended_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity_extended()
{
  assert_choice_type(types::pos_meas_periodicity_extended, type_, "Value");
  return c.get<meas_periodicity_extended_e>();
}
resp_time_s& positioning_meas_request_ies_o::value_c::resp_time()
{
  assert_choice_type(types::resp_time, type_, "Value");
  return c.get<resp_time_s>();
}
fixed_bitstring<16, false, true>& positioning_meas_request_ies_o::value_c::meas_characteristics_request_ind()
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
meas_time_occasion_e& positioning_meas_request_ies_o::value_c::meas_time_occasion()
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
pos_meas_amount_e& positioning_meas_request_ies_o::value_c::pos_meas_amount()
{
  assert_choice_type(types::pos_meas_amount, type_, "Value");
  return c.get<pos_meas_amount_e>();
}
const uint16_t& positioning_meas_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_request_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_request_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const trp_meas_request_list_l& positioning_meas_request_ies_o::value_c::trp_meas_request_list() const
{
  assert_choice_type(types::trp_meas_request_list, type_, "Value");
  return c.get<trp_meas_request_list_l>();
}
const pos_report_characteristics_e& positioning_meas_request_ies_o::value_c::pos_report_characteristics() const
{
  assert_choice_type(types::pos_report_characteristics, type_, "Value");
  return c.get<pos_report_characteristics_e>();
}
const meas_periodicity_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity() const
{
  assert_choice_type(types::pos_meas_periodicity, type_, "Value");
  return c.get<meas_periodicity_e>();
}
const pos_meas_quantities_l& positioning_meas_request_ies_o::value_c::pos_meas_quantities() const
{
  assert_choice_type(types::pos_meas_quantities, type_, "Value");
  return c.get<pos_meas_quantities_l>();
}
const fixed_bitstring<64, false, true>& positioning_meas_request_ies_o::value_c::sfn_initisation_time() const
{
  assert_choice_type(types::sfn_initisation_time, type_, "Value");
  return c.get<fixed_bitstring<64, false, true>>();
}
const srs_cfg_s& positioning_meas_request_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const meas_beam_info_request_e& positioning_meas_request_ies_o::value_c::meas_beam_info_request() const
{
  assert_choice_type(types::meas_beam_info_request, type_, "Value");
  return c.get<meas_beam_info_request_e>();
}
const uint16_t& positioning_meas_request_ies_o::value_c::sys_frame_num() const
{
  assert_choice_type(types::sys_frame_num, type_, "Value");
  return c.get<uint16_t>();
}
const uint8_t& positioning_meas_request_ies_o::value_c::slot_num() const
{
  assert_choice_type(types::slot_num, type_, "Value");
  return c.get<uint8_t>();
}
const meas_periodicity_extended_e& positioning_meas_request_ies_o::value_c::pos_meas_periodicity_extended() const
{
  assert_choice_type(types::pos_meas_periodicity_extended, type_, "Value");
  return c.get<meas_periodicity_extended_e>();
}
const resp_time_s& positioning_meas_request_ies_o::value_c::resp_time() const
{
  assert_choice_type(types::resp_time, type_, "Value");
  return c.get<resp_time_s>();
}
const fixed_bitstring<16, false, true>&
positioning_meas_request_ies_o::value_c::meas_characteristics_request_ind() const
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
const meas_time_occasion_e& positioning_meas_request_ies_o::value_c::meas_time_occasion() const
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
const pos_meas_amount_e& positioning_meas_request_ies_o::value_c::pos_meas_amount() const
{
  assert_choice_type(types::pos_meas_amount, type_, "Value");
  return c.get<pos_meas_amount_e>();
}
void positioning_meas_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::trp_meas_request_list:
      j.start_array("TRP-MeasurementRequestList");
      for (const auto& e1 : c.get<trp_meas_request_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::pos_report_characteristics:
      j.write_str("PosReportCharacteristics", c.get<pos_report_characteristics_e>().to_string());
      break;
    case types::pos_meas_periodicity:
      j.write_str("MeasurementPeriodicity", c.get<meas_periodicity_e>().to_string());
      break;
    case types::pos_meas_quantities:
      j.start_array("PosMeasurementQuantities");
      for (const auto& e1 : c.get<pos_meas_quantities_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::sfn_initisation_time:
      j.write_str("BIT STRING", c.get<fixed_bitstring<64, false, true>>().to_string());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::meas_beam_info_request:
      j.write_str("MeasurementBeamInfoRequest", "true");
      break;
    case types::sys_frame_num:
      j.write_int("INTEGER (0..1023)", c.get<uint16_t>());
      break;
    case types::slot_num:
      j.write_int("INTEGER (0..79)", c.get<uint8_t>());
      break;
    case types::pos_meas_periodicity_extended:
      j.write_str("MeasurementPeriodicityExtended", c.get<meas_periodicity_extended_e>().to_string());
      break;
    case types::resp_time:
      j.write_fieldname("ResponseTime");
      c.get<resp_time_s>().to_json(j);
      break;
    case types::meas_characteristics_request_ind:
      j.write_str("BIT STRING", c.get<fixed_bitstring<16, false, true>>().to_string());
      break;
    case types::meas_time_occasion:
      j.write_str("MeasurementTimeOccasion", c.get<meas_time_occasion_e>().to_string());
      break;
    case types::pos_meas_amount:
      j.write_str("PosMeasurementAmount", c.get<pos_meas_amount_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::trp_meas_request_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_meas_request_list_l>(), 1, 64, true));
      break;
    case types::pos_report_characteristics:
      HANDLE_CODE(c.get<pos_report_characteristics_e>().pack(bref));
      break;
    case types::pos_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().pack(bref));
      break;
    case types::pos_meas_quantities:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_meas_quantities_l>(), 1, 16384, true));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().pack(bref)));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::meas_beam_info_request:
      HANDLE_CODE(c.get<meas_beam_info_request_e>().pack(bref));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::pos_meas_periodicity_extended:
      HANDLE_CODE(c.get<meas_periodicity_extended_e>().pack(bref));
      break;
    case types::resp_time:
      HANDLE_CODE(c.get<resp_time_s>().pack(bref));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().pack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().pack(bref));
      break;
    case types::pos_meas_amount:
      HANDLE_CODE(c.get<pos_meas_amount_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::trp_meas_request_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_meas_request_list_l>(), bref, 1, 64, true));
      break;
    case types::pos_report_characteristics:
      HANDLE_CODE(c.get<pos_report_characteristics_e>().unpack(bref));
      break;
    case types::pos_meas_periodicity:
      HANDLE_CODE(c.get<meas_periodicity_e>().unpack(bref));
      break;
    case types::pos_meas_quantities:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_meas_quantities_l>(), bref, 1, 16384, true));
      break;
    case types::sfn_initisation_time:
      HANDLE_CODE((c.get<fixed_bitstring<64, false, true>>().unpack(bref)));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::meas_beam_info_request:
      HANDLE_CODE(c.get<meas_beam_info_request_e>().unpack(bref));
      break;
    case types::sys_frame_num:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)1023u, false, true));
      break;
    case types::slot_num:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)79u, false, true));
      break;
    case types::pos_meas_periodicity_extended:
      HANDLE_CODE(c.get<meas_periodicity_extended_e>().unpack(bref));
      break;
    case types::resp_time:
      HANDLE_CODE(c.get<resp_time_s>().unpack(bref));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().unpack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().unpack(bref));
      break;
    case types::pos_meas_amount:
      HANDLE_CODE(c.get<pos_meas_amount_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 397, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool positioning_meas_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 397, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 397:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_resp_ies_o::value_c positioning_meas_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 397:
      ret.set(value_c::types::pos_meas_result_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 397:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pos_meas_result_list:
      c.destroy<pos_meas_result_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void positioning_meas_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::pos_meas_result_list:
      c.init<pos_meas_result_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }
}
positioning_meas_resp_ies_o::value_c::value_c(const positioning_meas_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.init(other.c.get<pos_meas_result_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }
}
positioning_meas_resp_ies_o::value_c&
positioning_meas_resp_ies_o::value_c::operator=(const positioning_meas_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      c.set(other.c.get<pos_meas_result_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_resp_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_resp_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
pos_meas_result_list_l& positioning_meas_resp_ies_o::value_c::pos_meas_result_list()
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
crit_diagnostics_s& positioning_meas_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& positioning_meas_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_resp_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_resp_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const pos_meas_result_list_l& positioning_meas_resp_ies_o::value_c::pos_meas_result_list() const
{
  assert_choice_type(types::pos_meas_result_list, type_, "Value");
  return c.get<pos_meas_result_list_l>();
}
const crit_diagnostics_s& positioning_meas_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void positioning_meas_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::pos_meas_result_list:
      j.start_array("PosMeasurementResultList");
      for (const auto& e1 : c.get<pos_meas_result_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<pos_meas_result_list_l>(), 1, 64, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::pos_meas_result_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<pos_meas_result_list_l>(), bref, 1, 64, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// PositioningMeasurementUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t positioning_meas_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 402, 411, 407, 553, 574, 573};
  return map_enum_number(names, 7, idx, "id");
}
bool positioning_meas_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 402, 411, 407, 553, 574, 573};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e positioning_meas_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 402:
      return crit_e::reject;
    case 411:
      return crit_e::reject;
    case 407:
      return crit_e::ignore;
    case 553:
      return crit_e::reject;
    case 574:
      return crit_e::ignore;
    case 573:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
positioning_meas_upd_ies_o::value_c positioning_meas_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 402:
      ret.set(value_c::types::lmf_meas_id);
      break;
    case 411:
      ret.set(value_c::types::ran_meas_id);
      break;
    case 407:
      ret.set(value_c::types::srs_cfg);
      break;
    case 553:
      ret.set(value_c::types::trp_meas_upd_list);
      break;
    case 574:
      ret.set(value_c::types::meas_characteristics_request_ind);
      break;
    case 573:
      ret.set(value_c::types::meas_time_occasion);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e positioning_meas_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 402:
      return presence_e::mandatory;
    case 411:
      return presence_e::mandatory;
    case 407:
      return presence_e::optional;
    case 553:
      return presence_e::optional;
    case 574:
      return presence_e::optional;
    case 573:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void positioning_meas_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::srs_cfg:
      c.destroy<srs_cfg_s>();
      break;
    case types::trp_meas_upd_list:
      c.destroy<trp_meas_upd_list_l>();
      break;
    case types::meas_characteristics_request_ind:
      c.destroy<fixed_bitstring<16, false, true>>();
      break;
    default:
      break;
  }
}
void positioning_meas_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::lmf_meas_id:
      break;
    case types::ran_meas_id:
      break;
    case types::srs_cfg:
      c.init<srs_cfg_s>();
      break;
    case types::trp_meas_upd_list:
      c.init<trp_meas_upd_list_l>();
      break;
    case types::meas_characteristics_request_ind:
      c.init<fixed_bitstring<16, false, true>>();
      break;
    case types::meas_time_occasion:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }
}
positioning_meas_upd_ies_o::value_c::value_c(const positioning_meas_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.init(other.c.get<uint32_t>());
      break;
    case types::srs_cfg:
      c.init(other.c.get<srs_cfg_s>());
      break;
    case types::trp_meas_upd_list:
      c.init(other.c.get<trp_meas_upd_list_l>());
      break;
    case types::meas_characteristics_request_ind:
      c.init(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.init(other.c.get<meas_time_occasion_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }
}
positioning_meas_upd_ies_o::value_c&
positioning_meas_upd_ies_o::value_c::operator=(const positioning_meas_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      c.set(other.c.get<uint32_t>());
      break;
    case types::srs_cfg:
      c.set(other.c.get<srs_cfg_s>());
      break;
    case types::trp_meas_upd_list:
      c.set(other.c.get<trp_meas_upd_list_l>());
      break;
    case types::meas_characteristics_request_ind:
      c.set(other.c.get<fixed_bitstring<16, false, true>>());
      break;
    case types::meas_time_occasion:
      c.set(other.c.get<meas_time_occasion_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& positioning_meas_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint32_t& positioning_meas_upd_ies_o::value_c::lmf_meas_id()
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& positioning_meas_upd_ies_o::value_c::ran_meas_id()
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
srs_cfg_s& positioning_meas_upd_ies_o::value_c::srs_cfg()
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
trp_meas_upd_list_l& positioning_meas_upd_ies_o::value_c::trp_meas_upd_list()
{
  assert_choice_type(types::trp_meas_upd_list, type_, "Value");
  return c.get<trp_meas_upd_list_l>();
}
fixed_bitstring<16, false, true>& positioning_meas_upd_ies_o::value_c::meas_characteristics_request_ind()
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
meas_time_occasion_e& positioning_meas_upd_ies_o::value_c::meas_time_occasion()
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
const uint16_t& positioning_meas_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint32_t& positioning_meas_upd_ies_o::value_c::lmf_meas_id() const
{
  assert_choice_type(types::lmf_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& positioning_meas_upd_ies_o::value_c::ran_meas_id() const
{
  assert_choice_type(types::ran_meas_id, type_, "Value");
  return c.get<uint32_t>();
}
const srs_cfg_s& positioning_meas_upd_ies_o::value_c::srs_cfg() const
{
  assert_choice_type(types::srs_cfg, type_, "Value");
  return c.get<srs_cfg_s>();
}
const trp_meas_upd_list_l& positioning_meas_upd_ies_o::value_c::trp_meas_upd_list() const
{
  assert_choice_type(types::trp_meas_upd_list, type_, "Value");
  return c.get<trp_meas_upd_list_l>();
}
const fixed_bitstring<16, false, true>& positioning_meas_upd_ies_o::value_c::meas_characteristics_request_ind() const
{
  assert_choice_type(types::meas_characteristics_request_ind, type_, "Value");
  return c.get<fixed_bitstring<16, false, true>>();
}
const meas_time_occasion_e& positioning_meas_upd_ies_o::value_c::meas_time_occasion() const
{
  assert_choice_type(types::meas_time_occasion, type_, "Value");
  return c.get<meas_time_occasion_e>();
}
void positioning_meas_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::lmf_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::ran_meas_id:
      j.write_int("INTEGER (1..65536,...)", c.get<uint32_t>());
      break;
    case types::srs_cfg:
      j.write_fieldname("SRSConfig");
      c.get<srs_cfg_s>().to_json(j);
      break;
    case types::trp_meas_upd_list:
      j.start_array("TRP-MeasurementUpdateList");
      for (const auto& e1 : c.get<trp_meas_upd_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::meas_characteristics_request_ind:
      j.write_str("BIT STRING", c.get<fixed_bitstring<16, false, true>>().to_string());
      break;
    case types::meas_time_occasion:
      j.write_str("MeasurementTimeOccasion", c.get<meas_time_occasion_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE positioning_meas_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().pack(bref));
      break;
    case types::trp_meas_upd_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_meas_upd_list_l>(), 1, 64, true));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().pack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::lmf_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::ran_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)1u, (uint32_t)65536u, true, true));
      break;
    case types::srs_cfg:
      HANDLE_CODE(c.get<srs_cfg_s>().unpack(bref));
      break;
    case types::trp_meas_upd_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_meas_upd_list_l>(), bref, 1, 64, true));
      break;
    case types::meas_characteristics_request_ind:
      HANDLE_CODE((c.get<fixed_bitstring<16, false, true>>().unpack(bref)));
      break;
    case types::meas_time_occasion:
      HANDLE_CODE(c.get<meas_time_occasion_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "positioning_meas_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// QoEInformationTransfer-IEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t qo_e_info_transfer_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 585};
  return map_enum_number(names, 3, idx, "id");
}
bool qo_e_info_transfer_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 585};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e qo_e_info_transfer_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 585:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
qo_e_info_transfer_ies_o::value_c qo_e_info_transfer_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 585:
      ret.set(value_c::types::qo_e_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e qo_e_info_transfer_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 585:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void qo_e_info_transfer_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::qo_e_info:
      c.destroy<qo_e_info_s>();
      break;
    default:
      break;
  }
}
void qo_e_info_transfer_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::qo_e_info:
      c.init<qo_e_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }
}
qo_e_info_transfer_ies_o::value_c::value_c(const qo_e_info_transfer_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::qo_e_info:
      c.init(other.c.get<qo_e_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }
}
qo_e_info_transfer_ies_o::value_c&
qo_e_info_transfer_ies_o::value_c::operator=(const qo_e_info_transfer_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::qo_e_info:
      c.set(other.c.get<qo_e_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }

  return *this;
}
uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
qo_e_info_s& qo_e_info_transfer_ies_o::value_c::qo_e_info()
{
  assert_choice_type(types::qo_e_info, type_, "Value");
  return c.get<qo_e_info_s>();
}
const uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& qo_e_info_transfer_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const qo_e_info_s& qo_e_info_transfer_ies_o::value_c::qo_e_info() const
{
  assert_choice_type(types::qo_e_info, type_, "Value");
  return c.get<qo_e_info_s>();
}
void qo_e_info_transfer_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::qo_e_info:
      j.write_fieldname("QoEInformation");
      c.get<qo_e_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE qo_e_info_transfer_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::qo_e_info:
      HANDLE_CODE(c.get<qo_e_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE qo_e_info_transfer_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::qo_e_info:
      HANDLE_CODE(c.get<qo_e_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "qo_e_info_transfer_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// RRCDeliveryReportIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t rrc_delivery_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 185, 64};
  return map_enum_number(names, 4, idx, "id");
}
bool rrc_delivery_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 185, 64};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e rrc_delivery_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 185:
      return crit_e::ignore;
    case 64:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
rrc_delivery_report_ies_o::value_c rrc_delivery_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 185:
      ret.set(value_c::types::rrc_delivery_status);
      break;
    case 64:
      ret.set(value_c::types::srb_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e rrc_delivery_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 185:
      return presence_e::mandatory;
    case 64:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void rrc_delivery_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::rrc_delivery_status:
      c.destroy<rrc_delivery_status_s>();
      break;
    default:
      break;
  }
}
void rrc_delivery_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::rrc_delivery_status:
      c.init<rrc_delivery_status_s>();
      break;
    case types::srb_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
}
rrc_delivery_report_ies_o::value_c::value_c(const rrc_delivery_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      c.init(other.c.get<rrc_delivery_status_s>());
      break;
    case types::srb_id:
      c.init(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
}
rrc_delivery_report_ies_o::value_c&
rrc_delivery_report_ies_o::value_c::operator=(const rrc_delivery_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      c.set(other.c.get<rrc_delivery_status_s>());
      break;
    case types::srb_id:
      c.set(other.c.get<uint8_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }

  return *this;
}
uint64_t& rrc_delivery_report_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& rrc_delivery_report_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
rrc_delivery_status_s& rrc_delivery_report_ies_o::value_c::rrc_delivery_status()
{
  assert_choice_type(types::rrc_delivery_status, type_, "Value");
  return c.get<rrc_delivery_status_s>();
}
uint8_t& rrc_delivery_report_ies_o::value_c::srb_id()
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
const uint64_t& rrc_delivery_report_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& rrc_delivery_report_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const rrc_delivery_status_s& rrc_delivery_report_ies_o::value_c::rrc_delivery_status() const
{
  assert_choice_type(types::rrc_delivery_status, type_, "Value");
  return c.get<rrc_delivery_status_s>();
}
const uint8_t& rrc_delivery_report_ies_o::value_c::srb_id() const
{
  assert_choice_type(types::srb_id, type_, "Value");
  return c.get<uint8_t>();
}
void rrc_delivery_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::rrc_delivery_status:
      j.write_fieldname("RRCDeliveryStatus");
      c.get<rrc_delivery_status_s>().to_json(j);
      break;
    case types::srb_id:
      j.write_int("INTEGER (0..3,...)", c.get<uint8_t>());
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE rrc_delivery_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::rrc_delivery_status:
      HANDLE_CODE(c.get<rrc_delivery_status_s>().pack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint8_t>(), (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_delivery_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::rrc_delivery_status:
      HANDLE_CODE(c.get<rrc_delivery_status_s>().unpack(bref));
      break;
    case types::srb_id:
      HANDLE_CODE(unpack_integer(c.get<uint8_t>(), bref, (uint8_t)0u, (uint8_t)3u, true, true));
      break;
    default:
      log_invalid_choice_id(type_, "rrc_delivery_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ReferenceTimeInformationReportIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ref_time_info_report_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 366};
  return map_enum_number(names, 2, idx, "id");
}
bool ref_time_info_report_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 366};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ref_time_info_report_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::ignore;
    case 366:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ref_time_info_report_ies_o::value_c ref_time_info_report_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 366:
      ret.set(value_c::types::time_ref_info);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ref_time_info_report_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 366:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ref_time_info_report_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::time_ref_info:
      c.destroy<time_ref_info_s>();
      break;
    default:
      break;
  }
}
void ref_time_info_report_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::time_ref_info:
      c.init<time_ref_info_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }
}
ref_time_info_report_ies_o::value_c::value_c(const ref_time_info_report_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::time_ref_info:
      c.init(other.c.get<time_ref_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }
}
ref_time_info_report_ies_o::value_c&
ref_time_info_report_ies_o::value_c::operator=(const ref_time_info_report_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::time_ref_info:
      c.set(other.c.get<time_ref_info_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }

  return *this;
}
uint16_t& ref_time_info_report_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
time_ref_info_s& ref_time_info_report_ies_o::value_c::time_ref_info()
{
  assert_choice_type(types::time_ref_info, type_, "Value");
  return c.get<time_ref_info_s>();
}
const uint16_t& ref_time_info_report_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const time_ref_info_s& ref_time_info_report_ies_o::value_c::time_ref_info() const
{
  assert_choice_type(types::time_ref_info, type_, "Value");
  return c.get<time_ref_info_s>();
}
void ref_time_info_report_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::time_ref_info:
      j.write_fieldname("TimeReferenceInformation");
      c.get<time_ref_info_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ref_time_info_report_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::time_ref_info:
      HANDLE_CODE(c.get<time_ref_info_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::time_ref_info:
      HANDLE_CODE(c.get<time_ref_info_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ReferenceTimeInformationReportingControlIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t ref_time_info_report_ctrl_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 365};
  return map_enum_number(names, 2, idx, "id");
}
bool ref_time_info_report_ctrl_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 365};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e ref_time_info_report_ctrl_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 365:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
ref_time_info_report_ctrl_ies_o::value_c ref_time_info_report_ctrl_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 365:
      ret.set(value_c::types::report_request_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e ref_time_info_report_ctrl_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 365:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void ref_time_info_report_ctrl_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::report_request_type:
      c.destroy<report_request_type_s>();
      break;
    default:
      break;
  }
}
void ref_time_info_report_ctrl_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::report_request_type:
      c.init<report_request_type_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }
}
ref_time_info_report_ctrl_ies_o::value_c::value_c(const ref_time_info_report_ctrl_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::report_request_type:
      c.init(other.c.get<report_request_type_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }
}
ref_time_info_report_ctrl_ies_o::value_c&
ref_time_info_report_ctrl_ies_o::value_c::operator=(const ref_time_info_report_ctrl_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::report_request_type:
      c.set(other.c.get<report_request_type_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }

  return *this;
}
uint16_t& ref_time_info_report_ctrl_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
report_request_type_s& ref_time_info_report_ctrl_ies_o::value_c::report_request_type()
{
  assert_choice_type(types::report_request_type, type_, "Value");
  return c.get<report_request_type_s>();
}
const uint16_t& ref_time_info_report_ctrl_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const report_request_type_s& ref_time_info_report_ctrl_ies_o::value_c::report_request_type() const
{
  assert_choice_type(types::report_request_type, type_, "Value");
  return c.get<report_request_type_s>();
}
void ref_time_info_report_ctrl_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::report_request_type:
      j.write_fieldname("ReportingRequestType");
      c.get<report_request_type_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE ref_time_info_report_ctrl_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::report_request_type:
      HANDLE_CODE(c.get<report_request_type_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ctrl_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::report_request_type:
      HANDLE_CODE(c.get<report_request_type_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "ref_time_info_report_ctrl_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResetAcknowledgeIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t reset_ack_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 81, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool reset_ack_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 81, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e reset_ack_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 81:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
reset_ack_ies_o::value_c reset_ack_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 81:
      ret.set(value_c::types::ue_associated_lc_f1_conn_list_res_ack);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e reset_ack_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 81:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void reset_ack_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.destroy<ue_associated_lc_f1_conn_list_res_ack_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void reset_ack_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.init<ue_associated_lc_f1_conn_list_res_ack_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
}
reset_ack_ies_o::value_c::value_c(const reset_ack_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.init(other.c.get<ue_associated_lc_f1_conn_list_res_ack_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
}
reset_ack_ies_o::value_c& reset_ack_ies_o::value_c::operator=(const reset_ack_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      c.set(other.c.get<ue_associated_lc_f1_conn_list_res_ack_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }

  return *this;
}
uint16_t& reset_ack_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
ue_associated_lc_f1_conn_list_res_ack_l& reset_ack_ies_o::value_c::ue_associated_lc_f1_conn_list_res_ack()
{
  assert_choice_type(types::ue_associated_lc_f1_conn_list_res_ack, type_, "Value");
  return c.get<ue_associated_lc_f1_conn_list_res_ack_l>();
}
crit_diagnostics_s& reset_ack_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& reset_ack_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const ue_associated_lc_f1_conn_list_res_ack_l& reset_ack_ies_o::value_c::ue_associated_lc_f1_conn_list_res_ack() const
{
  assert_choice_type(types::ue_associated_lc_f1_conn_list_res_ack, type_, "Value");
  return c.get<ue_associated_lc_f1_conn_list_res_ack_l>();
}
const crit_diagnostics_s& reset_ack_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void reset_ack_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      j.start_array("UE-associatedLogicalF1-ConnectionListResAck");
      for (const auto& e1 : c.get<ue_associated_lc_f1_conn_list_res_ack_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_ack_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ue_associated_lc_f1_conn_list_res_ack_l>(), 1, 65536, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ack_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::ue_associated_lc_f1_conn_list_res_ack:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ue_associated_lc_f1_conn_list_res_ack_l>(), bref, 1, 65536, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ack_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResetIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t reset_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 48};
  return map_enum_number(names, 3, idx, "id");
}
bool reset_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 48};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e reset_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 48:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
reset_ies_o::value_c reset_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 48:
      ret.set(value_c::types::reset_type);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e reset_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 48:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void reset_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::reset_type:
      c.destroy<reset_type_c>();
      break;
    default:
      break;
  }
}
void reset_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::reset_type:
      c.init<reset_type_c>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
}
reset_ies_o::value_c::value_c(const reset_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::reset_type:
      c.init(other.c.get<reset_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
}
reset_ies_o::value_c& reset_ies_o::value_c::operator=(const reset_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::reset_type:
      c.set(other.c.get<reset_type_c>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }

  return *this;
}
uint16_t& reset_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& reset_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
reset_type_c& reset_ies_o::value_c::reset_type()
{
  assert_choice_type(types::reset_type, type_, "Value");
  return c.get<reset_type_c>();
}
const uint16_t& reset_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& reset_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const reset_type_c& reset_ies_o::value_c::reset_type() const
{
  assert_choice_type(types::reset_type, type_, "Value");
  return c.get<reset_type_c>();
}
void reset_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::reset_type:
      j.write_fieldname("ResetType");
      c.get<reset_type_c>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE reset_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::reset_type:
      HANDLE_CODE(c.get<reset_type_c>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::reset_type:
      HANDLE_CODE(c.get<reset_type_c>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "reset_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 0, 7};
  return map_enum_number(names, 5, idx, "id");
}
bool res_status_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_fail_ies_o::value_c res_status_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void res_status_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }
}
res_status_fail_ies_o::value_c::value_c(const res_status_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }
}
res_status_fail_ies_o::value_c& res_status_fail_ies_o::value_c::operator=(const res_status_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_fail_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_fail_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& res_status_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& res_status_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& res_status_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_fail_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_fail_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& res_status_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& res_status_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void res_status_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 347, 348, 349, 352};
  return map_enum_number(names, 7, idx, "id");
}
bool res_status_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 347, 348, 349, 352};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 347:
      return crit_e::ignore;
    case 348:
      return crit_e::ignore;
    case 349:
      return crit_e::ignore;
    case 352:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_request_ies_o::value_c res_status_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 347:
      ret.set(value_c::types::regist_request);
      break;
    case 348:
      ret.set(value_c::types::report_characteristics);
      break;
    case 349:
      ret.set(value_c::types::cell_to_report_list);
      break;
    case 352:
      ret.set(value_c::types::report_periodicity);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::conditional;
    case 347:
      return presence_e::mandatory;
    case 348:
      return presence_e::conditional;
    case 349:
      return presence_e::optional;
    case 352:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::report_characteristics:
      c.destroy<fixed_bitstring<32, false, true>>();
      break;
    case types::cell_to_report_list:
      c.destroy<cell_to_report_list_l>();
      break;
    default:
      break;
  }
}
void res_status_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::regist_request:
      break;
    case types::report_characteristics:
      c.init<fixed_bitstring<32, false, true>>();
      break;
    case types::cell_to_report_list:
      c.init<cell_to_report_list_l>();
      break;
    case types::report_periodicity:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }
}
res_status_request_ies_o::value_c::value_c(const res_status_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::regist_request:
      c.init(other.c.get<regist_request_e>());
      break;
    case types::report_characteristics:
      c.init(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::cell_to_report_list:
      c.init(other.c.get<cell_to_report_list_l>());
      break;
    case types::report_periodicity:
      c.init(other.c.get<report_periodicity_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }
}
res_status_request_ies_o::value_c&
res_status_request_ies_o::value_c::operator=(const res_status_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::regist_request:
      c.set(other.c.get<regist_request_e>());
      break;
    case types::report_characteristics:
      c.set(other.c.get<fixed_bitstring<32, false, true>>());
      break;
    case types::cell_to_report_list:
      c.set(other.c.get<cell_to_report_list_l>());
      break;
    case types::report_periodicity:
      c.set(other.c.get<report_periodicity_e>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_request_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_request_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
regist_request_e& res_status_request_ies_o::value_c::regist_request()
{
  assert_choice_type(types::regist_request, type_, "Value");
  return c.get<regist_request_e>();
}
fixed_bitstring<32, false, true>& res_status_request_ies_o::value_c::report_characteristics()
{
  assert_choice_type(types::report_characteristics, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
cell_to_report_list_l& res_status_request_ies_o::value_c::cell_to_report_list()
{
  assert_choice_type(types::cell_to_report_list, type_, "Value");
  return c.get<cell_to_report_list_l>();
}
report_periodicity_e& res_status_request_ies_o::value_c::report_periodicity()
{
  assert_choice_type(types::report_periodicity, type_, "Value");
  return c.get<report_periodicity_e>();
}
const uint16_t& res_status_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_request_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_request_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const regist_request_e& res_status_request_ies_o::value_c::regist_request() const
{
  assert_choice_type(types::regist_request, type_, "Value");
  return c.get<regist_request_e>();
}
const fixed_bitstring<32, false, true>& res_status_request_ies_o::value_c::report_characteristics() const
{
  assert_choice_type(types::report_characteristics, type_, "Value");
  return c.get<fixed_bitstring<32, false, true>>();
}
const cell_to_report_list_l& res_status_request_ies_o::value_c::cell_to_report_list() const
{
  assert_choice_type(types::cell_to_report_list, type_, "Value");
  return c.get<cell_to_report_list_l>();
}
const report_periodicity_e& res_status_request_ies_o::value_c::report_periodicity() const
{
  assert_choice_type(types::report_periodicity, type_, "Value");
  return c.get<report_periodicity_e>();
}
void res_status_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::regist_request:
      j.write_str("RegistrationRequest", c.get<regist_request_e>().to_string());
      break;
    case types::report_characteristics:
      j.write_str("BIT STRING", c.get<fixed_bitstring<32, false, true>>().to_string());
      break;
    case types::cell_to_report_list:
      j.start_array("CellToReportList");
      for (const auto& e1 : c.get<cell_to_report_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::report_periodicity:
      j.write_str("ReportingPeriodicity", c.get<report_periodicity_e>().to_string());
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::regist_request:
      HANDLE_CODE(c.get<regist_request_e>().pack(bref));
      break;
    case types::report_characteristics:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().pack(bref)));
      break;
    case types::cell_to_report_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cell_to_report_list_l>(), 1, 512, true));
      break;
    case types::report_periodicity:
      HANDLE_CODE(c.get<report_periodicity_e>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::regist_request:
      HANDLE_CODE(c.get<regist_request_e>().unpack(bref));
      break;
    case types::report_characteristics:
      HANDLE_CODE((c.get<fixed_bitstring<32, false, true>>().unpack(bref)));
      break;
    case types::cell_to_report_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cell_to_report_list_l>(), bref, 1, 512, true));
      break;
    case types::report_periodicity:
      HANDLE_CODE(c.get<report_periodicity_e>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 7};
  return map_enum_number(names, 4, idx, "id");
}
bool res_status_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_resp_ies_o::value_c res_status_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void res_status_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }
}
res_status_resp_ies_o::value_c::value_c(const res_status_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }
}
res_status_resp_ies_o::value_c& res_status_resp_ies_o::value_c::operator=(const res_status_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_resp_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_resp_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
crit_diagnostics_s& res_status_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& res_status_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_resp_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_resp_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const crit_diagnostics_s& res_status_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void res_status_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// ResourceStatusUpdateIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t res_status_upd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 345, 346, 351, 353, 350};
  return map_enum_number(names, 6, idx, "id");
}
bool res_status_upd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 345, 346, 351, 353, 350};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e res_status_upd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 345:
      return crit_e::reject;
    case 346:
      return crit_e::ignore;
    case 351:
      return crit_e::ignore;
    case 353:
      return crit_e::ignore;
    case 350:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
res_status_upd_ies_o::value_c res_status_upd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 345:
      ret.set(value_c::types::gnb_cu_meas_id);
      break;
    case 346:
      ret.set(value_c::types::gnb_du_meas_id);
      break;
    case 351:
      ret.set(value_c::types::hardware_load_ind);
      break;
    case 353:
      ret.set(value_c::types::tnl_capacity_ind);
      break;
    case 350:
      ret.set(value_c::types::cell_meas_result_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e res_status_upd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 345:
      return presence_e::mandatory;
    case 346:
      return presence_e::mandatory;
    case 351:
      return presence_e::optional;
    case 353:
      return presence_e::optional;
    case 350:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void res_status_upd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::hardware_load_ind:
      c.destroy<hardware_load_ind_s>();
      break;
    case types::tnl_capacity_ind:
      c.destroy<tnl_capacity_ind_s>();
      break;
    case types::cell_meas_result_list:
      c.destroy<cell_meas_result_list_l>();
      break;
    default:
      break;
  }
}
void res_status_upd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::gnb_cu_meas_id:
      break;
    case types::gnb_du_meas_id:
      break;
    case types::hardware_load_ind:
      c.init<hardware_load_ind_s>();
      break;
    case types::tnl_capacity_ind:
      c.init<tnl_capacity_ind_s>();
      break;
    case types::cell_meas_result_list:
      c.init<cell_meas_result_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }
}
res_status_upd_ies_o::value_c::value_c(const res_status_upd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::hardware_load_ind:
      c.init(other.c.get<hardware_load_ind_s>());
      break;
    case types::tnl_capacity_ind:
      c.init(other.c.get<tnl_capacity_ind_s>());
      break;
    case types::cell_meas_result_list:
      c.init(other.c.get<cell_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }
}
res_status_upd_ies_o::value_c& res_status_upd_ies_o::value_c::operator=(const res_status_upd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::hardware_load_ind:
      c.set(other.c.get<hardware_load_ind_s>());
      break;
    case types::tnl_capacity_ind:
      c.set(other.c.get<tnl_capacity_ind_s>());
      break;
    case types::cell_meas_result_list:
      c.set(other.c.get<cell_meas_result_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }

  return *this;
}
uint16_t& res_status_upd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_upd_ies_o::value_c::gnb_cu_meas_id()
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
uint16_t& res_status_upd_ies_o::value_c::gnb_du_meas_id()
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
hardware_load_ind_s& res_status_upd_ies_o::value_c::hardware_load_ind()
{
  assert_choice_type(types::hardware_load_ind, type_, "Value");
  return c.get<hardware_load_ind_s>();
}
tnl_capacity_ind_s& res_status_upd_ies_o::value_c::tnl_capacity_ind()
{
  assert_choice_type(types::tnl_capacity_ind, type_, "Value");
  return c.get<tnl_capacity_ind_s>();
}
cell_meas_result_list_l& res_status_upd_ies_o::value_c::cell_meas_result_list()
{
  assert_choice_type(types::cell_meas_result_list, type_, "Value");
  return c.get<cell_meas_result_list_l>();
}
const uint16_t& res_status_upd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_upd_ies_o::value_c::gnb_cu_meas_id() const
{
  assert_choice_type(types::gnb_cu_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const uint16_t& res_status_upd_ies_o::value_c::gnb_du_meas_id() const
{
  assert_choice_type(types::gnb_du_meas_id, type_, "Value");
  return c.get<uint16_t>();
}
const hardware_load_ind_s& res_status_upd_ies_o::value_c::hardware_load_ind() const
{
  assert_choice_type(types::hardware_load_ind, type_, "Value");
  return c.get<hardware_load_ind_s>();
}
const tnl_capacity_ind_s& res_status_upd_ies_o::value_c::tnl_capacity_ind() const
{
  assert_choice_type(types::tnl_capacity_ind, type_, "Value");
  return c.get<tnl_capacity_ind_s>();
}
const cell_meas_result_list_l& res_status_upd_ies_o::value_c::cell_meas_result_list() const
{
  assert_choice_type(types::cell_meas_result_list, type_, "Value");
  return c.get<cell_meas_result_list_l>();
}
void res_status_upd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::gnb_cu_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::gnb_du_meas_id:
      j.write_int("INTEGER (0..4095,...)", c.get<uint16_t>());
      break;
    case types::hardware_load_ind:
      j.write_fieldname("HardwareLoadIndicator");
      c.get<hardware_load_ind_s>().to_json(j);
      break;
    case types::tnl_capacity_ind:
      j.write_fieldname("TNLCapacityIndicator");
      c.get<tnl_capacity_ind_s>().to_json(j);
      break;
    case types::cell_meas_result_list:
      j.start_array("CellMeasurementResultList");
      for (const auto& e1 : c.get<cell_meas_result_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE res_status_upd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::hardware_load_ind:
      HANDLE_CODE(c.get<hardware_load_ind_s>().pack(bref));
      break;
    case types::tnl_capacity_ind:
      HANDLE_CODE(c.get<tnl_capacity_ind_s>().pack(bref));
      break;
    case types::cell_meas_result_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cell_meas_result_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_upd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::gnb_cu_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::gnb_du_meas_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)4095u, true, true));
      break;
    case types::hardware_load_ind:
      HANDLE_CODE(c.get<hardware_load_ind_s>().unpack(bref));
      break;
    case types::tnl_capacity_ind:
      HANDLE_CODE(c.get<tnl_capacity_ind_s>().unpack(bref));
      break;
    case types::cell_meas_result_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cell_meas_result_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "res_status_upd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// SystemInformationDeliveryCommandIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t sys_info_delivery_cmd_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 111, 116, 156};
  return map_enum_number(names, 4, idx, "id");
}
bool sys_info_delivery_cmd_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 111, 116, 156};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e sys_info_delivery_cmd_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 111:
      return crit_e::reject;
    case 116:
      return crit_e::reject;
    case 156:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
sys_info_delivery_cmd_ies_o::value_c sys_info_delivery_cmd_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 111:
      ret.set(value_c::types::nr_cgi);
      break;
    case 116:
      ret.set(value_c::types::sitype_list);
      break;
    case 156:
      ret.set(value_c::types::confirmed_ue_id);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e sys_info_delivery_cmd_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 111:
      return presence_e::mandatory;
    case 116:
      return presence_e::mandatory;
    case 156:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void sys_info_delivery_cmd_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::nr_cgi:
      c.destroy<nr_cgi_s>();
      break;
    case types::sitype_list:
      c.destroy<sitype_list_l>();
      break;
    default:
      break;
  }
}
void sys_info_delivery_cmd_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::nr_cgi:
      c.init<nr_cgi_s>();
      break;
    case types::sitype_list:
      c.init<sitype_list_l>();
      break;
    case types::confirmed_ue_id:
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
}
sys_info_delivery_cmd_ies_o::value_c::value_c(const sys_info_delivery_cmd_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.init(other.c.get<nr_cgi_s>());
      break;
    case types::sitype_list:
      c.init(other.c.get<sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
}
sys_info_delivery_cmd_ies_o::value_c&
sys_info_delivery_cmd_ies_o::value_c::operator=(const sys_info_delivery_cmd_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::nr_cgi:
      c.set(other.c.get<nr_cgi_s>());
      break;
    case types::sitype_list:
      c.set(other.c.get<sitype_list_l>());
      break;
    case types::confirmed_ue_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }

  return *this;
}
uint16_t& sys_info_delivery_cmd_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
nr_cgi_s& sys_info_delivery_cmd_ies_o::value_c::nr_cgi()
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
sitype_list_l& sys_info_delivery_cmd_ies_o::value_c::sitype_list()
{
  assert_choice_type(types::sitype_list, type_, "Value");
  return c.get<sitype_list_l>();
}
uint64_t& sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id()
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint16_t& sys_info_delivery_cmd_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const nr_cgi_s& sys_info_delivery_cmd_ies_o::value_c::nr_cgi() const
{
  assert_choice_type(types::nr_cgi, type_, "Value");
  return c.get<nr_cgi_s>();
}
const sitype_list_l& sys_info_delivery_cmd_ies_o::value_c::sitype_list() const
{
  assert_choice_type(types::sitype_list, type_, "Value");
  return c.get<sitype_list_l>();
}
const uint64_t& sys_info_delivery_cmd_ies_o::value_c::confirmed_ue_id() const
{
  assert_choice_type(types::confirmed_ue_id, type_, "Value");
  return c.get<uint64_t>();
}
void sys_info_delivery_cmd_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::nr_cgi:
      j.write_fieldname("NRCGI");
      c.get<nr_cgi_s>().to_json(j);
      break;
    case types::sitype_list:
      j.start_array("SItype-List");
      for (const auto& e1 : c.get<sitype_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::confirmed_ue_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE sys_info_delivery_cmd_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().pack(bref));
      break;
    case types::sitype_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<sitype_list_l>(), 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_delivery_cmd_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::nr_cgi:
      HANDLE_CODE(c.get<nr_cgi_s>().unpack(bref));
      break;
    case types::sitype_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<sitype_list_l>(), bref, 1, 32, true));
      break;
    case types::confirmed_ue_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    default:
      log_invalid_choice_id(type_, "sys_info_delivery_cmd_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TRPInformationFailureIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_fail_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 0, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool trp_info_fail_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 0, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trp_info_fail_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 0:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trp_info_fail_ies_o::value_c trp_info_fail_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 0:
      ret.set(value_c::types::cause);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_fail_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 0:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trp_info_fail_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cause:
      c.destroy<cause_c>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void trp_info_fail_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cause:
      c.init<cause_c>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }
}
trp_info_fail_ies_o::value_c::value_c(const trp_info_fail_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.init(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }
}
trp_info_fail_ies_o::value_c& trp_info_fail_ies_o::value_c::operator=(const trp_info_fail_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cause:
      c.set(other.c.get<cause_c>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }

  return *this;
}
uint16_t& trp_info_fail_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cause_c& trp_info_fail_ies_o::value_c::cause()
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
crit_diagnostics_s& trp_info_fail_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& trp_info_fail_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cause_c& trp_info_fail_ies_o::value_c::cause() const
{
  assert_choice_type(types::cause, type_, "Value");
  return c.get<cause_c>();
}
const crit_diagnostics_s& trp_info_fail_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void trp_info_fail_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cause:
      j.write_fieldname("Cause");
      c.get<cause_c>().to_json(j);
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trp_info_fail_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().pack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_fail_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cause:
      HANDLE_CODE(c.get<cause_c>().unpack(bref));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_fail_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TRPInformationRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 410, 398};
  return map_enum_number(names, 3, idx, "id");
}
bool trp_info_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 410, 398};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trp_info_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 410:
      return crit_e::ignore;
    case 398:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trp_info_request_ies_o::value_c trp_info_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 410:
      ret.set(value_c::types::trp_list);
      break;
    case 398:
      ret.set(value_c::types::trp_info_type_list_trp_req);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 410:
      return presence_e::optional;
    case 398:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trp_info_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_list:
      c.destroy<trp_list_l>();
      break;
    case types::trp_info_type_list_trp_req:
      c.destroy<trp_info_type_list_trp_req_l>();
      break;
    default:
      break;
  }
}
void trp_info_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::trp_list:
      c.init<trp_list_l>();
      break;
    case types::trp_info_type_list_trp_req:
      c.init<trp_info_type_list_trp_req_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }
}
trp_info_request_ies_o::value_c::value_c(const trp_info_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::trp_list:
      c.init(other.c.get<trp_list_l>());
      break;
    case types::trp_info_type_list_trp_req:
      c.init(other.c.get<trp_info_type_list_trp_req_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }
}
trp_info_request_ies_o::value_c&
trp_info_request_ies_o::value_c::operator=(const trp_info_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::trp_list:
      c.set(other.c.get<trp_list_l>());
      break;
    case types::trp_info_type_list_trp_req:
      c.set(other.c.get<trp_info_type_list_trp_req_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& trp_info_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
trp_list_l& trp_info_request_ies_o::value_c::trp_list()
{
  assert_choice_type(types::trp_list, type_, "Value");
  return c.get<trp_list_l>();
}
trp_info_type_list_trp_req_l& trp_info_request_ies_o::value_c::trp_info_type_list_trp_req()
{
  assert_choice_type(types::trp_info_type_list_trp_req, type_, "Value");
  return c.get<trp_info_type_list_trp_req_l>();
}
const uint16_t& trp_info_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const trp_list_l& trp_info_request_ies_o::value_c::trp_list() const
{
  assert_choice_type(types::trp_list, type_, "Value");
  return c.get<trp_list_l>();
}
const trp_info_type_list_trp_req_l& trp_info_request_ies_o::value_c::trp_info_type_list_trp_req() const
{
  assert_choice_type(types::trp_info_type_list_trp_req, type_, "Value");
  return c.get<trp_info_type_list_trp_req_l>();
}
void trp_info_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::trp_list:
      j.start_array("TRPList");
      for (const auto& e1 : c.get<trp_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::trp_info_type_list_trp_req:
      j.start_array("TRPInformationTypeListTRPReq");
      for (const auto& e1 : c.get<trp_info_type_list_trp_req_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trp_info_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_list_l>(), 1, 65535, true));
      break;
    case types::trp_info_type_list_trp_req:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_info_type_list_trp_req_l>(), 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_list_l>(), bref, 1, 65535, true));
      break;
    case types::trp_info_type_list_trp_req:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_info_type_list_trp_req_l>(), bref, 1, 64, true));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TRPInformationResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trp_info_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 400, 7};
  return map_enum_number(names, 3, idx, "id");
}
bool trp_info_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 400, 7};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trp_info_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 400:
      return crit_e::ignore;
    case 7:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trp_info_resp_ies_o::value_c trp_info_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 400:
      ret.set(value_c::types::trp_info_list_trp_resp);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trp_info_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 400:
      return presence_e::mandatory;
    case 7:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trp_info_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trp_info_list_trp_resp:
      c.destroy<trp_info_list_trp_resp_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    default:
      break;
  }
}
void trp_info_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::trp_info_list_trp_resp:
      c.init<trp_info_list_trp_resp_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }
}
trp_info_resp_ies_o::value_c::value_c(const trp_info_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::trp_info_list_trp_resp:
      c.init(other.c.get<trp_info_list_trp_resp_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }
}
trp_info_resp_ies_o::value_c& trp_info_resp_ies_o::value_c::operator=(const trp_info_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::trp_info_list_trp_resp:
      c.set(other.c.get<trp_info_list_trp_resp_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& trp_info_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
trp_info_list_trp_resp_l& trp_info_resp_ies_o::value_c::trp_info_list_trp_resp()
{
  assert_choice_type(types::trp_info_list_trp_resp, type_, "Value");
  return c.get<trp_info_list_trp_resp_l>();
}
crit_diagnostics_s& trp_info_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const uint16_t& trp_info_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const trp_info_list_trp_resp_l& trp_info_resp_ies_o::value_c::trp_info_list_trp_resp() const
{
  assert_choice_type(types::trp_info_list_trp_resp, type_, "Value");
  return c.get<trp_info_list_trp_resp_l>();
}
const crit_diagnostics_s& trp_info_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
void trp_info_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::trp_info_list_trp_resp:
      j.start_array("TRPInformationListTRPResp");
      for (const auto& e1 : c.get<trp_info_list_trp_resp_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trp_info_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_info_list_trp_resp:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<trp_info_list_trp_resp_l>(), 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::trp_info_list_trp_resp:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<trp_info_list_trp_resp_l>(), bref, 1, 65535, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trp_info_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// TraceStartIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t trace_start_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {40, 41, 242};
  return map_enum_number(names, 3, idx, "id");
}
bool trace_start_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {40, 41, 242};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e trace_start_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 40:
      return crit_e::reject;
    case 41:
      return crit_e::reject;
    case 242:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
trace_start_ies_o::value_c trace_start_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 40:
      ret.set(value_c::types::gnb_cu_ue_f1ap_id);
      break;
    case 41:
      ret.set(value_c::types::gnb_du_ue_f1ap_id);
      break;
    case 242:
      ret.set(value_c::types::trace_activation);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e trace_start_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 40:
      return presence_e::mandatory;
    case 41:
      return presence_e::mandatory;
    case 242:
      return presence_e::mandatory;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void trace_start_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::trace_activation:
      c.destroy<trace_activation_s>();
      break;
    default:
      break;
  }
}
void trace_start_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      break;
    case types::gnb_du_ue_f1ap_id:
      break;
    case types::trace_activation:
      c.init<trace_activation_s>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }
}
trace_start_ies_o::value_c::value_c(const trace_start_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.init(other.c.get<uint64_t>());
      break;
    case types::trace_activation:
      c.init(other.c.get<trace_activation_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }
}
trace_start_ies_o::value_c& trace_start_ies_o::value_c::operator=(const trace_start_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      c.set(other.c.get<uint64_t>());
      break;
    case types::trace_activation:
      c.set(other.c.get<trace_activation_s>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }

  return *this;
}
uint64_t& trace_start_ies_o::value_c::gnb_cu_ue_f1ap_id()
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
uint64_t& trace_start_ies_o::value_c::gnb_du_ue_f1ap_id()
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
trace_activation_s& trace_start_ies_o::value_c::trace_activation()
{
  assert_choice_type(types::trace_activation, type_, "Value");
  return c.get<trace_activation_s>();
}
const uint64_t& trace_start_ies_o::value_c::gnb_cu_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_cu_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const uint64_t& trace_start_ies_o::value_c::gnb_du_ue_f1ap_id() const
{
  assert_choice_type(types::gnb_du_ue_f1ap_id, type_, "Value");
  return c.get<uint64_t>();
}
const trace_activation_s& trace_start_ies_o::value_c::trace_activation() const
{
  assert_choice_type(types::trace_activation, type_, "Value");
  return c.get<trace_activation_s>();
}
void trace_start_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::gnb_du_ue_f1ap_id:
      j.write_int("INTEGER (0..4294967295)", c.get<uint64_t>());
      break;
    case types::trace_activation:
      j.write_fieldname("TraceActivation");
      c.get<trace_activation_s>().to_json(j);
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE trace_start_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint64_t>(), (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_activation:
      HANDLE_CODE(c.get<trace_activation_s>().pack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE trace_start_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::gnb_cu_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::gnb_du_ue_f1ap_id:
      HANDLE_CODE(unpack_integer(c.get<uint64_t>(), bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
      break;
    case types::trace_activation:
      HANDLE_CODE(c.get<trace_activation_s>().unpack(bref));
      break;
    default:
      log_invalid_choice_id(type_, "trace_start_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// WriteReplaceWarningRequestIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t write_replace_warning_request_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 140, 141, 142, 144};
  return map_enum_number(names, 5, idx, "id");
}
bool write_replace_warning_request_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 140, 141, 142, 144};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e write_replace_warning_request_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 140:
      return crit_e::reject;
    case 141:
      return crit_e::reject;
    case 142:
      return crit_e::reject;
    case 144:
      return crit_e::reject;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
write_replace_warning_request_ies_o::value_c write_replace_warning_request_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 140:
      ret.set(value_c::types::pws_sys_info);
      break;
    case 141:
      ret.set(value_c::types::repeat_period);
      break;
    case 142:
      ret.set(value_c::types::numof_broadcast_request);
      break;
    case 144:
      ret.set(value_c::types::cells_to_be_broadcast_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e write_replace_warning_request_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 140:
      return presence_e::mandatory;
    case 141:
      return presence_e::mandatory;
    case 142:
      return presence_e::mandatory;
    case 144:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void write_replace_warning_request_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::pws_sys_info:
      c.destroy<pws_sys_info_s>();
      break;
    case types::cells_to_be_broadcast_list:
      c.destroy<cells_to_be_broadcast_list_l>();
      break;
    default:
      break;
  }
}
void write_replace_warning_request_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::pws_sys_info:
      c.init<pws_sys_info_s>();
      break;
    case types::repeat_period:
      break;
    case types::numof_broadcast_request:
      break;
    case types::cells_to_be_broadcast_list:
      c.init<cells_to_be_broadcast_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
}
write_replace_warning_request_ies_o::value_c::value_c(const write_replace_warning_request_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      c.init(other.c.get<pws_sys_info_s>());
      break;
    case types::repeat_period:
      c.init(other.c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      c.init(other.c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      c.init(other.c.get<cells_to_be_broadcast_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
}
write_replace_warning_request_ies_o::value_c&
write_replace_warning_request_ies_o::value_c::operator=(const write_replace_warning_request_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      c.set(other.c.get<pws_sys_info_s>());
      break;
    case types::repeat_period:
      c.set(other.c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      c.set(other.c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      c.set(other.c.get<cells_to_be_broadcast_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }

  return *this;
}
uint16_t& write_replace_warning_request_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
pws_sys_info_s& write_replace_warning_request_ies_o::value_c::pws_sys_info()
{
  assert_choice_type(types::pws_sys_info, type_, "Value");
  return c.get<pws_sys_info_s>();
}
uint32_t& write_replace_warning_request_ies_o::value_c::repeat_period()
{
  assert_choice_type(types::repeat_period, type_, "Value");
  return c.get<uint32_t>();
}
uint32_t& write_replace_warning_request_ies_o::value_c::numof_broadcast_request()
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
cells_to_be_broadcast_list_l& write_replace_warning_request_ies_o::value_c::cells_to_be_broadcast_list()
{
  assert_choice_type(types::cells_to_be_broadcast_list, type_, "Value");
  return c.get<cells_to_be_broadcast_list_l>();
}
const uint16_t& write_replace_warning_request_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const pws_sys_info_s& write_replace_warning_request_ies_o::value_c::pws_sys_info() const
{
  assert_choice_type(types::pws_sys_info, type_, "Value");
  return c.get<pws_sys_info_s>();
}
const uint32_t& write_replace_warning_request_ies_o::value_c::repeat_period() const
{
  assert_choice_type(types::repeat_period, type_, "Value");
  return c.get<uint32_t>();
}
const uint32_t& write_replace_warning_request_ies_o::value_c::numof_broadcast_request() const
{
  assert_choice_type(types::numof_broadcast_request, type_, "Value");
  return c.get<uint32_t>();
}
const cells_to_be_broadcast_list_l& write_replace_warning_request_ies_o::value_c::cells_to_be_broadcast_list() const
{
  assert_choice_type(types::cells_to_be_broadcast_list, type_, "Value");
  return c.get<cells_to_be_broadcast_list_l>();
}
void write_replace_warning_request_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::pws_sys_info:
      j.write_fieldname("PWSSystemInformation");
      c.get<pws_sys_info_s>().to_json(j);
      break;
    case types::repeat_period:
      j.write_int("INTEGER (0..131071,...)", c.get<uint32_t>());
      break;
    case types::numof_broadcast_request:
      j.write_int("INTEGER (0..65535)", c.get<uint32_t>());
      break;
    case types::cells_to_be_broadcast_list:
      j.start_array("Cells-To-Be-Broadcast-List");
      for (const auto& e1 : c.get<cells_to_be_broadcast_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE write_replace_warning_request_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_sys_info:
      HANDLE_CODE(c.get<pws_sys_info_s>().pack(bref));
      break;
    case types::repeat_period:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)131071u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(pack_integer(bref, c.get<uint32_t>(), (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::cells_to_be_broadcast_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_to_be_broadcast_list_l>(), 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_request_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::pws_sys_info:
      HANDLE_CODE(c.get<pws_sys_info_s>().unpack(bref));
      break;
    case types::repeat_period:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)131071u, true, true));
      break;
    case types::numof_broadcast_request:
      HANDLE_CODE(unpack_integer(c.get<uint32_t>(), bref, (uint32_t)0u, (uint32_t)65535u, false, true));
      break;
    case types::cells_to_be_broadcast_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_to_be_broadcast_list_l>(), bref, 1, 512, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_request_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

// WriteReplaceWarningResponseIEs ::= OBJECT SET OF F1AP-PROTOCOL-IES
uint32_t write_replace_warning_resp_ies_o::idx_to_id(uint32_t idx)
{
  static const uint32_t names[] = {78, 146, 7, 189};
  return map_enum_number(names, 4, idx, "id");
}
bool write_replace_warning_resp_ies_o::is_id_valid(const uint32_t& id)
{
  static const uint32_t names[] = {78, 146, 7, 189};
  for (const auto& o : names) {
    if (o == id) {
      return true;
    }
  }
  return false;
}
crit_e write_replace_warning_resp_ies_o::get_crit(const uint32_t& id)
{
  switch (id) {
    case 78:
      return crit_e::reject;
    case 146:
      return crit_e::reject;
    case 7:
      return crit_e::ignore;
    case 189:
      return crit_e::ignore;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}
write_replace_warning_resp_ies_o::value_c write_replace_warning_resp_ies_o::get_value(const uint32_t& id)
{
  value_c ret{};
  switch (id) {
    case 78:
      ret.set(value_c::types::transaction_id);
      break;
    case 146:
      ret.set(value_c::types::cells_broadcast_completed_list);
      break;
    case 7:
      ret.set(value_c::types::crit_diagnostics);
      break;
    case 189:
      ret.set(value_c::types::ded_si_delivery_needed_ue_list);
      break;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return ret;
}
presence_e write_replace_warning_resp_ies_o::get_presence(const uint32_t& id)
{
  switch (id) {
    case 78:
      return presence_e::mandatory;
    case 146:
      return presence_e::optional;
    case 7:
      return presence_e::optional;
    case 189:
      return presence_e::optional;
    default:
      asn1::log_error("The id={} is not recognized", id);
  }
  return {};
}

// Value ::= OPEN TYPE
void write_replace_warning_resp_ies_o::value_c::destroy_()
{
  switch (type_) {
    case types::cells_broadcast_completed_list:
      c.destroy<cells_broadcast_completed_list_l>();
      break;
    case types::crit_diagnostics:
      c.destroy<crit_diagnostics_s>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.destroy<ded_si_delivery_needed_ue_list_l>();
      break;
    default:
      break;
  }
}
void write_replace_warning_resp_ies_o::value_c::set(types::options e)
{
  destroy_();
  type_ = e;
  switch (type_) {
    case types::transaction_id:
      break;
    case types::cells_broadcast_completed_list:
      c.init<cells_broadcast_completed_list_l>();
      break;
    case types::crit_diagnostics:
      c.init<crit_diagnostics_s>();
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init<ded_si_delivery_needed_ue_list_l>();
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
}
write_replace_warning_resp_ies_o::value_c::value_c(const write_replace_warning_resp_ies_o::value_c& other)
{
  type_ = other.type();
  switch (type_) {
    case types::transaction_id:
      c.init(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      c.init(other.c.get<cells_broadcast_completed_list_l>());
      break;
    case types::crit_diagnostics:
      c.init(other.c.get<crit_diagnostics_s>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.init(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
}
write_replace_warning_resp_ies_o::value_c&
write_replace_warning_resp_ies_o::value_c::operator=(const write_replace_warning_resp_ies_o::value_c& other)
{
  if (this == &other) {
    return *this;
  }
  set(other.type());
  switch (type_) {
    case types::transaction_id:
      c.set(other.c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      c.set(other.c.get<cells_broadcast_completed_list_l>());
      break;
    case types::crit_diagnostics:
      c.set(other.c.get<crit_diagnostics_s>());
      break;
    case types::ded_si_delivery_needed_ue_list:
      c.set(other.c.get<ded_si_delivery_needed_ue_list_l>());
      break;
    case types::nulltype:
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }

  return *this;
}
uint16_t& write_replace_warning_resp_ies_o::value_c::transaction_id()
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
cells_broadcast_completed_list_l& write_replace_warning_resp_ies_o::value_c::cells_broadcast_completed_list()
{
  assert_choice_type(types::cells_broadcast_completed_list, type_, "Value");
  return c.get<cells_broadcast_completed_list_l>();
}
crit_diagnostics_s& write_replace_warning_resp_ies_o::value_c::crit_diagnostics()
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
ded_si_delivery_needed_ue_list_l& write_replace_warning_resp_ies_o::value_c::ded_si_delivery_needed_ue_list()
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
const uint16_t& write_replace_warning_resp_ies_o::value_c::transaction_id() const
{
  assert_choice_type(types::transaction_id, type_, "Value");
  return c.get<uint16_t>();
}
const cells_broadcast_completed_list_l&
write_replace_warning_resp_ies_o::value_c::cells_broadcast_completed_list() const
{
  assert_choice_type(types::cells_broadcast_completed_list, type_, "Value");
  return c.get<cells_broadcast_completed_list_l>();
}
const crit_diagnostics_s& write_replace_warning_resp_ies_o::value_c::crit_diagnostics() const
{
  assert_choice_type(types::crit_diagnostics, type_, "Value");
  return c.get<crit_diagnostics_s>();
}
const ded_si_delivery_needed_ue_list_l&
write_replace_warning_resp_ies_o::value_c::ded_si_delivery_needed_ue_list() const
{
  assert_choice_type(types::ded_si_delivery_needed_ue_list, type_, "Value");
  return c.get<ded_si_delivery_needed_ue_list_l>();
}
void write_replace_warning_resp_ies_o::value_c::to_json(json_writer& j) const
{
  j.start_obj();
  switch (type_) {
    case types::transaction_id:
      j.write_int("INTEGER (0..255,...)", c.get<uint16_t>());
      break;
    case types::cells_broadcast_completed_list:
      j.start_array("Cells-Broadcast-Completed-List");
      for (const auto& e1 : c.get<cells_broadcast_completed_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    case types::crit_diagnostics:
      j.write_fieldname("CriticalityDiagnostics");
      c.get<crit_diagnostics_s>().to_json(j);
      break;
    case types::ded_si_delivery_needed_ue_list:
      j.start_array("Dedicated-SIDelivery-NeededUE-List");
      for (const auto& e1 : c.get<ded_si_delivery_needed_ue_list_l>()) {
        e1.to_json(j);
      }
      j.end_array();
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
  }
  j.end_obj();
}
SRSASN_CODE write_replace_warning_resp_ies_o::value_c::pack(bit_ref& bref) const
{
  varlength_field_pack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(pack_integer(bref, c.get<uint16_t>(), (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_completed_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<cells_broadcast_completed_list_l>(), 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().pack(bref));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(pack_dyn_seq_of(bref, c.get<ded_si_delivery_needed_ue_list_l>(), 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
      return SRSASN_ERROR_ENCODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_resp_ies_o::value_c::unpack(cbit_ref& bref)
{
  varlength_field_unpack_guard varlen_scope(bref, true);
  switch (type_) {
    case types::transaction_id:
      HANDLE_CODE(unpack_integer(c.get<uint16_t>(), bref, (uint16_t)0u, (uint16_t)255u, true, true));
      break;
    case types::cells_broadcast_completed_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<cells_broadcast_completed_list_l>(), bref, 1, 512, true));
      break;
    case types::crit_diagnostics:
      HANDLE_CODE(c.get<crit_diagnostics_s>().unpack(bref));
      break;
    case types::ded_si_delivery_needed_ue_list:
      HANDLE_CODE(unpack_dyn_seq_of(c.get<ded_si_delivery_needed_ue_list_l>(), bref, 1, 65536, true));
      break;
    default:
      log_invalid_choice_id(type_, "write_replace_warning_resp_ies_o::value_c");
      return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}

SRSASN_CODE f1_removal_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_removal_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE f1_removal_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_removal_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_removal_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE f1_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (time_to_wait_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)77, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_int("id", 77);
    j.write_str("criticality", "ignore");
    j.write_str("Value", time_to_wait.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE f1_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += gnb_du_name_present ? 1 : 0;
  nof_ies += gnb_du_served_cells_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += extended_gnb_du_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)42, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_id, (uint64_t)0u, (uint64_t)68719476735u, false, true));
  }
  if (gnb_du_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)45, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(gnb_du_name.pack(bref));
  }
  if (gnb_du_served_cells_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)44, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, gnb_du_served_cells_list, 1, 512, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)171, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(gnb_du_rrc_version.pack(bref));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)254, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)281, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (extended_gnb_du_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)427, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(extended_gnb_du_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 42: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_id, bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
        break;
      }
      case 45: {
        gnb_du_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_name.unpack(bref));
        break;
      }
      case 44: {
        gnb_du_served_cells_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(gnb_du_served_cells_list, bref, 1, 512, true));
        break;
      }
      case 171: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_rrc_version.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.unpack(bref));
        break;
      }
      case 427: {
        extended_gnb_du_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_du_name.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 42);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_id);
  if (gnb_du_name_present) {
    j.write_int("id", 45);
    j.write_str("criticality", "ignore");
    j.write_str("Value", gnb_du_name.to_string());
  }
  if (gnb_du_served_cells_list_present) {
    j.write_int("id", 44);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : gnb_du_served_cells_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_int("id", 171);
  j.write_str("criticality", "reject");
  gnb_du_rrc_version.to_json(j);
  if (transport_layer_address_info_present) {
    j.write_int("id", 254);
    j.write_str("criticality", "ignore");
    transport_layer_address_info.to_json(j);
  }
  if (bap_address_present) {
    j.write_int("id", 281);
    j.write_str("criticality", "ignore");
    j.write_str("Value", bap_address.to_string());
  }
  if (extended_gnb_du_name_present) {
    j.write_int("id", 427);
    j.write_str("criticality", "ignore");
    extended_gnb_du_name.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE f1_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_cu_name_present ? 1 : 0;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += ul_bh_non_up_traffic_map_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += extended_gnb_cu_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (gnb_cu_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)82, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(gnb_cu_name.pack(bref));
  }
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)3, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_be_activ_list, 1, 512, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)170, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(gnb_cu_rrc_version.pack(bref));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)254, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (ul_bh_non_up_traffic_map_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)287, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ul_bh_non_up_traffic_map.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)281, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (extended_gnb_cu_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)426, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(extended_gnb_cu_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE f1_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 82: {
        gnb_cu_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_name.unpack(bref));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_to_be_activ_list, bref, 1, 512, true));
        break;
      }
      case 170: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_rrc_version.unpack(bref));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.unpack(bref));
        break;
      }
      case 287: {
        ul_bh_non_up_traffic_map_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_bh_non_up_traffic_map.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.unpack(bref));
        break;
      }
      case 426: {
        extended_gnb_cu_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_cu_name.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void f1_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (gnb_cu_name_present) {
    j.write_int("id", 82);
    j.write_str("criticality", "ignore");
    j.write_str("Value", gnb_cu_name.to_string());
  }
  if (cells_to_be_activ_list_present) {
    j.write_int("id", 3);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_to_be_activ_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_int("id", 170);
  j.write_str("criticality", "reject");
  gnb_cu_rrc_version.to_json(j);
  if (transport_layer_address_info_present) {
    j.write_int("id", 254);
    j.write_str("criticality", "ignore");
    transport_layer_address_info.to_json(j);
  }
  if (ul_bh_non_up_traffic_map_present) {
    j.write_int("id", 287);
    j.write_str("criticality", "reject");
    ul_bh_non_up_traffic_map.to_json(j);
  }
  if (bap_address_present) {
    j.write_int("id", 281);
    j.write_str("criticality", "ignore");
    j.write_str("Value", bap_address.to_string());
  }
  if (extended_gnb_cu_name_present) {
    j.write_int("id", 426);
    j.write_str("criticality", "ignore");
    extended_gnb_cu_name.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_cu_cfg_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += cells_to_be_deactiv_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_add_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_rem_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_to_upd_list_present ? 1 : 0;
  nof_ies += cells_to_be_barred_list_present ? 1 : 0;
  nof_ies += protected_eutra_res_list_present ? 1 : 0;
  nof_ies += neighbour_cell_info_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += ul_bh_non_up_traffic_map_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += cco_assist_info_present ? 1 : 0;
  nof_ies += cells_for_son_list_present ? 1 : 0;
  nof_ies += gnb_cu_name_present ? 1 : 0;
  nof_ies += extended_gnb_cu_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)3, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_be_activ_list, 1, 512, true));
  }
  if (cells_to_be_deactiv_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)5, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_be_deactiv_list, 1, 512, true));
  }
  if (gnb_cu_tnl_assoc_to_add_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)121, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, gnb_cu_tnl_assoc_to_add_list, 1, 32, true));
  }
  if (gnb_cu_tnl_assoc_to_rem_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)123, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, gnb_cu_tnl_assoc_to_rem_list, 1, 32, true));
  }
  if (gnb_cu_tnl_assoc_to_upd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)125, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, gnb_cu_tnl_assoc_to_upd_list, 1, 32, true));
  }
  if (cells_to_be_barred_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)129, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_be_barred_list, 1, 512, true));
  }
  if (protected_eutra_res_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)105, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, protected_eutra_res_list, 1, 256, true));
  }
  if (neighbour_cell_info_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)244, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, neighbour_cell_info_list, 1, 512, true));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)254, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (ul_bh_non_up_traffic_map_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)287, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ul_bh_non_up_traffic_map.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)281, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (cco_assist_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)447, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cco_assist_info.pack(bref));
  }
  if (cells_for_son_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)449, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_for_son_list, 1, 256, true));
  }
  if (gnb_cu_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)82, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(gnb_cu_name.pack(bref));
  }
  if (extended_gnb_cu_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)426, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(extended_gnb_cu_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_to_be_activ_list, bref, 1, 512, true));
        break;
      }
      case 5: {
        cells_to_be_deactiv_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_to_be_deactiv_list, bref, 1, 512, true));
        break;
      }
      case 121: {
        gnb_cu_tnl_assoc_to_add_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(gnb_cu_tnl_assoc_to_add_list, bref, 1, 32, true));
        break;
      }
      case 123: {
        gnb_cu_tnl_assoc_to_rem_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(gnb_cu_tnl_assoc_to_rem_list, bref, 1, 32, true));
        break;
      }
      case 125: {
        gnb_cu_tnl_assoc_to_upd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(gnb_cu_tnl_assoc_to_upd_list, bref, 1, 32, true));
        break;
      }
      case 129: {
        cells_to_be_barred_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_to_be_barred_list, bref, 1, 512, true));
        break;
      }
      case 105: {
        protected_eutra_res_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(protected_eutra_res_list, bref, 1, 256, true));
        break;
      }
      case 244: {
        neighbour_cell_info_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(neighbour_cell_info_list, bref, 1, 512, true));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.unpack(bref));
        break;
      }
      case 287: {
        ul_bh_non_up_traffic_map_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_bh_non_up_traffic_map.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.unpack(bref));
        break;
      }
      case 447: {
        cco_assist_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cco_assist_info.unpack(bref));
        break;
      }
      case 449: {
        cells_for_son_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_for_son_list, bref, 1, 256, true));
        break;
      }
      case 82: {
        gnb_cu_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_cu_name.unpack(bref));
        break;
      }
      case 426: {
        extended_gnb_cu_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_cu_name.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (cells_to_be_activ_list_present) {
    j.write_int("id", 3);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_to_be_activ_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (cells_to_be_deactiv_list_present) {
    j.write_int("id", 5);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_to_be_deactiv_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (gnb_cu_tnl_assoc_to_add_list_present) {
    j.write_int("id", 121);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : gnb_cu_tnl_assoc_to_add_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (gnb_cu_tnl_assoc_to_rem_list_present) {
    j.write_int("id", 123);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : gnb_cu_tnl_assoc_to_rem_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (gnb_cu_tnl_assoc_to_upd_list_present) {
    j.write_int("id", 125);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : gnb_cu_tnl_assoc_to_upd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (cells_to_be_barred_list_present) {
    j.write_int("id", 129);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : cells_to_be_barred_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (protected_eutra_res_list_present) {
    j.write_int("id", 105);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : protected_eutra_res_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (neighbour_cell_info_list_present) {
    j.write_int("id", 244);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : neighbour_cell_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (transport_layer_address_info_present) {
    j.write_int("id", 254);
    j.write_str("criticality", "ignore");
    transport_layer_address_info.to_json(j);
  }
  if (ul_bh_non_up_traffic_map_present) {
    j.write_int("id", 287);
    j.write_str("criticality", "reject");
    ul_bh_non_up_traffic_map.to_json(j);
  }
  if (bap_address_present) {
    j.write_int("id", 281);
    j.write_str("criticality", "ignore");
    j.write_str("Value", bap_address.to_string());
  }
  if (cco_assist_info_present) {
    j.write_int("id", 447);
    j.write_str("criticality", "ignore");
    cco_assist_info.to_json(j);
  }
  if (cells_for_son_list_present) {
    j.write_int("id", 449);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : cells_for_son_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (gnb_cu_name_present) {
    j.write_int("id", 82);
    j.write_str("criticality", "ignore");
    j.write_str("Value", gnb_cu_name.to_string());
  }
  if (extended_gnb_cu_name_present) {
    j.write_int("id", 426);
    j.write_str("criticality", "ignore");
    extended_gnb_cu_name.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_cu_cfg_upd_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_failed_to_be_activ_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_setup_list_present ? 1 : 0;
  nof_ies += gnb_cu_tnl_assoc_failed_to_setup_list_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (cells_failed_to_be_activ_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)1, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_failed_to_be_activ_list, 1, 512, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (gnb_cu_tnl_assoc_setup_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)132, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, gnb_cu_tnl_assoc_setup_list, 1, 32, true));
  }
  if (gnb_cu_tnl_assoc_failed_to_setup_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)134, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, gnb_cu_tnl_assoc_failed_to_setup_list, 1, 32, true));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)189, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, ded_si_delivery_needed_ue_list, 1, 65536, true));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)254, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 1: {
        cells_failed_to_be_activ_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_failed_to_be_activ_list, bref, 1, 512, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      case 132: {
        gnb_cu_tnl_assoc_setup_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(gnb_cu_tnl_assoc_setup_list, bref, 1, 32, true));
        break;
      }
      case 134: {
        gnb_cu_tnl_assoc_failed_to_setup_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(gnb_cu_tnl_assoc_failed_to_setup_list, bref, 1, 32, true));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(ded_si_delivery_needed_ue_list, bref, 1, 65536, true));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (cells_failed_to_be_activ_list_present) {
    j.write_int("id", 1);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_failed_to_be_activ_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  if (gnb_cu_tnl_assoc_setup_list_present) {
    j.write_int("id", 132);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : gnb_cu_tnl_assoc_setup_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (gnb_cu_tnl_assoc_failed_to_setup_list_present) {
    j.write_int("id", 134);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : gnb_cu_tnl_assoc_failed_to_setup_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_int("id", 189);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : ded_si_delivery_needed_ue_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (transport_layer_address_info_present) {
    j.write_int("id", 254);
    j.write_str("criticality", "ignore");
    transport_layer_address_info.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_cu_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (time_to_wait_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)77, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_cu_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_cu_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_int("id", 77);
    j.write_str("criticality", "ignore");
    j.write_str("Value", time_to_wait.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_cfg_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += served_cells_to_add_list_present ? 1 : 0;
  nof_ies += served_cells_to_modify_list_present ? 1 : 0;
  nof_ies += served_cells_to_delete_list_present ? 1 : 0;
  nof_ies += cells_status_list_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  nof_ies += gnb_du_id_present ? 1 : 0;
  nof_ies += gnb_du_tnl_assoc_to_rem_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += coverage_mod_notif_present ? 1 : 0;
  nof_ies += gnb_du_name_present ? 1 : 0;
  nof_ies += extended_gnb_du_name_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (served_cells_to_add_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)58, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, served_cells_to_add_list, 1, 512, true));
  }
  if (served_cells_to_modify_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)62, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, served_cells_to_modify_list, 1, 512, true));
  }
  if (served_cells_to_delete_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)60, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, served_cells_to_delete_list, 1, 512, true));
  }
  if (cells_status_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)89, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_status_list, 0, 512, true));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)189, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, ded_si_delivery_needed_ue_list, 1, 65536, true));
  }
  if (gnb_du_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)42, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_id, (uint64_t)0u, (uint64_t)68719476735u, false, true));
  }
  if (gnb_du_tnl_assoc_to_rem_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)228, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, gnb_du_tnl_assoc_to_rem_list, 1, 32, true));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)254, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (coverage_mod_notif_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)446, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(coverage_mod_notif.pack(bref));
  }
  if (gnb_du_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)45, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(gnb_du_name.pack(bref));
  }
  if (extended_gnb_du_name_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)427, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(extended_gnb_du_name.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 58: {
        served_cells_to_add_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(served_cells_to_add_list, bref, 1, 512, true));
        break;
      }
      case 62: {
        served_cells_to_modify_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(served_cells_to_modify_list, bref, 1, 512, true));
        break;
      }
      case 60: {
        served_cells_to_delete_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(served_cells_to_delete_list, bref, 1, 512, true));
        break;
      }
      case 89: {
        cells_status_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_status_list, bref, 0, 512, true));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(ded_si_delivery_needed_ue_list, bref, 1, 65536, true));
        break;
      }
      case 42: {
        gnb_du_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_id, bref, (uint64_t)0u, (uint64_t)68719476735u, false, true));
        break;
      }
      case 228: {
        gnb_du_tnl_assoc_to_rem_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(gnb_du_tnl_assoc_to_rem_list, bref, 1, 32, true));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.unpack(bref));
        break;
      }
      case 446: {
        coverage_mod_notif_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(coverage_mod_notif.unpack(bref));
        break;
      }
      case 45: {
        gnb_du_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_name.unpack(bref));
        break;
      }
      case 427: {
        extended_gnb_du_name_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_gnb_du_name.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (served_cells_to_add_list_present) {
    j.write_int("id", 58);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : served_cells_to_add_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (served_cells_to_modify_list_present) {
    j.write_int("id", 62);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : served_cells_to_modify_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (served_cells_to_delete_list_present) {
    j.write_int("id", 60);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : served_cells_to_delete_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (cells_status_list_present) {
    j.write_int("id", 89);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_status_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_int("id", 189);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : ded_si_delivery_needed_ue_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (gnb_du_id_present) {
    j.write_int("id", 42);
    j.write_str("criticality", "reject");
    j.write_int("Value", gnb_du_id);
  }
  if (gnb_du_tnl_assoc_to_rem_list_present) {
    j.write_int("id", 228);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : gnb_du_tnl_assoc_to_rem_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (transport_layer_address_info_present) {
    j.write_int("id", 254);
    j.write_str("criticality", "ignore");
    transport_layer_address_info.to_json(j);
  }
  if (coverage_mod_notif_present) {
    j.write_int("id", 446);
    j.write_str("criticality", "ignore");
    coverage_mod_notif.to_json(j);
  }
  if (gnb_du_name_present) {
    j.write_int("id", 45);
    j.write_str("criticality", "ignore");
    j.write_str("Value", gnb_du_name.to_string());
  }
  if (extended_gnb_du_name_present) {
    j.write_int("id", 427);
    j.write_str("criticality", "ignore");
    extended_gnb_du_name.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_cfg_upd_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_to_be_activ_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += cells_to_be_deactiv_list_present ? 1 : 0;
  nof_ies += transport_layer_address_info_present ? 1 : 0;
  nof_ies += ul_bh_non_up_traffic_map_present ? 1 : 0;
  nof_ies += bap_address_present ? 1 : 0;
  nof_ies += cells_for_son_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (cells_to_be_activ_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)3, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_be_activ_list, 1, 512, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (cells_to_be_deactiv_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)5, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_be_deactiv_list, 1, 512, true));
  }
  if (transport_layer_address_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)254, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(transport_layer_address_info.pack(bref));
  }
  if (ul_bh_non_up_traffic_map_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)287, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ul_bh_non_up_traffic_map.pack(bref));
  }
  if (bap_address_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)281, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(bap_address.pack(bref));
  }
  if (cells_for_son_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)449, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_for_son_list, 1, 256, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 3: {
        cells_to_be_activ_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_to_be_activ_list, bref, 1, 512, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      case 5: {
        cells_to_be_deactiv_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_to_be_deactiv_list, bref, 1, 512, true));
        break;
      }
      case 254: {
        transport_layer_address_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(transport_layer_address_info.unpack(bref));
        break;
      }
      case 287: {
        ul_bh_non_up_traffic_map_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ul_bh_non_up_traffic_map.unpack(bref));
        break;
      }
      case 281: {
        bap_address_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(bap_address.unpack(bref));
        break;
      }
      case 449: {
        cells_for_son_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_for_son_list, bref, 1, 256, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (cells_to_be_activ_list_present) {
    j.write_int("id", 3);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_to_be_activ_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  if (cells_to_be_deactiv_list_present) {
    j.write_int("id", 5);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_to_be_deactiv_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (transport_layer_address_info_present) {
    j.write_int("id", 254);
    j.write_str("criticality", "ignore");
    transport_layer_address_info.to_json(j);
  }
  if (ul_bh_non_up_traffic_map_present) {
    j.write_int("id", 287);
    j.write_str("criticality", "reject");
    ul_bh_non_up_traffic_map.to_json(j);
  }
  if (bap_address_present) {
    j.write_int("id", 281);
    j.write_str("criticality", "ignore");
    j.write_str("Value", bap_address.to_string());
  }
  if (cells_for_son_list_present) {
    j.write_int("id", 449);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : cells_for_son_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (time_to_wait_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)77, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_int("id", 77);
    j.write_str("criticality", "ignore");
    j.write_str("Value", time_to_wait.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_res_cfg_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += activ_cells_to_be_upd_list_present ? 1 : 0;
  nof_ies += child_nodes_list_present ? 1 : 0;
  nof_ies += neighbour_node_cells_list_present ? 1 : 0;
  nof_ies += serving_cells_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (activ_cells_to_be_upd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)288, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, activ_cells_to_be_upd_list, 1, 512, true));
  }
  if (child_nodes_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)289, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, child_nodes_list, 1, 1024, true));
  }
  if (neighbour_node_cells_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)533, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, neighbour_node_cells_list, 1, 1024, true));
  }
  if (serving_cells_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)534, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, serving_cells_list, 1, 32, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 288: {
        activ_cells_to_be_upd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(activ_cells_to_be_upd_list, bref, 1, 512, true));
        break;
      }
      case 289: {
        child_nodes_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(child_nodes_list, bref, 1, 1024, true));
        break;
      }
      case 533: {
        neighbour_node_cells_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(neighbour_node_cells_list, bref, 1, 1024, true));
        break;
      }
      case 534: {
        serving_cells_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(serving_cells_list, bref, 1, 32, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_cfg_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (activ_cells_to_be_upd_list_present) {
    j.write_int("id", 288);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : activ_cells_to_be_upd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (child_nodes_list_present) {
    j.write_int("id", 289);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : child_nodes_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (neighbour_node_cells_list_present) {
    j.write_int("id", 533);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : neighbour_node_cells_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (serving_cells_list_present) {
    j.write_int("id", 534);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : serving_cells_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_res_cfg_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_cfg_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_res_cfg_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (time_to_wait_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)77, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_cfg_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_cfg_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_int("id", 77);
    j.write_str("criticality", "ignore");
    j.write_str("Value", time_to_wait.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_res_coordination_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += ignore_res_coordination_container_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)106, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(request_type.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)101, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.pack(bref));
  }
  if (ignore_res_coordination_container_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)213, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ignore_res_coordination_container.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 106: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(request_type.unpack(bref));
        break;
      }
      case 101: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_container.unpack(bref));
        break;
      }
      case 213: {
        ignore_res_coordination_container_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ignore_res_coordination_container.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_coordination_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 106);
  j.write_str("criticality", "reject");
  j.write_str("Value", request_type.to_string());
  j.write_int("id", 101);
  j.write_str("criticality", "reject");
  j.write_str("Value", eutra_nr_cell_res_coordination_req_container.to_string());
  if (ignore_res_coordination_container_present) {
    j.write_int("id", 213);
    j.write_str("criticality", "reject");
    j.write_str("Value", "yes");
  }
  j.end_obj();
}

SRSASN_CODE gnb_du_res_coordination_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)102, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_res_coordination_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 102: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(eutra_nr_cell_res_coordination_req_ack_container.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_res_coordination_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 102);
  j.write_str("criticality", "reject");
  j.write_str("Value", eutra_nr_cell_res_coordination_req_ack_container.to_string());
  j.end_obj();
}

SRSASN_CODE gnb_du_status_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += iab_congestion_ind_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)172, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(gnb_du_overload_info.pack(bref));
  }
  if (iab_congestion_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)509, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(iab_congestion_ind.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE gnb_du_status_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 172: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(gnb_du_overload_info.unpack(bref));
        break;
      }
      case 509: {
        iab_congestion_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_congestion_ind.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void gnb_du_status_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 172);
  j.write_str("criticality", "reject");
  j.write_str("Value", gnb_du_overload_info.to_string());
  if (iab_congestion_ind_present) {
    j.write_int("id", 509);
    j.write_str("criticality", "ignore");
    iab_congestion_ind.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE iab_tnl_address_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (time_to_wait_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)77, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_tnl_address_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_int("id", 77);
    j.write_str("criticality", "ignore");
    j.write_str("Value", time_to_wait.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE iab_tnl_address_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ia_bv4_addresses_requested_present ? 1 : 0;
  nof_ies += iab_ip_v6_request_type_present ? 1 : 0;
  nof_ies += iab_tnl_addresses_to_rem_list_present ? 1 : 0;
  nof_ies += iab_tnl_addresses_exception_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (ia_bv4_addresses_requested_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)297, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ia_bv4_addresses_requested.pack(bref));
  }
  if (iab_ip_v6_request_type_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)296, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(iab_ip_v6_request_type.pack(bref));
  }
  if (iab_tnl_addresses_to_rem_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)292, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, iab_tnl_addresses_to_rem_list, 1, 1024, true));
  }
  if (iab_tnl_addresses_exception_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)513, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(iab_tnl_addresses_exception.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 297: {
        ia_bv4_addresses_requested_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ia_bv4_addresses_requested.unpack(bref));
        break;
      }
      case 296: {
        iab_ip_v6_request_type_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_ip_v6_request_type.unpack(bref));
        break;
      }
      case 292: {
        iab_tnl_addresses_to_rem_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(iab_tnl_addresses_to_rem_list, bref, 1, 1024, true));
        break;
      }
      case 513: {
        iab_tnl_addresses_exception_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(iab_tnl_addresses_exception.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_tnl_address_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (ia_bv4_addresses_requested_present) {
    j.write_int("id", 297);
    j.write_str("criticality", "reject");
    ia_bv4_addresses_requested.to_json(j);
  }
  if (iab_ip_v6_request_type_present) {
    j.write_int("id", 296);
    j.write_str("criticality", "reject");
    iab_ip_v6_request_type.to_json(j);
  }
  if (iab_tnl_addresses_to_rem_list_present) {
    j.write_int("id", 292);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : iab_tnl_addresses_to_rem_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (iab_tnl_addresses_exception_present) {
    j.write_int("id", 513);
    j.write_str("criticality", "reject");
    iab_tnl_addresses_exception.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE iab_tnl_address_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)294, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, iab_allocated_tnl_address_list, 1, 1024, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_tnl_address_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 294: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(iab_allocated_tnl_address_list, bref, 1, 1024, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_tnl_address_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 294);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : iab_allocated_tnl_address_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE iab_up_cfg_upd_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += time_to_wait_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (time_to_wait_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)77, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_to_wait.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 77: {
        time_to_wait_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_to_wait.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_up_cfg_upd_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (time_to_wait_present) {
    j.write_int("id", 77);
    j.write_str("criticality", "ignore");
    j.write_str("Value", time_to_wait.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE iab_up_cfg_upd_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ul_up_tnl_info_to_upd_list_present ? 1 : 0;
  nof_ies += ul_up_tnl_address_to_upd_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (ul_up_tnl_info_to_upd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)300, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_up_tnl_info_to_upd_list, 1, 32678, true));
  }
  if (ul_up_tnl_address_to_upd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)302, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, ul_up_tnl_address_to_upd_list, 1, 8, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 300: {
        ul_up_tnl_info_to_upd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(ul_up_tnl_info_to_upd_list, bref, 1, 32678, true));
        break;
      }
      case 302: {
        ul_up_tnl_address_to_upd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(ul_up_tnl_address_to_upd_list, bref, 1, 8, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_up_cfg_upd_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (ul_up_tnl_info_to_upd_list_present) {
    j.write_int("id", 300);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : ul_up_tnl_info_to_upd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (ul_up_tnl_address_to_upd_list_present) {
    j.write_int("id", 302);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : ul_up_tnl_address_to_upd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE iab_up_cfg_upd_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += dl_up_tnl_address_to_upd_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (dl_up_tnl_address_to_upd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)304, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, dl_up_tnl_address_to_upd_list, 1, 8, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE iab_up_cfg_upd_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      case 304: {
        dl_up_tnl_address_to_upd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(dl_up_tnl_address_to_upd_list, bref, 1, 8, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void iab_up_cfg_upd_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  if (dl_up_tnl_address_to_upd_list_present) {
    j.write_int("id", 304);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : dl_up_tnl_address_to_upd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE meas_activation_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += prs_meas_info_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)649, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(activation_request_type.pack(bref));
  }
  if (prs_meas_info_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)570, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, prs_meas_info_list, 1, 4, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_activation_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 649: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(activation_request_type.unpack(bref));
        break;
      }
      case 570: {
        prs_meas_info_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(prs_meas_info_list, bref, 1, 4, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_activation_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 649);
  j.write_str("criticality", "reject");
  j.write_str("Value", activation_request_type.to_string());
  if (prs_meas_info_list_present) {
    j.write_int("id", 570);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : prs_meas_info_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE meas_precfg_confirm_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += pos_meas_gap_pre_cfg_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (pos_meas_gap_pre_cfg_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)650, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_meas_gap_pre_cfg_list.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_confirm_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 650: {
        pos_meas_gap_pre_cfg_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_gap_pre_cfg_list.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_precfg_confirm_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  if (pos_meas_gap_pre_cfg_list_present) {
    j.write_int("id", 650);
    j.write_str("criticality", "ignore");
    pos_meas_gap_pre_cfg_list.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE meas_precfg_refuse_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_refuse_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_precfg_refuse_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE meas_precfg_required_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)569, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, trp_prs_info_list, 1, 256, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE meas_precfg_required_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 569: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(trp_prs_info_list, bref, 1, 256, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void meas_precfg_required_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 569);
  j.write_str("criticality", "ignore");
  j.start_array("Value");
  for (const auto& e1 : trp_prs_info_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE multicast_context_mod_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_mod_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE multicast_context_mod_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += mbs_service_area_present ? 1 : 0;
  nof_ies += multicast_m_rbs_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_to_be_modified_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_to_be_released_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (mbs_service_area_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)481, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  if (multicast_m_rbs_to_be_setup_mod_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)500, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_to_be_setup_mod_list, 1, 32, true));
  }
  if (multicast_m_rbs_to_be_modified_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)494, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_to_be_modified_list, 1, 32, true));
  }
  if (multicast_m_rbs_to_be_released_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)496, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_to_be_released_list, 1, 32, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.unpack(bref));
        break;
      }
      case 500: {
        multicast_m_rbs_to_be_setup_mod_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_to_be_setup_mod_list, bref, 1, 32, true));
        break;
      }
      case 494: {
        multicast_m_rbs_to_be_modified_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_to_be_modified_list, bref, 1, 32, true));
        break;
      }
      case 496: {
        multicast_m_rbs_to_be_released_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_to_be_released_list, bref, 1, 32, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_mod_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  if (mbs_service_area_present) {
    j.write_int("id", 481);
    j.write_str("criticality", "reject");
    mbs_service_area.to_json(j);
  }
  if (multicast_m_rbs_to_be_setup_mod_list_present) {
    j.write_int("id", 500);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_to_be_setup_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (multicast_m_rbs_to_be_modified_list_present) {
    j.write_int("id", 494);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_to_be_modified_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (multicast_m_rbs_to_be_released_list_present) {
    j.write_int("id", 496);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_to_be_released_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE multicast_context_mod_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += multicast_m_rbs_setup_mod_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_failed_to_be_setup_mod_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_modified_list_present ? 1 : 0;
  nof_ies += multicast_m_rbs_failed_to_be_modified_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (multicast_m_rbs_setup_mod_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)492, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_setup_mod_list, 1, 32, true));
  }
  if (multicast_m_rbs_failed_to_be_setup_mod_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)486, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_failed_to_be_setup_mod_list, 1, 32, true));
  }
  if (multicast_m_rbs_modified_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)488, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_modified_list, 1, 32, true));
  }
  if (multicast_m_rbs_failed_to_be_modified_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)482, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_failed_to_be_modified_list, 1, 32, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_mod_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 492: {
        multicast_m_rbs_setup_mod_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_setup_mod_list, bref, 1, 32, true));
        break;
      }
      case 486: {
        multicast_m_rbs_failed_to_be_setup_mod_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_failed_to_be_setup_mod_list, bref, 1, 32, true));
        break;
      }
      case 488: {
        multicast_m_rbs_modified_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_modified_list, bref, 1, 32, true));
        break;
      }
      case 482: {
        multicast_m_rbs_failed_to_be_modified_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_failed_to_be_modified_list, bref, 1, 32, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_mod_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  if (multicast_m_rbs_setup_mod_list_present) {
    j.write_int("id", 492);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_setup_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (multicast_m_rbs_failed_to_be_setup_mod_list_present) {
    j.write_int("id", 486);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_failed_to_be_setup_mod_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (multicast_m_rbs_modified_list_present) {
    j.write_int("id", 488);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_modified_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (multicast_m_rbs_failed_to_be_modified_list_present) {
    j.write_int("id", 482);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_failed_to_be_modified_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE multicast_context_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

SRSASN_CODE multicast_context_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE multicast_context_release_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_release_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_release_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

SRSASN_CODE multicast_context_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += gnb_du_mbs_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (gnb_du_mbs_f1ap_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        gnb_du_mbs_f1ap_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  if (gnb_du_mbs_f1ap_id_present) {
    j.write_int("id", 452);
    j.write_str("criticality", "ignore");
    j.write_int("Value", gnb_du_mbs_f1ap_id);
  }
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE multicast_context_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += mbs_service_area_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)455, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_session_id.pack(bref));
  }
  if (mbs_service_area_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)481, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_service_area.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)456, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(snssai.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)498, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_to_be_setup_list, 1, 32, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 455: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_session_id.unpack(bref));
        break;
      }
      case 481: {
        mbs_service_area_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_service_area.unpack(bref));
        break;
      }
      case 456: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(snssai.unpack(bref));
        break;
      }
      case 498: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_to_be_setup_list, bref, 1, 32, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 455);
  j.write_str("criticality", "reject");
  mbs_session_id.to_json(j);
  if (mbs_service_area_present) {
    j.write_int("id", 481);
    j.write_str("criticality", "reject");
    mbs_service_area.to_json(j);
  }
  j.write_int("id", 456);
  j.write_str("criticality", "reject");
  snssai.to_json(j);
  j.write_int("id", 498);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : multicast_m_rbs_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE multicast_context_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += multicast_m_rbs_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)490, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_setup_list, 1, 32, true));
  }
  if (multicast_m_rbs_failed_to_be_setup_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)484, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_m_rbs_failed_to_be_setup_list, 1, 32, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_context_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 490: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_setup_list, bref, 1, 32, true));
        break;
      }
      case 484: {
        multicast_m_rbs_failed_to_be_setup_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_m_rbs_failed_to_be_setup_list, bref, 1, 32, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_context_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 490);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : multicast_m_rbs_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (multicast_m_rbs_failed_to_be_setup_list_present) {
    j.write_int("id", 484);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : multicast_m_rbs_failed_to_be_setup_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE multicast_distribution_release_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)502, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_release_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 502);
  j.write_str("criticality", "reject");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

SRSASN_CODE multicast_distribution_release_complete_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)502, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_release_complete_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_release_complete_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 502);
  j.write_str("criticality", "reject");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE multicast_distribution_setup_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += gnb_du_mbs_f1ap_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (gnb_du_mbs_f1ap_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)502, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        gnb_du_mbs_f1ap_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.unpack(bref));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_setup_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  if (gnb_du_mbs_f1ap_id_present) {
    j.write_int("id", 452);
    j.write_str("criticality", "ignore");
    j.write_int("Value", gnb_du_mbs_f1ap_id);
  }
  j.write_int("id", 502);
  j.write_str("criticality", "reject");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE multicast_distribution_setup_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)502, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)503, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_f1_u_context_to_be_setup_list, 1, 32, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.unpack(bref));
        break;
      }
      case 503: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_f1_u_context_to_be_setup_list, bref, 1, 32, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_setup_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 502);
  j.write_str("criticality", "reject");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_int("id", 503);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : multicast_f1_u_context_to_be_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE multicast_distribution_setup_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += multicast_f1_u_context_failed_to_be_setup_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)451, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)452, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_mbs_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)502, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)505, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_f1_u_context_setup_list, 1, 32, true));
  }
  if (multicast_f1_u_context_failed_to_be_setup_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)507, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, multicast_f1_u_context_failed_to_be_setup_list, 1, 32, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)681, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(multicast_f1_u_context_ref_cu.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_distribution_setup_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 451: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 452: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_mbs_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 502: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_multicast_f1_u_context_descriptor.unpack(bref));
        break;
      }
      case 505: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_f1_u_context_setup_list, bref, 1, 32, true));
        break;
      }
      case 507: {
        multicast_f1_u_context_failed_to_be_setup_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(multicast_f1_u_context_failed_to_be_setup_list, bref, 1, 32, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      case 681: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(multicast_f1_u_context_ref_cu.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_distribution_setup_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 451);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_mbs_f1ap_id);
  j.write_int("id", 452);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_mbs_f1ap_id);
  j.write_int("id", 502);
  j.write_str("criticality", "reject");
  mbs_multicast_f1_u_context_descriptor.to_json(j);
  j.write_int("id", 505);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : multicast_f1_u_context_setup_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (multicast_f1_u_context_failed_to_be_setup_list_present) {
    j.write_int("id", 507);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : multicast_f1_u_context_failed_to_be_setup_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.write_int("id", 681);
  j.write_str("criticality", "reject");
  j.write_str("Value", multicast_f1_u_context_ref_cu.to_string());
  j.end_obj();
}

SRSASN_CODE multicast_group_paging_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ue_id_list_for_paging_list_present ? 1 : 0;
  nof_ies += mc_paging_cell_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)455, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(mbs_session_id.pack(bref));
  }
  if (ue_id_list_for_paging_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)479, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, ue_id_list_for_paging_list, 1, 4096, true));
  }
  if (mc_paging_cell_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)687, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, mc_paging_cell_list, 1, 512, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE multicast_group_paging_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 455: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(mbs_session_id.unpack(bref));
        break;
      }
      case 479: {
        ue_id_list_for_paging_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(ue_id_list_for_paging_list, bref, 1, 4096, true));
        break;
      }
      case 687: {
        mc_paging_cell_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(mc_paging_cell_list, bref, 1, 512, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void multicast_group_paging_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 455);
  j.write_str("criticality", "reject");
  mbs_session_id.to_json(j);
  if (ue_id_list_for_paging_list_present) {
    j.write_int("id", 479);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : ue_id_list_for_paging_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (mc_paging_cell_list_present) {
    j.write_int("id", 687);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : mc_paging_cell_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE network_access_rate_reduction_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)225, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(uac_assist_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE network_access_rate_reduction_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 225: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(uac_assist_info.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void network_access_rate_reduction_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 225);
  j.write_str("criticality", "reject");
  uac_assist_info.to_json(j);
  j.end_obj();
}

SRSASN_CODE notify_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)137, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, drb_notify_list, 1, 64, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE notify_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 137: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(drb_notify_list, bref, 1, 64, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void notify_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 137);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : drb_notify_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE pdc_meas_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)546, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_pdc_meas_id, (uint8_t)1u, (uint8_t)16u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_pdc_meas_id, bref, (uint8_t)1u, (uint8_t)16u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 546);
  j.write_str("criticality", "ignore");
  j.write_int("Value", ran_ue_pdc_meas_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

SRSASN_CODE pdc_meas_initiation_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)546, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_pdc_meas_id, (uint8_t)1u, (uint8_t)16u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_pdc_meas_id, bref, (uint8_t)1u, (uint8_t)16u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_initiation_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 546);
  j.write_str("criticality", "ignore");
  j.write_int("Value", ran_ue_pdc_meas_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE pdc_meas_initiation_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 5;
  nof_ies += pdc_meas_periodicity_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)546, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_pdc_meas_id, (uint8_t)1u, (uint8_t)16u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)545, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pdc_report_type.pack(bref));
  }
  if (pdc_meas_periodicity_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)541, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pdc_meas_periodicity.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)542, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, pdc_meas_quantities, 1, 16, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 5;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_pdc_meas_id, bref, (uint8_t)1u, (uint8_t)16u, true, true));
        break;
      }
      case 545: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_report_type.unpack(bref));
        break;
      }
      case 541: {
        pdc_meas_periodicity_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_meas_periodicity.unpack(bref));
        break;
      }
      case 542: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(pdc_meas_quantities, bref, 1, 16, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_initiation_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 546);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_pdc_meas_id);
  j.write_int("id", 545);
  j.write_str("criticality", "reject");
  j.write_str("Value", pdc_report_type.to_string());
  if (pdc_meas_periodicity_present) {
    j.write_int("id", 541);
    j.write_str("criticality", "reject");
    j.write_str("Value", pdc_meas_periodicity.to_string());
  }
  j.write_int("id", 542);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : pdc_meas_quantities) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE pdc_meas_initiation_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += pdc_meas_result_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)546, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_pdc_meas_id, (uint8_t)1u, (uint8_t)16u, true, true));
  }
  if (pdc_meas_result_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)544, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pdc_meas_result.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_initiation_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_pdc_meas_id, bref, (uint8_t)1u, (uint8_t)16u, true, true));
        break;
      }
      case 544: {
        pdc_meas_result_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_meas_result.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_initiation_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 546);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_pdc_meas_id);
  if (pdc_meas_result_present) {
    j.write_int("id", 544);
    j.write_str("criticality", "ignore");
    pdc_meas_result.to_json(j);
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE pdc_meas_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)546, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_pdc_meas_id, (uint8_t)1u, (uint8_t)16u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)544, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pdc_meas_result.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_pdc_meas_id, bref, (uint8_t)1u, (uint8_t)16u, true, true));
        break;
      }
      case 544: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pdc_meas_result.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 546);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_ue_pdc_meas_id);
  j.write_int("id", 544);
  j.write_str("criticality", "ignore");
  pdc_meas_result.to_json(j);
  j.end_obj();
}

SRSASN_CODE pdc_meas_termination_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)546, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_ue_pdc_meas_id, (uint8_t)1u, (uint8_t)16u, true, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pdc_meas_termination_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 546: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_ue_pdc_meas_id, bref, (uint8_t)1u, (uint8_t)16u, true, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pdc_meas_termination_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 546);
  j.write_str("criticality", "ignore");
  j.write_int("Value", ran_ue_pdc_meas_id);
  j.end_obj();
}

SRSASN_CODE prs_cfg_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void prs_cfg_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE prs_cfg_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)571, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(prs_cfg_request_type.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)549, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, prstrp_list, 1, 65535, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 571: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(prs_cfg_request_type.unpack(bref));
        break;
      }
      case 549: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(prstrp_list, bref, 1, 65535, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void prs_cfg_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 571);
  j.write_str("criticality", "reject");
  j.write_str("Value", prs_cfg_request_type.to_string());
  j.write_int("id", 549);
  j.write_str("criticality", "ignore");
  j.start_array("Value");
  for (const auto& e1 : prstrp_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE prs_cfg_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += prs_tx_trp_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (prs_tx_trp_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)550, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, prs_tx_trp_list, 1, 65535, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE prs_cfg_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 550: {
        prs_tx_trp_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(prs_tx_trp_list, bref, 1, 65535, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void prs_cfg_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (prs_tx_trp_list_present) {
    j.write_int("id", 550);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : prs_tx_trp_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE pws_cancel_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += broadcast_to_be_cancelled_list_present ? 1 : 0;
  nof_ies += cancel_all_warning_msgs_ind_present ? 1 : 0;
  nof_ies += notif_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)142, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, numof_broadcast_request, (uint32_t)0u, (uint32_t)65535u, false, true));
  }
  if (broadcast_to_be_cancelled_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)148, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, broadcast_to_be_cancelled_list, 1, 512, true));
  }
  if (cancel_all_warning_msgs_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)157, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cancel_all_warning_msgs_ind.pack(bref));
  }
  if (notif_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)220, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(notif_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 142: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(numof_broadcast_request, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
        break;
      }
      case 148: {
        broadcast_to_be_cancelled_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(broadcast_to_be_cancelled_list, bref, 1, 512, true));
        break;
      }
      case 157: {
        cancel_all_warning_msgs_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cancel_all_warning_msgs_ind.unpack(bref));
        break;
      }
      case 220: {
        notif_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(notif_info.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_cancel_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 142);
  j.write_str("criticality", "reject");
  j.write_int("Value", numof_broadcast_request);
  if (broadcast_to_be_cancelled_list_present) {
    j.write_int("id", 148);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : broadcast_to_be_cancelled_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (cancel_all_warning_msgs_ind_present) {
    j.write_int("id", 157);
    j.write_str("criticality", "reject");
    j.write_str("Value", "true");
  }
  if (notif_info_present) {
    j.write_int("id", 220);
    j.write_str("criticality", "reject");
    notif_info.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE pws_cancel_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_broadcast_cancelled_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (cells_broadcast_cancelled_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)150, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_broadcast_cancelled_list, 1, 512, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_cancel_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 150: {
        cells_broadcast_cancelled_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_broadcast_cancelled_list, bref, 1, 512, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_cancel_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (cells_broadcast_cancelled_list_present) {
    j.write_int("id", 150);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_broadcast_cancelled_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE pws_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += pws_failed_nr_cgi_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (pws_failed_nr_cgi_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)154, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, pws_failed_nr_cgi_list, 1, 512, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 154: {
        pws_failed_nr_cgi_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(pws_failed_nr_cgi_list, bref, 1, 512, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (pws_failed_nr_cgi_list_present) {
    j.write_int("id", 154);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : pws_failed_nr_cgi_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE pws_restart_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)152, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, nr_cgi_list_for_restart_list, 1, 512, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pws_restart_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 152: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(nr_cgi_list_for_restart_list, bref, 1, 512, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pws_restart_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 152);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : nr_cgi_list_for_restart_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE paging_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += paging_drx_present ? 1 : 0;
  nof_ies += paging_prio_present ? 1 : 0;
  nof_ies += paging_origin_present ? 1 : 0;
  nof_ies += ran_ue_paging_drx_present ? 1 : 0;
  nof_ies += cn_ue_paging_drx_present ? 1 : 0;
  nof_ies += nr_paginge_drx_info_present ? 1 : 0;
  nof_ies += nr_paginge_drx_infofor_rrc_inactive_present ? 1 : 0;
  nof_ies += paging_cause_present ? 1 : 0;
  nof_ies += pe_ip_s_assist_info_present ? 1 : 0;
  nof_ies += ue_paging_cap_present ? 1 : 0;
  nof_ies += extended_ue_id_idx_value_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)117, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ue_id_idx_value.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)127, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(paging_id.pack(bref));
  }
  if (paging_drx_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)114, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(paging_drx.pack(bref));
  }
  if (paging_prio_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)115, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(paging_prio.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)113, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, paging_cell_list, 1, 512, true));
  }
  if (paging_origin_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)216, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(paging_origin.pack(bref));
  }
  if (ran_ue_paging_drx_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)580, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ran_ue_paging_drx.pack(bref));
  }
  if (cn_ue_paging_drx_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)581, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cn_ue_paging_drx.pack(bref));
  }
  if (nr_paginge_drx_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)582, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(nr_paginge_drx_info.pack(bref));
  }
  if (nr_paginge_drx_infofor_rrc_inactive_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)583, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(nr_paginge_drx_infofor_rrc_inactive.pack(bref));
  }
  if (paging_cause_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)620, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(paging_cause.pack(bref));
  }
  if (pe_ip_s_assist_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)622, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pe_ip_s_assist_info.pack(bref));
  }
  if (ue_paging_cap_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)623, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ue_paging_cap.pack(bref));
  }
  if (extended_ue_id_idx_value_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)694, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(extended_ue_id_idx_value.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE paging_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 117: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_id_idx_value.unpack(bref));
        break;
      }
      case 127: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_id.unpack(bref));
        break;
      }
      case 114: {
        paging_drx_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_drx.unpack(bref));
        break;
      }
      case 115: {
        paging_prio_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_prio.unpack(bref));
        break;
      }
      case 113: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(paging_cell_list, bref, 1, 512, true));
        break;
      }
      case 216: {
        paging_origin_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_origin.unpack(bref));
        break;
      }
      case 580: {
        ran_ue_paging_drx_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ran_ue_paging_drx.unpack(bref));
        break;
      }
      case 581: {
        cn_ue_paging_drx_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cn_ue_paging_drx.unpack(bref));
        break;
      }
      case 582: {
        nr_paginge_drx_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_paginge_drx_info.unpack(bref));
        break;
      }
      case 583: {
        nr_paginge_drx_infofor_rrc_inactive_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_paginge_drx_infofor_rrc_inactive.unpack(bref));
        break;
      }
      case 620: {
        paging_cause_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(paging_cause.unpack(bref));
        break;
      }
      case 622: {
        pe_ip_s_assist_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pe_ip_s_assist_info.unpack(bref));
        break;
      }
      case 623: {
        ue_paging_cap_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_paging_cap.unpack(bref));
        break;
      }
      case 694: {
        extended_ue_id_idx_value_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(extended_ue_id_idx_value.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void paging_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 117);
  j.write_str("criticality", "reject");
  ue_id_idx_value.to_json(j);
  j.write_int("id", 127);
  j.write_str("criticality", "reject");
  paging_id.to_json(j);
  if (paging_drx_present) {
    j.write_int("id", 114);
    j.write_str("criticality", "ignore");
    j.write_str("Value", paging_drx.to_string());
  }
  if (paging_prio_present) {
    j.write_int("id", 115);
    j.write_str("criticality", "ignore");
    j.write_str("Value", paging_prio.to_string());
  }
  j.write_int("id", 113);
  j.write_str("criticality", "ignore");
  j.start_array("Value");
  for (const auto& e1 : paging_cell_list) {
    e1.to_json(j);
  }
  j.end_array();
  if (paging_origin_present) {
    j.write_int("id", 216);
    j.write_str("criticality", "ignore");
    j.write_str("Value", "non-3gpp");
  }
  if (ran_ue_paging_drx_present) {
    j.write_int("id", 580);
    j.write_str("criticality", "ignore");
    j.write_str("Value", ran_ue_paging_drx.to_string());
  }
  if (cn_ue_paging_drx_present) {
    j.write_int("id", 581);
    j.write_str("criticality", "ignore");
    j.write_str("Value", cn_ue_paging_drx.to_string());
  }
  if (nr_paginge_drx_info_present) {
    j.write_int("id", 582);
    j.write_str("criticality", "ignore");
    nr_paginge_drx_info.to_json(j);
  }
  if (nr_paginge_drx_infofor_rrc_inactive_present) {
    j.write_int("id", 583);
    j.write_str("criticality", "ignore");
    nr_paginge_drx_infofor_rrc_inactive.to_json(j);
  }
  if (paging_cause_present) {
    j.write_int("id", 620);
    j.write_str("criticality", "ignore");
    j.write_str("Value", "voice");
  }
  if (pe_ip_s_assist_info_present) {
    j.write_int("id", 622);
    j.write_str("criticality", "ignore");
    pe_ip_s_assist_info.to_json(j);
  }
  if (ue_paging_cap_present) {
    j.write_int("id", 623);
    j.write_str("criticality", "ignore");
    ue_paging_cap.to_json(j);
  }
  if (extended_ue_id_idx_value_present) {
    j.write_int("id", 694);
    j.write_str("criticality", "ignore");
    j.write_str("Value", extended_ue_id_idx_value.to_string());
  }
  j.end_obj();
}

SRSASN_CODE pos_sys_info_delivery_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)111, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(nr_cgi.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)682, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, pos_sitype_list, 1, 32, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)156, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, confirmed_ue_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE pos_sys_info_delivery_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.unpack(bref));
        break;
      }
      case 682: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(pos_sitype_list, bref, 1, 32, true));
        break;
      }
      case 156: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(confirmed_ue_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void pos_sys_info_delivery_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 111);
  j.write_str("criticality", "reject");
  nr_cgi.to_json(j);
  j.write_int("id", 682);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : pos_sitype_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_int("id", 156);
  j.write_str("criticality", "reject");
  j.write_int("Value", confirmed_ue_id);
  j.end_obj();
}

SRSASN_CODE positioning_activation_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_activation_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE positioning_activation_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += activation_time_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)403, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(srs_type.pack(bref));
  }
  if (activation_time_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)404, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(activation_time.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 403: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_type.unpack(bref));
        break;
      }
      case 404: {
        activation_time_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(activation_time.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_activation_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 403);
  j.write_str("criticality", "reject");
  srs_type.to_json(j);
  if (activation_time_present) {
    j.write_int("id", 404);
    j.write_str("criticality", "ignore");
    j.write_str("Value", activation_time.to_string());
  }
  j.end_obj();
}

SRSASN_CODE positioning_activation_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += sys_frame_num_present ? 1 : 0;
  nof_ies += slot_num_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (sys_frame_num_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)420, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, sys_frame_num, (uint16_t)0u, (uint16_t)1023u, false, true));
  }
  if (slot_num_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)421, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, slot_num, (uint8_t)0u, (uint8_t)79u, false, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_activation_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 420: {
        sys_frame_num_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(sys_frame_num, bref, (uint16_t)0u, (uint16_t)1023u, false, true));
        break;
      }
      case 421: {
        slot_num_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(slot_num, bref, (uint8_t)0u, (uint8_t)79u, false, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_activation_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  if (sys_frame_num_present) {
    j.write_int("id", 420);
    j.write_str("criticality", "ignore");
    j.write_int("Value", sys_frame_num);
  }
  if (slot_num_present) {
    j.write_int("id", 421);
    j.write_str("criticality", "ignore");
    j.write_int("Value", slot_num);
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE positioning_assist_info_ctrl_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += pos_assist_info_present ? 1 : 0;
  nof_ies += pos_broadcast_present ? 1 : 0;
  nof_ies += positioning_broadcast_cells_present ? 1 : 0;
  nof_ies += routing_id_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (pos_assist_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)392, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_assist_info.pack(bref));
  }
  if (pos_broadcast_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)393, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_broadcast.pack(bref));
  }
  if (positioning_broadcast_cells_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)406, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, positioning_broadcast_cells, 1, 16384, true));
  }
  if (routing_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)394, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(routing_id.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_ctrl_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 392: {
        pos_assist_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_assist_info.unpack(bref));
        break;
      }
      case 393: {
        pos_broadcast_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_broadcast.unpack(bref));
        break;
      }
      case 406: {
        positioning_broadcast_cells_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(positioning_broadcast_cells, bref, 1, 16384, true));
        break;
      }
      case 394: {
        routing_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(routing_id.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_assist_info_ctrl_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (pos_assist_info_present) {
    j.write_int("id", 392);
    j.write_str("criticality", "reject");
    j.write_str("Value", pos_assist_info.to_string());
  }
  if (pos_broadcast_present) {
    j.write_int("id", 393);
    j.write_str("criticality", "reject");
    j.write_str("Value", pos_broadcast.to_string());
  }
  if (positioning_broadcast_cells_present) {
    j.write_int("id", 406);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : positioning_broadcast_cells) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (routing_id_present) {
    j.write_int("id", 394);
    j.write_str("criticality", "reject");
    j.write_str("Value", routing_id.to_string());
  }
  j.end_obj();
}

SRSASN_CODE positioning_assist_info_feedback_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += pos_assist_info_fail_list_present ? 1 : 0;
  nof_ies += positioning_broadcast_cells_present ? 1 : 0;
  nof_ies += routing_id_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (pos_assist_info_fail_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)395, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_assist_info_fail_list.pack(bref));
  }
  if (positioning_broadcast_cells_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)406, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, positioning_broadcast_cells, 1, 16384, true));
  }
  if (routing_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)394, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(routing_id.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_assist_info_feedback_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 395: {
        pos_assist_info_fail_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_assist_info_fail_list.unpack(bref));
        break;
      }
      case 406: {
        positioning_broadcast_cells_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(positioning_broadcast_cells, bref, 1, 16384, true));
        break;
      }
      case 394: {
        routing_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(routing_id.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_assist_info_feedback_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (pos_assist_info_fail_list_present) {
    j.write_int("id", 395);
    j.write_str("criticality", "reject");
    j.write_str("Value", pos_assist_info_fail_list.to_string());
  }
  if (positioning_broadcast_cells_present) {
    j.write_int("id", 406);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : positioning_broadcast_cells) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (routing_id_present) {
    j.write_int("id", 394);
    j.write_str("criticality", "reject");
    j.write_str("Value", routing_id.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE positioning_deactivation_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)405, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(abort_tx.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_deactivation_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 405: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(abort_tx.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_deactivation_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 405);
  j.write_str("criticality", "ignore");
  abort_tx.to_json(j);
  j.end_obj();
}

SRSASN_CODE positioning_info_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE positioning_info_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += requested_srs_tx_characteristics_present ? 1 : 0;
  nof_ies += ue_report_info_present ? 1 : 0;
  nof_ies += srs_pos_rrc_inactive_query_ind_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (requested_srs_tx_characteristics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)391, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(requested_srs_tx_characteristics.pack(bref));
  }
  if (ue_report_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)575, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(ue_report_info.pack(bref));
  }
  if (srs_pos_rrc_inactive_query_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)689, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(srs_pos_rrc_inactive_query_ind.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 391: {
        requested_srs_tx_characteristics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(requested_srs_tx_characteristics.unpack(bref));
        break;
      }
      case 575: {
        ue_report_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(ue_report_info.unpack(bref));
        break;
      }
      case 689: {
        srs_pos_rrc_inactive_query_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_pos_rrc_inactive_query_ind.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  if (requested_srs_tx_characteristics_present) {
    j.write_int("id", 391);
    j.write_str("criticality", "ignore");
    requested_srs_tx_characteristics.to_json(j);
  }
  if (ue_report_info_present) {
    j.write_int("id", 575);
    j.write_str("criticality", "ignore");
    ue_report_info.to_json(j);
  }
  if (srs_pos_rrc_inactive_query_ind_present) {
    j.write_int("id", 689);
    j.write_str("criticality", "ignore");
    j.write_str("Value", "true");
  }
  j.end_obj();
}

SRSASN_CODE positioning_info_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += sfn_initisation_time_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += srs_pos_rrc_inactive_cfg_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (srs_cfg_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)407, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (sfn_initisation_time_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)419, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(sfn_initisation_time.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (srs_pos_rrc_inactive_cfg_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)674, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(srs_pos_rrc_inactive_cfg.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.unpack(bref));
        break;
      }
      case 419: {
        sfn_initisation_time_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sfn_initisation_time.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      case 674: {
        srs_pos_rrc_inactive_cfg_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_pos_rrc_inactive_cfg.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  if (srs_cfg_present) {
    j.write_int("id", 407);
    j.write_str("criticality", "ignore");
    srs_cfg.to_json(j);
  }
  if (sfn_initisation_time_present) {
    j.write_int("id", 419);
    j.write_str("criticality", "ignore");
    j.write_str("Value", sfn_initisation_time.to_string());
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  if (srs_pos_rrc_inactive_cfg_present) {
    j.write_int("id", 674);
    j.write_str("criticality", "ignore");
    j.write_str("Value", srs_pos_rrc_inactive_cfg.to_string());
  }
  j.end_obj();
}

SRSASN_CODE positioning_info_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += sfn_initisation_time_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (srs_cfg_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)407, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (sfn_initisation_time_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)419, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(sfn_initisation_time.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_info_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.unpack(bref));
        break;
      }
      case 419: {
        sfn_initisation_time_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sfn_initisation_time.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_info_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  if (srs_cfg_present) {
    j.write_int("id", 407);
    j.write_str("criticality", "ignore");
    srs_cfg.to_json(j);
  }
  if (sfn_initisation_time_present) {
    j.write_int("id", 419);
    j.write_str("criticality", "ignore");
    j.write_str("Value", sfn_initisation_time.to_string());
  }
  j.end_obj();
}

SRSASN_CODE positioning_meas_abort_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)402, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)411, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_abort_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_abort_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 402);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_meas_id);
  j.write_int("id", 411);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_meas_id);
  j.end_obj();
}

SRSASN_CODE positioning_meas_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)402, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)411, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 402);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_meas_id);
  j.write_int("id", 411);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_meas_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE positioning_meas_fail_ind_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)402, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)411, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_fail_ind_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_fail_ind_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 402);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_meas_id);
  j.write_int("id", 411);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_meas_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.end_obj();
}

SRSASN_CODE positioning_meas_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)402, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)411, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)397, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, pos_meas_result_list, 1, 64, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 397: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(pos_meas_result_list, bref, 1, 64, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 402);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_meas_id);
  j.write_int("id", 411);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_meas_id);
  j.write_int("id", 397);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : pos_meas_result_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE positioning_meas_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 6;
  nof_ies += pos_meas_periodicity_present ? 1 : 0;
  nof_ies += sfn_initisation_time_present ? 1 : 0;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += meas_beam_info_request_present ? 1 : 0;
  nof_ies += sys_frame_num_present ? 1 : 0;
  nof_ies += slot_num_present ? 1 : 0;
  nof_ies += pos_meas_periodicity_extended_present ? 1 : 0;
  nof_ies += resp_time_present ? 1 : 0;
  nof_ies += meas_characteristics_request_ind_present ? 1 : 0;
  nof_ies += meas_time_occasion_present ? 1 : 0;
  nof_ies += pos_meas_amount_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)402, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)411, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)422, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, trp_meas_request_list, 1, 64, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)408, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_report_characteristics.pack(bref));
  }
  if (pos_meas_periodicity_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)409, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_meas_periodicity.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)396, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, pos_meas_quantities, 1, 16384, true));
  }
  if (sfn_initisation_time_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)419, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(sfn_initisation_time.pack(bref));
  }
  if (srs_cfg_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)407, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (meas_beam_info_request_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)423, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(meas_beam_info_request.pack(bref));
  }
  if (sys_frame_num_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)420, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, sys_frame_num, (uint16_t)0u, (uint16_t)1023u, false, true));
  }
  if (slot_num_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)421, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, slot_num, (uint8_t)0u, (uint8_t)79u, false, true));
  }
  if (pos_meas_periodicity_extended_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)438, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_meas_periodicity_extended.pack(bref));
  }
  if (resp_time_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)555, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(resp_time.pack(bref));
  }
  if (meas_characteristics_request_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)574, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(meas_characteristics_request_ind.pack(bref));
  }
  if (meas_time_occasion_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)573, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(meas_time_occasion.pack(bref));
  }
  if (pos_meas_amount_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)634, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pos_meas_amount.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 6;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 422: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(trp_meas_request_list, bref, 1, 64, true));
        break;
      }
      case 408: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_report_characteristics.unpack(bref));
        break;
      }
      case 409: {
        pos_meas_periodicity_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_periodicity.unpack(bref));
        break;
      }
      case 396: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(pos_meas_quantities, bref, 1, 16384, true));
        break;
      }
      case 419: {
        sfn_initisation_time_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(sfn_initisation_time.unpack(bref));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.unpack(bref));
        break;
      }
      case 423: {
        meas_beam_info_request_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_beam_info_request.unpack(bref));
        break;
      }
      case 420: {
        sys_frame_num_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(sys_frame_num, bref, (uint16_t)0u, (uint16_t)1023u, false, true));
        break;
      }
      case 421: {
        slot_num_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(slot_num, bref, (uint8_t)0u, (uint8_t)79u, false, true));
        break;
      }
      case 438: {
        pos_meas_periodicity_extended_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_periodicity_extended.unpack(bref));
        break;
      }
      case 555: {
        resp_time_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(resp_time.unpack(bref));
        break;
      }
      case 574: {
        meas_characteristics_request_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_characteristics_request_ind.unpack(bref));
        break;
      }
      case 573: {
        meas_time_occasion_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_time_occasion.unpack(bref));
        break;
      }
      case 634: {
        pos_meas_amount_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pos_meas_amount.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 402);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_meas_id);
  j.write_int("id", 411);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_meas_id);
  j.write_int("id", 422);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : trp_meas_request_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_int("id", 408);
  j.write_str("criticality", "reject");
  j.write_str("Value", pos_report_characteristics.to_string());
  if (pos_meas_periodicity_present) {
    j.write_int("id", 409);
    j.write_str("criticality", "reject");
    j.write_str("Value", pos_meas_periodicity.to_string());
  }
  j.write_int("id", 396);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : pos_meas_quantities) {
    e1.to_json(j);
  }
  j.end_array();
  if (sfn_initisation_time_present) {
    j.write_int("id", 419);
    j.write_str("criticality", "ignore");
    j.write_str("Value", sfn_initisation_time.to_string());
  }
  if (srs_cfg_present) {
    j.write_int("id", 407);
    j.write_str("criticality", "ignore");
    srs_cfg.to_json(j);
  }
  if (meas_beam_info_request_present) {
    j.write_int("id", 423);
    j.write_str("criticality", "ignore");
    j.write_str("Value", "true");
  }
  if (sys_frame_num_present) {
    j.write_int("id", 420);
    j.write_str("criticality", "ignore");
    j.write_int("Value", sys_frame_num);
  }
  if (slot_num_present) {
    j.write_int("id", 421);
    j.write_str("criticality", "ignore");
    j.write_int("Value", slot_num);
  }
  if (pos_meas_periodicity_extended_present) {
    j.write_int("id", 438);
    j.write_str("criticality", "reject");
    j.write_str("Value", pos_meas_periodicity_extended.to_string());
  }
  if (resp_time_present) {
    j.write_int("id", 555);
    j.write_str("criticality", "ignore");
    resp_time.to_json(j);
  }
  if (meas_characteristics_request_ind_present) {
    j.write_int("id", 574);
    j.write_str("criticality", "ignore");
    j.write_str("Value", meas_characteristics_request_ind.to_string());
  }
  if (meas_time_occasion_present) {
    j.write_int("id", 573);
    j.write_str("criticality", "ignore");
    j.write_str("Value", meas_time_occasion.to_string());
  }
  if (pos_meas_amount_present) {
    j.write_int("id", 634);
    j.write_str("criticality", "ignore");
    j.write_str("Value", pos_meas_amount.to_string());
  }
  j.end_obj();
}

SRSASN_CODE positioning_meas_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += pos_meas_result_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)402, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)411, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  if (pos_meas_result_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)397, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, pos_meas_result_list, 1, 64, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 397: {
        pos_meas_result_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(pos_meas_result_list, bref, 1, 64, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 402);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_meas_id);
  j.write_int("id", 411);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_meas_id);
  if (pos_meas_result_list_present) {
    j.write_int("id", 397);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : pos_meas_result_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE positioning_meas_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += srs_cfg_present ? 1 : 0;
  nof_ies += trp_meas_upd_list_present ? 1 : 0;
  nof_ies += meas_characteristics_request_ind_present ? 1 : 0;
  nof_ies += meas_time_occasion_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)402, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, lmf_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)411, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, ran_meas_id, (uint32_t)1u, (uint32_t)65536u, true, true));
  }
  if (srs_cfg_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)407, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(srs_cfg.pack(bref));
  }
  if (trp_meas_upd_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)553, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, trp_meas_upd_list, 1, 64, true));
  }
  if (meas_characteristics_request_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)574, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(meas_characteristics_request_ind.pack(bref));
  }
  if (meas_time_occasion_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)573, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(meas_time_occasion.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE positioning_meas_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 402: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(lmf_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 411: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(ran_meas_id, bref, (uint32_t)1u, (uint32_t)65536u, true, true));
        break;
      }
      case 407: {
        srs_cfg_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(srs_cfg.unpack(bref));
        break;
      }
      case 553: {
        trp_meas_upd_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(trp_meas_upd_list, bref, 1, 64, true));
        break;
      }
      case 574: {
        meas_characteristics_request_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_characteristics_request_ind.unpack(bref));
        break;
      }
      case 573: {
        meas_time_occasion_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(meas_time_occasion.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void positioning_meas_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 402);
  j.write_str("criticality", "reject");
  j.write_int("Value", lmf_meas_id);
  j.write_int("id", 411);
  j.write_str("criticality", "reject");
  j.write_int("Value", ran_meas_id);
  if (srs_cfg_present) {
    j.write_int("id", 407);
    j.write_str("criticality", "ignore");
    srs_cfg.to_json(j);
  }
  if (trp_meas_upd_list_present) {
    j.write_int("id", 553);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : trp_meas_upd_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (meas_characteristics_request_ind_present) {
    j.write_int("id", 574);
    j.write_str("criticality", "ignore");
    j.write_str("Value", meas_characteristics_request_ind.to_string());
  }
  if (meas_time_occasion_present) {
    j.write_int("id", 573);
    j.write_str("criticality", "ignore");
    j.write_str("Value", meas_time_occasion.to_string());
  }
  j.end_obj();
}

SRSASN_CODE private_ie_container_empty_l::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 0;
  pack_length(bref, nof_ies, 1u, 65535u, true);

  return SRSASN_SUCCESS;
}
SRSASN_CODE private_ie_container_empty_l::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 1u, 65535u, true);
  if (nof_ies > 0) {
    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void private_ie_container_empty_l::to_json(json_writer& j) const
{
  j.start_obj();
  j.end_obj();
}

// PrivateMessage ::= SEQUENCE
SRSASN_CODE private_msg_s::pack(bit_ref& bref) const
{
  bref.pack(ext, 1);
  HANDLE_CODE(private_ies.pack(bref));

  bref.align_bytes_zero();

  return SRSASN_SUCCESS;
}
SRSASN_CODE private_msg_s::unpack(cbit_ref& bref)
{
  bref.unpack(ext, 1);
  HANDLE_CODE(private_ies.unpack(bref));

  bref.align_bytes();

  return SRSASN_SUCCESS;
}
void private_msg_s::to_json(json_writer& j) const
{
  j.start_array();
  j.start_obj();
  j.start_obj("PrivateMessage");
  j.write_fieldname("privateIEs");
  private_ies.to_json(j);
  j.end_obj();
  j.end_obj();
  j.end_array();
}

SRSASN_CODE qo_e_info_transfer_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += qo_e_info_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  if (qo_e_info_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)585, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(qo_e_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE qo_e_info_transfer_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 585: {
        qo_e_info_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(qo_e_info.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void qo_e_info_transfer_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  if (qo_e_info_present) {
    j.write_int("id", 585);
    j.write_str("criticality", "ignore");
    qo_e_info.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE rrc_delivery_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)185, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(rrc_delivery_status.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)64, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, srb_id, (uint8_t)0u, (uint8_t)3u, true, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE rrc_delivery_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 185: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(rrc_delivery_status.unpack(bref));
        break;
      }
      case 64: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(srb_id, bref, (uint8_t)0u, (uint8_t)3u, true, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void rrc_delivery_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 185);
  j.write_str("criticality", "ignore");
  rrc_delivery_status.to_json(j);
  j.write_int("id", 64);
  j.write_str("criticality", "ignore");
  j.write_int("Value", srb_id);
  j.end_obj();
}

SRSASN_CODE ref_time_info_report_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)366, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(time_ref_info.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 366: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(time_ref_info.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ref_time_info_report_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "ignore");
  j.write_int("Value", transaction_id);
  j.write_int("id", 366);
  j.write_str("criticality", "ignore");
  time_ref_info.to_json(j);
  j.end_obj();
}

SRSASN_CODE ref_time_info_report_ctrl_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)365, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(report_request_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE ref_time_info_report_ctrl_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 365: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(report_request_type.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void ref_time_info_report_ctrl_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 365);
  j.write_str("criticality", "reject");
  report_request_type.to_json(j);
  j.end_obj();
}

SRSASN_CODE reset_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)48, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(reset_type.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 48: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(reset_type.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void reset_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  j.write_int("id", 48);
  j.write_str("criticality", "reject");
  reset_type.to_json(j);
  j.end_obj();
}

SRSASN_CODE reset_ack_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += ue_associated_lc_f1_conn_list_res_ack_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (ue_associated_lc_f1_conn_list_res_ack_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)81, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, ue_associated_lc_f1_conn_list_res_ack, 1, 65536, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE reset_ack_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 81: {
        ue_associated_lc_f1_conn_list_res_ack_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(ue_associated_lc_f1_conn_list_res_ack, bref, 1, 65536, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void reset_ack_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (ue_associated_lc_f1_conn_list_res_ack_present) {
    j.write_int("id", 81);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : ue_associated_lc_f1_conn_list_res_ack) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE res_status_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)345, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)346, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 346: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 345);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_meas_id);
  j.write_int("id", 346);
  j.write_str("criticality", "ignore");
  j.write_int("Value", gnb_du_meas_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE res_status_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += gnb_du_meas_id_present ? 1 : 0;
  nof_ies += report_characteristics_present ? 1 : 0;
  nof_ies += cell_to_report_list_present ? 1 : 0;
  nof_ies += report_periodicity_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)345, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (gnb_du_meas_id_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)346, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)347, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(regist_request.pack(bref));
  }
  if (report_characteristics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)348, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(report_characteristics.pack(bref));
  }
  if (cell_to_report_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)349, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cell_to_report_list, 1, 512, true));
  }
  if (report_periodicity_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)352, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(report_periodicity.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 346: {
        gnb_du_meas_id_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 347: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(regist_request.unpack(bref));
        break;
      }
      case 348: {
        report_characteristics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(report_characteristics.unpack(bref));
        break;
      }
      case 349: {
        cell_to_report_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cell_to_report_list, bref, 1, 512, true));
        break;
      }
      case 352: {
        report_periodicity_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(report_periodicity.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 345);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_meas_id);
  if (gnb_du_meas_id_present) {
    j.write_int("id", 346);
    j.write_str("criticality", "ignore");
    j.write_int("Value", gnb_du_meas_id);
  }
  j.write_int("id", 347);
  j.write_str("criticality", "ignore");
  j.write_str("Value", regist_request.to_string());
  if (report_characteristics_present) {
    j.write_int("id", 348);
    j.write_str("criticality", "ignore");
    j.write_str("Value", report_characteristics.to_string());
  }
  if (cell_to_report_list_present) {
    j.write_int("id", 349);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : cell_to_report_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (report_periodicity_present) {
    j.write_int("id", 352);
    j.write_str("criticality", "ignore");
    j.write_str("Value", report_periodicity.to_string());
  }
  j.end_obj();
}

SRSASN_CODE res_status_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)345, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)346, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 346: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 345);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_meas_id);
  j.write_int("id", 346);
  j.write_str("criticality", "ignore");
  j.write_int("Value", gnb_du_meas_id);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE res_status_upd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  nof_ies += hardware_load_ind_present ? 1 : 0;
  nof_ies += tnl_capacity_ind_present ? 1 : 0;
  nof_ies += cell_meas_result_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)345, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)346, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_meas_id, (uint16_t)0u, (uint16_t)4095u, true, true));
  }
  if (hardware_load_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)351, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(hardware_load_ind.pack(bref));
  }
  if (tnl_capacity_ind_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)353, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(tnl_capacity_ind.pack(bref));
  }
  if (cell_meas_result_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)350, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cell_meas_result_list, 1, 512, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE res_status_upd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 345: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 346: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_meas_id, bref, (uint16_t)0u, (uint16_t)4095u, true, true));
        break;
      }
      case 351: {
        hardware_load_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(hardware_load_ind.unpack(bref));
        break;
      }
      case 353: {
        tnl_capacity_ind_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(tnl_capacity_ind.unpack(bref));
        break;
      }
      case 350: {
        cell_meas_result_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cell_meas_result_list, bref, 1, 512, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void res_status_upd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 345);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_meas_id);
  j.write_int("id", 346);
  j.write_str("criticality", "ignore");
  j.write_int("Value", gnb_du_meas_id);
  if (hardware_load_ind_present) {
    j.write_int("id", 351);
    j.write_str("criticality", "ignore");
    hardware_load_ind.to_json(j);
  }
  if (tnl_capacity_ind_present) {
    j.write_int("id", 353);
    j.write_str("criticality", "ignore");
    tnl_capacity_ind.to_json(j);
  }
  if (cell_meas_result_list_present) {
    j.write_int("id", 350);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : cell_meas_result_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE sys_info_delivery_cmd_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)111, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(nr_cgi.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)116, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, sitype_list, 1, 32, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)156, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, confirmed_ue_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE sys_info_delivery_cmd_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 111: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(nr_cgi.unpack(bref));
        break;
      }
      case 116: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(sitype_list, bref, 1, 32, true));
        break;
      }
      case 156: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(confirmed_ue_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void sys_info_delivery_cmd_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 111);
  j.write_str("criticality", "reject");
  nr_cgi.to_json(j);
  j.write_int("id", 116);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : sitype_list) {
    e1.to_json(j);
  }
  j.end_array();
  j.write_int("id", 156);
  j.write_str("criticality", "reject");
  j.write_int("Value", confirmed_ue_id);
  j.end_obj();
}

SRSASN_CODE trp_info_fail_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)0, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(cause.pack(bref));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_fail_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 0: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(cause.unpack(bref));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trp_info_fail_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 0);
  j.write_str("criticality", "ignore");
  cause.to_json(j);
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE trp_info_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += trp_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (trp_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)410, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, trp_list, 1, 65535, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)398, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, trp_info_type_list_trp_req, 1, 64, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 410: {
        trp_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(trp_list, bref, 1, 65535, true));
        break;
      }
      case 398: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(trp_info_type_list_trp_req, bref, 1, 64, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trp_info_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (trp_list_present) {
    j.write_int("id", 410);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : trp_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.write_int("id", 398);
  j.write_str("criticality", "reject");
  j.start_array("Value");
  for (const auto& e1 : trp_info_type_list_trp_req) {
    e1.to_json(j);
  }
  j.end_array();
  j.end_obj();
}

SRSASN_CODE trp_info_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 2;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)400, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, trp_info_list_trp_resp, 1, 65535, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE trp_info_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 2;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 400: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(trp_info_list_trp_resp, bref, 1, 65535, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trp_info_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 400);
  j.write_str("criticality", "ignore");
  j.start_array("Value");
  for (const auto& e1 : trp_info_list_trp_resp) {
    e1.to_json(j);
  }
  j.end_array();
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  j.end_obj();
}

SRSASN_CODE trace_start_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 3;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)40, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_cu_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)41, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, gnb_du_ue_f1ap_id, (uint64_t)0u, (uint64_t)4294967295u, false, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)242, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(trace_activation.pack(bref));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE trace_start_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 3;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 40: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_cu_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 41: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(gnb_du_ue_f1ap_id, bref, (uint64_t)0u, (uint64_t)4294967295u, false, true));
        break;
      }
      case 242: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(trace_activation.unpack(bref));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void trace_start_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 40);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_cu_ue_f1ap_id);
  j.write_int("id", 41);
  j.write_str("criticality", "reject");
  j.write_int("Value", gnb_du_ue_f1ap_id);
  j.write_int("id", 242);
  j.write_str("criticality", "ignore");
  trace_activation.to_json(j);
  j.end_obj();
}

SRSASN_CODE write_replace_warning_request_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 4;
  nof_ies += cells_to_be_broadcast_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)140, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pws_sys_info.pack(bref));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)141, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, repeat_period, (uint32_t)0u, (uint32_t)131071u, true, true));
  }
  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)142, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, numof_broadcast_request, (uint32_t)0u, (uint32_t)65535u, false, true));
  }
  if (cells_to_be_broadcast_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)144, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_to_be_broadcast_list, 1, 512, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_request_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 4;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 140: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(pws_sys_info.unpack(bref));
        break;
      }
      case 141: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(repeat_period, bref, (uint32_t)0u, (uint32_t)131071u, true, true));
        break;
      }
      case 142: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(numof_broadcast_request, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
        break;
      }
      case 144: {
        cells_to_be_broadcast_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_to_be_broadcast_list, bref, 1, 512, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void write_replace_warning_request_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  j.write_int("id", 140);
  j.write_str("criticality", "reject");
  pws_sys_info.to_json(j);
  j.write_int("id", 141);
  j.write_str("criticality", "reject");
  j.write_int("Value", repeat_period);
  j.write_int("id", 142);
  j.write_str("criticality", "reject");
  j.write_int("Value", numof_broadcast_request);
  if (cells_to_be_broadcast_list_present) {
    j.write_int("id", 144);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_to_be_broadcast_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}

SRSASN_CODE write_replace_warning_resp_ies_container::pack(bit_ref& bref) const
{
  uint32_t nof_ies = 1;
  nof_ies += cells_broadcast_completed_list_present ? 1 : 0;
  nof_ies += crit_diagnostics_present ? 1 : 0;
  nof_ies += ded_si_delivery_needed_ue_list_present ? 1 : 0;
  pack_length(bref, nof_ies, 0u, 65535u, true);

  {
    HANDLE_CODE(pack_integer(bref, (uint32_t)78, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_integer(bref, transaction_id, (uint16_t)0u, (uint16_t)255u, true, true));
  }
  if (cells_broadcast_completed_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)146, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::reject}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, cells_broadcast_completed_list, 1, 512, true));
  }
  if (crit_diagnostics_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)7, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(crit_diagnostics.pack(bref));
  }
  if (ded_si_delivery_needed_ue_list_present) {
    HANDLE_CODE(pack_integer(bref, (uint32_t)189, (uint32_t)0u, (uint32_t)65535u, false, true));
    HANDLE_CODE(crit_e{crit_e::ignore}.pack(bref));
    varlength_field_pack_guard varlen_scope(bref, true);
    HANDLE_CODE(pack_dyn_seq_of(bref, ded_si_delivery_needed_ue_list, 1, 65536, true));
  }

  return SRSASN_SUCCESS;
}
SRSASN_CODE write_replace_warning_resp_ies_container::unpack(cbit_ref& bref)
{
  uint32_t nof_ies = 0;
  unpack_length(nof_ies, bref, 0u, 65535u, true);

  uint32_t nof_mandatory_ies = 1;

  for (; nof_ies > 0; --nof_ies) {
    uint32_t id;
    HANDLE_CODE(unpack_integer(id, bref, (uint32_t)0u, (uint32_t)65535u, false, true));
    crit_e crit;
    HANDLE_CODE(crit.unpack(bref));

    switch (id) {
      case 78: {
        nof_mandatory_ies--;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_integer(transaction_id, bref, (uint16_t)0u, (uint16_t)255u, true, true));
        break;
      }
      case 146: {
        cells_broadcast_completed_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(cells_broadcast_completed_list, bref, 1, 512, true));
        break;
      }
      case 7: {
        crit_diagnostics_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(crit_diagnostics.unpack(bref));
        break;
      }
      case 189: {
        ded_si_delivery_needed_ue_list_present = true;
        varlength_field_unpack_guard varlen_scope(bref, true);
        HANDLE_CODE(unpack_dyn_seq_of(ded_si_delivery_needed_ue_list, bref, 1, 65536, true));
        break;
      }
      default:
        asn1::log_error("Unpacked object ID={} is not recognized\n", id);
        return SRSASN_ERROR_DECODE_FAIL;
    }
  }
  if (nof_mandatory_ies > 0) {
    asn1::log_error("Mandatory fields are missing\n");

    return SRSASN_ERROR_DECODE_FAIL;
  }
  return SRSASN_SUCCESS;
}
void write_replace_warning_resp_ies_container::to_json(json_writer& j) const
{
  j.start_obj();
  j.write_int("id", 78);
  j.write_str("criticality", "reject");
  j.write_int("Value", transaction_id);
  if (cells_broadcast_completed_list_present) {
    j.write_int("id", 146);
    j.write_str("criticality", "reject");
    j.start_array("Value");
    for (const auto& e1 : cells_broadcast_completed_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  if (crit_diagnostics_present) {
    j.write_int("id", 7);
    j.write_str("criticality", "ignore");
    crit_diagnostics.to_json(j);
  }
  if (ded_si_delivery_needed_ue_list_present) {
    j.write_int("id", 189);
    j.write_str("criticality", "ignore");
    j.start_array("Value");
    for (const auto& e1 : ded_si_delivery_needed_ue_list) {
      e1.to_json(j);
    }
    j.end_array();
  }
  j.end_obj();
}
