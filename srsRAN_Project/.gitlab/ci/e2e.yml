#
# Copyright 2021-2023 Software Radio Systems Limited
#
# This file is part of srsRAN
#
# srsRAN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# srsRAN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# A copy of the GNU Affero General Public License can be found in
# the LICENSE file in the top-level directory of this distribution
# and at http://www.gnu.org/licenses/.
#

include:
  - project: softwareradiosystems/ci/tools
    ref: "13"
    file: .gitlab/ci-shared/setup/all.yml

variables:
  TESTBED:
    description: Retina Testbed Description
    options:
      - "zmq"
      - "zmq_single_ue"
      - "zmq_4x4_mimo"
      - "zmq_srsue"
      - "rf_b200"
      - "rf_hp"
      - "android_b200"
      - "android_n300"
      - "android_x300"
      - "none"
    value: "zmq"
  MARKERS:
    description: Selected pytest marker (label / tag). Tests with that mark will run.
    value: ""
  KEYWORDS:
    description: Select tests by keyword expressions. This will run tests which contain names that match the given string expression (case-insensitive), which can include Python operators that use filenames, class names and function names as variables
    value: ""
  PYTEST_ARGS:
    description: Extra pytest args for the e2e suite to run
    value: ""
  RETINA_ARGS:
    description: Extra retina args for the e2e suite to run
    value: ""
  E2E_LOG_LEVEL:
    description: Log level to set for software under test in the e2e tests
    options:
      - debug
      - info
      - warning
      - error
    value: "info"

.txrx-lib: &txrx-lib
  - job: "build trx driver"
    optional: true
    artifacts: true
  - job: "build amariue zmq driver"
    optional: true
    artifacts: true

load retina variables:
  stage: ci
  rules:
    - if: $TESTBED == "none"
      when: never
    - if: $ON_MR
    - if: $CI_DESCRIPTION =~ /Nightly/
    - if: $ON_WEB
  script:
    - cat .gitlab/ci/e2e/.env
  artifacts:
    reports:
      dotenv: .gitlab/ci/e2e/.env

.prepare_test:
  variables:
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
  before_script:
    - |
      eval K_PATH="\$$KUBECONFIG_VAR_NAME"
      export FORCE_COLOR=1
      export KUBECONFIG=$K_PATH
  needs: &retina-needs
    - job: "load retina variables"
      artifacts: true

.e2e-run:
  stage: e2e
  resource_group: e2e-${GROUP}
  timeout: 6h
  image:
    name: ${RETINA_REGISTRY_PREFIX}/launcher:${RETINA_VERSION}
    entrypoint: ["/bin/sh", "-c"]
  variables:
    ARTIFACT_COMPRESSION_LEVEL: "slowest"
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "5G"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
    GROUP: zmq
  tags:
    - on-prem-amd64
  extends:
    - .prepare_test
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  artifacts:
    paths:
      - $CI_JOB_NAME/*
    when: always
    expire_in: 1 week
    reports:
      junit: tests/e2e/out.xml
  script:
    - retina-delete-orchestration-network --user-name ^ci_${GROUP} --regex
    - |
      cd tests/e2e
      export LOGNAME=ci_${GROUP}_${GITLAB_USER_LOGIN}
    - retina-launcher --retina-request="${CI_PROJECT_DIR}/.gitlab/ci/e2e/retina_request_${TESTBED}.yml" --log-folder=./log --html=./log/report.html --self-contained-html --junitxml=out.xml ${PYTEST_ARGS} --reruns 3 --only-rerun ErrorReportedByAgent --only-rerun ValidationError -k "${KEYWORDS}" -m "${MARKERS}" --register-parameter ue.all.log_level=$E2E_LOG_LEVEL gnb.all.log_level=$E2E_LOG_LEVEL ${RETINA_ARGS}
  after_script:
    - |
      echo "*******************************************************************************************************************************"
      echo "Test report ---> https://softwareradiosystems.gitlab.io/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/$CI_JOB_NAME/report.html"
      echo "*******************************************************************************************************************************"
    - du -hs tests/e2e/log/
    - mv tests/e2e/log ${CI_PROJECT_DIR}/$CI_JOB_NAME
    - echo "$CI_JOB_ID" >> ${CI_PROJECT_DIR}/$CI_JOB_NAME/job.env

custom-e2e:
  extends: .e2e-run
  interruptible: false # Web jobs are standalone
  rules:
    - if: $TESTBED == "none"
      when: never
    - if: $ON_WEB
  needs:
    - *retina-needs
    - custom-build
    - build trx driver

smoke-zmq-tsan:
  extends: .e2e-run
  stage: manual
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  variables:
    TESTBED: zmq
    MARKERS: "smoke"
    PYTEST_ARGS: "-x"
    RETINA_ARGS: "gnb.all.pcap=True"
    E2E_LOG_LEVEL: "debug"
  needs:
    - job: "smoke tsan cached"
      artifacts: true
      optional: true
    - job: "smoke tsan clean"
      artifacts: true
      optional: true
    - *txrx-lib
    - *retina-needs

zmq:
  extends: .e2e-run
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  interruptible: false
  variables:
    TESTBED: "zmq"
    MARKERS: "zmq and not smoke"
    E2E_LOG_LEVEL: "info"
  needs:
    - job: "basic rel with deb info"
      artifacts: true
    - *txrx-lib
    - *retina-needs

zmq_srsue:
  extends: .e2e-run
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
      allow_failure: true
  interruptible: false
  variables:
    TESTBED: "zmq_srsue"
    MARKERS: "zmq_srsue"
    E2E_LOG_LEVEL: "info"
  needs:
    - job: "basic rel with deb info"
      artifacts: true
    - *txrx-lib
    - *retina-needs

zmq-alternative-configs:
  extends: .e2e-run
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  interruptible: false
  variables:
    TESTBED: "zmq_single_ue"
    MARKERS: "zmq_single_ue"
    E2E_LOG_LEVEL: "info"
    RETINA_ARGS: "gnb.all.pcap=True"
  needs:
    - job: "basic rel with deb info"
      artifacts: true
    - *txrx-lib
    - *retina-needs

zmq_4x4_mimo:
  extends: .e2e-run
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  interruptible: false
  variables:
    TESTBED: "zmq_4x4_mimo"
    MARKERS: "zmq_4x4_mimo"
    E2E_LOG_LEVEL: "info"
  needs:
    - job: "basic rel with deb info"
      artifacts: true
    - *txrx-lib
    - *retina-needs

zmq-asan:
  extends: zmq
  variables:
    MARKERS: "smoke"
    RETINA_ARGS: "gnb.all.pcap=True"
  interruptible: false
  needs:
    - job: "basic asan"
      artifacts: true
    - *txrx-lib
    - *retina-needs

zmq-valgrind:
  extends: zmq
  variables:
    MARKERS: "zmq_valgrind"
    E2E_LOG_LEVEL: "warning"
    RETINA_ARGS: "gnb.all.pcap=True"
  interruptible: false
  needs:
    - job: "basic valgrind"
      artifacts: true
    - *txrx-lib
    - *retina-needs

################################################################################
# RF
################################################################################

.rf:
  extends: .e2e-run
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  interruptible: false
  variables:
    GROUP: "rf"
    TESTBED: "rf_b200"
    MARKERS: "rf"
    E2E_LOG_LEVEL: "warning"
  needs:
    - job: "basic rel with deb info"
      artifacts: true
    - *retina-needs

rf:
  extends: .rf
  variables:
    KEYWORDS: "not iperf"
    E2E_LOG_LEVEL: "info"
  allow_failure: true

rf-iperf-udp:
  extends: .rf
  variables:
    KEYWORDS: "iperf and udp"
    E2E_LOG_LEVEL: "info"
  allow_failure: true

rf-iperf-tcp:
  extends: .rf
  variables:
    KEYWORDS: "iperf and tcp"
    E2E_LOG_LEVEL: "info"
  allow_failure: true

rf-tsan:
  extends: .rf
  variables:
    MARKERS: "rf_not_crash"
  needs:
    - job: "smoke tsan update cache"
      artifacts: true
    - *retina-needs
  retry: 2

rf-asan:
  extends: .rf
  variables:
    MARKERS: "rf_not_crash"
  needs:
    - job: "basic asan"
      artifacts: true
    - *retina-needs

rf-b200-config:
  extends: .rf
  variables:
    MARKERS: "rf_b200"

rf-n300-config:
  extends: .rf
  variables:
    MARKERS: "rf_n300"
    TESTBED: "android_n300"

################################################################################
# Android
###############################################################################

android:
  extends: .e2e-run
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    GROUP: "rf"
    TESTBED: "android_b200"
    MARKERS: "android"
    E2E_LOG_LEVEL: "warning"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
  needs:
    - job: "basic rel with deb info"
      artifacts: true
    - *retina-needs

android-x300:
  extends: .e2e-run
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
  variables:
    GROUP: "rf"
    TESTBED: "android_x300"
    MARKERS: "android_hp"
    E2E_LOG_LEVEL: "info"
    KUBECONFIG_VAR_NAME: "RETINA_NAMESPACE_KUBECONFIG"
  needs:
    - job: "basic rel with deb info"
      artifacts: true
    - *retina-needs

android-n300:
  extends: android-x300
  variables:
    TESTBED: "android_n300"

################################################################################
# Garbage collector
################################################################################

.demolition:
  extends:
    - .prepare_test
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly/
      when: always
  interruptible: false
  image:
    name: ${RETINA_REGISTRY_PREFIX}/launcher:${RETINA_VERSION}
    entrypoint: ["/bin/sh", "-c"]
  tags:
    - on-prem-amd64
  script:
    - |
      retina-garbage-collector --mode demolition

retina setup:
  stage: ci
  extends: .demolition

retina post:
  stage: .post
  extends: .demolition
